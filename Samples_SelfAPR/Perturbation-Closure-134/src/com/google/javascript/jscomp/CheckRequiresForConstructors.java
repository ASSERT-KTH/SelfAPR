[P8_Replace_Mix]^private  AbstractCompiler compiler;^40^^^^^35^45^private final AbstractCompiler compiler;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType MISSING_REQUIRE_WARNING = DiagnosticType.disabled ( "ISSING_REQUI", "''{0}'' used but not goog.require''d" ) ;^45^46^47^^^45^47^static final DiagnosticType MISSING_REQUIRE_WARNING = DiagnosticType.disabled ( "JSC_MISSING_REQUIRE_WARNING", "''{0}'' used but not goog.require''d" ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType MISSING_REQUIRE_WARNING = DiagnosticType.disabled ( "JSC_MISSING_REQUIRE_WARNING", " used but not goog.r'{0}'' used but not goog.require''d" ) ;^45^46^47^^^45^47^static final DiagnosticType MISSING_REQUIRE_WARNING = DiagnosticType.disabled ( "JSC_MISSING_REQUIRE_WARNING", "''{0}'' used but not goog.require''d" ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [VARIABLES] 
[P8_Replace_Mix]^static  DiagnosticType MISSING_REQUIRE_WARNING = DiagnosticType.disabled ( "JSC_MISSING_REQUIRE_WARNING", "''{0}'' used but not goog.require''d" ) ;^45^46^47^^^45^47^static final DiagnosticType MISSING_REQUIRE_WARNING = DiagnosticType.disabled ( "JSC_MISSING_REQUIRE_WARNING", "''{0}'' used but not goog.require''d" ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [VARIABLES] 
[P8_Replace_Mix]^private  List<String> constructors = Lists.newArrayList (  ) ;^73^^^^^68^78^private final List<String> constructors = Lists.newArrayList (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [VARIABLES] 
[P8_Replace_Mix]^private  List<String> requires = Lists.newArrayList (  ) ;^74^^^^^69^79^private final List<String> requires = Lists.newArrayList (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [VARIABLES] 
[P8_Replace_Mix]^private final List<Node> newNodes  = null ;^75^^^^^70^80^private final List<Node> newNodes = Lists.newArrayList (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^51^^^^^49^54^this.compiler = compiler;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] AbstractCompiler  compiler  List  constructors  newNodes  requires  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  
[P8_Replace_Mix]^this.codingConvention =  null.getCodingConvention (  ) ;^52^^^^^49^54^this.codingConvention = compiler.getCodingConvention (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] AbstractCompiler  compiler  List  constructors  newNodes  requires  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  
[P7_Replace_Invocation]^this.codingConvention = compiler .report (  )  ;^52^^^^^49^54^this.codingConvention = compiler.getCodingConvention (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] AbstractCompiler  compiler  List  constructors  newNodes  requires  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  
[P14_Delete_Statement]^^52^^^^^49^54^this.codingConvention = compiler.getCodingConvention (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] AbstractCompiler  compiler  List  constructors  newNodes  requires  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  
[P8_Replace_Mix]^this.level =  null;^53^^^^^49^54^this.level = level;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] AbstractCompiler  compiler  List  constructors  newNodes  requires  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  
[P5_Replace_Variable]^new NodeTraversal ( compiler ) .traverseRoots ( externs, root ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[P5_Replace_Variable]^new NodeTraversal (  callback ) .traverseRoots ( externs, root ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[P5_Replace_Variable]^new NodeTraversal ( callback, compiler ) .traverseRoots ( externs, root ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[P7_Replace_Invocation]^new NodeTraversal ( compiler, callback ) .traverse (  root ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[P4_Replace_Constructor]^new NodeTraversal ( compiler, callback ) .traverseRoots (  root ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[P4_Replace_Constructor]^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[P5_Replace_Variable]^new NodeTraversal ( compiler, root ) .traverseRoots ( externs, callback ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[P5_Replace_Variable]^new NodeTraversal ( compiler, callback ) .traverseRoots ( root, externs ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[P5_Replace_Variable]^new NodeTraversal ( root, callback ) .traverseRoots ( externs, compiler ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires 
[P8_Replace_Mix]^new NodeTraversal ( compiler, callback ) .traverse ( root ) ;^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[P14_Delete_Statement]^^63^^^^^61^64^new NodeTraversal ( compiler, callback ) .traverseRoots ( externs, root ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Callback  callback  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  externs  root  List  constructors  newNodes  requires  
[P2_Replace_Operator]^return parent == null && parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[P2_Replace_Operator]^return parent != null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[P2_Replace_Operator]^return parent == null || parent.getType (  )  == Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[P5_Replace_Variable]^return n == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[P7_Replace_Invocation]^return parent == null || parent .getString (  )   != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[P7_Replace_Invocation]^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .getVar (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[P7_Replace_Invocation]^return parent == null || parent.getType (  )  != Token.SCRIPT || !t .getScope (  )  .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[P8_Replace_Mix]^return true ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[P8_Replace_Mix]^return n == null || parent .getString (  )   != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[P14_Delete_Statement]^^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[P7_Replace_Invocation]^!t.getInput (  ) .getVar (  ) ;^80^^^^^78^81^!t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[P7_Replace_Invocation]^!t.getInput (  )  .getVar ( 2 )  ;^80^^^^^78^81^!t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[P7_Replace_Invocation]^!t .getScope (  )  .isExtern (  ) ;^80^^^^^78^81^!t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[P14_Delete_Statement]^^80^^^^^78^81^!t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  
[P2_Replace_Operator]^if  ( info != null || info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^if  ( info == null && info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^if  ( info != parentull && info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^if  ( n != infoull && info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info != null ) {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  (  info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^if  ( info != this ) {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P15_Unwrap_Block]^java.lang.String qualifiedName = n.getFirstChild().getQualifiedName(); constructors.add(qualifiedName);^89^90^91^92^^74^104^if  ( info != null && info.isConstructor (  )  )  { String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ; constructors.add ( qualifiedName ) ; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P16_Remove_Block]^^89^90^91^92^^74^104^if  ( info != null && info.isConstructor (  )  )  { String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ; constructors.add ( qualifiedName ) ; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P13_Insert_Block]^if  (  ( info != null )  &&  ( info.isConstructor (  )  )  )  {     String functionName = n.getFirstChild (  ) .getString (  ) ;     constructors.add ( functionName ) ; }^89^^^^^74^104^[Delete]^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P1_Replace_Type]^char qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^90^^^^^75^105^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^String qualifiedName = parent.getFirstChild (  ) .getQualifiedName (  ) ;^90^^^^^75^105^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^String qualifiedName = n.getFirstChild (  ) .getVar (  ) ;^90^^^^^75^105^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^String qualifiedName = n .getString (  )  .getQualifiedName (  ) ;^90^^^^^75^105^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^90^91^92^^^75^105^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ; constructors.add ( qualifiedName ) ; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^constructors.add ( functionName ) ;^91^^^^^76^106^constructors.add ( qualifiedName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^constructors.contains ( qualifiedName ) ;^91^^^^^76^106^constructors.add ( qualifiedName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^91^92^^^^76^106^constructors.add ( qualifiedName ) ; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^if  ( NodeUtil.isFunctionAnonymous ( parent )  )  {^95^^^^^80^110^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info != null && info.isConstructor() )  {^95^^^^^80^110^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info != null )  {^95^^^^^80^110^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( (gramps != null && gramps.getType() == VAR) )  {^95^^^^^80^110^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( gramps != null )  {^95^^^^^80^110^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == VAR )  {^95^^^^^80^110^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^if  ( info != null || info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^if  ( info == null && info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^if  ( info != parentull && info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^if  ( n != infoull && info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info != null ) {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  (  info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^if  ( info != this && info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P15_Unwrap_Block]^java.lang.String functionName = n.getFirstChild().getString(); constructors.add(functionName);^113^114^115^116^^95^117^if  ( info != null && info.isConstructor (  )  )  { String functionName = n.getFirstChild (  ) .getString (  ) ; constructors.add ( functionName ) ; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P16_Remove_Block]^^113^114^115^116^^95^117^if  ( info != null && info.isConstructor (  )  )  { String functionName = n.getFirstChild (  ) .getString (  ) ; constructors.add ( functionName ) ; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P13_Insert_Block]^if  (  ( info != null )  &&  ( info.isConstructor (  )  )  )  {     constructors.add ( functionName ) ; }^113^^^^^95^117^[Delete]^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P13_Insert_Block]^if  (  ( info != null )  &&  ( info.isConstructor (  )  )  )  {     String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;     constructors.add ( qualifiedName ) ; }^113^^^^^95^117^[Delete]^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P1_Replace_Type]^char functionName = n.getFirstChild (  ) .getchar (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^String functionName = parent.getFirstChild (  ) .getString (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^String functionName = n.getFirstChild (  ) .getVar (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;String functionName = n.getFirstChild (  ) .getString (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^String className = node.getFirstChild (  ) .getQualifiedName (  ) ;String functionName = n.getFirstChild (  ) .getString (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^String functionName = parent.getString (  ) ;String functionName = n.getFirstChild (  ) .getString (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String functionName = n.getFirstChild (  ) .getString (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^String functionName = n.getFirstChild (  )  .getParent (  )  ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^114^115^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ; constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^String functionName = n .getString (  )  .getString (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^constructors.add ( qualifiedName ) ;^115^^^^^95^117^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^constructors.contains ( functionName ) ;^115^^^^^95^117^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^115^^^^^95^117^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^constructors.add ( qualifiedName ) ;constructors.add ( functionName ) ;^115^^^^^95^117^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^classNames.add ( className ) ;constructors.add ( functionName ) ;^115^^^^^95^117^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^95^117^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^info =   ( JSDocIparentfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^95^117^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^95^117^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^95^117^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^String functionName = parent.getFirstChild (  ) .getVar (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^112^^^^^95^117^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^if  ( parent.getType (  )  <= Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^if  ( n.getType (  )  == Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info != null && info.isConstructor() )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info != null )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( (gramps != null && gramps.getType() == VAR) )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( gramps != null )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == VAR )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^if  ( parent .getString (  )   == Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P9_Replace_Statement]^if  ( nameNode.getType (  )  != Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^if  ( info != null || info.isConstructor (  )  )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^if  ( info == null && info.isConstructor (  )  )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info != null ) {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  (  info.isConstructor (  )  )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( (gramps != null && gramps.getType() == VAR) )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( gramps != null )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == VAR )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info != null && info.isConstructor() )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^if  ( info != true && info.isConstructor (  )  )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^if  ( info != null || info.isConstructor (  )  )  {^106^^^^^99^109^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^if  ( info == null && info.isConstructor (  )  )  {^106^^^^^99^109^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info != null ) {^106^^^^^99^109^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  (  info.isConstructor (  )  )  {^106^^^^^99^109^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P15_Unwrap_Block]^constructors.add(functionName);^106^107^108^^^99^109^if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P16_Remove_Block]^^106^107^108^^^99^109^if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P13_Insert_Block]^if  (  ( info != null )  &&  ( info.isConstructor (  )  )  )  {     String functionName = n.getFirstChild (  ) .getString (  ) ;     constructors.add ( functionName ) ; }^106^^^^^99^109^[Delete]^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^constructors.add ( qualifiedName ) ;^107^^^^^99^109^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^constructors.contains ( functionName ) ;^107^^^^^99^109^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^constructors.contains ( qualifiedName ) ;^107^^^^^99^109^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^107^^^^^99^109^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^constructors.add ( qualifiedName ) ;constructors.add ( functionName ) ;^107^^^^^99^109^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^classNames.add ( className ) ;constructors.add ( functionName ) ;^107^^^^^99^109^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^105^^^^^99^109^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^105^^^^^99^109^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^105^^^^^99^109^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^Node gramps = n.getParent (  ) ;^102^^^^^99^109^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^String functionName = parent.getString (  ) ;Node gramps = parent.getParent (  ) ;^102^^^^^99^109^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node gramps = parent.getParent (  ) ;^102^^^^^99^109^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^102^^^^^99^109^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^Preconditions.checkState ( gramps != null || gramps.getType (  )  == Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^Preconditions.checkState ( gramps == null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^Preconditions.checkState ( gramps != null && gramps.getType (  )  != Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^Preconditions.checkState ( parent != null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.null ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^gramps != null && gramps.getType (  )  == Token.VAR ) ;Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^gramps != null && parent.getType (  )  == Token.VAR ) ;^104^^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^gramps != null && gramps .getString (  )   == Token.VAR ) ;^104^^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^104^^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;gramps != null && gramps.getType (  )  == Token.VAR ) ;^104^^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^105^^^^^99^109^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^constructors.add ( qualifiedName ) ;^100^^^^^85^115^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^constructors.contains ( functionName ) ;^100^^^^^85^115^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^100^^^^^85^115^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^constructors.add ( qualifiedName ) ;constructors.add ( functionName ) ;^100^^^^^85^115^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^classNames.add ( className ) ;constructors.add ( functionName ) ;^100^^^^^85^115^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^if  ( info != null || info.isConstructor (  )  )  {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^if  ( info == null && info.isConstructor (  )  )  {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info != null ) {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  (  info.isConstructor (  )  )  {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P15_Unwrap_Block]^constructors.add(functionName);^106^107^108^^^91^121^if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P16_Remove_Block]^^106^107^108^^^91^121^if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P13_Insert_Block]^if  (  ( info != null )  &&  ( info.isConstructor (  )  )  )  {     String functionName = n.getFirstChild (  ) .getString (  ) ;     constructors.add ( functionName ) ; }^106^^^^^91^121^[Delete]^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^constructors.add ( qualifiedName ) ;^107^^^^^92^122^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^constructors.contains ( functionName ) ;^107^^^^^92^122^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^107^^^^^92^122^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^constructors.add ( qualifiedName ) ;constructors.add ( functionName ) ;^107^^^^^92^122^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^classNames.add ( className ) ;constructors.add ( functionName ) ;^107^^^^^92^122^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^98^^^^^83^113^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^98^^^^^83^113^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^98^^^^^83^113^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^105^^^^^90^120^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^105^^^^^90^120^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^105^^^^^90^120^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P1_Replace_Type]^char functionName = parent.getchar (  ) ;^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^String functionName = n.getString (  ) ;^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^String functionName = parent .getParent (  )  ;^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;String functionName = parent.getString (  ) ;^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^String functionName = n.getFirstChild (  ) .getString (  ) ;String functionName = parent.getString (  ) ;^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String functionName = parent.getString (  ) ;^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^Node gramps = n.getParent (  ) ;^102^^^^^87^117^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^Node gramps = parent .getProp (  )  ;^102^^^^^87^117^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^String functionName = parent.getString (  ) ;Node gramps = parent.getParent (  ) ;^102^^^^^87^117^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node gramps = parent.getParent (  ) ;^102^^^^^87^117^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^98^^^^^83^113^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^constructors.contains ( qualifiedName ) ;^100^^^^^85^115^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^102^^^^^87^117^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^Preconditions.checkState ( gramps != null || gramps.getType (  )  == Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^Preconditions.checkState ( gramps == null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^Preconditions.checkState ( gramps != null && gramps.getType (  )  != Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^Preconditions.checkState ( parent != null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^gramps != null && gramps.getType (  )  == Token.VAR ) ;Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^gramps != null && parent.getType (  )  == Token.VAR ) ;^104^^^^^89^119^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^104^105^^^^89^119^gramps != null && gramps.getType (  )  == Token.VAR ) ; info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;gramps != null && gramps.getType (  )  == Token.VAR ) ;^104^^^^^89^119^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^info =  ( JSDocInfo )  parent .getParent (  )  ;^105^^^^^90^120^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^105^^^^^90^120^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^if  ( info != true && info.isConstructor (  )  )  {^106^^^^^99^109^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^Node gramps = parent .getProp (  )  ;^102^^^^^99^109^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^Node gramps = n .getProp (  )  ;^102^^^^^99^109^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^104^105^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ; info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^info =  ( JSDocInfo )  gramps .getParent (  )  ;^105^^^^^99^109^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^info =  ( JSDocInfo )  parent .getParent (  )  ;^105^^^^^99^109^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^if  ( info != false && info.isConstructor (  )  )  {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^info =  ( JSDocInfo )  gramps .getParent (  )  ;^105^^^^^90^120^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^String functionName = n .getParent (  )  ;^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.0 ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^gramps != null && gramps .getString (  )   == Token.VAR ) ;^104^^^^^89^119^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^if  ( parent.getType (  )  >= Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^if  ( parent.getType (  )  != Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^if  ( info != false ) {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^if  ( info != false ) {^106^^^^^99^109^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P12_Insert_Condition]^if  ( nameNode.getType (  )  != Token.NAME )  { gramps != null && gramps.getType (  )  == Token.VAR ) ; }^104^^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P12_Insert_Condition]^if  ( parent.getType (  )  == Token.NAME )  { gramps != null && gramps.getType (  )  == Token.VAR ) ; }^104^^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^info =  ( JSDocInfo )  parent .getParent (  )  ;^98^^^^^83^113^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^Preconditions.checkState ( gramps != null && gramps .getString (  )   == Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P12_Insert_Condition]^if  ( nameNode.getType (  )  != Token.NAME )  { gramps != null && gramps.getType (  )  == Token.VAR ) ; }^104^^^^^89^119^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P12_Insert_Condition]^if  ( parent.getType (  )  == Token.NAME )  { gramps != null && gramps.getType (  )  == Token.VAR ) ; }^104^^^^^89^119^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^if  ( info != false && info.isConstructor (  )  )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^gramps != null && parent .getString (  )   == Token.VAR ) ;^104^^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^if  ( info != false ) {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^if  ( info != null || info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P2_Replace_Operator]^if  ( info == null && info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^if  ( info != parentull && info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^if  ( n != infoull && info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  ( info != null ) {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P6_Replace_Expression]^if  (  info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P15_Unwrap_Block]^java.lang.String functionName = n.getFirstChild().getString(); constructors.add(functionName);^113^114^115^116^^98^128^if  ( info != null && info.isConstructor (  )  )  { String functionName = n.getFirstChild (  ) .getString (  ) ; constructors.add ( functionName ) ; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P16_Remove_Block]^^113^114^115^116^^98^128^if  ( info != null && info.isConstructor (  )  )  { String functionName = n.getFirstChild (  ) .getString (  ) ; constructors.add ( functionName ) ; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P13_Insert_Block]^if  (  ( info != null )  &&  ( info.isConstructor (  )  )  )  {     constructors.add ( functionName ) ; }^113^^^^^98^128^[Delete]^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P13_Insert_Block]^if  (  ( info != null )  &&  ( info.isConstructor (  )  )  )  {     String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;     constructors.add ( qualifiedName ) ; }^113^^^^^98^128^[Delete]^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P1_Replace_Type]^char functionName = n.getFirstChild (  ) .getchar (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^String functionName = parent.getFirstChild (  ) .getString (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^String functionName = n.getFirstChild (  ) .getVar (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^String functionName = n .getString (  )  .getString (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;String functionName = n.getFirstChild (  ) .getString (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^String className = node.getFirstChild (  ) .getQualifiedName (  ) ;String functionName = n.getFirstChild (  ) .getString (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^String functionName = parent.getString (  ) ;String functionName = n.getFirstChild (  ) .getString (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String functionName = n.getFirstChild (  ) .getString (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^String functionName = n.getFirstChild (  )  .getParent (  )  ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^114^115^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ; constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^constructors.add ( qualifiedName ) ;^115^^^^^100^130^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^constructors.contains ( functionName ) ;^115^^^^^100^130^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^115^^^^^100^130^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^constructors.add ( qualifiedName ) ;constructors.add ( functionName ) ;^115^^^^^100^130^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^classNames.add ( className ) ;constructors.add ( functionName ) ;^115^^^^^100^130^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^88^^^^^73^103^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^info =  ( JSDocInfo )  n .getParent (  )  ;^88^^^^^73^103^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^info =   ( JSDocIparentfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^88^^^^^73^103^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^88^^^^^73^103^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^88^^^^^73^103^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^97^127^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^info =   ( JSDocIparentfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^97^127^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^97^127^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^97^127^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^String qualifiedName = n.getFirstChild (  )  .getString (  )  ;^90^^^^^75^105^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^86^^^^^71^101^switch  ( n.getType (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^86^87^88^^^71^101^switch  ( n.getType (  )  )  { case Token.ASSIGN: info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^88^^^^^73^103^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.null ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^constructors.contains ( qualifiedName ) ;^107^^^^^92^122^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^info =  ( JSDocInfo )  n .getParent (  )  ;^112^^^^^97^127^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^112^^^^^97^127^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^visitCallNode ( gramps, parent ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^visitCallNode ( n, gramps ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^visitCallNode (  parent ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^visitCallNode ( n ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^visitCallNode ( parent, n ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^visitNewNode ( n, parent ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^visitNewNode ( gramps, parent ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^visitScriptNode ( t ) ;visitCallNode ( n, parent ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^visitNewNode ( t, n ) ;visitCallNode ( n, parent ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^123^124^^^^108^138^visitScriptNode ( t ) ; break;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^visitCallNode ( n, parent ) ;visitScriptNode ( t ) ;^123^^^^^108^138^visitScriptNode ( t ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^visitNewNode ( t, n ) ;visitScriptNode ( t ) ;^123^^^^^108^138^visitScriptNode ( t ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^visitNewNode ( t, parent ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^visitNewNode (  n ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^visitNewNode ( t ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P5_Replace_Variable]^visitNewNode ( n, t ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P7_Replace_Invocation]^visitCallNode ( t, n ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P8_Replace_Mix]^visitCallNode ( t, parent ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^visitCallNode ( n, parent ) ;visitNewNode ( t, n ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P11_Insert_Donor_Statement]^visitScriptNode ( t ) ;visitNewNode ( t, n ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  gramps  n  parent  List  constructors  newNodes  requires  String  functionName  qualifiedName  JSDocInfo  info  
[P14_Delete_Statement]^^131^^^^^130^147^Set<String> classNames = Sets.newHashSet (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P2_Replace_Operator]^if  (  ( constructors == null || !constructors.contains ( className )  ) ||  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P2_Replace_Operator]^if  (  ( constructors == null && !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P2_Replace_Operator]^if  (  ( constructors != null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P2_Replace_Operator]^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires != null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^if  (  ( requires == null || !constructors.contains ( className )  ) &&  ( constructors == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P6_Replace_Expression]^if  (  ( constructors == null ) {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P6_Replace_Expression]^if  (  !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P6_Replace_Expression]^if  ( ((constructors == null) || !(constructors.contains(className)) && (requires == null) || !(requires.contains(className))) )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P6_Replace_Expression]^if  ( (constructors == null || !(constructors.contains(className))) )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P6_Replace_Expression]^if  ( constructors == null )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P6_Replace_Expression]^if  ( (requires == null || !(requires.contains(className))) )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P6_Replace_Expression]^if  ( requires == null )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P7_Replace_Invocation]^if  (  ( constructors == null || !constructors.add ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P7_Replace_Invocation]^if  (  ( constructors == null || !constructors .clear (  )   ) &&  ( requires == null || !requires^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P8_Replace_Mix]^if  (  ( constructors == true || !constructors.contains ( className )  ) &&  ( requires == true || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^compiler.report ( JSError.make (  node, level, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  level, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, node,  MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, node, level,  className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^compiler.report ( JSError.make ( node, t, level, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, className, level, MISSING_REQUIRE_WARNING, node )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, level, node, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, node, level, className, MISSING_REQUIRE_WARNING )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P7_Replace_Invocation]^compiler .getCodingConvention (  )  ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P14_Delete_Statement]^^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P11_Insert_Donor_Statement]^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^JSError.make (  node, level, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^JSError.make ( t,  level, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^JSError.make ( t, node,  MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^JSError.make ( t, node, level,  className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^JSError.make ( node, t, level, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^JSError.make ( t, level, node, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^JSError.make ( t, node, className, MISSING_REQUIRE_WARNING, level )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^JSError.make ( level, node, t, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^JSError.make ( MISSING_REQUIRE_WARNING, node, level, t, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P14_Delete_Statement]^^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P14_Delete_Statement]^^139^^^^^130^147^classNames.add ( className ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P11_Insert_Donor_Statement]^constructors.add ( qualifiedName ) ;classNames.add ( className ) ;^139^^^^^130^147^classNames.add ( className ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P11_Insert_Donor_Statement]^constructors.add ( functionName ) ;classNames.add ( className ) ;^139^^^^^130^147^classNames.add ( className ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P1_Replace_Type]^char className = node.getFirstChild (  ) .getQualifiedName (  ) ;^133^^^^^130^147^String className = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P7_Replace_Invocation]^String className = node.getFirstChild (  ) .getVar (  ) ;^133^^^^^130^147^String className = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P8_Replace_Mix]^String className = node .getString (  )  .getQualifiedName (  ) ;^133^^^^^130^147^String className = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^if  (  ( className == null || !constructors.contains ( constructors )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^&&  ( this == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^135^136^^^^130^147^&&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^&&  ( className == null || !requires.contains ( requires )  ) && !classNames.contains ( className )  )  {^135^136^^^^130^147^&&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P7_Replace_Invocation]^&&  ( requires == null || !requires.add ( className )  ) && !classNames.contains ( className )  )  {^135^136^^^^130^147^&&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P7_Replace_Invocation]^&&  ( requires == null || !requires .clear (  )   ) && !classNames^135^136^^^^130^147^&&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P8_Replace_Mix]^&& !classNames .clear (  )   )  {^136^^^^^130^147^&& !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P14_Delete_Statement]^^136^137^138^^^130^147^&& !classNames.contains ( className )  )  { compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^compiler.report ( JSError.make ( level, node, t, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^compiler.report ( JSError.make ( className, node, level, MISSING_REQUIRE_WARNING, t )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^JSError.make ( className, node, level, MISSING_REQUIRE_WARNING, t )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P5_Replace_Variable]^JSError.make ( t, MISSING_REQUIRE_WARNING, level, node, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P14_Delete_Statement]^^138^139^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ; classNames.add ( className ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P14_Delete_Statement]^^144^145^^^^130^147^this.newNodes.clear (  ) ; this.requires.clear (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P11_Insert_Donor_Statement]^this.requires.clear (  ) ;this.newNodes.clear (  ) ;^144^^^^^130^147^this.newNodes.clear (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P11_Insert_Donor_Statement]^newNodes.add ( n ) ;this.newNodes.clear (  ) ;^144^^^^^130^147^this.newNodes.clear (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P11_Insert_Donor_Statement]^this.constructors.clear (  ) ;this.newNodes.clear (  ) ;^144^^^^^130^147^this.newNodes.clear (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P14_Delete_Statement]^^145^146^^^^130^147^this.requires.clear (  ) ; this.constructors.clear (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P11_Insert_Donor_Statement]^this.newNodes.clear (  ) ;this.requires.clear (  ) ;^145^^^^^130^147^this.requires.clear (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P11_Insert_Donor_Statement]^this.constructors.clear (  ) ;this.requires.clear (  ) ;^145^^^^^130^147^this.requires.clear (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P14_Delete_Statement]^^146^^^^^130^147^this.constructors.clear (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P11_Insert_Donor_Statement]^this.newNodes.clear (  ) ;this.constructors.clear (  ) ;^146^^^^^130^147^this.constructors.clear (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P11_Insert_Donor_Statement]^this.requires.clear (  ) ;this.constructors.clear (  ) ;^146^^^^^130^147^this.constructors.clear (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  classNames  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  node  List  constructors  newNodes  requires  String  className  
[P1_Replace_Type]^char required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[P5_Replace_Variable]^String required = codingConvention.extractClassNameIfRequire ( parent, parent ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[P5_Replace_Variable]^String required = codingConvention.extractClassNameIfRequire (  parent ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[P5_Replace_Variable]^String required = codingConvention.extractClassNameIfRequire ( n ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[P5_Replace_Variable]^String required = codingConvention.extractClassNameIfRequire ( parent, n ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[P5_Replace_Variable]^String required = n.extractClassNameIfRequire ( codingConvention, parent ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[P8_Replace_Mix]^String required = codingConvention.extractClassNameIfRequire ( n, n ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[P5_Replace_Variable]^String required = parent.extractClassNameIfRequire ( n, codingConvention ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[P14_Delete_Statement]^^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[P2_Replace_Operator]^if  ( required == null )  {^151^^^^^149^154^if  ( required != null )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[P8_Replace_Mix]^if  ( required != false )  {^151^^^^^149^154^if  ( required != null )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[P15_Unwrap_Block]^requires.add(required);^151^152^153^^^149^154^if  ( required != null )  { requires.add ( required ) ; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[P16_Remove_Block]^^151^152^153^^^149^154^if  ( required != null )  { requires.add ( required ) ; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[P7_Replace_Invocation]^requires.contains ( required ) ;^152^^^^^149^154^requires.add ( required ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[P14_Delete_Statement]^^152^^^^^149^154^requires.add ( required ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[P11_Insert_Donor_Statement]^newNodes.add ( n ) ;requires.add ( required ) ;^152^^^^^149^154^requires.add ( required ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  CodingConvention  codingConvention  Node  n  parent  List  constructors  newNodes  requires  String  required  
[P5_Replace_Variable]^Node qNameNode = nameNode.getFirstChild (  ) ;^157^^^^^156^181^Node qNameNode = n.getFirstChild (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P7_Replace_Invocation]^Node qNameNode = n .getString (  )  ;^157^^^^^156^181^Node qNameNode = n.getFirstChild (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P8_Replace_Mix]^Node qNameNode = nameNode .getString (  )  ;^157^^^^^156^181^Node qNameNode = n.getFirstChild (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P5_Replace_Variable]^Node qNameNode = qNameNode.getFirstChild (  ) ;^157^^^^^156^181^Node qNameNode = n.getFirstChild (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P14_Delete_Statement]^^157^^^^^156^181^Node qNameNode = n.getFirstChild (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P1_Replace_Type]^char qName = qNameNode.getQualifiedName (  ) ;^158^^^^^156^181^String qName = qNameNode.getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P5_Replace_Variable]^String qName = nameNode.getQualifiedName (  ) ;^158^^^^^156^181^String qName = qNameNode.getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P7_Replace_Invocation]^String qName = qNameNode .getString (  )  ;^158^^^^^156^181^String qName = qNameNode.getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P11_Insert_Donor_Statement]^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;String qName = qNameNode.getQualifiedName (  ) ;^158^^^^^156^181^String qName = qNameNode.getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P11_Insert_Donor_Statement]^String className = node.getFirstChild (  ) .getQualifiedName (  ) ;String qName = qNameNode.getQualifiedName (  ) ;^158^^^^^156^181^String qName = qNameNode.getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String qName = qNameNode.getQualifiedName (  ) ;^158^^^^^156^181^String qName = qNameNode.getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P14_Delete_Statement]^^158^159^^161^162^156^181^String qName = qNameNode.getQualifiedName (  ) ;  if  ( qName == null || qName.isEmpty (  )  )  { return; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P2_Replace_Operator]^if  ( qName == null && qName.isEmpty (  )  )  {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P2_Replace_Operator]^if  ( qName != null || qName.isEmpty (  )  )  {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P5_Replace_Variable]^if  ( name == null || qName.isEmpty (  )  )  {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P6_Replace_Expression]^if  ( qName == null ) {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P6_Replace_Expression]^if  (  qName.isEmpty (  )  )  {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P8_Replace_Mix]^if  ( qName == false ) {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P15_Unwrap_Block]^return ;^161^162^163^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  { return; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P16_Remove_Block]^^161^162^163^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  { return; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P13_Insert_Block]^if  (  (  ( var == null )  ||  ( var.isLocal (  )  )  )  ||  ( var.isExtern (  )  )  )  {     return ; }^161^^^^^156^181^[Delete]^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P5_Replace_Variable]^Node nameNode = n;^166^^^^^156^181^Node nameNode = qNameNode;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P5_Replace_Variable]^for  ( ; qNameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^167^^^^^156^181^for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P7_Replace_Invocation]^for  ( ; nameNode .getFirstChild (  )  ; nameNode = nameNode.getFirstChild (  )  )  {}^167^^^^^156^181^for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P7_Replace_Invocation]^for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode .getString (  )   )  {}^167^^^^^156^181^for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P8_Replace_Mix]^for  ( ; nameNode.hasChildren (  ) ; nameNode =  qNameNode.getFirstChild (  )  )  {}^167^^^^^156^181^for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P2_Replace_Operator]^if  ( nameNode.getType (  )  == Token.NAME )  {^171^^^^^156^181^if  ( nameNode.getType (  )  != Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P5_Replace_Variable]^if  ( qNameNode.getType (  )  != Token.NAME )  {^171^^^^^156^181^if  ( nameNode.getType (  )  != Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P7_Replace_Invocation]^if  ( nameNode .getString (  )   != Token.NAME )  {^171^^^^^156^181^if  ( nameNode.getType (  )  != Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.NAME )  {^171^^^^^156^181^if  ( nameNode.getType (  )  != Token.NAME )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P15_Unwrap_Block]^return ;^171^172^173^^^156^181^if  ( nameNode.getType (  )  != Token.NAME )  { return; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P16_Remove_Block]^^171^172^173^^^156^181^if  ( nameNode.getType (  )  != Token.NAME )  { return; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P1_Replace_Type]^char name = nameNode.getchar (  ) ;^175^^^^^156^181^String name = nameNode.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P5_Replace_Variable]^String name = qNameNode.getString (  ) ;^175^^^^^156^181^String name = nameNode.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;String name = nameNode.getString (  ) ;^175^^^^^156^181^String name = nameNode.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P11_Insert_Donor_Statement]^String qName = qNameNode.getQualifiedName (  ) ;String name = nameNode.getString (  ) ;^175^^^^^156^181^String name = nameNode.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P11_Insert_Donor_Statement]^String functionName = n.getFirstChild (  ) .getString (  ) ;String name = nameNode.getString (  ) ;^175^^^^^156^181^String name = nameNode.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P11_Insert_Donor_Statement]^String functionName = parent.getString (  ) ;String name = nameNode.getString (  ) ;^175^^^^^156^181^String name = nameNode.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P7_Replace_Invocation]^String name = nameNode .getParent (  )  ;^175^^^^^156^181^String name = nameNode.getString (  ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P14_Delete_Statement]^^175^176^^^^156^181^String name = nameNode.getString (  ) ; Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P5_Replace_Variable]^Scope.Var var = t.getScope (  ) .getVar ( qName ) ;^176^^^^^156^181^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P5_Replace_Variable]^Scope.Var var = name.getScope (  ) .getVar ( t ) ;^176^^^^^156^181^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P7_Replace_Invocation]^Scope.Var var = t.getScope (  )  .getString (  )  ;^176^^^^^156^181^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P7_Replace_Invocation]^Scope.Var var = t .getInput (  )  .getVar ( name ) ;^176^^^^^156^181^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P14_Delete_Statement]^^176^^^^^156^181^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P2_Replace_Operator]^if  ( var == null && var.isLocal (  )  || var.isExtern (  )  )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P2_Replace_Operator]^if  ( var != null || var.isLocal (  )  || var.isExtern (  )  )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P5_Replace_Variable]^if  ( 2 == null || var.isLocal (  )  || var.isExtern (  )  )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P6_Replace_Expression]^if  ( var == null ) {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P6_Replace_Expression]^if  (  var.isLocal (  )  || var.isExtern (  )  )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P6_Replace_Expression]^if  ( (var == null || var.isLocal()) )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P7_Replace_Invocation]^if  ( var == null || var .isExtern (  )   || var.isExtern (  )  )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P8_Replace_Mix]^if  ( var == this ) {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P15_Unwrap_Block]^return ;^177^178^179^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  { return; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P16_Remove_Block]^^177^178^179^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  { return; }^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P13_Insert_Block]^if  (  ( qName == null )  ||  ( qName.isEmpty (  )  )  )  {     return ; }^177^^^^^156^181^[Delete]^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P8_Replace_Mix]^if  ( var == null || var.isLocal (  )  || var .getVar ( name )   )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P5_Replace_Variable]^newNodes.add ( qNameNode ) ;^180^^^^^156^181^newNodes.add ( n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P7_Replace_Invocation]^newNodes.contains ( n ) ;^180^^^^^156^181^newNodes.add ( n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P14_Delete_Statement]^^180^^^^^156^181^newNodes.add ( n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P11_Insert_Donor_Statement]^this.newNodes.clear (  ) ;newNodes.add ( n ) ;^180^^^^^156^181^newNodes.add ( n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P11_Insert_Donor_Statement]^requires.add ( required ) ;newNodes.add ( n ) ;^180^^^^^156^181^newNodes.add ( n ) ;^[CLASS] CheckRequiresForConstructors CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P8_Replace_Mix]^private  List<String> constructors = Lists.newArrayList (  ) ;^73^^^^^68^78^private final List<String> constructors = Lists.newArrayList (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P8_Replace_Mix]^private  List<String> requires = Lists.newArrayList (  ) ;^74^^^^^69^79^private final List<String> requires = Lists.newArrayList (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P8_Replace_Mix]^private final List<Node> newNodes  = null ;^75^^^^^70^80^private final List<Node> newNodes = Lists.newArrayList (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  CheckLevel  level  DiagnosticType  MISSING_REQUIRE_WARNING  Var  var  CodingConvention  codingConvention  Node  n  nameNode  qNameNode  List  constructors  newNodes  requires  String  name  qName  
[P2_Replace_Operator]^return parent == null && parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  boolean  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^return parent != null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  boolean  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^return parent == null || parent.getType (  )  == Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^return n == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .getVar (  ) ;^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^79^80^^^^78^81^return parent == null || parent.getType (  )  != Token.SCRIPT || !t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^!t.getInput (  ) .getVar (  ) ;^80^^^^^78^81^!t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^80^^^^^78^81^!t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  boolean  NodeTraversal  t  Node  n  parent  
[P7_Replace_Invocation]^!t .getScope (  )  .isExtern (  ) ;^80^^^^^78^81^!t.getInput (  ) .isExtern (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  boolean  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^if  ( info != null || info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^if  ( info == null && info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^if  ( info != parentull && info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^if  ( n != infoull && info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( info != null ) {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  (  info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^if  ( info != false && info.isConstructor (  )  )  {^89^^^^^74^104^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P15_Unwrap_Block]^java.lang.String qualifiedName = n.getFirstChild().getQualifiedName(); constructors.add(qualifiedName);^89^90^91^92^^74^104^if  ( info != null && info.isConstructor (  )  )  { String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ; constructors.add ( qualifiedName ) ; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P16_Remove_Block]^^89^90^91^92^^74^104^if  ( info != null && info.isConstructor (  )  )  { String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ; constructors.add ( qualifiedName ) ; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P13_Insert_Block]^if  (  ( info != null )  &&  ( info.isConstructor (  )  )  )  {     String functionName = n.getFirstChild (  ) .getString (  ) ;     constructors.add ( functionName ) ; }^89^^^^^74^104^[Delete]^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P1_Replace_Type]^char qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^90^^^^^75^105^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^String qualifiedName = parent.getFirstChild (  ) .getQualifiedName (  ) ;^90^^^^^75^105^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^String qualifiedName = n.getFirstChild (  ) .getVar (  ) ;^90^^^^^75^105^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^String qualifiedName = n .getString (  )  .getQualifiedName (  ) ;^90^^^^^75^105^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^String qualifiedName = parent.getFirstChild (  ) .getVar (  ) ;^90^^^^^75^105^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^90^91^92^^^75^105^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ; constructors.add ( qualifiedName ) ; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^constructors.add ( functionName ) ;^91^^^^^76^106^constructors.add ( qualifiedName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^constructors.contains ( qualifiedName ) ;^91^^^^^76^106^constructors.add ( qualifiedName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^91^92^^^^76^106^constructors.add ( qualifiedName ) ; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^if  ( NodeUtil.isFunctionAnonymous ( parent )  )  {^95^^^^^80^110^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( info != null && info.isConstructor() )  {^95^^^^^80^110^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( info != null )  {^95^^^^^80^110^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( (gramps != null && gramps.getType() == VAR) )  {^95^^^^^80^110^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( gramps != null )  {^95^^^^^80^110^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == VAR )  {^95^^^^^80^110^if  ( NodeUtil.isFunctionAnonymous ( n )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^if  ( info != null || info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^if  ( info == null && info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^if  ( info != parentull && info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( info != null ) {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  (  info.isConstructor (  )  )  {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^if  ( info != false ) {^113^^^^^95^117^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P15_Unwrap_Block]^java.lang.String functionName = n.getFirstChild().getString(); constructors.add(functionName);^113^114^115^116^^95^117^if  ( info != null && info.isConstructor (  )  )  { String functionName = n.getFirstChild (  ) .getString (  ) ; constructors.add ( functionName ) ; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P16_Remove_Block]^^113^114^115^116^^95^117^if  ( info != null && info.isConstructor (  )  )  { String functionName = n.getFirstChild (  ) .getString (  ) ; constructors.add ( functionName ) ; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P13_Insert_Block]^if  (  ( info != null )  &&  ( info.isConstructor (  )  )  )  {     constructors.add ( functionName ) ; }^113^^^^^95^117^[Delete]^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P13_Insert_Block]^if  (  ( info != null )  &&  ( info.isConstructor (  )  )  )  {     String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;     constructors.add ( qualifiedName ) ; }^113^^^^^95^117^[Delete]^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P1_Replace_Type]^char functionName = n.getFirstChild (  ) .getchar (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^String functionName = parent.getFirstChild (  ) .getString (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^String functionName = n.getFirstChild (  ) .getVar (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^String functionName = n .getString (  )  .getString (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^String functionName = parent.getFirstChild (  ) .getVar (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;String functionName = n.getFirstChild (  ) .getString (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^String className = node.getFirstChild (  ) .getQualifiedName (  ) ;String functionName = n.getFirstChild (  ) .getString (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^String functionName = parent.getString (  ) ;String functionName = n.getFirstChild (  ) .getString (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String functionName = n.getFirstChild (  ) .getString (  ) ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^constructors.add ( qualifiedName ) ;^115^^^^^95^117^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^constructors.contains ( functionName ) ;^115^^^^^95^117^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^constructors .contains ( 3 )  ;^115^^^^^95^117^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^115^^^^^95^117^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^constructors.add ( qualifiedName ) ;constructors.add ( functionName ) ;^115^^^^^95^117^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^classNames.add ( className ) ;constructors.add ( functionName ) ;^115^^^^^95^117^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^95^117^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^info =   ( JSDocIparentfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^95^117^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^95^117^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^95^117^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^String functionName = n.getFirstChild (  )  .getParent (  )  ;^114^^^^^95^117^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^112^^^^^95^117^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^if  ( parent.getType (  )  != Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^if  ( parent.getType (  )  >= Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( info != null && info.isConstructor() )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( info != null )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( (gramps != null && gramps.getType() == VAR) )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( gramps != null )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == VAR )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^if  ( n.getType (  )  == Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P9_Replace_Statement]^if  ( nameNode.getType (  )  != Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^if  ( info != null || info.isConstructor (  )  )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^if  ( info == null && info.isConstructor (  )  )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( info != null ) {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  (  info.isConstructor (  )  )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( (gramps != null && gramps.getType() == VAR) )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( gramps != null )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( gramps.getType (  )  == VAR )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( info != null && info.isConstructor() )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^if  ( info != null || info.isConstructor (  )  )  {^106^^^^^99^109^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^if  ( info == null && info.isConstructor (  )  )  {^106^^^^^99^109^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( info != null ) {^106^^^^^99^109^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  (  info.isConstructor (  )  )  {^106^^^^^99^109^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^if  ( info != false && info.isConstructor (  )  )  {^106^^^^^99^109^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P15_Unwrap_Block]^constructors.add(functionName);^106^107^108^^^99^109^if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P16_Remove_Block]^^106^107^108^^^99^109^if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P13_Insert_Block]^if  (  ( info != null )  &&  ( info.isConstructor (  )  )  )  {     String functionName = n.getFirstChild (  ) .getString (  ) ;     constructors.add ( functionName ) ; }^106^^^^^99^109^[Delete]^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^constructors.add ( qualifiedName ) ;^107^^^^^99^109^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^constructors.contains ( functionName ) ;^107^^^^^99^109^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^107^^^^^99^109^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^constructors.add ( qualifiedName ) ;constructors.add ( functionName ) ;^107^^^^^99^109^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^classNames.add ( className ) ;constructors.add ( functionName ) ;^107^^^^^99^109^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^105^^^^^99^109^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^105^^^^^99^109^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^105^^^^^99^109^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^Node gramps = n.getParent (  ) ;^102^^^^^99^109^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^String functionName = parent.getString (  ) ;Node gramps = parent.getParent (  ) ;^102^^^^^99^109^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node gramps = parent.getParent (  ) ;^102^^^^^99^109^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^Node gramps = parent .getProp (  )  ;^102^^^^^99^109^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^102^^^^^99^109^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^Preconditions.checkState ( gramps != null || gramps.getType (  )  == Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^Preconditions.checkState ( gramps == null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^Preconditions.checkState ( gramps != null && gramps.getType (  )  != Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^Preconditions.checkState ( parent != null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^Preconditions.checkState ( gramps != null && gramps .getString (  )   == Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^gramps != null && gramps.getType (  )  == Token.VAR ) ;Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^gramps != null && parent.getType (  )  == Token.VAR ) ;^104^^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^104^105^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ; info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;gramps != null && gramps.getType (  )  == Token.VAR ) ;^104^^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^105^^^^^99^109^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^constructors.contains ( qualifiedName ) ;^107^^^^^99^109^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^constructors.add ( qualifiedName ) ;^100^^^^^85^115^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^constructors.contains ( functionName ) ;^100^^^^^85^115^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^100^^^^^85^115^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^constructors.add ( qualifiedName ) ;constructors.add ( functionName ) ;^100^^^^^85^115^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^classNames.add ( className ) ;constructors.add ( functionName ) ;^100^^^^^85^115^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^if  ( info != null || info.isConstructor (  )  )  {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^if  ( info == null && info.isConstructor (  )  )  {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( info != null ) {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  (  info.isConstructor (  )  )  {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^if  ( info != true ) {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P15_Unwrap_Block]^constructors.add(functionName);^106^107^108^^^91^121^if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P16_Remove_Block]^^106^107^108^^^91^121^if  ( info != null && info.isConstructor (  )  )  { constructors.add ( functionName ) ; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P13_Insert_Block]^if  (  ( info != null )  &&  ( info.isConstructor (  )  )  )  {     String functionName = n.getFirstChild (  ) .getString (  ) ;     constructors.add ( functionName ) ; }^106^^^^^91^121^[Delete]^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^constructors.add ( qualifiedName ) ;^107^^^^^92^122^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^constructors.contains ( functionName ) ;^107^^^^^92^122^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^107^^^^^92^122^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^constructors.add ( qualifiedName ) ;constructors.add ( functionName ) ;^107^^^^^92^122^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^classNames.add ( className ) ;constructors.add ( functionName ) ;^107^^^^^92^122^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^98^^^^^83^113^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^info =  ( JSDocInfo )  parent .getParent (  )  ;^98^^^^^83^113^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^98^^^^^83^113^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^98^^^^^83^113^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^105^^^^^90^120^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^105^^^^^90^120^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^105^^^^^90^120^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P1_Replace_Type]^char functionName = parent.getchar (  ) ;^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^String functionName = n.getString (  ) ;^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;String functionName = parent.getString (  ) ;^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^String functionName = n.getFirstChild (  ) .getString (  ) ;String functionName = parent.getString (  ) ;^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String functionName = parent.getString (  ) ;^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^Node gramps = n.getParent (  ) ;^102^^^^^87^117^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^String functionName = parent.getString (  ) ;Node gramps = parent.getParent (  ) ;^102^^^^^87^117^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;Node gramps = parent.getParent (  ) ;^102^^^^^87^117^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^98^^^^^83^113^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^constructors.contains ( qualifiedName ) ;^100^^^^^85^115^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^102^^^^^87^117^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^Preconditions.checkState ( gramps != null || gramps.getType (  )  == Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^Preconditions.checkState ( gramps == null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^Preconditions.checkState ( gramps != null && gramps.getType (  )  != Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^Preconditions.checkState ( parent != null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^Preconditions.checkState ( gramps != null && gramps .getString (  )   == Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^gramps != null && gramps.getType (  )  == Token.VAR ) ;Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^gramps != null && parent.getType (  )  == Token.VAR ) ;^104^^^^^89^119^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^gramps != null && gramps .getString (  )   == Token.VAR ) ;^104^^^^^89^119^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^104^^^^^89^119^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;gramps != null && gramps.getType (  )  == Token.VAR ) ;^104^^^^^89^119^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P12_Insert_Condition]^if  ( nameNode.getType (  )  != Token.NAME )  { gramps != null && gramps.getType (  )  == Token.VAR ) ; }^104^^^^^89^119^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P12_Insert_Condition]^if  ( parent.getType (  )  == Token.NAME )  { gramps != null && gramps.getType (  )  == Token.VAR ) ; }^104^^^^^89^119^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^info =  ( JSDocInfo )  gramps .getParent (  )  ;^105^^^^^90^120^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^105^^^^^90^120^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^constructors .contains ( 4 )  ;^107^^^^^92^122^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^if  ( info != false && info.isConstructor (  )  )  {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^104^^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P12_Insert_Condition]^if  ( nameNode.getType (  )  != Token.NAME )  { gramps != null && gramps.getType (  )  == Token.VAR ) ; }^104^^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P12_Insert_Condition]^if  ( parent.getType (  )  == Token.NAME )  { gramps != null && gramps.getType (  )  == Token.VAR ) ; }^104^^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^if  ( info != false && info.isConstructor (  )  )  {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^Node gramps = parent .getProp (  )  ;^102^^^^^87^117^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^Node gramps = n .getProp (  )  ;^102^^^^^87^117^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^if  ( parent .getString (  )   == Token.NAME )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^Preconditions.checkState ( gramps != null && gramps .getString (  )   == Token.this ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^gramps != null && parent .getString (  )   == Token.VAR ) ;^104^^^^^89^119^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.4 )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.0 )  {^96^^^^^81^111^if  ( parent.getType (  )  == Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^if  ( info != this && info.isConstructor (  )  )  {^106^^^^^91^121^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^info =   ( JSDocInfo )  null.getProp ( Node.JSDOC_INFO_PROP ) ;^98^^^^^83^113^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^String functionName = parent .getParent (  )  ;^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^String functionName = n .getParent (  )  ;^97^^^^^82^112^String functionName = parent.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^104^105^^^^89^119^gramps != null && gramps.getType (  )  == Token.VAR ) ; info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^if  ( info != false ) {^99^^^^^84^114^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^info =  ( JSDocInfo )  gramps .getParent (  )  ;^105^^^^^99^109^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^Node gramps = n .getProp (  )  ;^102^^^^^99^109^Node gramps = parent.getParent (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^Preconditions.checkState ( parent != null && gramps .getString (  )   == Token.VAR ) ;^103^104^^^^99^109^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^gramps != null && gramps .getString (  )   == Token.VAR ) ;^104^^^^^99^109^gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^constructors.contains ( qualifiedName ) ;^107^^^^^92^122^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^if  ( info != null || info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P2_Replace_Operator]^if  ( info == null && info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^if  ( info != parentull && info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  ( info != null ) {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P6_Replace_Expression]^if  (  info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^if  ( info != false && info.isConstructor (  )  )  {^113^^^^^98^128^if  ( info != null && info.isConstructor (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P15_Unwrap_Block]^java.lang.String functionName = n.getFirstChild().getString(); constructors.add(functionName);^113^114^115^116^^98^128^if  ( info != null && info.isConstructor (  )  )  { String functionName = n.getFirstChild (  ) .getString (  ) ; constructors.add ( functionName ) ; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P16_Remove_Block]^^113^114^115^116^^98^128^if  ( info != null && info.isConstructor (  )  )  { String functionName = n.getFirstChild (  ) .getString (  ) ; constructors.add ( functionName ) ; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P13_Insert_Block]^if  (  ( info != null )  &&  ( info.isConstructor (  )  )  )  {     constructors.add ( functionName ) ; }^113^^^^^98^128^[Delete]^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P13_Insert_Block]^if  (  ( info != null )  &&  ( info.isConstructor (  )  )  )  {     String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;     constructors.add ( qualifiedName ) ; }^113^^^^^98^128^[Delete]^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P1_Replace_Type]^char functionName = n.getFirstChild (  ) .getchar (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^String functionName = parent.getFirstChild (  ) .getString (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^String functionName = n.getFirstChild (  ) .getVar (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^String functionName = n .getString (  )  .getString (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;String functionName = n.getFirstChild (  ) .getString (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^String className = node.getFirstChild (  ) .getQualifiedName (  ) ;String functionName = n.getFirstChild (  ) .getString (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^String functionName = parent.getString (  ) ;String functionName = n.getFirstChild (  ) .getString (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String functionName = n.getFirstChild (  ) .getString (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^String functionName = n.getFirstChild (  )  .getParent (  )  ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^114^115^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ; constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^constructors.contains ( functionName ) ;^115^^^^^100^130^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^constructors.add ( qualifiedName ) ;^115^^^^^100^130^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^115^^^^^100^130^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^constructors.add ( qualifiedName ) ;constructors.add ( functionName ) ;^115^^^^^100^130^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^classNames.add ( className ) ;constructors.add ( functionName ) ;^115^^^^^100^130^constructors.add ( functionName ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^88^^^^^73^103^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^info =   ( JSDocIparentfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^88^^^^^73^103^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^88^^^^^73^103^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^88^^^^^73^103^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^97^127^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^info =   ( JSDocIparentfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^97^127^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^97^127^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^info =  ( JSDocInfo )  gramps.getProp ( Node.JSDOC_INFO_PROP ) ;info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^112^^^^^97^127^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^switch  ( parent.getType (  )  )  {^86^^^^^71^101^switch  ( n.getType (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^86^87^88^^^71^101^switch  ( n.getType (  )  )  { case Token.ASSIGN: info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^info =  ( JSDocInfo )  parent .getParent (  )  ;^88^^^^^73^103^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^88^^^^^73^103^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^info =  ( JSDocInfo )  n .getParent (  )  ;^98^^^^^83^113^info =  ( JSDocInfo )  parent.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.0 ) ;^103^104^^^^88^118^Preconditions.checkState ( gramps != null && gramps.getType (  )  == Token.VAR ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^112^^^^^97^127^info =  ( JSDocInfo )  n.getProp ( Node.JSDOC_INFO_PROP ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^String functionName = parent .getString (  )  .getString (  ) ;^114^^^^^99^129^String functionName = n.getFirstChild (  ) .getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^visitCallNode ( gramps, parent ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^visitCallNode ( n, gramps ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^visitCallNode (  parent ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^visitCallNode ( n ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^visitCallNode ( parent, n ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^visitNewNode ( n, parent ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^120^121^^^^105^135^visitCallNode ( n, parent ) ; break;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^visitScriptNode ( t ) ;visitCallNode ( n, parent ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^visitNewNode ( t, n ) ;visitCallNode ( n, parent ) ;^120^^^^^105^135^visitCallNode ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^123^^^^^108^138^visitScriptNode ( t ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^visitCallNode ( n, parent ) ;visitScriptNode ( t ) ;^123^^^^^108^138^visitScriptNode ( t ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^visitNewNode ( t, n ) ;visitScriptNode ( t ) ;^123^^^^^108^138^visitScriptNode ( t ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^visitNewNode ( t, parent ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^visitNewNode (  n ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^visitNewNode ( t ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P5_Replace_Variable]^visitNewNode ( n, t ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P7_Replace_Invocation]^visitCallNode ( t, n ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P8_Replace_Mix]^visitCallNode ( t, parent ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^visitCallNode ( n, parent ) ;visitNewNode ( t, n ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P11_Insert_Donor_Statement]^visitScriptNode ( t ) ;visitNewNode ( t, n ) ;^126^^^^^111^141^visitNewNode ( t, n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  functionName  qualifiedName  boolean  JSDocInfo  info  NodeTraversal  t  Node  gramps  n  parent  
[P14_Delete_Statement]^^131^^^^^130^147^Set<String> classNames = Sets.newHashSet (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P2_Replace_Operator]^if  (  ( constructors == null || !constructors.contains ( className )  ) ||  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P2_Replace_Operator]^if  (  ( constructors == null && !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P2_Replace_Operator]^if  (  ( constructors != null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P2_Replace_Operator]^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires != null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^if  (  ( this == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( null == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^if  (  ( requires == null || !constructors.contains ( className )  ) &&  ( constructors == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P6_Replace_Expression]^if  (  ( constructors == null ) {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P6_Replace_Expression]^if  (  !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P6_Replace_Expression]^if  ( ((constructors == null) || !(constructors.contains(className)) && (requires == null) || !(requires.contains(className))) )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P6_Replace_Expression]^if  ( (constructors == null || !(constructors.contains(className))) )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P6_Replace_Expression]^if  ( constructors == null )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P6_Replace_Expression]^if  ( (requires == null || !(requires.contains(className))) )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P6_Replace_Expression]^if  ( requires == null )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P7_Replace_Invocation]^if  (  ( constructors == null || !constructors.add ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P7_Replace_Invocation]^if  (  ( constructors == null || !constructors .clear (  )   ) &&  ( requires == null || !requires^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P8_Replace_Mix]^if  (  ( 3 == false || !constructors.contains ( className )  ) &&  ( requires == false || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, node, 0, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^compiler.report ( JSError.make (  node, level, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  level, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, node,  MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, node, level,  className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^compiler.report ( JSError.make ( node, t, level, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^compiler.report ( JSError.make ( className, node, level, MISSING_REQUIRE_WARNING, t )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, node, className, MISSING_REQUIRE_WARNING, level )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, node, MISSING_REQUIRE_WARNING, level, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P14_Delete_Statement]^^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P11_Insert_Donor_Statement]^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^JSError.make ( t, node, level, this, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^JSError.make (  node, level, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^JSError.make ( t,  level, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^JSError.make ( t, node,  MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^JSError.make ( t, node, level,  className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^JSError.make ( level, node, t, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^JSError.make ( t, MISSING_REQUIRE_WARNING, level, node, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^JSError.make ( className, node, level, MISSING_REQUIRE_WARNING, t )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^JSError.make ( t, node, MISSING_REQUIRE_WARNING, level, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^JSError.make ( t, node, level, className, MISSING_REQUIRE_WARNING )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P14_Delete_Statement]^^138^139^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ; classNames.add ( className ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P14_Delete_Statement]^^139^^^^^130^147^classNames.add ( className ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P11_Insert_Donor_Statement]^constructors.add ( qualifiedName ) ;classNames.add ( className ) ;^139^^^^^130^147^classNames.add ( className ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P11_Insert_Donor_Statement]^constructors.add ( functionName ) ;classNames.add ( className ) ;^139^^^^^130^147^classNames.add ( className ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P1_Replace_Type]^char className = node.getFirstChild (  ) .getQualifiedName (  ) ;^133^^^^^130^147^String className = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P7_Replace_Invocation]^String className = node.getFirstChild (  ) .getVar (  ) ;^133^^^^^130^147^String className = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P7_Replace_Invocation]^String className = node .getString (  )  .getQualifiedName (  ) ;^133^^^^^130^147^String className = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P7_Replace_Invocation]^String className = node.getFirstChild (  )  .getString (  )  ;^133^^^^^130^147^String className = node.getFirstChild (  ) .getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^if  (  ( className == null || !constructors.contains ( constructors )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^134^135^136^^^130^147^if  (  ( constructors == null || !constructors.contains ( className )  ) &&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^&&  ( className == null || !requires.contains ( requires )  ) && !classNames.contains ( className )  )  {^135^136^^^^130^147^&&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P7_Replace_Invocation]^&&  ( requires == null || !requires.add ( className )  ) && !classNames.contains ( className )  )  {^135^136^^^^130^147^&&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P8_Replace_Mix]^&&  ( null == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^135^136^^^^130^147^&&  ( requires == null || !requires.contains ( className )  ) && !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P7_Replace_Invocation]^&& !classNames .clear (  )   )  {^136^^^^^130^147^&& !classNames.contains ( className )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P14_Delete_Statement]^^136^137^138^^^130^147^&& !classNames.contains ( className )  )  { compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^compiler.report ( JSError.make ( level, node, t, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, MISSING_REQUIRE_WARNING, level, node, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, className, level, MISSING_REQUIRE_WARNING, node )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, level, node, MISSING_REQUIRE_WARNING, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MISSING_REQUIRE_WARNING, node, level, t, className )  ) ;^137^138^^^^130^147^compiler.report ( JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^JSError.make ( node, t, level, MISSING_REQUIRE_WARNING, className )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P5_Replace_Variable]^JSError.make ( t, node, className, MISSING_REQUIRE_WARNING, level )  ) ;^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P14_Delete_Statement]^^138^^^^^130^147^JSError.make ( t, node, level, MISSING_REQUIRE_WARNING, className )  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P14_Delete_Statement]^^144^^^^^130^147^this.newNodes.clear (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P11_Insert_Donor_Statement]^this.requires.clear (  ) ;this.newNodes.clear (  ) ;^144^^^^^130^147^this.newNodes.clear (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P11_Insert_Donor_Statement]^newNodes.add ( n ) ;this.newNodes.clear (  ) ;^144^^^^^130^147^this.newNodes.clear (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P11_Insert_Donor_Statement]^this.constructors.clear (  ) ;this.newNodes.clear (  ) ;^144^^^^^130^147^this.newNodes.clear (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P14_Delete_Statement]^^145^^^^^130^147^this.requires.clear (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P11_Insert_Donor_Statement]^this.newNodes.clear (  ) ;this.requires.clear (  ) ;^145^^^^^130^147^this.requires.clear (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P11_Insert_Donor_Statement]^this.constructors.clear (  ) ;this.requires.clear (  ) ;^145^^^^^130^147^this.requires.clear (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P14_Delete_Statement]^^146^^^^^130^147^this.constructors.clear (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P11_Insert_Donor_Statement]^this.newNodes.clear (  ) ;this.constructors.clear (  ) ;^146^^^^^130^147^this.constructors.clear (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P11_Insert_Donor_Statement]^this.requires.clear (  ) ;this.constructors.clear (  ) ;^146^^^^^130^147^this.constructors.clear (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitScriptNode [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  constructors  newNodes  requires  Set  classNames  String  className  boolean  NodeTraversal  t  Node  node  
[P1_Replace_Type]^char required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[P5_Replace_Variable]^String required = codingConvention.extractClassNameIfRequire ( parent, parent ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[P5_Replace_Variable]^String required = codingConvention.extractClassNameIfRequire ( n, n ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[P5_Replace_Variable]^String required = 3.extractClassNameIfRequire ( n, parent ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[P5_Replace_Variable]^String required = codingConvention.extractClassNameIfRequire (  parent ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[P5_Replace_Variable]^String required = codingConvention.extractClassNameIfRequire ( n ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[P5_Replace_Variable]^String required = codingConvention.extractClassNameIfRequire ( parent, n ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[P5_Replace_Variable]^String required = parent.extractClassNameIfRequire ( n, codingConvention ) ;^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[P14_Delete_Statement]^^150^^^^^149^154^String required = codingConvention.extractClassNameIfRequire ( n, parent ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[P2_Replace_Operator]^if  ( required == null )  {^151^^^^^149^154^if  ( required != null )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[P8_Replace_Mix]^if  ( required != this )  {^151^^^^^149^154^if  ( required != null )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[P15_Unwrap_Block]^requires.add(required);^151^152^153^^^149^154^if  ( required != null )  { requires.add ( required ) ; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[P16_Remove_Block]^^151^152^153^^^149^154^if  ( required != null )  { requires.add ( required ) ; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[P7_Replace_Invocation]^requires.contains ( required ) ;^152^^^^^149^154^requires.add ( required ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[P14_Delete_Statement]^^152^^^^^149^154^requires.add ( required ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[P11_Insert_Donor_Statement]^newNodes.add ( n ) ;requires.add ( required ) ;^152^^^^^149^154^requires.add ( required ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitCallNode [RETURN_TYPE] void   Node n Node parent [VARIABLES] List  constructors  newNodes  requires  String  required  boolean  Node  n  parent  
[P5_Replace_Variable]^Node qNameNode = nameNode.getFirstChild (  ) ;^157^^^^^156^181^Node qNameNode = n.getFirstChild (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P5_Replace_Variable]^Node qNameNode = qNameNode.getFirstChild (  ) ;^157^^^^^156^181^Node qNameNode = n.getFirstChild (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P14_Delete_Statement]^^157^^^^^156^181^Node qNameNode = n.getFirstChild (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P1_Replace_Type]^char qName = qNameNode.getQualifiedName (  ) ;^158^^^^^156^181^String qName = qNameNode.getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P5_Replace_Variable]^String qName = nameNode.getQualifiedName (  ) ;^158^^^^^156^181^String qName = qNameNode.getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P11_Insert_Donor_Statement]^String qualifiedName = n.getFirstChild (  ) .getQualifiedName (  ) ;String qName = qNameNode.getQualifiedName (  ) ;^158^^^^^156^181^String qName = qNameNode.getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P11_Insert_Donor_Statement]^String className = node.getFirstChild (  ) .getQualifiedName (  ) ;String qName = qNameNode.getQualifiedName (  ) ;^158^^^^^156^181^String qName = qNameNode.getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P11_Insert_Donor_Statement]^String name = nameNode.getString (  ) ;String qName = qNameNode.getQualifiedName (  ) ;^158^^^^^156^181^String qName = qNameNode.getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P8_Replace_Mix]^String qName = nameNode .getString (  )  ;^158^^^^^156^181^String qName = qNameNode.getQualifiedName (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P14_Delete_Statement]^^158^159^^161^162^156^181^String qName = qNameNode.getQualifiedName (  ) ;  if  ( qName == null || qName.isEmpty (  )  )  { return; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P2_Replace_Operator]^if  ( qName == null && qName.isEmpty (  )  )  {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P2_Replace_Operator]^if  ( qName != null || qName.isEmpty (  )  )  {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P5_Replace_Variable]^if  ( name == null || qName.isEmpty (  )  )  {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P6_Replace_Expression]^if  ( qName == null ) {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P6_Replace_Expression]^if  (  qName.isEmpty (  )  )  {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P8_Replace_Mix]^if  ( qName == this || qName.isEmpty (  )  )  {^161^^^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P15_Unwrap_Block]^return ;^161^162^163^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  { return; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P16_Remove_Block]^^161^162^163^^^156^181^if  ( qName == null || qName.isEmpty (  )  )  { return; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P13_Insert_Block]^if  (  (  ( var == null )  ||  ( var.isLocal (  )  )  )  ||  ( var.isExtern (  )  )  )  {     return ; }^161^^^^^156^181^[Delete]^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P5_Replace_Variable]^Node nameNode = n;^166^^^^^156^181^Node nameNode = qNameNode;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P5_Replace_Variable]^for  ( ; qNameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^167^^^^^156^181^for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P7_Replace_Invocation]^for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode .getString (  )   )  {}^167^^^^^156^181^for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P8_Replace_Mix]^for  ( ; nameNode.hasChildren (  ) ; nameNode =  qNameNode.getFirstChild (  )  )  {}^167^^^^^156^181^for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P7_Replace_Invocation]^for  ( ; nameNode .getFirstChild (  )  ; nameNode = nameNode.getFirstChild (  )  )  {}^167^^^^^156^181^for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P8_Replace_Mix]^for  ( ; qNameNode .getFirstChild (  )  ; nameNode = nameNode.getFirstChild (  )  )  {}^167^^^^^156^181^for  ( ; nameNode.hasChildren (  ) ; nameNode = nameNode.getFirstChild (  )  )  {}^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P2_Replace_Operator]^if  ( nameNode.getType (  )  >= Token.NAME )  {^171^^^^^156^181^if  ( nameNode.getType (  )  != Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P8_Replace_Mix]^if  ( qNameNode.getType (  )  != Token.NAME )  {^171^^^^^156^181^if  ( nameNode.getType (  )  != Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P9_Replace_Statement]^if  ( parent.getType (  )  == Token.NAME )  {^171^^^^^156^181^if  ( nameNode.getType (  )  != Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P15_Unwrap_Block]^return ;^171^172^173^^^156^181^if  ( nameNode.getType (  )  != Token.NAME )  { return; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P16_Remove_Block]^^171^172^173^^^156^181^if  ( nameNode.getType (  )  != Token.NAME )  { return; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P7_Replace_Invocation]^if  ( nameNode .getString (  )   != Token.NAME )  {^171^^^^^156^181^if  ( nameNode.getType (  )  != Token.NAME )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P1_Replace_Type]^char name = nameNode.getchar (  ) ;^175^^^^^156^181^String name = nameNode.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P5_Replace_Variable]^String name = qNameNode.getString (  ) ;^175^^^^^156^181^String name = nameNode.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P11_Insert_Donor_Statement]^Node gramps = parent.getParent (  ) ;String name = nameNode.getString (  ) ;^175^^^^^156^181^String name = nameNode.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P11_Insert_Donor_Statement]^String qName = qNameNode.getQualifiedName (  ) ;String name = nameNode.getString (  ) ;^175^^^^^156^181^String name = nameNode.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P11_Insert_Donor_Statement]^String functionName = n.getFirstChild (  ) .getString (  ) ;String name = nameNode.getString (  ) ;^175^^^^^156^181^String name = nameNode.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P11_Insert_Donor_Statement]^String functionName = parent.getString (  ) ;String name = nameNode.getString (  ) ;^175^^^^^156^181^String name = nameNode.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P7_Replace_Invocation]^String name = nameNode .getParent (  )  ;^175^^^^^156^181^String name = nameNode.getString (  ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P14_Delete_Statement]^^175^176^^^^156^181^String name = nameNode.getString (  ) ; Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P5_Replace_Variable]^Scope.Var var = t.getScope (  ) .getVar ( qName ) ;^176^^^^^156^181^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P5_Replace_Variable]^Scope.Var var = name.getScope (  ) .getVar ( t ) ;^176^^^^^156^181^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P7_Replace_Invocation]^Scope.Var var = t.getScope (  )  .getString (  )  ;^176^^^^^156^181^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P8_Replace_Mix]^Scope.Var var = t .getInput (  )  .getVar ( name ) ;^176^^^^^156^181^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P14_Delete_Statement]^^176^^^^^156^181^Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P2_Replace_Operator]^if  ( var == null && var.isLocal (  )  || var.isExtern (  )  )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P2_Replace_Operator]^if  ( var != null || var.isLocal (  )  || var.isExtern (  )  )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P6_Replace_Expression]^if  ( var == null ) {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P6_Replace_Expression]^if  (  var.isLocal (  )  || var.isExtern (  )  )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P6_Replace_Expression]^if  ( (var == null || var.isLocal()) )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P7_Replace_Invocation]^if  ( var == null || var .isExtern (  )   || var.isExtern (  )  )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P15_Unwrap_Block]^return ;^177^178^179^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  { return; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P16_Remove_Block]^^177^178^179^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  { return; }^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P13_Insert_Block]^if  (  ( qName == null )  ||  ( qName.isEmpty (  )  )  )  {     return ; }^177^^^^^156^181^[Delete]^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P7_Replace_Invocation]^if  ( var == null || var.isLocal (  )  || var .getVar ( qName )   )  {^177^^^^^156^181^if  ( var == null || var.isLocal (  )  || var.isExtern (  )  )  {^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P5_Replace_Variable]^newNodes.add ( qNameNode ) ;^180^^^^^156^181^newNodes.add ( n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P7_Replace_Invocation]^newNodes.contains ( n ) ;^180^^^^^156^181^newNodes.add ( n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P14_Delete_Statement]^^180^^^^^156^181^newNodes.add ( n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P11_Insert_Donor_Statement]^this.newNodes.clear (  ) ;newNodes.add ( n ) ;^180^^^^^156^181^newNodes.add ( n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
[P11_Insert_Donor_Statement]^requires.add ( required ) ;newNodes.add ( n ) ;^180^^^^^156^181^newNodes.add ( n ) ;^[CLASS] CheckRequiresForConstructorsCallback  [METHOD] visitNewNode [RETURN_TYPE] void   NodeTraversal t Node n [VARIABLES] List  constructors  newNodes  requires  String  name  qName  boolean  NodeTraversal  t  Var  var  Node  n  nameNode  qNameNode  
