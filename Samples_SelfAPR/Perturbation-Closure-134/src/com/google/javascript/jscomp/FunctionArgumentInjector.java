[P8_Replace_Mix]^private  Set<String> locals;^328^^^^^323^333^private final Set<String> locals;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [VARIABLES] 
[P3_Replace_Literal]^private boolean sideEffectSeen = true;^329^^^^^324^334^private boolean sideEffectSeen = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [VARIABLES] 
[P8_Replace_Mix]^private boolean sideEffectSeen ;^329^^^^^324^334^private boolean sideEffectSeen = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [VARIABLES] 
[P8_Replace_Mix]^private Set<String> parametersReferenced  = null ;^330^^^^^325^335^private Set<String> parametersReferenced = Sets.newHashSet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [VARIABLES] 
[P1_Replace_Type]^private  long  loopsEntered = 0;^331^^^^^326^336^private int loopsEntered = 0;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [VARIABLES] 
[P3_Replace_Literal]^private int loopsEntered = 6;^331^^^^^326^336^private int loopsEntered = 0;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [VARIABLES] 
[P8_Replace_Mix]^private int loopsEntered ;^331^^^^^326^336^private int loopsEntered = 0;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect   [VARIABLES] 
[P8_Replace_Mix]^this.parameters =  null;^334^^^^^333^336^this.parameters = parameters;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] <init> [RETURN_TYPE] Set)   String> parameters String> locals [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  
[P8_Replace_Mix]^this.locals =  null;^335^^^^^333^336^this.locals = locals;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] <init> [RETURN_TYPE] Set)   String> parameters String> locals [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  
[P2_Replace_Operator]^if  ( node.getType (  )  < Token.NAME )  {^54^^^^^52^76^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^if  ( replacement.getType (  )  == Token.NAME )  {^54^^^^^52^76^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P6_Replace_Expression]^if  ( replacementTemplate != null )  {^54^^^^^52^76^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P6_Replace_Expression]^if  ( ((parent.getType() != FUNCTION) || (parent.getType() != VAR) || parent.getType() != CATCH) )  {^54^^^^^52^76^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P6_Replace_Expression]^if  ( (parent.getType() != FUNCTION || parent.getType() != VAR) )  {^54^^^^^52^76^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P6_Replace_Expression]^if  ( parent.getType (  )  != FUNCTION )  {^54^^^^^52^76^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P6_Replace_Expression]^if  ( parent.getType (  )  != VAR )  {^54^^^^^52^76^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P6_Replace_Expression]^if  ( parent.getType (  )  != CATCH )  {^54^^^^^52^76^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P7_Replace_Invocation]^if  ( node .getString (  )   == Token.NAME )  {^54^^^^^52^76^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P7_Replace_Invocation]^if  ( node .keySet (  )   {^54^^^^^52^76^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P9_Replace_Statement]^if  ( n.getType (  )  == Token.NAME )  {^54^^^^^52^76^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P13_Insert_Block]^if  ( replacementTemplate != null )  {     checkState (  (  (  (  ( parent.getType (  )  )  !=  ( FUNCTION )  )  ||  (  ( parent.getType (  )  )  !=  ( VAR )  )  )  ||  (  ( parent.getType (  )  )  !=  ( CATCH )  )  )  ) ;     Node replacement = replacementTemplate.cloneTree (  ) ;     parent.replaceChild ( node, replacement ) ;     return replacement; }^54^^^^^52^76^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P2_Replace_Operator]^if  ( replacementTemplate == null )  {^56^^^^^52^76^if  ( replacementTemplate != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^if  ( parent != null )  {^56^^^^^52^76^if  ( replacementTemplate != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^if  ( parentTemplate != null )  {^56^^^^^52^76^if  ( replacementTemplate != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P6_Replace_Expression]^if  ( ((parent.getType() != FUNCTION) || (parent.getType() != VAR) || parent.getType() != CATCH) )  {^56^^^^^52^76^if  ( replacementTemplate != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P6_Replace_Expression]^if  ( (parent.getType() != FUNCTION || parent.getType() != VAR) )  {^56^^^^^52^76^if  ( replacementTemplate != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P6_Replace_Expression]^if  ( parent.getType (  )  != FUNCTION )  {^56^^^^^52^76^if  ( replacementTemplate != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P6_Replace_Expression]^if  ( parent.getType (  )  != VAR )  {^56^^^^^52^76^if  ( replacementTemplate != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P6_Replace_Expression]^if  ( parent.getType (  )  != CATCH )  {^56^^^^^52^76^if  ( replacementTemplate != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P8_Replace_Mix]^if  ( replacementTemplate != this )  {^56^^^^^52^76^if  ( replacementTemplate != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P13_Insert_Block]^if  (  ( node.getType (  )  )  ==  ( NAME )  )  {     Node replacementTemplate = replacements.get ( node.getString (  )  ) ;     if  ( replacementTemplate != null )  {         checkState (  (  (  (  ( parent.getType (  )  )  !=  ( FUNCTION )  )  ||  (  ( parent.getType (  )  )  !=  ( VAR )  )  )  ||  (  ( parent.getType (  )  )  !=  ( CATCH )  )  )  ) ;         Node replacement = replacementTemplate.cloneTree (  ) ;         parent.replaceChild ( node, replacement ) ;         return replacement;     } }^56^^^^^52^76^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^return replacementTemplate;^65^^^^^52^76^return replacement;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P8_Replace_Mix]^return parent;^65^^^^^52^76^return replacement;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^Node replacement = parent.cloneTree (  ) ;^63^^^^^52^76^Node replacement = replacementTemplate.cloneTree (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P11_Insert_Donor_Statement]^Node replacementTemplate = replacements.get ( node.getString (  )  ) ;Node replacement = replacementTemplate.cloneTree (  ) ;^63^^^^^52^76^Node replacement = replacementTemplate.cloneTree (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P2_Replace_Operator]^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION && parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P2_Replace_Operator]^Preconditions.checkState ( parent.getType (  )  <= Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P2_Replace_Operator]^Preconditions.checkState ( parent.getType (  )  >= Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P2_Replace_Operator]^Preconditions.checkState ( parent.getType (  )  < Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^Preconditions.checkState ( replacementTemplate.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P7_Replace_Invocation]^Preconditions.checkState ( parent .getString (  )   != Token.FUNCTION || parent^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P8_Replace_Mix]^Preconditions.checkState ( replacement.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P14_Delete_Statement]^^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^|| replacementTemplate.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^59^60^^^^52^76^|| parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P8_Replace_Mix]^|| replacement.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^59^60^^^^52^76^|| parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P14_Delete_Statement]^^59^60^^^^52^76^|| parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^|| replacement.getType (  )  != Token.CATCH ) ;^60^^^^^52^76^|| parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P7_Replace_Invocation]^|| parent .getString (  )   != Token.CATCH ) ;^60^^^^^52^76^|| parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P8_Replace_Mix]^|| replacementTemplate.getType (  )  != Token.CATCH ) ;^60^^^^^52^76^|| parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P14_Delete_Statement]^^60^^^^^52^76^|| parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P11_Insert_Donor_Statement]^|| parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;|| parent.getType (  )  != Token.CATCH ) ;^60^^^^^52^76^|| parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P12_Insert_Condition]^if  ( n.getType (  )  == Token.NAME )  { || parent.getType (  )  != Token.CATCH ) ; }^60^^^^^52^76^|| parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P12_Insert_Condition]^if  ( node.getType (  )  == Token.NAME )  { || parent.getType (  )  != Token.CATCH ) ; }^60^^^^^52^76^|| parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^Node replacement = replacement.cloneTree (  ) ;^63^^^^^52^76^Node replacement = replacementTemplate.cloneTree (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P7_Replace_Invocation]^Node replacement = replacementTemplate .children (  )  ;^63^^^^^52^76^Node replacement = replacementTemplate.cloneTree (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P14_Delete_Statement]^^63^^^^^52^76^Node replacement = replacementTemplate.cloneTree (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^parent.replaceChild ( replacementTemplate, replacement ) ;^64^^^^^52^76^parent.replaceChild ( node, replacement ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^parent.replaceChild ( node, replacementTemplate ) ;^64^^^^^52^76^parent.replaceChild ( node, replacement ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^parent.replaceChild (  replacement ) ;^64^^^^^52^76^parent.replaceChild ( node, replacement ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^parent.replaceChild ( node ) ;^64^^^^^52^76^parent.replaceChild ( node, replacement ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^parent.replaceChild ( replacement, node ) ;^64^^^^^52^76^parent.replaceChild ( node, replacement ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P14_Delete_Statement]^^64^65^^^^52^76^parent.replaceChild ( node, replacement ) ; return replacement;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P11_Insert_Donor_Statement]^c = inject ( c, node, replacements ) ;parent.replaceChild ( node, replacement ) ;^64^^^^^52^76^parent.replaceChild ( node, replacement ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^Node replacementTemplate = replacements.get ( replacement.getString (  )  ) ;^55^^^^^52^76^Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^Node replacementTemplate = node.get ( replacements.getString (  )  ) ;^55^^^^^52^76^Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P7_Replace_Invocation]^Node replacementTemplate = replacements .keySet (  )  ( node^55^^^^^52^76^Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P7_Replace_Invocation]^Node replacementTemplate = replacements.get ( node .getParent (  )   ) ;^55^^^^^52^76^Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P11_Insert_Donor_Statement]^Node replacement = replacementTemplate.cloneTree (  ) ;Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^55^^^^^52^76^Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P8_Replace_Mix]^Node replacementTemplate = replacements.get ( replacementTemplate.getString (  )  ) ;^55^^^^^52^76^Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P14_Delete_Statement]^^55^^^^^52^76^Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P2_Replace_Operator]^Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P8_Replace_Mix]^Preconditions.checkState ( replacementTemplate .getString (  )   != Token.FUNCTION || parent^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P7_Replace_Invocation]^|| parent .getString (  )   != Token.VAR || parent^59^60^^^^52^76^|| parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P14_Delete_Statement]^^64^^^^^52^76^parent.replaceChild ( node, replacement ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( node )   != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^58^59^60^^^52^76^Preconditions.checkState ( parent.getType (  )  != Token.FUNCTION || parent.getType (  )  != Token.VAR || parent.getType (  )  != Token.CATCH ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P8_Replace_Mix]^Node replacementTemplate = replacements.get ( replacement .getParent (  )   ) ;^55^^^^^52^76^Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^if  ( replacementTemplate.getType (  )  == Token.NAME )  {^54^^^^^52^76^if  ( node.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^Node replacementTemplate = 4.get ( node.getString (  )  ) ;^55^^^^^52^76^Node replacementTemplate = replacements.get ( node.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P2_Replace_Operator]^for  ( Node c = node.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^69^^^^^52^76^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^for  ( Node c = replacementTemplate.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^69^^^^^52^76^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^for  ( Node replacementTemplate = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^69^^^^^52^76^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^for  ( Node node = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^69^^^^^52^76^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^c = inject ( replacementTemplate, node, replacements ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^c = inject ( c, replacement, replacements ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^c = inject (  node, replacements ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^c = inject ( c,  replacements ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^c = inject ( c, node ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^c = inject ( node, c, replacements ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^c = inject ( replacements, node, c ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P7_Replace_Invocation]^c = getFunctionCallParameterMap ( c, node, replacements ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P8_Replace_Mix]^c =  injereplacementTemplatet ( replacementTemplate, node, replareplacementTemplateements ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^c = inject ( c, replacementTemplate, replacements ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P8_Replace_Mix]^c = getFunctionCallParameterMap ( c, replacementTemplate, replacements ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P14_Delete_Statement]^^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P11_Insert_Donor_Statement]^parent.replaceChild ( node, replacement ) ;c = inject ( c, node, replacements ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P8_Replace_Mix]^for  ( Node c =  node.getFirstChild (  ) ; replacementTemplate !^69^^^^^52^76^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^c = inject ( c, replacements, node ) ;^72^^^^^52^76^c = inject ( c, node, replacements ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P7_Replace_Invocation]^for  ( Node c = node .getLastChild (  )  ; c != null; c = c.getNext (  )  )  {^69^^^^^52^76^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P8_Replace_Mix]^for  ( Node c = replacement.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^69^^^^^52^76^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P14_Delete_Statement]^^69^70^^72^73^52^76^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {  c = inject ( c, node, replacements ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P7_Replace_Invocation]^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c .getParent (  )   )  {^69^^^^^52^76^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P5_Replace_Variable]^return replacementTemplate;^75^^^^^52^76^return node;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inject [RETURN_TYPE] Node   Node node Node parent Node> replacements [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Map  replacements  int  loopsEntered  Node  c  node  parent  replacement  replacementTemplate  
[P14_Delete_Statement]^^85^^^^^70^100^LinkedHashMap<String, Node> argMap = Maps.newLinkedHashMap (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^Node cArg = fnNode.getFirstChild (  ) .getNext (  ) ;^88^^^^^73^103^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Node cArg = callNode.getFirstChild (  )  .getParent (  )  ;^88^^^^^73^103^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P12_Insert_Condition]^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  { Node cArg = callNode.getFirstChild (  ) .getNext (  ) ; }^88^^^^^73^103^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^88^^^^^73^103^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Node cArg = callNode .getLastChild (  )  .getNext (  ) ;^88^^^^^73^103^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P2_Replace_Operator]^if  ( callNode.getFirstChild (  ) .getType (  )  < Token.NAME )  {^89^^^^^74^104^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^if  ( fnNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^89^^^^^74^104^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P6_Replace_Expression]^if  ( cArg.getType (  )  == THIS )  {^89^^^^^74^104^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^if  ( callNode.getFirstChild (  )  .getString (  )   != Token.NAME )  {^89^^^^^74^104^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^if  ( callNode .getLastChild (  )  .getType (  )  != Token.NAME )  {^89^^^^^74^104^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P8_Replace_Mix]^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.3 )  {^89^^^^^74^104^if  ( callNode.getFirstChild (  ) .getType (  )  != Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P13_Insert_Block]^if  ( isFunctionObjectCall ( callNode )  )  {     checkNotNull ( cArg ) ;     checkState (  (  ( cArg.getType (  )  )  ==  ( THIS )  )  ) ;     cArg = cArg.getNext (  ) ; }else {     checkState (  ( ! ( isFunctionObjectApply ( callNode )  )  )  ) ; }^89^^^^^74^104^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^if  ( NodeUtil.isFunctionObjectCall ( fnNode )  )  {^90^^^^^75^105^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^if  ( NodeUtil.isFunctionObjectApply ( callNode )  )  {^90^^^^^75^105^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P13_Insert_Block]^if  (  ( callNode.getFirstChild (  ) .getType (  )  )  !=  ( NAME )  )  {     if  ( isFunctionObjectCall ( callNode )  )  {         checkNotNull ( cArg ) ;         checkState (  (  ( cArg.getType (  )  )  ==  ( THIS )  )  ) ;         cArg = cArg.getNext (  ) ;     }else {         checkState (  ( ! ( isFunctionObjectApply ( callNode )  )  )  ) ;     } }^90^^^^^75^105^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( fnNode )  ) ;^96^^^^^90^97^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Preconditions.checkArgument ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^96^^^^^90^97^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Preconditions.checkState ( !NodeUtil.isAssignmentOp ( callNode )  ) ;^96^^^^^90^97^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^96^^^^^90^97^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P12_Insert_Condition]^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  { Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ; }^96^^^^^90^97^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P13_Insert_Block]^if  ( isLoopStructure ( node )  )  {      ( loopsEntered ) ++; }^96^^^^^90^97^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^cArg = fnNode.getNext (  ) ;^94^^^^^79^109^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^Preconditions.checkNotNull ( fnNode ) ;^92^^^^^77^107^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Preconditions.checkArgument ( cArg ) ;^92^^^^^77^107^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P8_Replace_Mix]^Preconditions.checkArgument ( fnNode ) ;^92^^^^^77^107^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^92^^^^^77^107^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( unsafe != null ) ;Preconditions.checkNotNull ( cArg ) ;^92^^^^^77^107^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P2_Replace_Operator]^Preconditions.checkState ( cArg.getType (  )  > Token.THIS ) ;^93^^^^^78^108^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^Preconditions.checkState ( fnNode.getType (  )  == Token.THIS ) ;^93^^^^^78^108^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Preconditions.checkArgument ( cArg.getType (  )  == Token.THIS ) ;^93^^^^^78^108^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^93^94^^^^78^108^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ; cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P8_Replace_Mix]^Preconditions.checkState ( fnNode .getString (  )   == Token.THIS ) ;^93^^^^^78^108^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^93^^^^^78^108^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^cArg = cArg .getParent (  )  ;^94^^^^^79^109^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^94^^^^^79^109^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^String name = cArg.getString (  ) ;cArg = cArg.getNext (  ) ;^94^^^^^79^109^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Node cArg = entry.getValue (  ) ;cArg = cArg.getNext (  ) ;^94^^^^^79^109^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P13_Insert_Block]^if  ( isLoopStructure ( node )  )  {      ( loopsEntered ) ++; }^90^^^^^75^105^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Preconditions .checkState (  )  ;^92^^^^^77^107^Preconditions.checkNotNull ( cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P2_Replace_Operator]^Preconditions.checkState ( cArg.getType (  )  >= Token.THIS ) ;^93^^^^^78^108^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( fnArg )  ;^93^^^^^78^108^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Preconditions.checkState ( cArg .getString (  )   == Token.THIS ) ;^93^^^^^78^108^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P8_Replace_Mix]^cArg = fnNode .getParent (  )  ;^94^^^^^79^109^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( fnNode )  ) ;^96^^^^^81^111^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Preconditions.checkArgument ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^96^^^^^81^111^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Preconditions.checkState ( !NodeUtil.isAssignmentOp ( callNode )  ) ;^96^^^^^81^111^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P8_Replace_Mix]^Preconditions.checkState ( !NodeUtil.isAssignmentOp ( fnNode )  ) ;^96^^^^^81^111^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^96^^^^^81^111^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P12_Insert_Condition]^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  { Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ; }^96^^^^^81^111^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P13_Insert_Block]^if  ( isLoopStructure ( node )  )  {      ( loopsEntered ) ++; }^96^^^^^81^111^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunctionObjectApply ( fnArg )   )  {^90^^^^^75^105^if  ( NodeUtil.isFunctionObjectCall ( callNode )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P2_Replace_Operator]^Preconditions.checkState ( cArg.getType (  )  != Token.THIS ) ;^93^^^^^78^108^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P8_Replace_Mix]^Preconditions.checkArgument ( fnNode.getType (  )  == Token.THIS ) ;^93^^^^^78^108^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^92^93^^^^77^107^Preconditions.checkNotNull ( cArg ) ; Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Preconditions.checkState ( !NodeUtil .isFunctionObjectCall ( cArg )   ) ;^96^^^^^81^111^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^Preconditions.checkState ( !NodeUtil .isFunctionObjectCall ( callNode )   ) ;^96^^^^^81^111^Preconditions.checkState ( !NodeUtil.isFunctionObjectApply ( callNode )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P2_Replace_Operator]^if  ( cArg == null )  {^101^^^^^86^116^if  ( cArg != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^if  ( fnNode != null )  {^101^^^^^86^116^if  ( cArg != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P8_Replace_Mix]^if  ( cArg != false )  {^101^^^^^86^116^if  ( cArg != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P15_Unwrap_Block]^argMap.put(fnArg.getString(), cArg); cArg = cArg.getNext();^101^102^103^104^105^86^116^if  ( cArg != null )  { argMap.put ( fnArg.getString (  ) , cArg ) ; cArg = cArg.getNext (  ) ; } else { argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P16_Remove_Block]^^101^102^103^104^105^86^116^if  ( cArg != null )  { argMap.put ( fnArg.getString (  ) , cArg ) ; cArg = cArg.getNext (  ) ; } else { argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^argMap.put ( fnNode.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^105^^^^^101^106^argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^105^^^^^101^106^argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^argMap.put ( fnArg.getString (  ) , cArg ) ;argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^105^^^^^101^106^argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^argMap.put ( fnArg .getParent (  )  , NodeUtil.newUndefinedNode (  )  ) ;^105^^^^^101^106^argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^cArg = cArg .getParent (  )  ;^103^^^^^88^118^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P8_Replace_Mix]^cArg =  fnNode.getNext (  ) ;^103^^^^^88^118^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^argMap.put ( fnNode.getString (  ) , cArg ) ;^102^^^^^87^117^argMap.put ( fnArg.getString (  ) , cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^argMap.put ( fnArg.getString (  ) , fnNode ) ;^102^^^^^87^117^argMap.put ( fnArg.getString (  ) , cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^argMap.put ( fnArg.getString (  )  ) ;^102^^^^^87^117^argMap.put ( fnArg.getString (  ) , cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^argMap.put ( cArg.getString (  ) , fnArg ) ;^102^^^^^87^117^argMap.put ( fnArg.getString (  ) , cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^102^^^^^87^117^argMap.put ( fnArg.getString (  ) , cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;argMap.put ( fnArg.getString (  ) , cArg ) ;^102^^^^^87^117^argMap.put ( fnArg.getString (  ) , cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^set.add ( n.getString (  )  ) ;argMap.put ( fnArg.getString (  ) , cArg ) ;^102^^^^^87^117^argMap.put ( fnArg.getString (  ) , cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^names.add ( n.getString (  )  ) ;argMap.put ( fnArg.getString (  ) , cArg ) ;^102^^^^^87^117^argMap.put ( fnArg.getString (  ) , cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^argMap.put ( uniquePlaceholder, cArg ) ;argMap.put ( fnArg.getString (  ) , cArg ) ;^102^^^^^87^117^argMap.put ( fnArg.getString (  ) , cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^unsafe.add ( n.getString (  )  ) ;argMap.put ( fnArg.getString (  ) , cArg ) ;^102^^^^^87^117^argMap.put ( fnArg.getString (  ) , cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^argMap.put ( fnArg .getParent (  )  , cArg ) ;^102^^^^^87^117^argMap.put ( fnArg.getString (  ) , cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^102^103^^^^87^117^argMap.put ( fnArg.getString (  ) , cArg ) ; cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^103^^^^^88^118^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^String name = cArg.getString (  ) ;cArg = cArg.getNext (  ) ;^103^^^^^88^118^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Node cArg = entry.getValue (  ) ;cArg = cArg.getNext (  ) ;^103^^^^^88^118^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^for  ( Node fnArg : NodeUtil.getFnParameters ( fnArg ) .children (  )  )  {^100^^^^^85^115^for  ( Node fnArg : NodeUtil.getFnParameters ( fnNode ) .children (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^for  ( Node fnArg : NodeUtil.isName ( fnNode ) .children (  )  )  {^100^^^^^85^115^for  ( Node fnArg : NodeUtil.getFnParameters ( fnNode ) .children (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^for  ( Node fnArg : NodeUtil .getNameReferenceCount ( callNode , uniquePlaceholder )  .children (  )  )  {^100^^^^^85^115^for  ( Node fnArg : NodeUtil.getFnParameters ( fnNode ) .children (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^argMap.put ( fnNode.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^105^^^^^90^120^argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^105^^^^^90^120^argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^argMap.put ( fnArg.getString (  ) , cArg ) ;argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^105^^^^^90^120^argMap.put ( fnArg.getString (  ) , NodeUtil.newUndefinedNode (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P1_Replace_Type]^short  anonArg = 0;^111^^^^^96^126^int anonArg = 0;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P3_Replace_Literal]^int anonArg = loopsEntered;^111^^^^^96^126^int anonArg = 0;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P2_Replace_Operator]^while  ( cArg == null )  {^112^^^^^97^127^while  ( cArg != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^while  ( fnNode != null )  {^112^^^^^97^127^while  ( cArg != null )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^cArg = fnNode.getNext (  ) ;^116^^^^^101^131^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^cArg = cArg .getParent (  )  ;^116^^^^^101^131^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P1_Replace_Type]^char uniquePlaceholder = getUniqueAnonymousParameterName ( safeNameIdSupplier ) ;^113^114^^^^98^128^String uniquePlaceholder = getUniqueAnonymousParameterName ( safeNameIdSupplier ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^String uniquePlaceholder = getFunctionParameterSet ( safeNameIdSupplier ) ;^113^114^^^^98^128^String uniquePlaceholder = getUniqueAnonymousParameterName ( safeNameIdSupplier ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^getFunctionParameterSet ( safeNameIdSupplier ) ;^114^^^^^99^129^getUniqueAnonymousParameterName ( safeNameIdSupplier ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^114^115^^^^99^129^getUniqueAnonymousParameterName ( safeNameIdSupplier ) ; argMap.put ( uniquePlaceholder, cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^argMap.put ( uniquePlaceholder, fnNode ) ;^115^^^^^100^130^argMap.put ( uniquePlaceholder, cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^argMap.put (  cArg ) ;^115^^^^^100^130^argMap.put ( uniquePlaceholder, cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^argMap.put ( uniquePlaceholder ) ;^115^^^^^100^130^argMap.put ( uniquePlaceholder, cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P5_Replace_Variable]^argMap.put ( cArg, uniquePlaceholder ) ;^115^^^^^100^130^argMap.put ( uniquePlaceholder, cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^115^^^^^100^130^argMap.put ( uniquePlaceholder, cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^argMap.put ( fnArg.getString (  ) , cArg ) ;argMap.put ( uniquePlaceholder, cArg ) ;^115^^^^^100^130^argMap.put ( uniquePlaceholder, cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^116^^^^^101^131^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^String name = cArg.getString (  ) ;cArg = cArg.getNext (  ) ;^116^^^^^101^131^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P11_Insert_Donor_Statement]^Node cArg = entry.getValue (  ) ;cArg = cArg.getNext (  ) ;^116^^^^^101^131^cArg = cArg.getNext (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P14_Delete_Statement]^^114^^^^^99^129^getUniqueAnonymousParameterName ( safeNameIdSupplier ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P7_Replace_Invocation]^argMap .put ( fnNode )  ;^115^^^^^100^130^argMap.put ( uniquePlaceholder, cArg ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionCallParameterMap [RETURN_TYPE] LinkedHashMap   Node fnNode Node callNode String> safeNameIdSupplier [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  Node  cArg  callNode  fnArg  fnNode  Supplier  safeNameIdSupplier  String  uniquePlaceholder  int  anonArg  loopsEntered  LinkedHashMap  argMap  
[P2_Replace_Operator]^return "JSCompiler_inline_anon_param_" + safeNameIdSupplier.get (  >  ) ;^127^^^^^125^128^return "JSCompiler_inline_anon_param_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getUniqueAnonymousParameterName [RETURN_TYPE] String   String> safeNameIdSupplier [VARIABLES] Supplier  safeNameIdSupplier  Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  anonArg  loopsEntered  
[P3_Replace_Literal]^return "JSCompiler_inline_anon_param_l" + safeNameIdSupplier.get (  ) ;^127^^^^^125^128^return "JSCompiler_inline_anon_param_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getUniqueAnonymousParameterName [RETURN_TYPE] String   String> safeNameIdSupplier [VARIABLES] Supplier  safeNameIdSupplier  Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  anonArg  loopsEntered  
[P8_Replace_Mix]^return "JSCompiler_inline_anon_param_"   instanceof   safeNameIdSupplier.get (  ) ;^127^^^^^125^128^return "JSCompiler_inline_anon_param_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getUniqueAnonymousParameterName [RETURN_TYPE] String   String> safeNameIdSupplier [VARIABLES] Supplier  safeNameIdSupplier  Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  anonArg  loopsEntered  
[P7_Replace_Invocation]^return "JSCompiler_inline_anon_param_" + safeNameIdSupplier .keySet (  )  ;^127^^^^^125^128^return "JSCompiler_inline_anon_param_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getUniqueAnonymousParameterName [RETURN_TYPE] String   String> safeNameIdSupplier [VARIABLES] Supplier  safeNameIdSupplier  Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  anonArg  loopsEntered  
[P14_Delete_Statement]^^127^^^^^125^128^return "JSCompiler_inline_anon_param_" + safeNameIdSupplier.get (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getUniqueAnonymousParameterName [RETURN_TYPE] String   String> safeNameIdSupplier [VARIABLES] Supplier  safeNameIdSupplier  Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  anonArg  loopsEntered  
[P7_Replace_Invocation]^Set<String> names = findModifiedParameters ( fnNode ) ;^140^^^^^139^144^Set<String> names = getFunctionParameterSet ( fnNode ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P11_Insert_Donor_Statement]^Set<String> set = Sets.newHashSet (  ) ;Set<String> names = getFunctionParameterSet ( fnNode ) ;^140^^^^^139^144^Set<String> names = getFunctionParameterSet ( fnNode ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P14_Delete_Statement]^^140^141^^^^139^144^Set<String> names = getFunctionParameterSet ( fnNode ) ; Set<String> unsafeNames = Sets.newHashSet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P13_Insert_Block]^if  ( canNameValueChange ( n, parent )  )  {     unsafe.add ( n.getString (  )  ) ; }^140^^^^^139^144^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P11_Insert_Donor_Statement]^Set<String> set = Sets.newHashSet (  ) ;Set<String> unsafeNames = Sets.newHashSet (  ) ;^141^^^^^139^144^Set<String> unsafeNames = Sets.newHashSet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P11_Insert_Donor_Statement]^String argName = entry.getKey (  ) ;Set<String> unsafeNames = Sets.newHashSet (  ) ;^141^^^^^139^144^Set<String> unsafeNames = Sets.newHashSet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P11_Insert_Donor_Statement]^Set<String> locals = Sets.newHashSet ( parameters ) ;Set<String> unsafeNames = Sets.newHashSet (  ) ;^141^^^^^139^144^Set<String> unsafeNames = Sets.newHashSet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P11_Insert_Donor_Statement]^Set<String> parameters = argMap.keySet (  ) ;Set<String> unsafeNames = Sets.newHashSet (  ) ;^141^^^^^139^144^Set<String> unsafeNames = Sets.newHashSet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P7_Replace_Invocation]^Set<String> unsafeNames = Sets .newHashSet (  )  ;^141^^^^^139^144^Set<String> unsafeNames = Sets.newHashSet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P14_Delete_Statement]^^141^^^^^139^144^Set<String> unsafeNames = Sets.newHashSet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P5_Replace_Variable]^return findModifiedParameters (  null, names, unsafeNames ) ;^142^143^^^^139^144^return findModifiedParameters ( fnNode, null, names, unsafeNames ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P5_Replace_Variable]^return findModifiedParameters ( fnNode, null,  unsafeNames ) ;^142^143^^^^139^144^return findModifiedParameters ( fnNode, null, names, unsafeNames ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P5_Replace_Variable]^return findModifiedParameters ( fnNode, null, names ) ;^142^143^^^^139^144^return findModifiedParameters ( fnNode, null, names, unsafeNames ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P5_Replace_Variable]^return findModifiedParameters ( names, null, fnNode, unsafeNames ) ;^142^143^^^^139^144^return findModifiedParameters ( fnNode, null, names, unsafeNames ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P5_Replace_Variable]^return findModifiedParameters ( fnNode, null, unsafeNames, names ) ;^142^143^^^^139^144^return findModifiedParameters ( fnNode, null, names, unsafeNames ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P7_Replace_Invocation]^return maybeAddTempsForCallArguments ( fnNode, null, names, unsafeNames ) ;^142^143^^^^139^144^return findModifiedParameters ( fnNode, null, names, unsafeNames ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P13_Insert_Block]^if  ( canNameValueChange ( n, parent )  )  {     unsafe.add ( n.getString (  )  ) ; }^142^^^^^139^144^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P5_Replace_Variable]^return findModifiedParameters ( unsafeNames, null, names, fnNode ) ;^142^143^^^^139^144^return findModifiedParameters ( fnNode, null, names, unsafeNames ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P14_Delete_Statement]^^142^143^144^^^139^144^return findModifiedParameters ( fnNode, null, names, unsafeNames ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  fnNode  
[P2_Replace_Operator]^Preconditions.checkArgument ( unsafe == null ) ;^164^^^^^162^178^Preconditions.checkArgument ( unsafe != null ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P8_Replace_Mix]^Preconditions .checkArgument ( sideEffectSeen )  ;^164^^^^^162^178^Preconditions.checkArgument ( unsafe != null ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P14_Delete_Statement]^^164^^^^^162^178^Preconditions.checkArgument ( unsafe != null ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( cArg ) ;Preconditions.checkArgument ( unsafe != null ) ;^164^^^^^162^178^Preconditions.checkArgument ( unsafe != null ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( fnNode.getType (  )  == Token.FUNCTION ) ;Preconditions.checkArgument ( unsafe != null ) ;^164^^^^^162^178^Preconditions.checkArgument ( unsafe != null ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( cArg.getType (  )  == Token.THIS ) ;Preconditions.checkArgument ( unsafe != null ) ;^164^^^^^162^178^Preconditions.checkArgument ( unsafe != null ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.NAME )  {^165^^^^^162^178^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^if  ( c.getType (  )  == Token.NAME )  {^165^^^^^162^178^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P9_Replace_Statement]^if  ( node.getType (  )  == Token.NAME )  {^165^^^^^162^178^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P15_Unwrap_Block]^if (names.contains(n.getString())) {    if (com.google.javascript.jscomp.FunctionArgumentInjector.canNameValueChange(n, parent)) {        unsafe.add(n.getString());    }};^165^166^167^168^169^162^178^if  ( n.getType (  )  == Token.NAME )  { if  ( names.contains ( n.getString (  )  )  )  { if  ( canNameValueChange ( n, parent )  )  { unsafe.add ( n.getString (  )  ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P16_Remove_Block]^^165^166^167^168^169^162^178^if  ( n.getType (  )  == Token.NAME )  { if  ( names.contains ( n.getString (  )  )  )  { if  ( canNameValueChange ( n, parent )  )  { unsafe.add ( n.getString (  )  ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P13_Insert_Block]^if  ( names.contains ( n.getString (  )  )  )  {     if  ( canNameValueChange ( n, parent )  )  {         unsafe.add ( n.getString (  )  ) ;     } }^165^^^^^162^178^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     switch  ( n.getParent (  ) .getType (  )  )  {         case VAR :         case CATCH :             names.add ( n.getString (  )  ) ;     } }^165^^^^^162^178^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     String name = n.getString (  ) ;     if  ( parameters.contains ( name )  )  {         parametersReferenced.add ( name ) ;     } }^165^^^^^162^178^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^if  ( parentames.contains ( n.getString (  )  )  )  {^166^^^^^162^178^if  ( names.contains ( n.getString (  )  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P7_Replace_Invocation]^if  ( names .clear (  )   )  {^166^^^^^162^178^if  ( names.contains ( n.getString (  )  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P15_Unwrap_Block]^if (com.google.javascript.jscomp.FunctionArgumentInjector.canNameValueChange(n, parent)) {    unsafe.add(n.getString());};^166^167^168^169^^162^178^if  ( names.contains ( n.getString (  )  )  )  { if  ( canNameValueChange ( n, parent )  )  { unsafe.add ( n.getString (  )  ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P16_Remove_Block]^^166^167^168^169^^162^178^if  ( names.contains ( n.getString (  )  )  )  { if  ( canNameValueChange ( n, parent )  )  { unsafe.add ( n.getString (  )  ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P13_Insert_Block]^if  ( canNameValueChange ( n, parent )  )  {     unsafe.add ( n.getString (  )  ) ; }^166^^^^^162^178^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     if  ( names.contains ( n.getString (  )  )  )  {         if  ( canNameValueChange ( n, parent )  )  {             unsafe.add ( n.getString (  )  ) ;         }     } }^166^^^^^162^178^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^if  ( canNameValueChange ( parent, parent )  )  {^167^^^^^162^178^if  ( canNameValueChange ( n, parent )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^if  ( canNameValueChange ( n, n )  )  {^167^^^^^162^178^if  ( canNameValueChange ( n, parent )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^if  ( canNameValueChange (  parent )  )  {^167^^^^^162^178^if  ( canNameValueChange ( n, parent )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^if  ( canNameValueChange ( n )  )  {^167^^^^^162^178^if  ( canNameValueChange ( n, parent )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^if  ( canNameValueChange ( parent, n )  )  {^167^^^^^162^178^if  ( canNameValueChange ( n, parent )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P7_Replace_Invocation]^if  ( gatherLocalNames ( n, parent )  )  {^167^^^^^162^178^if  ( canNameValueChange ( n, parent )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P8_Replace_Mix]^if  ( gatherLocalNames ( c, parent )  )  {^167^^^^^162^178^if  ( canNameValueChange ( n, parent )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P15_Unwrap_Block]^unsafe.add(n.getString());^167^168^169^^^162^178^if  ( canNameValueChange ( n, parent )  )  { unsafe.add ( n.getString (  )  ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P16_Remove_Block]^^167^168^169^^^162^178^if  ( canNameValueChange ( n, parent )  )  { unsafe.add ( n.getString (  )  ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P13_Insert_Block]^if  ( names.contains ( n.getString (  )  )  )  {     if  ( canNameValueChange ( n, parent )  )  {         unsafe.add ( n.getString (  )  ) ;     } }^167^^^^^162^178^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^unsafe.add ( parent.getString (  )  ) ;^168^^^^^162^178^unsafe.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P14_Delete_Statement]^^168^^^^^162^178^unsafe.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;unsafe.add ( n.getString (  )  ) ;^168^^^^^162^178^unsafe.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P11_Insert_Donor_Statement]^set.add ( n.getString (  )  ) ;unsafe.add ( n.getString (  )  ) ;^168^^^^^162^178^unsafe.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P11_Insert_Donor_Statement]^String name = node.getString (  ) ;unsafe.add ( n.getString (  )  ) ;^168^^^^^162^178^unsafe.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P11_Insert_Donor_Statement]^names.add ( n.getString (  )  ) ;unsafe.add ( n.getString (  )  ) ;^168^^^^^162^178^unsafe.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P11_Insert_Donor_Statement]^argMap.put ( fnArg.getString (  ) , cArg ) ;unsafe.add ( n.getString (  )  ) ;^168^^^^^162^178^unsafe.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P12_Insert_Condition]^if  ( names.contains ( n.getString (  )  )  )  { unsafe.add ( n.getString (  )  ) ; }^168^^^^^162^178^unsafe.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^if  ( canNameValueChange ( c, parent )  )  {^167^^^^^162^178^if  ( canNameValueChange ( n, parent )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^if  ( canNameValueChange ( n, c )  )  {^167^^^^^162^178^if  ( canNameValueChange ( n, parent )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P13_Insert_Block]^if  ( canNameValueChange ( n, parent )  )  {     unsafe.add ( n.getString (  )  ) ; }^167^^^^^162^178^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P8_Replace_Mix]^unsafe.add ( parent .getParent (  )   ) ;^168^^^^^162^178^unsafe.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^if  ( n.contains ( names.getString (  )  )  )  {^166^^^^^162^178^if  ( names.contains ( n.getString (  )  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^if  ( namesames.contains ( n.getString (  )  )  )  {^166^^^^^162^178^if  ( names.contains ( n.getString (  )  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P7_Replace_Invocation]^if  ( names.contains ( n .getParent (  )   )  )  {^166^^^^^162^178^if  ( names.contains ( n.getString (  )  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P7_Replace_Invocation]^unsafe.add ( n .getParent (  )   ) ;^168^^^^^162^178^unsafe.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME )  {^165^^^^^162^178^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^for  ( Node c : parent.children (  )  )  {^173^^^^^162^178^for  ( Node c : n.children (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P14_Delete_Statement]^^173^174^175^^^162^178^for  ( Node c : n.children (  )  )  { findModifiedParameters ( c, n, names, unsafe ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^findModifiedParameters ( parent, n, names, unsafe ) ;^174^^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^findModifiedParameters ( c, parent, names, unsafe ) ;^174^^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^findModifiedParameters (  n, names, unsafe ) ;^174^^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^findModifiedParameters ( c,  names, unsafe ) ;^174^^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^findModifiedParameters ( c, n,  unsafe ) ;^174^^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^findModifiedParameters ( c, n, names ) ;^174^^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^findModifiedParameters ( n, c, names, unsafe ) ;^174^^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P5_Replace_Variable]^findModifiedParameters ( c, n, unsafe, names ) ;^174^^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P7_Replace_Invocation]^maybeAddTempsForCallArguments ( c, n, names, unsafe ) ;^174^^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P8_Replace_Mix]^findModifiedParameters ( c, n, null, unsafe ) ;^174^^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P14_Delete_Statement]^^174^175^^^^162^178^findModifiedParameters ( c, n, names, unsafe ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P13_Insert_Block]^if  ( canNameValueChange ( n, parent )  )  {     unsafe.add ( n.getString (  )  ) ; }^174^^^^^162^178^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findModifiedParameters [RETURN_TYPE] Set   Node n Node parent String> names String> unsafe [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  Node  c  n  parent  
[P1_Replace_Type]^short  type = parent.getType (  ) ;^192^^^^^191^195^int type = parent.getType (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P5_Replace_Variable]^int type = n.getType (  ) ;^192^^^^^191^195^int type = parent.getType (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P11_Insert_Donor_Statement]^String name = cArg.getString (  ) ;int type = parent.getType (  ) ;^192^^^^^191^195^int type = parent.getType (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P11_Insert_Donor_Statement]^String name = node.getString (  ) ;int type = parent.getType (  ) ;^192^^^^^191^195^int type = parent.getType (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P11_Insert_Donor_Statement]^int type = n.getType (  ) ;int type = parent.getType (  ) ;^192^^^^^191^195^int type = parent.getType (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P14_Delete_Statement]^^192^^^^^191^195^int type = parent.getType (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P2_Replace_Operator]^return  ( type == Token.VAR && type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P2_Replace_Operator]^return  ( type != Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P2_Replace_Operator]^return  ( type > Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P2_Replace_Operator]^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  || parent.getFirstChild (  )  == n )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P2_Replace_Operator]^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  <= n )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P5_Replace_Variable]^return  ( loopsEntered == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P5_Replace_Variable]^return  ( n == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == type )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P5_Replace_Variable]^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == parent )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P7_Replace_Invocation]^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isName ( parent )  && parent.getFirstChild (  )  == n )  ) ;^193^194^^^^191^195^return  ( type == Token.VAR || type == Token.INC || type == Token.DEC || ( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P5_Replace_Variable]^( NodeUtil.isAssignmentOp ( n )  && parent.getFirstChild (  )  == n )  ) ;^194^^^^^191^195^( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P7_Replace_Invocation]^( NodeUtil.isName ( parent )  && parent.getFirstChild (  )  == n )  ) ;^194^^^^^191^195^( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P7_Replace_Invocation]^( NodeUtil .isFunctionObjectApply ( parent )   && parent.getFirstChild (  )  == n )  ) ;^194^^^^^191^195^( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P14_Delete_Statement]^^194^^^^^191^195^( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P7_Replace_Invocation]^( NodeUtil.isAssignmentOp ( parent )  && parent .getLastChild (  )   == n )  ) ;^194^^^^^191^195^( NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] canNameValueChange [RETURN_TYPE] boolean   Node n Node parent [VARIABLES] Set  locals  names  parameters  parametersReferenced  unsafe  unsafeNames  boolean  sideEffectSeen  int  anonArg  loopsEntered  type  Node  n  parent  
[P15_Unwrap_Block]^return ;^207^208^209^210^^192^222^if  ( argMap.isEmpty (  )  )  {  return; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P16_Remove_Block]^^207^208^209^210^^192^222^if  ( argMap.isEmpty (  )  )  {  return; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P2_Replace_Operator]^Preconditions.checkArgument ( fnNode.getType (  )  <= Token.FUNCTION ) ;^212^^^^^197^227^Preconditions.checkArgument ( fnNode.getType (  )  == Token.FUNCTION ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^Preconditions.checkArgument ( cArg.getType (  )  == Token.FUNCTION ) ;^212^^^^^197^227^Preconditions.checkArgument ( fnNode.getType (  )  == Token.FUNCTION ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^212^213^^^^197^227^Preconditions.checkArgument ( fnNode.getType (  )  == Token.FUNCTION ) ; Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^Preconditions.checkArgument ( fnNode .getString (  )   == Token.FUNCTION ) ;^212^^^^^197^227^Preconditions.checkArgument ( fnNode.getType (  )  == Token.FUNCTION ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^Preconditions.checkArgument ( cArg .getString (  )   == Token.FUNCTION ) ;^212^^^^^197^227^Preconditions.checkArgument ( fnNode.getType (  )  == Token.FUNCTION ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^Node block = cArg.getLastChild (  ) ;^213^^^^^198^228^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^Node lhs = n.getFirstChild (  ) ;Node block = fnNode.getLastChild (  ) ;^213^^^^^198^228^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^String name = node.getString (  ) ;Node block = fnNode.getLastChild (  ) ;^213^^^^^198^228^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;Node block = fnNode.getLastChild (  ) ;^213^^^^^198^228^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^Node cArg = entry.getValue (  ) ;Node block = fnNode.getLastChild (  ) ;^213^^^^^198^228^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^213^^^^^198^228^Node block = fnNode.getLastChild (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^Set<String> parameters = 1.keySet (  ) ;^215^^^^^200^230^Set<String> parameters = argMap.keySet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^Set<String> set = Sets.newHashSet (  ) ;Set<String> parameters = argMap.keySet (  ) ;^215^^^^^200^230^Set<String> parameters = argMap.keySet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^String argName = entry.getKey (  ) ;Set<String> parameters = argMap.keySet (  ) ;^215^^^^^200^230^Set<String> parameters = argMap.keySet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^Set<String> unsafeNames = Sets.newHashSet (  ) ;Set<String> parameters = argMap.keySet (  ) ;^215^^^^^200^230^Set<String> parameters = argMap.keySet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^215^^^^^200^230^Set<String> parameters = argMap.keySet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, fnNode ) ;^219^220^^^^204^234^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, block ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect (  block ) ;^219^220^^^^204^234^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, block ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters ) ;^219^220^^^^204^234^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, block ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( block, parameters ) ;^219^220^^^^204^234^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, block ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^Set<String> namesAfterSideEffects = canNameValueChange ( parameters, block ) ;^219^220^^^^204^234^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, block ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^Set<String> namesAfterSideEffects = canNameValueChange ( parameters, fnNode ) ;^219^220^^^^204^234^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, block ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect ( parameters, locals ) ;Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, block ) ;^219^220^^^^204^234^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, block ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^219^220^^^^204^234^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, block ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^if  ( namesNeedingTemps.contains ( name )  )  {^225^^^^^210^240^if  ( namesNeedingTemps.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^if  ( argName.contains ( namesNeedingTemps )  )  {^225^^^^^210^240^if  ( namesNeedingTemps.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P9_Replace_Statement]^if  ( parameters.contains ( name )  )  {^225^^^^^210^240^if  ( namesNeedingTemps.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P15_Unwrap_Block]^continue;^225^226^227^^^210^240^if  ( namesNeedingTemps.contains ( argName )  )  { continue; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P16_Remove_Block]^^225^226^227^^^210^240^if  ( namesNeedingTemps.contains ( argName )  )  { continue; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P2_Replace_Operator]^if  ( NodeUtil.mayEffectMutableState ( cArg )  || references > 0 )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P2_Replace_Operator]^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references >= 0 )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 2 )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^if  ( NodeUtil.mayEffectMutableState ( fnNode )  && references > 0 )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P6_Replace_Expression]^if  ( NodeUtil.mayEffectMutableState ( cArg )  ) {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P6_Replace_Expression]^if  (  references > 0 )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P6_Replace_Expression]^if  ( canBeSideEffected(cArg) && namesAfterSideEffects.contains(argName) )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P6_Replace_Expression]^if  ( references > 1 )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P6_Replace_Expression]^if  ( length() < 2 )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^if  ( NodeUtil.mayHaveSideEffects ( cArg )  && references > 0 )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunctionObjectCall ( cArg )   && references > 0 )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^if  (  references > 3 )  {^232^^^^^217^247^if  ( NodeUtil.mayEffectMutableState ( cArg )  && references > 0 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^} else if  ( NodeUtil.mayHaveSideEffects ( fnNode )  )  {^243^^^^^228^258^} else if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P6_Replace_Expression]^} else if  ( references > 1 )  {^243^^^^^228^258^} else if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P6_Replace_Expression]^} else if  ( length() < 2 )  {^243^^^^^228^258^} else if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P6_Replace_Expression]^} else {^243^^^^^228^258^} else if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^} else if  ( NodeUtil.canBeSideEffected ( cArg )  )  {^243^^^^^228^258^} else if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P2_Replace_Operator]^} else if  ( NodeUtil.canBeSideEffected ( cArg ) || namesAfterSideEffects.contains ( argName )  )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^} else if  ( NodeUtil.canBeSideEffected ( fnNode ) && namesAfterSideEffects.contains ( argName )  )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && argNamesAfterSideEffects.contains ( argName )  )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && argNamesAfterSideEffects.contains ( name )  )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P6_Replace_Expression]^} else if  ( NodeUtil.canBeSideEffected ( cArg ) ) {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P6_Replace_Expression]^} else if  (  namesAfterSideEffects.contains ( argName )  )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P6_Replace_Expression]^} else if  ( references > 1 )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P6_Replace_Expression]^} else if  ( length() < 2 )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P6_Replace_Expression]^} else {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^} else if  ( NodeUtil.mayHaveSideEffects ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P2_Replace_Operator]^} else if  ( references == 1 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^} else if  ( references > -3 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^} else if  ( type > 1 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P6_Replace_Expression]^} else if  ( length() < 2 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P6_Replace_Expression]^} else {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^safe = ! ( convention.isExported ( argName )  ) ;^255^^^^^240^270^safe = ! ( convention.isExported ( name )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^safe = ! ( name.isExported ( convention )  ) ;^255^^^^^240^270^safe = ! ( convention.isExported ( name )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^safe =  ! ( null.isExported ( name )  ) ;^255^^^^^240^270^safe = ! ( convention.isExported ( name )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe = false;^263^^^^^248^278^safe = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^safe = false;safe = true;^263^^^^^248^278^safe = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^sideEffect = true;safe = true;^263^^^^^248^278^safe = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P2_Replace_Operator]^safe =  ( cArg.getString (  ) .length (  )  <= 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length (  )  < references ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() + 3  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^safe =  ( fnNode.getString (  ) .length (  )  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^safe =  ( cArg.getString (  ) .length (  )  < 0  ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe = true;^269^^^^^254^284^safe = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^safe = true;safe = false;^269^^^^^254^284^safe = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P1_Replace_Type]^char name = cArg.getchar (  ) ;^254^^^^^239^269^String name = cArg.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^String name = fnNode.getString (  ) ;^254^^^^^239^269^String name = cArg.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^String name = fnNode .getParent (  )  ;^254^^^^^239^269^String name = cArg.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = cArg.getString (  ) ;^254^^^^^239^269^String name = cArg.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^int type = parent.getType (  ) ;String name = cArg.getString (  ) ;^254^^^^^239^269^String name = cArg.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^String argName = entry.getKey (  ) ;String name = cArg.getString (  ) ;^254^^^^^239^269^String name = cArg.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^String name = node.getString (  ) ;String name = cArg.getString (  ) ;^254^^^^^239^269^String name = cArg.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^int type = n.getType (  ) ;String name = cArg.getString (  ) ;^254^^^^^239^269^String name = cArg.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^switch  ( fnNode.getType (  )  )  {^252^^^^^237^267^switch  ( cArg.getType (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^252^253^254^^^237^267^switch  ( cArg.getType (  )  )  { case Token.NAME: String name = cArg.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^254^^^^^239^269^String name = cArg.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^set.add ( n.getString (  )  ) ;String name = cArg.getString (  ) ;^254^^^^^239^269^String name = cArg.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^cArg = cArg.getNext (  ) ;String name = cArg.getString (  ) ;^254^^^^^239^269^String name = cArg.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^255^256^^^^240^270^safe = ! ( convention.isExported ( name )  ) ; break;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() - 4  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^266^267^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ; break;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() - 1  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length (  )  < -3 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() + 4  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^String name = cArg .getParent (  )  ;^254^^^^^239^269^String name = cArg.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^switch  ( cArg .getString (  )   )  {^252^^^^^237^267^switch  ( cArg.getType (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^switch  ( fnNode .getString (  )   )  {^252^^^^^237^267^switch  ( cArg.getType (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^254^255^^^^239^269^String name = cArg.getString (  ) ; safe = ! ( convention.isExported ( name )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^255^^^^^240^270^safe = ! ( convention.isExported ( name )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() + 8  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^safe =  ( cArg.getString (  )  .getNext (  )   < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^safe =  ( cArg .getParent (  )  .length (  )  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^safe =  ( fnNode .getParent (  )  .length (  )  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe = true;^249^^^^^247^272^safe = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^safe = true;safe = false;^249^^^^^247^272^safe = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P2_Replace_Operator]^} else if  ( references >= 1 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^} else if  ( references > 0 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length (  )  < anonArg ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() - 8  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() - 3  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe = true;^249^^^^^234^264^safe = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^safe = true;safe = false;^249^^^^^234^264^safe = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length (  )  < type ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P13_Insert_Block]^if  ( isLoopStructure ( node )  )  {      ( loopsEntered ) ++; }^247^^^^^232^262^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^&& namesAfterSideEffects.contains ( name )  )  {^248^^^^^233^263^&& namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^&& argName.contains ( namesAfterSideEffects )  )  {^248^^^^^233^263^&& namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^248^249^^^^233^263^&& namesAfterSideEffects.contains ( argName )  )  { safe = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() - 2  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe = true;^246^^^^^231^261^safe = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^safe = true;safe = false;^246^^^^^231^261^safe = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects .clear (  )   )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^} else if  ( references > 2 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^}  if  ( references > 1L )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P2_Replace_Operator]^safe =  ( cArg.getString (  ) .length (  )  > 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() + 6  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() - 7  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^safe =  ( fnNode.getString (  )  .getNext (  )   < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() - 6  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() + 5  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^} else if  ( references > references )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^} else if  ( references > 1L )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length (  )  < 6 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length (  )  < 7 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^} else if  ( NodeUtil .canBeSideEffected ( fnNode )   )  {^243^^^^^228^258^} else if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^&& namesAfterSideEffects .clear (  )   )  {^248^^^^^233^263^&& namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() + 7  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe = true;^242^^^^^227^257^safe = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^safe = true;safe = false;^242^^^^^227^257^safe = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^}  if  ( NodeUtil.canBeSideEffected ( cArg ) ) {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P2_Replace_Operator]^} else if  ( references < 1 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^} else if  ( references > loopsEntered )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^}  if  ( references > 4 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length (  )  <  ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() + 1  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() - 5  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() - 0  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^} else if  ( references > -6 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^} else if  ( type > 1 << 1 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length (  )  < -1 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() + 0  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^} else if  ( NodeUtil.canBeSideEffected ( argName ) && namesAfterSideEffects.contains ( cArg )  )  {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^}  if  ( NodeUtil.canBeSideEffected ( fnNode ) ) {^247^248^^^^232^262^} else if  ( NodeUtil.canBeSideEffected ( cArg ) && namesAfterSideEffects.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^}  if  ( type > 4 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P2_Replace_Operator]^safe =  ( cArg.getString (  ) .length (  )  == 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() + 9  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length (  )  < loopsEntered ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^} else if  ( references > type )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^} else if  ( references > 3 )  {^250^^^^^235^265^} else if  ( references > 1 )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length() - 9  < 2 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^if  ( !sideEffectSeen )  {^274^^^^^259^289^if  ( !safe )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P15_Unwrap_Block]^namesNeedingTemps.add(argName);^274^275^276^^^259^289^if  ( !safe )  { namesNeedingTemps.add ( argName ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P16_Remove_Block]^^274^275^276^^^259^289^if  ( !safe )  { namesNeedingTemps.add ( argName ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^namesNeedingTemps.add ( name ) ;^275^^^^^260^290^namesNeedingTemps.add ( argName ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^275^^^^^260^290^namesNeedingTemps.add ( argName ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P12_Insert_Condition]^if  ( namesNeedingTemps.contains ( argName )  )  { namesNeedingTemps.add ( argName ) ; }^275^^^^^260^290^namesNeedingTemps.add ( argName ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P13_Insert_Block]^if  ( !safe )  {     namesNeedingTemps.add ( argName ) ; }^275^^^^^260^290^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^safe =  ( cArg.getString (  ) .length (  )  < -6 ) ;^266^^^^^251^281^safe =  ( cArg.getString (  ) .length (  )  < 2 ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P1_Replace_Type]^char argName = entry.getKey (  ) ;^224^^^^^209^239^String argName = entry.getKey (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^String argName = 4.getKey (  ) ;^224^^^^^209^239^String argName = entry.getKey (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^String argName = entry .getValue (  )  ;^224^^^^^209^239^String argName = entry.getKey (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String argName = entry.getKey (  ) ;^224^^^^^209^239^String argName = entry.getKey (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^String name = cArg.getString (  ) ;String argName = entry.getKey (  ) ;^224^^^^^209^239^String argName = entry.getKey (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^Set<String> unsafeNames = Sets.newHashSet (  ) ;String argName = entry.getKey (  ) ;^224^^^^^209^239^String argName = entry.getKey (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^String name = node.getString (  ) ;String argName = entry.getKey (  ) ;^224^^^^^209^239^String argName = entry.getKey (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^Set<String> parameters = argMap.keySet (  ) ;String argName = entry.getKey (  ) ;^224^^^^^209^239^String argName = entry.getKey (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^Node cArg = entry.getValue (  ) ;String argName = entry.getKey (  ) ;^224^^^^^209^239^String argName = entry.getKey (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^Node cArg = 3.getValue (  ) ;^228^^^^^213^243^Node cArg = entry.getValue (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^String argName = entry.getKey (  ) ;Node cArg = entry.getValue (  ) ;^228^^^^^213^243^Node cArg = entry.getValue (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^Node block = fnNode.getLastChild (  ) ;Node cArg = entry.getValue (  ) ;^228^^^^^213^243^Node cArg = entry.getValue (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^int type = n.getType (  ) ;Node cArg = entry.getValue (  ) ;^228^^^^^213^243^Node cArg = entry.getValue (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^boolean safe = false;^229^^^^^214^244^boolean safe = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^boolean sideEffect = false;boolean safe = true;^229^^^^^214^244^boolean safe = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P1_Replace_Type]^short  references = NodeUtil.getNameReferenceCount ( block, argName ) ;^230^^^^^215^245^int references = NodeUtil.getNameReferenceCount ( block, argName ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^int references = NodeUtil.getNameReferenceCount ( fnNode, argName ) ;^230^^^^^215^245^int references = NodeUtil.getNameReferenceCount ( block, argName ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^int references = NodeUtil.getNameReferenceCount ( block, name ) ;^230^^^^^215^245^int references = NodeUtil.getNameReferenceCount ( block, argName ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^int references = NodeUtil.getNameReferenceCount (  argName ) ;^230^^^^^215^245^int references = NodeUtil.getNameReferenceCount ( block, argName ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^int references = NodeUtil.getNameReferenceCount ( block ) ;^230^^^^^215^245^int references = NodeUtil.getNameReferenceCount ( block, argName ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^int references = NodeUtil.getNameReferenceCount ( argName, block ) ;^230^^^^^215^245^int references = NodeUtil.getNameReferenceCount ( block, argName ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^for  ( Map.Entry<String, Node> entry : argMap .keySet (  )   )  {^223^^^^^208^238^for  ( Map.Entry<String, Node> entry : argMap.entrySet (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^223^224^225^226^227^208^238^for  ( Map.Entry<String, Node> entry : argMap.entrySet (  )  )  { String argName = entry.getKey (  ) ; if  ( namesNeedingTemps.contains ( argName )  )  { continue; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^224^^^^^209^239^String argName = entry.getKey (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^if  ( namesNeedingTemps .clear (  )   )  {^225^^^^^210^240^if  ( namesNeedingTemps.contains ( argName )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P13_Insert_Block]^if  ( namesNeedingTemps.contains ( argName )  )  {     continue; }^225^^^^^210^240^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^Node cArg = entry .getKey (  )  ;^228^^^^^213^243^Node cArg = entry.getValue (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^228^^^^^213^243^Node cArg = entry.getValue (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^cArg = cArg.getNext (  ) ;Node cArg = entry.getValue (  ) ;^228^^^^^213^243^Node cArg = entry.getValue (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^int references = NodeUtil .getFnParameters ( fnNode )  ;^230^^^^^215^245^int references = NodeUtil.getNameReferenceCount ( block, argName ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P14_Delete_Statement]^^230^^^^^215^245^int references = NodeUtil.getNameReferenceCount ( block, argName ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^} else if  ( NodeUtil .canBeSideEffected ( block )   )  {^243^^^^^228^258^} else if  ( NodeUtil.mayHaveSideEffects ( cArg )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] maybeAddTempsForCallArguments [RETURN_TYPE] void   Node fnNode Node> argMap String> namesNeedingTemps CodingConvention convention [VARIABLES] Entry  entry  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  Node  block  cArg  fnNode  CodingConvention  convention  String  argName  name  Map  argMap  int  anonArg  loopsEntered  references  type  
[P11_Insert_Donor_Statement]^Set<String> set = Sets.newHashSet (  ) ;Set<String> locals = Sets.newHashSet ( parameters ) ;^293^^^^^289^303^Set<String> locals = Sets.newHashSet ( parameters ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P11_Insert_Donor_Statement]^Set<String> unsafeNames = Sets.newHashSet (  ) ;Set<String> locals = Sets.newHashSet ( parameters ) ;^293^^^^^289^303^Set<String> locals = Sets.newHashSet ( parameters ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P14_Delete_Statement]^^293^294^^^^289^303^Set<String> locals = Sets.newHashSet ( parameters ) ; gatherLocalNames ( root, locals ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P5_Replace_Variable]^gatherLocalNames (  locals ) ;^294^^^^^289^303^gatherLocalNames ( root, locals ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P5_Replace_Variable]^gatherLocalNames ( root ) ;^294^^^^^289^303^gatherLocalNames ( root, locals ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P5_Replace_Variable]^gatherLocalNames ( locals, root ) ;^294^^^^^289^303^gatherLocalNames ( root, locals ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P7_Replace_Invocation]^canNameValueChange ( root, locals ) ;^294^^^^^289^303^gatherLocalNames ( root, locals ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P14_Delete_Statement]^^294^^^^^289^303^gatherLocalNames ( root, locals ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P11_Insert_Donor_Statement]^gatherLocalNames ( c, names ) ;gatherLocalNames ( root, locals ) ;^294^^^^^289^303^gatherLocalNames ( root, locals ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P4_Replace_Constructor]^ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect (  locals ) ;^296^297^^^^289^303^ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect ( parameters, locals ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P4_Replace_Constructor]^ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect ( parameters ) ;^296^297^^^^289^303^ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect ( parameters, locals ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P5_Replace_Variable]^ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect ( locals, parameters ) ;^296^297^^^^289^303^ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect ( parameters, locals ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P5_Replace_Variable]^ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect ( parameters, null ) ;^296^297^^^^289^303^ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect ( parameters, locals ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P11_Insert_Donor_Statement]^Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect ( parameters, block ) ;ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect ( parameters, locals ) ;^296^297^^^^289^303^ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect ( parameters, locals ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P5_Replace_Variable]^NodeUtil.visitPostOrder (  collector, collector ) ;^298^299^300^301^^289^303^NodeUtil.visitPostOrder ( root, collector, collector ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P5_Replace_Variable]^NodeUtil.visitPostOrder ( root,  collector ) ;^298^299^300^301^^289^303^NodeUtil.visitPostOrder ( root, collector, collector ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P5_Replace_Variable]^NodeUtil.visitPostOrder ( collector, root, collector ) ;^298^299^300^301^^289^303^NodeUtil.visitPostOrder ( root, collector, collector ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P8_Replace_Mix]^NodeUtil .isLoopStructure ( root )  ;^298^299^300^301^^289^303^NodeUtil.visitPostOrder ( root, collector, collector ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P7_Replace_Invocation]^return collector.apply (  ) ;^302^^^^^289^303^return collector.getResults (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P14_Delete_Statement]^^302^^^^^289^303^return collector.getResults (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] findParametersReferencedAfterSideEffect [RETURN_TYPE] Set   String> parameters Node root [VARIABLES] ReferencedAfterSideEffect  collector  Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  root  
[P7_Replace_Invocation]^if  ( NodeUtil.getFnParameters ( node )  )  {^345^^^^^343^353^if  ( NodeUtil.isLoopStructure ( node )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P9_Replace_Statement]^if  ( NodeUtil.isLoopStructure ( n )  )  {^345^^^^^343^353^if  ( NodeUtil.isLoopStructure ( node )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( node )  )  {^345^^^^^343^353^if  ( NodeUtil.isLoopStructure ( node )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P15_Unwrap_Block]^(loopsEntered)++;^345^346^347^^^343^353^if  ( NodeUtil.isLoopStructure ( node )  )  { loopsEntered++; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P16_Remove_Block]^^345^346^347^^^343^353^if  ( NodeUtil.isLoopStructure ( node )  )  { loopsEntered++; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P13_Insert_Block]^if  ( isLoopStructure ( node )  )  {      ( loopsEntered ) ++; }^345^^^^^343^353^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P2_Replace_Operator]^return ! ( sideEffectSeen || parameters.size (  )  == parametersReferenced.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P2_Replace_Operator]^return ! ( sideEffectSeen && parameters.size (  )  != parametersReferenced.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P3_Replace_Literal]^return ! ( sideEffectSeen && parameters.size() - 3  == parametersReferenced.size() - 3  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P5_Replace_Variable]^return ! ( parametersReferenced && parameters.size (  )  == sideEffectSeen.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P5_Replace_Variable]^return ! ( parameters && sideEffectSeen.size (  )  == parametersReferenced.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P5_Replace_Variable]^return ! ( sideEffectSeen && parametersReferenced.size (  )  == parameters.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P7_Replace_Invocation]^return ! ( sideEffectSeen && parameters.clear (  )  == parametersReferenced.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P8_Replace_Mix]^return ! ( safe && parameters.clear (  )  == parametersReferenced.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P3_Replace_Literal]^&& parameters.size() + 6  == parametersReferenced.size() + 6  ) ;^352^^^^^343^353^&& parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P7_Replace_Invocation]^&& parameters.clear (  )  == parametersReferenced.size (  )  ) ;^352^^^^^343^353^&& parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P14_Delete_Statement]^^352^^^^^343^353^&& parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P3_Replace_Literal]^&& parameters.size() + 3  == parametersReferenced.size() + 3  ) ;^352^^^^^343^353^&& parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  node  
[P2_Replace_Operator]^return loopsEntered == 0;^356^^^^^355^357^return loopsEntered != 0;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inLoop [RETURN_TYPE] boolean   [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  
[P3_Replace_Literal]^return loopsEntered != loopsEntered;^356^^^^^355^357^return loopsEntered != 0;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inLoop [RETURN_TYPE] boolean   [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  
[P5_Replace_Variable]^return type != 0;^356^^^^^355^357^return loopsEntered != 0;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inLoop [RETURN_TYPE] boolean   [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  
[P8_Replace_Mix]^return loopsEntered  ;^356^^^^^355^357^return loopsEntered != 0;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] inLoop [RETURN_TYPE] boolean   [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  int  anonArg  loopsEntered  references  type  
[P7_Replace_Invocation]^if  ( NodeUtil.getFnParameters ( n )  )  {^361^^^^^359^389^if  ( NodeUtil.isLoopStructure ( n )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P9_Replace_Statement]^if  ( NodeUtil.isLoopStructure ( node )  )  {^361^^^^^359^389^if  ( NodeUtil.isLoopStructure ( n )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P2_Replace_Operator]^if  ( !inLoop (  )  || !sideEffectSeen )  {^363^^^^^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P5_Replace_Variable]^if  ( !inLoop (  )  && !safe )  {^363^^^^^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P6_Replace_Expression]^if  ( !inLoop (  )  ) {^363^^^^^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P6_Replace_Expression]^if  (  !sideEffectSeen )  {^363^^^^^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P7_Replace_Invocation]^if  ( !getResults (  )  && !sideEffectSeen )  {^363^^^^^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P8_Replace_Mix]^if  (  !safe )  {^363^^^^^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P9_Replace_Statement]^if  ( inLoop (  )  || sideEffectSeen )  {^363^^^^^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P15_Unwrap_Block]^parametersReferenced.clear();^363^364^^^367^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {  parametersReferenced.clear (  ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P16_Remove_Block]^^363^364^^^367^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {  parametersReferenced.clear (  ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P7_Replace_Invocation]^parametersReferenced.size (  ) ;^367^^^^^359^389^parametersReferenced.clear (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P14_Delete_Statement]^^367^^^^^359^389^parametersReferenced.clear (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P11_Insert_Donor_Statement]^parametersReferenced.add ( name ) ;parametersReferenced.clear (  ) ;^367^^^^^359^389^parametersReferenced.clear (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P13_Insert_Block]^if  ( isLoopStructure ( node )  )  {      ( loopsEntered ) ++; }^361^^^^^359^389^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P5_Replace_Variable]^if  ( !safe )  {^371^^^^^359^389^if  ( !sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P15_Unwrap_Block]^if (hasNonLocalSideEffect(n)) {    sideEffectSeen = true;};^371^372^373^374^375^359^389^if  ( !sideEffectSeen )  {  if  ( hasNonLocalSideEffect ( n )  )  { sideEffectSeen = true; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P16_Remove_Block]^^371^372^373^374^375^359^389^if  ( !sideEffectSeen )  {  if  ( hasNonLocalSideEffect ( n )  )  { sideEffectSeen = true; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P13_Insert_Block]^if  ( hasNonLocalSideEffect ( n )  )  {     sideEffectSeen = true; }^371^^^^^359^389^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P7_Replace_Invocation]^if  ( isLocalName ( n )  )  {^373^^^^^359^389^if  ( hasNonLocalSideEffect ( n )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P15_Unwrap_Block]^sideEffectSeen = true;^373^374^375^^^359^389^if  ( hasNonLocalSideEffect ( n )  )  { sideEffectSeen = true; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P16_Remove_Block]^^373^374^375^^^359^389^if  ( hasNonLocalSideEffect ( n )  )  { sideEffectSeen = true; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P13_Insert_Block]^if  ( ! ( isLocalName ( lhs )  )  )  {     sideEffect = true; }^373^^^^^359^389^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P13_Insert_Block]^if  ( ! ( sideEffectSeen )  )  {     if  ( hasNonLocalSideEffect ( n )  )  {         sideEffectSeen = true;     } }^373^^^^^359^389^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P3_Replace_Literal]^sideEffectSeen = false;^374^^^^^359^389^sideEffectSeen = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P11_Insert_Donor_Statement]^sideEffect = true;sideEffectSeen = true;^374^^^^^359^389^sideEffectSeen = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P2_Replace_Operator]^if  ( inLoop (  )  && sideEffectSeen )  {^380^^^^^359^389^if  ( inLoop (  )  || sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P5_Replace_Variable]^if  ( inLoop (  )  || safe )  {^380^^^^^359^389^if  ( inLoop (  )  || sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P6_Replace_Expression]^if  ( inLoop (  )  ) {^380^^^^^359^389^if  ( inLoop (  )  || sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P6_Replace_Expression]^if  (  sideEffectSeen )  {^380^^^^^359^389^if  ( inLoop (  )  || sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P6_Replace_Expression]^if  ( n.getType() == NAME )  {^380^^^^^359^389^if  ( inLoop (  )  || sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P7_Replace_Invocation]^if  ( getResults (  )  || sideEffectSeen )  {^380^^^^^359^389^if  ( inLoop (  )  || sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P8_Replace_Mix]^if  ( getResults (  )  ) {^380^^^^^359^389^if  ( inLoop (  )  || sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P9_Replace_Statement]^if  ( !inLoop (  )  && !sideEffectSeen )  {^380^^^^^359^389^if  ( inLoop (  )  || sideEffectSeen )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     String name = n.getString (  ) ;     if  ( parameters.contains ( name )  )  {         parametersReferenced.add ( name ) ;     } }^380^^^^^359^389^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P2_Replace_Operator]^if  ( n.getType (  )  < Token.NAME )  {^382^^^^^359^389^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P7_Replace_Invocation]^if  ( n .getString (  )   == Token.NAME )  {^382^^^^^359^389^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P9_Replace_Statement]^if  ( node.getType (  )  == Token.NAME )  {^382^^^^^359^389^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P15_Unwrap_Block]^java.lang.String name = n.getString(); if (parameters.contains(name)) {    parametersReferenced.add(name);};^382^383^384^385^386^359^389^if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; if  ( parameters.contains ( name )  )  { parametersReferenced.add ( name ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P16_Remove_Block]^^382^383^384^385^386^359^389^if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; if  ( parameters.contains ( name )  )  { parametersReferenced.add ( name ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P5_Replace_Variable]^if  ( name.contains ( parameters )  )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P7_Replace_Invocation]^if  ( parameters.add ( name )  )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P9_Replace_Statement]^if  ( namesNeedingTemps.contains ( argName )  )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P15_Unwrap_Block]^parametersReferenced.add(name);^384^385^386^^^359^389^if  ( parameters.contains ( name )  )  { parametersReferenced.add ( name ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P16_Remove_Block]^^384^385^386^^^359^389^if  ( parameters.contains ( name )  )  { parametersReferenced.add ( name ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P7_Replace_Invocation]^parametersReferenced.contains ( name ) ;^385^^^^^359^389^parametersReferenced.add ( name ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P14_Delete_Statement]^^385^^^^^359^389^parametersReferenced.add ( name ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P11_Insert_Donor_Statement]^parametersReferenced.clear (  ) ;parametersReferenced.add ( name ) ;^385^^^^^359^389^parametersReferenced.add ( name ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P1_Replace_Type]^char name = n.getchar (  ) ;^383^^^^^359^389^String name = n.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P11_Insert_Donor_Statement]^String name = cArg.getString (  ) ;String name = n.getString (  ) ;^383^^^^^359^389^String name = n.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P11_Insert_Donor_Statement]^String argName = entry.getKey (  ) ;String name = n.getString (  ) ;^383^^^^^359^389^String name = n.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P11_Insert_Donor_Statement]^String name = node.getString (  ) ;String name = n.getString (  ) ;^383^^^^^359^389^String name = n.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P11_Insert_Donor_Statement]^int type = n.getType (  ) ;String name = n.getString (  ) ;^383^^^^^359^389^String name = n.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P8_Replace_Mix]^String name = n .getParent (  )  ;^383^^^^^359^389^String name = n.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P14_Delete_Statement]^^383^^^^^359^389^String name = n.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P11_Insert_Donor_Statement]^set.add ( n.getString (  )  ) ;String name = n.getString (  ) ;^383^^^^^359^389^String name = n.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P11_Insert_Donor_Statement]^names.add ( n.getString (  )  ) ;String name = n.getString (  ) ;^383^^^^^359^389^String name = n.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P11_Insert_Donor_Statement]^unsafe.add ( n.getString (  )  ) ;String name = n.getString (  ) ;^383^^^^^359^389^String name = n.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P7_Replace_Invocation]^if  ( parameters .clear (  )   )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P5_Replace_Variable]^if  ( 2.contains ( name )  )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P8_Replace_Mix]^if  ( 3.contains ( name )  )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P2_Replace_Operator]^if  ( n.getType (  )  >= Token.NAME )  {^382^^^^^359^389^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P5_Replace_Variable]^if  ( 1.contains ( name )  )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P8_Replace_Mix]^parametersReferenced .contains ( 1 )  ;^385^^^^^359^389^parametersReferenced.add ( name ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  n  
[P3_Replace_Literal]^boolean sideEffect = true;^395^^^^^394^416^boolean sideEffect = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^boolean safe = true;boolean sideEffect = false;^395^^^^^394^416^boolean sideEffect = false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P1_Replace_Type]^short  type = n.getType (  ) ;^396^^^^^394^416^int type = n.getType (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P5_Replace_Variable]^int type = lhs.getType (  ) ;^396^^^^^394^416^int type = n.getType (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;int type = n.getType (  ) ;^396^^^^^394^416^int type = n.getType (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^String name = cArg.getString (  ) ;int type = n.getType (  ) ;^396^^^^^394^416^int type = n.getType (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^int type = parent.getType (  ) ;int type = n.getType (  ) ;^396^^^^^394^416^int type = n.getType (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^String name = node.getString (  ) ;int type = n.getType (  ) ;^396^^^^^394^416^int type = n.getType (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^Node cArg = entry.getValue (  ) ;int type = n.getType (  ) ;^396^^^^^394^416^int type = n.getType (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P14_Delete_Statement]^^396^^^^^394^416^int type = n.getType (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P2_Replace_Operator]^if  ( NodeUtil.isAssignmentOp ( n ) && type == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P2_Replace_Operator]^if  ( NodeUtil.isAssignmentOp ( n ) || type != Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P2_Replace_Operator]^if  ( NodeUtil.isAssignmentOp ( n ) || type <= Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P5_Replace_Variable]^if  ( NodeUtil.isAssignmentOp ( n ) || references == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P6_Replace_Expression]^if  ( NodeUtil.isAssignmentOp ( n ) ) {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P6_Replace_Expression]^if  (  type == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P6_Replace_Expression]^if  ( isAssignmentOp(n || type == INC) )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P6_Replace_Expression]^if  ( type == INC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P6_Replace_Expression]^if  ( type == DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P6_Replace_Expression]^if  ( type == CALL )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P6_Replace_Expression]^if  ( type == NEW )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P6_Replace_Expression]^if  ( type == DELPROP )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n ) || type == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type > Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type >= Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type != Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P5_Replace_Variable]^} else if  ( references == Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P6_Replace_Expression]^} else if  ( type == NEW )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P6_Replace_Expression]^} else if  ( type == DELPROP )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P6_Replace_Expression]^} else {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P8_Replace_Mix]^}  if  ( references == Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P9_Replace_Statement]^} else if  ( type == Token.DELPROP )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P9_Replace_Statement]^} else if  ( type == Token.NEW )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type != Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type >= Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P5_Replace_Variable]^} else if  ( references == Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P5_Replace_Variable]^} else if  ( type == Token.null )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P6_Replace_Expression]^} else if  ( type == DELPROP )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P6_Replace_Expression]^} else {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P8_Replace_Mix]^}  if  ( references == Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P9_Replace_Statement]^} else if  ( type == Token.DELPROP )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P9_Replace_Statement]^} else if  ( type == Token.CALL )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P15_Unwrap_Block]^sideEffect = com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n);^409^410^411^412^413^394^416^} else if  ( type == Token.NEW )  { sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ; } else if  ( type == Token.DELPROP )  { sideEffect = true; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P16_Remove_Block]^^409^410^411^412^413^394^416^} else if  ( type == Token.NEW )  { sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ; } else if  ( type == Token.DELPROP )  { sideEffect = true; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P13_Insert_Block]^if  ( type ==  ( CALL )  )  {     sideEffect = functionCallHasSideEffects ( n ) ; }else     if  ( type ==  ( NEW )  )  {         sideEffect = constructorCallHasSideEffects ( n ) ;     }else         if  ( type ==  ( DELPROP )  )  {             sideEffect = true;         }^409^^^^^394^416^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type != Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P5_Replace_Variable]^} else if  ( references == Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P6_Replace_Expression]^} else {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P9_Replace_Statement]^} else if  ( type == Token.CALL )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P9_Replace_Statement]^} else if  ( type == Token.NEW )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P15_Unwrap_Block]^sideEffect = true;^411^412^413^^^394^416^} else if  ( type == Token.DELPROP )  { sideEffect = true; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P16_Remove_Block]^^411^412^413^^^394^416^} else if  ( type == Token.DELPROP )  { sideEffect = true; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P3_Replace_Literal]^sideEffect = false;^412^^^^^394^416^sideEffect = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^sideEffectSeen = true;sideEffect = true;^412^^^^^394^416^sideEffect = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^safe = true;sideEffect = true;^412^^^^^394^416^sideEffect = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P5_Replace_Variable]^sideEffect = NodeUtil.constructorCallHasSideEffects ( lhs ) ;^410^^^^^394^416^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P7_Replace_Invocation]^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^410^^^^^394^416^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P7_Replace_Invocation]^sideEffect = NodeUtil .functionCallHasSideEffects ( lhs )  ;^410^^^^^394^416^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P8_Replace_Mix]^sideEffect =  NodeUtil.colhsstructorCallHasSideEffects ( lhs ) ;^410^^^^^394^416^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^410^^^^^394^416^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P14_Delete_Statement]^^410^^^^^394^416^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P13_Insert_Block]^if  ( isLoopStructure ( node )  )  {      ( loopsEntered ) ++; }^410^^^^^394^416^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P8_Replace_Mix]^sideEffect =  NodeUtil.conullstructorCallHasSideEffects ( null ) ;^410^^^^^394^416^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P5_Replace_Variable]^sideEffect = NodeUtil.functionCallHasSideEffects ( lhs ) ;^408^^^^^394^416^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P7_Replace_Invocation]^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^408^^^^^394^416^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P8_Replace_Mix]^sideEffect =  NodeUtil.fulhsctiolhsCallHasSideEffects ( lhs ) ;^408^^^^^394^416^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^408^^^^^394^416^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P14_Delete_Statement]^^408^^^^^394^416^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type < Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P5_Replace_Variable]^} else if  ( type == Token.1 )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type >= Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P5_Replace_Variable]^if  ( !isLocalName ( n )  )  {^404^^^^^394^416^if  ( !isLocalName ( lhs )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P7_Replace_Invocation]^if  ( !apply ( lhs )  )  {^404^^^^^394^416^if  ( !isLocalName ( lhs )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P15_Unwrap_Block]^sideEffect = true;^404^405^406^^^394^416^if  ( !isLocalName ( lhs )  )  { sideEffect = true; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P16_Remove_Block]^^404^405^406^^^394^416^if  ( !isLocalName ( lhs )  )  { sideEffect = true; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P13_Insert_Block]^if  ( hasNonLocalSideEffect ( n )  )  {     sideEffectSeen = true; }^404^^^^^394^416^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P3_Replace_Literal]^sideEffect = false;^405^^^^^394^416^sideEffect = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^sideEffectSeen = true;sideEffect = true;^405^^^^^394^416^sideEffect = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^safe = true;sideEffect = true;^405^^^^^394^416^sideEffect = true;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^Node block = fnNode.getLastChild (  ) ;Node lhs = n.getFirstChild (  ) ;^402^^^^^394^416^Node lhs = n.getFirstChild (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^Node cArg = callNode.getFirstChild (  ) .getNext (  ) ;Node lhs = n.getFirstChild (  ) ;^402^^^^^394^416^Node lhs = n.getFirstChild (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P5_Replace_Variable]^Node lhs = lhs.getFirstChild (  ) ;^402^^^^^394^416^Node lhs = n.getFirstChild (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P14_Delete_Statement]^^402^^^^^394^416^Node lhs = n.getFirstChild (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type < Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type <= Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P5_Replace_Variable]^} else if  ( type == Token.null )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P8_Replace_Mix]^}  if  ( references == Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type > Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P7_Replace_Invocation]^Node lhs = n .getLastChild (  )  ;^402^^^^^394^416^Node lhs = n.getFirstChild (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P5_Replace_Variable]^if  ( NodeUtil.isAssignmentOp ( lhs ) || type == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P7_Replace_Invocation]^if  ( NodeUtil .isFunctionObjectApply ( lhs )  || type == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P13_Insert_Block]^if  ( isLoopStructure ( node )  )  {      ( loopsEntered ) ++; }^399^^^^^394^416^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P7_Replace_Invocation]^sideEffect = NodeUtil .constructorCallHasSideEffects ( lhs )  ;^408^^^^^394^416^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P5_Replace_Variable]^return sideEffectSeen;^415^^^^^394^416^return sideEffect;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  lhs  n  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssignmentOp ( node )  )  {^422^^^^^421^427^if  ( NodeUtil.isName ( node )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P9_Replace_Statement]^if  ( NodeUtil.isLoopStructure ( node )  )  {^422^^^^^421^427^if  ( NodeUtil.isName ( node )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P15_Unwrap_Block]^java.lang.String name = node.getString(); return locals.contains(name);^422^423^424^425^^421^427^if  ( NodeUtil.isName ( node )  )  { String name = node.getString (  ) ; return locals.contains ( name ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P16_Remove_Block]^^422^423^424^425^^421^427^if  ( NodeUtil.isName ( node )  )  { String name = node.getString (  ) ; return locals.contains ( name ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P5_Replace_Variable]^return name.contains ( locals ) ;^424^^^^^421^427^return locals.contains ( name ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P7_Replace_Invocation]^return locals.add ( name ) ;^424^^^^^421^427^return locals.contains ( name ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P8_Replace_Mix]^return locals .clear (  )  ;^424^^^^^421^427^return locals.contains ( name ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P12_Insert_Condition]^if  ( parameters.contains ( name )  )  { return locals.contains ( name ) ; }^424^^^^^421^427^return locals.contains ( name ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P1_Replace_Type]^char name = node.getchar (  ) ;^423^^^^^421^427^String name = node.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P7_Replace_Invocation]^String name = node .getParent (  )  ;^423^^^^^421^427^String name = node.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = node.getString (  ) ;^423^^^^^421^427^String name = node.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P11_Insert_Donor_Statement]^String name = cArg.getString (  ) ;String name = node.getString (  ) ;^423^^^^^421^427^String name = node.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P11_Insert_Donor_Statement]^int type = parent.getType (  ) ;String name = node.getString (  ) ;^423^^^^^421^427^String name = node.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P11_Insert_Donor_Statement]^String argName = entry.getKey (  ) ;String name = node.getString (  ) ;^423^^^^^421^427^String name = node.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P11_Insert_Donor_Statement]^Node block = fnNode.getLastChild (  ) ;String name = node.getString (  ) ;^423^^^^^421^427^String name = node.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P11_Insert_Donor_Statement]^int type = n.getType (  ) ;String name = node.getString (  ) ;^423^^^^^421^427^String name = node.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P14_Delete_Statement]^^423^^^^^421^427^String name = node.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P11_Insert_Donor_Statement]^set.add ( n.getString (  )  ) ;String name = node.getString (  ) ;^423^^^^^421^427^String name = node.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P11_Insert_Donor_Statement]^names.add ( n.getString (  )  ) ;String name = node.getString (  ) ;^423^^^^^421^427^String name = node.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P11_Insert_Donor_Statement]^unsafe.add ( n.getString (  )  ) ;String name = node.getString (  ) ;^423^^^^^421^427^String name = node.getString (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P14_Delete_Statement]^^424^^^^^421^427^return locals.contains ( name ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P13_Insert_Block]^if  ( isLoopStructure ( node )  )  {      ( loopsEntered ) ++; }^422^^^^^421^427^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P14_Delete_Statement]^^423^424^^^^421^427^String name = node.getString (  ) ; return locals.contains ( name ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P3_Replace_Literal]^return true;^426^^^^^421^427^return false;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  String  name  int  anonArg  loopsEntered  references  type  Node  node  
[P2_Replace_Operator]^Preconditions.checkState ( n.getType (  )  == Token.FUNCTION ) ;^434^^^^^433^446^Preconditions.checkState ( n.getType (  )  != Token.FUNCTION ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P5_Replace_Variable]^Preconditions.checkState ( c.getType (  )  != Token.FUNCTION ) ;^434^^^^^433^446^Preconditions.checkState ( n.getType (  )  != Token.FUNCTION ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P7_Replace_Invocation]^Preconditions.checkArgument ( n.getType (  )  != Token.FUNCTION ) ;^434^^^^^433^446^Preconditions.checkState ( n.getType (  )  != Token.FUNCTION ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P7_Replace_Invocation]^Preconditions .checkNotNull ( c )  ;^434^^^^^433^446^Preconditions.checkState ( n.getType (  )  != Token.FUNCTION ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P14_Delete_Statement]^^434^^^^^433^446^Preconditions.checkState ( n.getType (  )  != Token.FUNCTION ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P2_Replace_Operator]^if  ( n.getType (  )  <= Token.NAME )  {^435^^^^^433^446^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P5_Replace_Variable]^if  ( c.getType (  )  == Token.NAME )  {^435^^^^^433^446^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P9_Replace_Statement]^if  ( node.getType (  )  == Token.NAME )  {^435^^^^^433^446^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P15_Unwrap_Block]^switch (n.getParent().getType()) {    case com.google.javascript.rhino.Token.VAR :    case com.google.javascript.rhino.Token.CATCH :        names.add(n.getString());};^435^436^437^438^439^433^446^if  ( n.getType (  )  == Token.NAME )  { switch  ( n.getParent (  ) .getType (  )  )  { case Token.VAR: case Token.CATCH: names.add ( n.getString (  )  ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P16_Remove_Block]^^435^436^437^438^439^433^446^if  ( n.getType (  )  == Token.NAME )  { switch  ( n.getParent (  ) .getType (  )  )  { case Token.VAR: case Token.CATCH: names.add ( n.getString (  )  ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     if  ( names.contains ( n.getString (  )  )  )  {         if  ( canNameValueChange ( n, parent )  )  {             unsafe.add ( n.getString (  )  ) ;         }     } }^435^^^^^433^446^[Delete]^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P5_Replace_Variable]^switch  ( c.getParent (  ) .getType (  )  )  {^436^^^^^433^446^switch  ( n.getParent (  ) .getType (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P7_Replace_Invocation]^switch  ( n.getParent (  )  .getString (  )   )  {^436^^^^^433^446^switch  ( n.getParent (  ) .getType (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P7_Replace_Invocation]^switch  ( n .getString (  )  .getType (  )  )  {^436^^^^^433^446^switch  ( n.getParent (  ) .getType (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P8_Replace_Mix]^switch  ( c .getString (  )  .getType (  )  )  {^436^^^^^433^446^switch  ( n.getParent (  ) .getType (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P5_Replace_Variable]^names.add ( c.getString (  )  ) ;^439^^^^^433^446^names.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P7_Replace_Invocation]^names .contains ( 1 )  ;^439^^^^^433^446^names.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P8_Replace_Mix]^names.add ( c .getParent (  )   ) ;^439^^^^^433^446^names.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P14_Delete_Statement]^^439^^^^^433^446^names.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;names.add ( n.getString (  )  ) ;^439^^^^^433^446^names.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P11_Insert_Donor_Statement]^set.add ( n.getString (  )  ) ;names.add ( n.getString (  )  ) ;^439^^^^^433^446^names.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P11_Insert_Donor_Statement]^String name = node.getString (  ) ;names.add ( n.getString (  )  ) ;^439^^^^^433^446^names.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P11_Insert_Donor_Statement]^argMap.put ( fnArg.getString (  ) , cArg ) ;names.add ( n.getString (  )  ) ;^439^^^^^433^446^names.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P11_Insert_Donor_Statement]^unsafe.add ( n.getString (  )  ) ;names.add ( n.getString (  )  ) ;^439^^^^^433^446^names.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P12_Insert_Condition]^if  ( names.contains ( n.getString (  )  )  )  { names.add ( n.getString (  )  ) ; }^439^^^^^433^446^names.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P7_Replace_Invocation]^names.add ( n .getParent (  )   ) ;^439^^^^^433^446^names.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P2_Replace_Operator]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^443^^^^^433^446^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P5_Replace_Variable]^for  ( Node n = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^443^^^^^433^446^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P5_Replace_Variable]^for  ( Node n = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^443^^^^^433^446^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P5_Replace_Variable]^gatherLocalNames ( n, names ) ;^444^^^^^433^446^gatherLocalNames ( c, names ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P5_Replace_Variable]^gatherLocalNames (  names ) ;^444^^^^^433^446^gatherLocalNames ( c, names ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P5_Replace_Variable]^gatherLocalNames ( c ) ;^444^^^^^433^446^gatherLocalNames ( c, names ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P5_Replace_Variable]^gatherLocalNames ( names, c ) ;^444^^^^^433^446^gatherLocalNames ( c, names ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P7_Replace_Invocation]^canNameValueChange ( c, names ) ;^444^^^^^433^446^gatherLocalNames ( c, names ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P8_Replace_Mix]^gatherLocalNames ( c, null ) ;^444^^^^^433^446^gatherLocalNames ( c, names ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P14_Delete_Statement]^^444^^^^^433^446^gatherLocalNames ( c, names ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P11_Insert_Donor_Statement]^gatherLocalNames ( root, locals ) ;gatherLocalNames ( c, names ) ;^444^^^^^433^446^gatherLocalNames ( c, names ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P8_Replace_Mix]^for  ( Node c =  n.getFirstChild (  ) ; n !^443^^^^^433^446^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P5_Replace_Variable]^for  ( Node c = c.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^443^^^^^433^446^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P7_Replace_Invocation]^for  ( Node c = n .getLastChild (  )  ; c != null; c = c.getNext (  )  )  {^443^^^^^433^446^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P14_Delete_Statement]^^443^444^445^^^433^446^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { gatherLocalNames ( c, names ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] gatherLocalNames [RETURN_TYPE] void   Node n String> names [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  c  n  
[P8_Replace_Mix]^Set<String> set = Sets .newHashSet (  )  ;^452^^^^^451^457^Set<String> set = Sets.newHashSet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P11_Insert_Donor_Statement]^Set<String> locals = Sets.newHashSet ( parameters ) ;Set<String> set = Sets.newHashSet (  ) ;^452^^^^^451^457^Set<String> set = Sets.newHashSet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P11_Insert_Donor_Statement]^Set<String> unsafeNames = Sets.newHashSet (  ) ;Set<String> set = Sets.newHashSet (  ) ;^452^^^^^451^457^Set<String> set = Sets.newHashSet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P11_Insert_Donor_Statement]^Set<String> names = getFunctionParameterSet ( fnNode ) ;Set<String> set = Sets.newHashSet (  ) ;^452^^^^^451^457^Set<String> set = Sets.newHashSet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P11_Insert_Donor_Statement]^Set<String> parameters = argMap.keySet (  ) ;Set<String> set = Sets.newHashSet (  ) ;^452^^^^^451^457^Set<String> set = Sets.newHashSet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P14_Delete_Statement]^^452^^^^^451^457^Set<String> set = Sets.newHashSet (  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P5_Replace_Variable]^for  ( Node n : NodeUtil.getFnParameters ( n ) .children (  )  )  {^453^^^^^451^457^for  ( Node n : NodeUtil.getFnParameters ( fnNode ) .children (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P7_Replace_Invocation]^for  ( Node n : NodeUtil.getFnParameters ( fnNode )  .getType (  )   )  {^453^^^^^451^457^for  ( Node n : NodeUtil.getFnParameters ( fnNode ) .children (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P7_Replace_Invocation]^for  ( Node n : NodeUtil.isName ( fnNode ) .children (  )  )  {^453^^^^^451^457^for  ( Node n : NodeUtil.getFnParameters ( fnNode ) .children (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P8_Replace_Mix]^for  ( Node n : NodeUtil.isName ( n ) .children (  )  )  {^453^^^^^451^457^for  ( Node n : NodeUtil.getFnParameters ( fnNode ) .children (  )  )  {^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P14_Delete_Statement]^^453^454^455^^^451^457^for  ( Node n : NodeUtil.getFnParameters ( fnNode ) .children (  )  )  { set.add ( n.getString (  )  ) ; }^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P5_Replace_Variable]^set.add ( fnNode.getString (  )  ) ;^454^^^^^451^457^set.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P14_Delete_Statement]^^454^^^^^451^457^set.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;set.add ( n.getString (  )  ) ;^454^^^^^451^457^set.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P11_Insert_Donor_Statement]^String name = cArg.getString (  ) ;set.add ( n.getString (  )  ) ;^454^^^^^451^457^set.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P11_Insert_Donor_Statement]^String name = node.getString (  ) ;set.add ( n.getString (  )  ) ;^454^^^^^451^457^set.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P11_Insert_Donor_Statement]^names.add ( n.getString (  )  ) ;set.add ( n.getString (  )  ) ;^454^^^^^451^457^set.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P11_Insert_Donor_Statement]^argMap.put ( fnArg.getString (  ) , cArg ) ;set.add ( n.getString (  )  ) ;^454^^^^^451^457^set.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P11_Insert_Donor_Statement]^unsafe.add ( n.getString (  )  ) ;set.add ( n.getString (  )  ) ;^454^^^^^451^457^set.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P12_Insert_Condition]^if  ( names.contains ( n.getString (  )  )  )  { set.add ( n.getString (  )  ) ; }^454^^^^^451^457^set.add ( n.getString (  )  ) ;^[CLASS] FunctionArgumentInjector ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P8_Replace_Mix]^private  Set<String> parameters;^327^^^^^322^332^private final Set<String> parameters;^[CLASS] ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P8_Replace_Mix]^private  Set<String> locals;^328^^^^^323^333^private final Set<String> locals;^[CLASS] ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P3_Replace_Literal]^private boolean sideEffectSeen = true;^329^^^^^324^334^private boolean sideEffectSeen = false;^[CLASS] ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P8_Replace_Mix]^private Set<String> parametersReferenced ;^330^^^^^325^335^private Set<String> parametersReferenced = Sets.newHashSet (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P1_Replace_Type]^private  short  loopsEntered = 0;^331^^^^^326^336^private int loopsEntered = 0;^[CLASS] ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P3_Replace_Literal]^private int loopsEntered = 6;^331^^^^^326^336^private int loopsEntered = 0;^[CLASS] ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P8_Replace_Mix]^private int loopsEntered = 3;^331^^^^^326^336^private int loopsEntered = 0;^[CLASS] ReferencedAfterSideEffect  [METHOD] getFunctionParameterSet [RETURN_TYPE] Set   Node fnNode [VARIABLES] Set  locals  names  namesAfterSideEffects  namesNeedingTemps  parameters  parametersReferenced  set  unsafe  unsafeNames  boolean  safe  sideEffect  sideEffectSeen  int  anonArg  loopsEntered  references  type  Node  fnNode  n  
[P8_Replace_Mix]^this.parameters =  null;^334^^^^^333^336^this.parameters = parameters;^[CLASS] ReferencedAfterSideEffect  [METHOD] <init> [RETURN_TYPE] Set)   String> parameters String> locals [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  
[P8_Replace_Mix]^this.locals =  null;^335^^^^^333^336^this.locals = locals;^[CLASS] ReferencedAfterSideEffect  [METHOD] <init> [RETURN_TYPE] Set)   String> parameters String> locals [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  
[P8_Replace_Mix]^return null;^339^^^^^338^340^return parametersReferenced;^[CLASS] ReferencedAfterSideEffect  [METHOD] getResults [RETURN_TYPE] Set   [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssignmentOp ( node )  )  {^345^^^^^343^353^if  ( NodeUtil.isLoopStructure ( node )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P7_Replace_Invocation]^if  ( NodeUtil .constructorCallHasSideEffects ( node )   )  {^345^^^^^343^353^if  ( NodeUtil.isLoopStructure ( node )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P9_Replace_Statement]^if  ( NodeUtil.isLoopStructure ( n )  )  {^345^^^^^343^353^if  ( NodeUtil.isLoopStructure ( node )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P9_Replace_Statement]^if  ( NodeUtil.isName ( node )  )  {^345^^^^^343^353^if  ( NodeUtil.isLoopStructure ( node )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P15_Unwrap_Block]^(loopsEntered)++;^345^346^347^^^343^353^if  ( NodeUtil.isLoopStructure ( node )  )  { loopsEntered++; }^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P16_Remove_Block]^^345^346^347^^^343^353^if  ( NodeUtil.isLoopStructure ( node )  )  { loopsEntered++; }^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P13_Insert_Block]^if  ( isLoopStructure ( node )  )  {      ( loopsEntered ) ++; }^345^^^^^343^353^[Delete]^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P2_Replace_Operator]^return ! ( sideEffectSeen || parameters.size (  )  == parametersReferenced.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P2_Replace_Operator]^return ! ( sideEffectSeen && parameters.size (  )  != parametersReferenced.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P3_Replace_Literal]^return ! ( sideEffectSeen && parameters.size() + 9  == parametersReferenced.size() + 9  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P5_Replace_Variable]^return ! ( parameters && sideEffectSeen.size (  )  == parametersReferenced.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P5_Replace_Variable]^return ! ( sideEffectSeen && parametersReferenced.size (  )  == parameters.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P7_Replace_Invocation]^return ! ( sideEffectSeen && parameters.clear (  )  == parametersReferenced.size (  )  ) ;^351^352^^^^343^353^return ! ( sideEffectSeen && parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P3_Replace_Literal]^&& parameters.size() + 0  == parametersReferenced.size() + 0  ) ;^352^^^^^343^353^&& parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P7_Replace_Invocation]^&& parameters.clear (  )  == parametersReferenced.size (  )  ) ;^352^^^^^343^353^&& parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P14_Delete_Statement]^^352^^^^^343^353^&& parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P3_Replace_Literal]^&& parameters.size() + 8  == parametersReferenced.size() + 8  ) ;^352^^^^^343^353^&& parameters.size (  )  == parametersReferenced.size (  )  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] apply [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  Node  node  
[P2_Replace_Operator]^return loopsEntered <= 0;^356^^^^^355^357^return loopsEntered != 0;^[CLASS] ReferencedAfterSideEffect  [METHOD] inLoop [RETURN_TYPE] boolean   [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  
[P3_Replace_Literal]^return loopsEntered != -5;^356^^^^^355^357^return loopsEntered != 0;^[CLASS] ReferencedAfterSideEffect  [METHOD] inLoop [RETURN_TYPE] boolean   [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  
[P8_Replace_Mix]^return true ;^356^^^^^355^357^return loopsEntered != 0;^[CLASS] ReferencedAfterSideEffect  [METHOD] inLoop [RETURN_TYPE] boolean   [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  int  loopsEntered  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssignmentOp ( n )  )  {^361^^^^^359^389^if  ( NodeUtil.isLoopStructure ( n )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P9_Replace_Statement]^if  ( NodeUtil.isLoopStructure ( node )  )  {^361^^^^^359^389^if  ( NodeUtil.isLoopStructure ( n )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P2_Replace_Operator]^if  ( !inLoop (  )  || !sideEffectSeen )  {^363^^^^^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P6_Replace_Expression]^if  ( !inLoop (  )  ) {^363^^^^^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P6_Replace_Expression]^if  (  !sideEffectSeen )  {^363^^^^^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P9_Replace_Statement]^if  ( inLoop (  )  || sideEffectSeen )  {^363^^^^^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P15_Unwrap_Block]^parametersReferenced.clear();^363^364^^^367^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {  parametersReferenced.clear (  ) ; }^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P16_Remove_Block]^^363^364^^^367^359^389^if  ( !inLoop (  )  && !sideEffectSeen )  {  parametersReferenced.clear (  ) ; }^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P7_Replace_Invocation]^parametersReferenced.size (  ) ;^367^^^^^359^389^parametersReferenced.clear (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P14_Delete_Statement]^^367^^^^^359^389^parametersReferenced.clear (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P11_Insert_Donor_Statement]^parametersReferenced.add ( name ) ;parametersReferenced.clear (  ) ;^367^^^^^359^389^parametersReferenced.clear (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P7_Replace_Invocation]^if  ( NodeUtil .constructorCallHasSideEffects ( n )   )  {^361^^^^^359^389^if  ( NodeUtil.isLoopStructure ( n )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P13_Insert_Block]^if  ( isLoopStructure ( node )  )  {      ( loopsEntered ) ++; }^361^^^^^359^389^[Delete]^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P8_Replace_Mix]^if  ( sideEffectSeen )  {^371^^^^^359^389^if  ( !sideEffectSeen )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P15_Unwrap_Block]^if (hasNonLocalSideEffect(n)) {    sideEffectSeen = true;};^371^372^373^374^375^359^389^if  ( !sideEffectSeen )  {  if  ( hasNonLocalSideEffect ( n )  )  { sideEffectSeen = true; }^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P16_Remove_Block]^^371^372^373^374^375^359^389^if  ( !sideEffectSeen )  {  if  ( hasNonLocalSideEffect ( n )  )  { sideEffectSeen = true; }^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P13_Insert_Block]^if  ( hasNonLocalSideEffect ( n )  )  {     sideEffectSeen = true; }^371^^^^^359^389^[Delete]^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P7_Replace_Invocation]^if  ( isLocalName ( n )  )  {^373^^^^^359^389^if  ( hasNonLocalSideEffect ( n )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P15_Unwrap_Block]^sideEffectSeen = true;^373^374^375^^^359^389^if  ( hasNonLocalSideEffect ( n )  )  { sideEffectSeen = true; }^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P16_Remove_Block]^^373^374^375^^^359^389^if  ( hasNonLocalSideEffect ( n )  )  { sideEffectSeen = true; }^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P13_Insert_Block]^if  ( ! ( isLocalName ( lhs )  )  )  {     sideEffect = true; }^373^^^^^359^389^[Delete]^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P13_Insert_Block]^if  ( ! ( sideEffectSeen )  )  {     if  ( hasNonLocalSideEffect ( n )  )  {         sideEffectSeen = true;     } }^373^^^^^359^389^[Delete]^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P3_Replace_Literal]^sideEffectSeen = false;^374^^^^^359^389^sideEffectSeen = true;^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P11_Insert_Donor_Statement]^sideEffect = true;sideEffectSeen = true;^374^^^^^359^389^sideEffectSeen = true;^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P2_Replace_Operator]^if  ( inLoop (  )  && sideEffectSeen )  {^380^^^^^359^389^if  ( inLoop (  )  || sideEffectSeen )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P6_Replace_Expression]^if  ( inLoop (  )  ) {^380^^^^^359^389^if  ( inLoop (  )  || sideEffectSeen )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P6_Replace_Expression]^if  (  sideEffectSeen )  {^380^^^^^359^389^if  ( inLoop (  )  || sideEffectSeen )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P6_Replace_Expression]^if  ( n.getType() == NAME )  {^380^^^^^359^389^if  ( inLoop (  )  || sideEffectSeen )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P9_Replace_Statement]^if  ( !inLoop (  )  && !sideEffectSeen )  {^380^^^^^359^389^if  ( inLoop (  )  || sideEffectSeen )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( NAME )  )  {     String name = n.getString (  ) ;     if  ( parameters.contains ( name )  )  {         parametersReferenced.add ( name ) ;     } }^380^^^^^359^389^[Delete]^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P2_Replace_Operator]^if  ( n.getType (  )  > Token.NAME )  {^382^^^^^359^389^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P15_Unwrap_Block]^java.lang.String name = n.getString(); if (parameters.contains(name)) {    parametersReferenced.add(name);};^382^383^384^385^386^359^389^if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; if  ( parameters.contains ( name )  )  { parametersReferenced.add ( name ) ; }^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P16_Remove_Block]^^382^383^384^385^386^359^389^if  ( n.getType (  )  == Token.NAME )  { String name = n.getString (  ) ; if  ( parameters.contains ( name )  )  { parametersReferenced.add ( name ) ; }^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P5_Replace_Variable]^if  ( name.contains ( parameters )  )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P7_Replace_Invocation]^if  ( parameters.add ( name )  )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P15_Unwrap_Block]^parametersReferenced.add(name);^384^385^386^^^359^389^if  ( parameters.contains ( name )  )  { parametersReferenced.add ( name ) ; }^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P16_Remove_Block]^^384^385^386^^^359^389^if  ( parameters.contains ( name )  )  { parametersReferenced.add ( name ) ; }^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P7_Replace_Invocation]^parametersReferenced.contains ( name ) ;^385^^^^^359^389^parametersReferenced.add ( name ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P7_Replace_Invocation]^parametersReferenced .contains ( null )  ;^385^^^^^359^389^parametersReferenced.add ( name ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P14_Delete_Statement]^^385^^^^^359^389^parametersReferenced.add ( name ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P11_Insert_Donor_Statement]^parametersReferenced.clear (  ) ;parametersReferenced.add ( name ) ;^385^^^^^359^389^parametersReferenced.add ( name ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P1_Replace_Type]^char name = n.getchar (  ) ;^383^^^^^359^389^String name = n.getString (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P7_Replace_Invocation]^String name = n .getFirstChild (  )  ;^383^^^^^359^389^String name = n.getString (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P11_Insert_Donor_Statement]^String name = node.getString (  ) ;String name = n.getString (  ) ;^383^^^^^359^389^String name = n.getString (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P11_Insert_Donor_Statement]^int type = n.getType (  ) ;String name = n.getString (  ) ;^383^^^^^359^389^String name = n.getString (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P14_Delete_Statement]^^383^^^^^359^389^String name = n.getString (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P5_Replace_Variable]^if  ( null.contains ( name )  )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P7_Replace_Invocation]^if  ( parameters .clear (  )   )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P8_Replace_Mix]^if  ( 4.add ( name )  )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.NAME )  {^382^^^^^359^389^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P7_Replace_Invocation]^if  ( n .getString (  )   == Token.NAME )  {^382^^^^^359^389^if  ( n.getType (  )  == Token.NAME )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P8_Replace_Mix]^if  ( this .clear (  )   )  {^384^^^^^359^389^if  ( parameters.contains ( name )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] visit [RETURN_TYPE] void   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffectSeen  String  name  int  loopsEntered  Node  n  
[P3_Replace_Literal]^boolean sideEffect = true;^395^^^^^394^416^boolean sideEffect = false;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P1_Replace_Type]^short  type = n.getType (  ) ;^396^^^^^394^416^int type = n.getType (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P5_Replace_Variable]^int type = lhs.getType (  ) ;^396^^^^^394^416^int type = n.getType (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;int type = n.getType (  ) ;^396^^^^^394^416^int type = n.getType (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^String name = node.getString (  ) ;int type = n.getType (  ) ;^396^^^^^394^416^int type = n.getType (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P14_Delete_Statement]^^396^^^^^394^416^int type = n.getType (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P2_Replace_Operator]^if  ( NodeUtil.isAssignmentOp ( n ) && type == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P2_Replace_Operator]^if  ( NodeUtil.isAssignmentOp ( n ) || type != Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P2_Replace_Operator]^if  ( NodeUtil.isAssignmentOp ( n ) || type > Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P2_Replace_Operator]^if  ( NodeUtil.isAssignmentOp ( n ) || type >= Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P5_Replace_Variable]^if  ( NodeUtil.isAssignmentOp ( n ) || loopsEntered == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P6_Replace_Expression]^if  ( NodeUtil.isAssignmentOp ( n ) ) {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P6_Replace_Expression]^if  (  type == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P6_Replace_Expression]^if  ( isAssignmentOp(n || type == INC) )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P6_Replace_Expression]^if  ( type == INC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P6_Replace_Expression]^if  ( type == DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P6_Replace_Expression]^if  ( type == CALL )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P6_Replace_Expression]^if  ( type == NEW )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P6_Replace_Expression]^if  ( type == DELPROP )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P7_Replace_Invocation]^if  ( NodeUtil.isName ( n ) || type == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P8_Replace_Mix]^if  ( NodeUtil .isName ( lhs )  || type == Token.4 || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type <= Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type != Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P5_Replace_Variable]^} else if  ( loopsEntered == Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P6_Replace_Expression]^} else if  ( type == NEW )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P6_Replace_Expression]^} else if  ( type == DELPROP )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P6_Replace_Expression]^} else {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P8_Replace_Mix]^}  if  ( loopsEntered == Token.CALL )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P9_Replace_Statement]^} else if  ( type == Token.DELPROP )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P9_Replace_Statement]^} else if  ( type == Token.NEW )  {^407^^^^^394^416^} else if  ( type == Token.CALL )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type >= Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type != Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P5_Replace_Variable]^} else if  ( loopsEntered == Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P6_Replace_Expression]^} else if  ( type == DELPROP )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P6_Replace_Expression]^} else {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P9_Replace_Statement]^} else if  ( type == Token.DELPROP )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P9_Replace_Statement]^} else if  ( type == Token.CALL )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P15_Unwrap_Block]^sideEffect = com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n);^409^410^411^412^413^394^416^} else if  ( type == Token.NEW )  { sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ; } else if  ( type == Token.DELPROP )  { sideEffect = true; }^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P16_Remove_Block]^^409^410^411^412^413^394^416^} else if  ( type == Token.NEW )  { sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ; } else if  ( type == Token.DELPROP )  { sideEffect = true; }^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P13_Insert_Block]^if  ( type ==  ( CALL )  )  {     sideEffect = functionCallHasSideEffects ( n ) ; }else     if  ( type ==  ( NEW )  )  {         sideEffect = constructorCallHasSideEffects ( n ) ;     }else         if  ( type ==  ( DELPROP )  )  {             sideEffect = true;         }^409^^^^^394^416^[Delete]^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type > Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P5_Replace_Variable]^} else if  ( loopsEntered == Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P6_Replace_Expression]^} else {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P9_Replace_Statement]^} else if  ( type == Token.CALL )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P9_Replace_Statement]^} else if  ( type == Token.NEW )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P15_Unwrap_Block]^sideEffect = true;^411^412^413^^^394^416^} else if  ( type == Token.DELPROP )  { sideEffect = true; }^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P16_Remove_Block]^^411^412^413^^^394^416^} else if  ( type == Token.DELPROP )  { sideEffect = true; }^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P3_Replace_Literal]^sideEffect = false;^412^^^^^394^416^sideEffect = true;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^sideEffectSeen = true;sideEffect = true;^412^^^^^394^416^sideEffect = true;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P5_Replace_Variable]^sideEffect = NodeUtil.constructorCallHasSideEffects ( lhs ) ;^410^^^^^394^416^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P7_Replace_Invocation]^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^410^^^^^394^416^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P7_Replace_Invocation]^sideEffect = NodeUtil .functionCallHasSideEffects ( lhs )  ;^410^^^^^394^416^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P8_Replace_Mix]^sideEffect =  NodeUtil.colhsstructorCallHasSideEffects ( lhs ) ;^410^^^^^394^416^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^410^^^^^394^416^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P14_Delete_Statement]^^410^^^^^394^416^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P13_Insert_Block]^if  ( isLoopStructure ( node )  )  {      ( loopsEntered ) ++; }^410^^^^^394^416^[Delete]^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type != Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P8_Replace_Mix]^}  if  ( type == Token.null )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P5_Replace_Variable]^sideEffect = NodeUtil.functionCallHasSideEffects ( lhs ) ;^408^^^^^394^416^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P7_Replace_Invocation]^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;^408^^^^^394^416^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P8_Replace_Mix]^sideEffect =  NodeUtil.fulhsctiolhsCallHasSideEffects ( lhs ) ;^408^^^^^394^416^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^sideEffect = NodeUtil.constructorCallHasSideEffects ( n ) ;sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^408^^^^^394^416^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P7_Replace_Invocation]^sideEffect = NodeUtil .constructorCallHasSideEffects ( lhs )  ;^408^^^^^394^416^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P14_Delete_Statement]^^408^^^^^394^416^sideEffect = NodeUtil.functionCallHasSideEffects ( n ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type > Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type <= Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P8_Replace_Mix]^}  if  ( loopsEntered == Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P5_Replace_Variable]^if  ( !isLocalName ( n )  )  {^404^^^^^394^416^if  ( !isLocalName ( lhs )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P7_Replace_Invocation]^if  ( !apply ( lhs )  )  {^404^^^^^394^416^if  ( !isLocalName ( lhs )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P8_Replace_Mix]^if  ( !apply ( n )  )  {^404^^^^^394^416^if  ( !isLocalName ( lhs )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P15_Unwrap_Block]^sideEffect = true;^404^405^406^^^394^416^if  ( !isLocalName ( lhs )  )  { sideEffect = true; }^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P16_Remove_Block]^^404^405^406^^^394^416^if  ( !isLocalName ( lhs )  )  { sideEffect = true; }^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P13_Insert_Block]^if  ( hasNonLocalSideEffect ( n )  )  {     sideEffectSeen = true; }^404^^^^^394^416^[Delete]^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P3_Replace_Literal]^sideEffect = false;^405^^^^^394^416^sideEffect = true;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P11_Insert_Donor_Statement]^sideEffectSeen = true;sideEffect = true;^405^^^^^394^416^sideEffect = true;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P5_Replace_Variable]^Node lhs = lhs.getFirstChild (  ) ;^402^^^^^394^416^Node lhs = n.getFirstChild (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P8_Replace_Mix]^Node lhs = lhs .getString (  )  ;^402^^^^^394^416^Node lhs = n.getFirstChild (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P14_Delete_Statement]^^402^^^^^394^416^Node lhs = n.getFirstChild (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type <= Token.NEW )  {^409^^^^^394^416^} else if  ( type == Token.NEW )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P2_Replace_Operator]^} else if  ( type < Token.DELPROP )  {^411^^^^^394^416^} else if  ( type == Token.DELPROP )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P5_Replace_Variable]^if  ( NodeUtil.isAssignmentOp ( lhs ) || type == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P7_Replace_Invocation]^if  ( NodeUtil .isName ( lhs )  || type == Token.INC || type == Token.DEC )  {^399^400^401^^^394^416^if  ( NodeUtil.isAssignmentOp ( n ) || type == Token.INC || type == Token.DEC )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P13_Insert_Block]^if  ( isLoopStructure ( node )  )  {      ( loopsEntered ) ++; }^399^^^^^394^416^[Delete]^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P5_Replace_Variable]^return sideEffectSeen;^415^^^^^394^416^return sideEffect;^[CLASS] ReferencedAfterSideEffect  [METHOD] hasNonLocalSideEffect [RETURN_TYPE] boolean   Node n [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  int  loopsEntered  type  Node  lhs  n  
[P7_Replace_Invocation]^if  ( NodeUtil.isAssignmentOp ( node )  )  {^422^^^^^421^427^if  ( NodeUtil.isName ( node )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[P9_Replace_Statement]^if  ( NodeUtil.isLoopStructure ( node )  )  {^422^^^^^421^427^if  ( NodeUtil.isName ( node )  )  {^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[P15_Unwrap_Block]^java.lang.String name = node.getString(); return locals.contains(name);^422^423^424^425^^421^427^if  ( NodeUtil.isName ( node )  )  { String name = node.getString (  ) ; return locals.contains ( name ) ; }^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[P16_Remove_Block]^^422^423^424^425^^421^427^if  ( NodeUtil.isName ( node )  )  { String name = node.getString (  ) ; return locals.contains ( name ) ; }^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[P5_Replace_Variable]^return name.contains ( locals ) ;^424^^^^^421^427^return locals.contains ( name ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[P7_Replace_Invocation]^return locals.add ( name ) ;^424^^^^^421^427^return locals.contains ( name ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[P7_Replace_Invocation]^return locals .clear (  )  ;^424^^^^^421^427^return locals.contains ( name ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[P12_Insert_Condition]^if  ( parameters.contains ( name )  )  { return locals.contains ( name ) ; }^424^^^^^421^427^return locals.contains ( name ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[P1_Replace_Type]^char name = node.getchar (  ) ;^423^^^^^421^427^String name = node.getString (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[P11_Insert_Donor_Statement]^String name = n.getString (  ) ;String name = node.getString (  ) ;^423^^^^^421^427^String name = node.getString (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[P11_Insert_Donor_Statement]^int type = n.getType (  ) ;String name = node.getString (  ) ;^423^^^^^421^427^String name = node.getString (  ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[P14_Delete_Statement]^^423^424^^^^421^427^String name = node.getString (  ) ; return locals.contains ( name ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[P14_Delete_Statement]^^424^^^^^421^427^return locals.contains ( name ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[P5_Replace_Variable]^return null.contains ( name ) ;^424^^^^^421^427^return locals.contains ( name ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[P13_Insert_Block]^if  ( isLoopStructure ( node )  )  {      ( loopsEntered ) ++; }^422^^^^^421^427^[Delete]^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[P8_Replace_Mix]^return null.add ( name ) ;^424^^^^^421^427^return locals.contains ( name ) ;^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
[P3_Replace_Literal]^return true;^426^^^^^421^427^return false;^[CLASS] ReferencedAfterSideEffect  [METHOD] isLocalName [RETURN_TYPE] boolean   Node node [VARIABLES] Set  locals  parameters  parametersReferenced  boolean  sideEffect  sideEffectSeen  String  name  int  loopsEntered  type  Node  node  
