[P8_Replace_Mix]^this.compiler =  null;^36^^^^^35^37^this.compiler = compiler;^[CLASS] ConvertToDottedProperties  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, this ) ;^41^^^^^40^42^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ConvertToDottedProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^41^^^^^40^42^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ConvertToDottedProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, this ) ;^41^^^^^40^42^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ConvertToDottedProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, this ) ;^41^^^^^40^42^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ConvertToDottedProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P14_Delete_Statement]^^41^^^^^40^42^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] ConvertToDottedProperties  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P2_Replace_Operator]^if  ( right.getType (  )  == Token.STRING || NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^50^51^^^^45^59^if  ( right.getType (  )  == Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P2_Replace_Operator]^if  ( right.getType (  )  != Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^50^51^^^^45^59^if  ( right.getType (  )  == Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^50^51^^^^45^59^if  ( right.getType (  )  == Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P6_Replace_Expression]^if  ( right.getType (  )  == Token.STRING ) {^50^51^^^^45^59^if  ( right.getType (  )  == Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P6_Replace_Expression]^if  (  NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^50^51^^^^45^59^if  ( right.getType (  )  == Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P6_Replace_Expression]^if  ( right.getType (  )  == STRING )  {^50^51^^^^45^59^if  ( right.getType (  )  == Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P7_Replace_Invocation]^if  ( right.removeChild (  )  == Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^50^51^^^^45^59^if  ( right.getType (  )  == Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P7_Replace_Invocation]^if  ( right.getType (  )  == Token.STRING && NodeUtil.isValidPropertyName ( right.removeChild (  )  )  )  {^50^51^^^^45^59^if  ( right.getType (  )  == Token.STRING && NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P4_Replace_Constructor]^parent.replaceChild ( n, new Node ( Token.GETPROP,  right )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P4_Replace_Constructor]^parent.replaceChild ( n, new Node ( Token.GETPROP, left )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P5_Replace_Variable]^parent.replaceChild ( n, new Node ( Token.GETPROP, parent, right )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P5_Replace_Variable]^parent.replaceChild ( n, new Node ( Token.GETPROP, left, parent )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P5_Replace_Variable]^parent.replaceChild ( n, new Node ( Token. left, right )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P5_Replace_Variable]^parent.replaceChild ( n, new Node ( Token.GETPROP, right, left )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P8_Replace_Mix]^parent.replaceChild ( n, new Node ( Token.GETPROP, right, right )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P5_Replace_Variable]^n.removeChild ( right ) ;^52^^^^^45^59^n.removeChild ( left ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P7_Replace_Invocation]^n.replaceChild ( left ) ;^52^^^^^45^59^n.removeChild ( left ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P14_Delete_Statement]^^52^^^^^45^59^n.removeChild ( left ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P11_Insert_Donor_Statement]^n.removeChild ( right ) ;n.removeChild ( left ) ;^52^^^^^45^59^n.removeChild ( left ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P7_Replace_Invocation]^n.replaceChild ( right ) ;^53^^^^^45^59^n.removeChild ( right ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P8_Replace_Mix]^n.removeChild ( parent ) ;^53^^^^^45^59^n.removeChild ( right ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P14_Delete_Statement]^^53^54^^^^45^59^n.removeChild ( right ) ; parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P11_Insert_Donor_Statement]^n.removeChild ( left ) ;n.removeChild ( right ) ;^53^^^^^45^59^n.removeChild ( right ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P4_Replace_Constructor]^parent.replaceChild (  new Node ( Token.GETPROP, left, right )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P5_Replace_Variable]^parent.replaceChild ( right, new Node ( Token.GETPROP, left, right )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P5_Replace_Variable]^parent.replaceChild ( left, new Node ( Token.GETPROP, n, right )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P8_Replace_Mix]^parent.replaceChild ( n, new Node ( Token.GETPROP, left, n )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P14_Delete_Statement]^^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P14_Delete_Statement]^^55^^^^^45^59^compiler.reportCodeChange (  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P5_Replace_Variable]^Node left = right.getFirstChild (  ) ;^48^^^^^45^59^Node left = n.getFirstChild (  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P7_Replace_Invocation]^Node left = n.removeChild (  ) ;^48^^^^^45^59^Node left = n.getFirstChild (  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P5_Replace_Variable]^Node right = parent.getNext (  ) ;^49^^^^^45^59^Node right = left.getNext (  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P7_Replace_Invocation]^Node right = left.removeChild (  ) ;^49^^^^^45^59^Node right = left.getNext (  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P5_Replace_Variable]^switch  ( right.getType (  )  )  {^46^^^^^45^59^switch  ( n.getType (  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P7_Replace_Invocation]^switch  ( n.removeChild (  )  )  {^46^^^^^45^59^switch  ( n.getType (  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P14_Delete_Statement]^^46^47^48^^^45^59^switch  ( n.getType (  )  )  { case Token.GETELEM: Node left = n.getFirstChild (  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P8_Replace_Mix]^Node left = right .getString (  )  ;^48^^^^^45^59^Node left = n.getFirstChild (  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P14_Delete_Statement]^^48^49^^^^45^59^Node left = n.getFirstChild (  ) ; Node right = left.getNext (  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P5_Replace_Variable]^Node right = right.getNext (  ) ;^49^^^^^45^59^Node right = left.getNext (  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P14_Delete_Statement]^^49^^^^^45^59^Node right = left.getNext (  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P5_Replace_Variable]^NodeUtil.isValidPropertyName ( parent.getString (  )  )  )  {^51^^^^^45^59^NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P7_Replace_Invocation]^NodeUtil.isValidPropertyName ( right.removeChild (  )  )  )  {^51^^^^^45^59^NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P14_Delete_Statement]^^51^52^^^^45^59^NodeUtil.isValidPropertyName ( right.getString (  )  )  )  { n.removeChild ( left ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P7_Replace_Invocation]^NodeUtil.isValidPropertyName ( right .getFirstChild (  )   )  )  {^51^^^^^45^59^NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P8_Replace_Mix]^NodeUtil.isValidPropertyName ( parent.removeChild (  )  )  )  {^51^^^^^45^59^NodeUtil.isValidPropertyName ( right.getString (  )  )  )  {^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P8_Replace_Mix]^n.replaceChild ( right ) ;^52^^^^^45^59^n.removeChild ( left ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P14_Delete_Statement]^^52^53^^^^45^59^n.removeChild ( left ) ; n.removeChild ( right ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P7_Replace_Invocation]^n .replaceChild ( n , n )  ;^53^^^^^45^59^n.removeChild ( right ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P5_Replace_Variable]^parent.replaceChild ( parent, new Node ( Token.GETPROP, left, right )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P5_Replace_Variable]^parent.replaceChild ( right, new Node ( Token.GETPROP, left, n )  ) ;^54^^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
[P14_Delete_Statement]^^54^55^^^^45^59^parent.replaceChild ( n, new Node ( Token.GETPROP, left, right )  ) ; compiler.reportCodeChange (  ) ;^[CLASS] ConvertToDottedProperties  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  left  n  parent  right  
