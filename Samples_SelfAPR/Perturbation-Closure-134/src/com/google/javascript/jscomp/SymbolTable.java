[P3_Replace_Literal]^static final DiagnosticType MISSING_VARIABLE = DiagnosticType.error ( "_MISSING_V", "Missing variable name: {0}" ) ;^46^47^48^49^^46^49^static final DiagnosticType MISSING_VARIABLE = DiagnosticType.error ( "JSC_MISSING_VARIABLE", "Missing variable name: {0}" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType MISSING_VARIABLE = DiagnosticType.error ( "JSC_MISSING_VARIABLE", "Missing variable name: {0}Mi" ) ;^46^47^48^49^^46^49^static final DiagnosticType MISSING_VARIABLE = DiagnosticType.error ( "JSC_MISSING_VARIABLE", "Missing variable name: {0}" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P8_Replace_Mix]^static  DiagnosticType MISSING_VARIABLE = DiagnosticType.error ( "JSC_MISSING_VARIABLE", "Missing variable name: {0}" ) ;^46^47^48^49^^46^49^static final DiagnosticType MISSING_VARIABLE = DiagnosticType.error ( "JSC_MISSING_VARIABLE", "Missing variable name: {0}" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType MOVED_VARIABLE = DiagnosticType.error ( "_MOVED_VARIABLSC_MOVED_VARIABLE", "Moved variable name: {0}" ) ;^51^52^53^54^^51^54^static final DiagnosticType MOVED_VARIABLE = DiagnosticType.error ( "JSC_MOVED_VARIABLE", "Moved variable name: {0}" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType MOVED_VARIABLE = DiagnosticType.error ( "JSC_MOVED_VARIABLE", " varia" ) ;^51^52^53^54^^51^54^static final DiagnosticType MOVED_VARIABLE = DiagnosticType.error ( "JSC_MOVED_VARIABLE", "Moved variable name: {0}" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType MOVED_VARIABLE ;^51^52^53^54^^51^54^static final DiagnosticType MOVED_VARIABLE = DiagnosticType.error ( "JSC_MOVED_VARIABLE", "Moved variable name: {0}" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType VARIABLE_COUNT_MISMATCH = DiagnosticType.error ( "A", "Variable count does not match." +^56^57^58^59^^56^60^static final DiagnosticType VARIABLE_COUNT_MISMATCH = DiagnosticType.error ( "JSC_VARIABLE_COUNT_MISMATCH", "Variable count does not match." +^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType VARIABLE_COUNT_MISMATCH = DiagnosticType.error ( "JSC_VARIABLE_COUNT_MISMATCH", "iablariable count does not match." +^56^57^58^59^^56^60^static final DiagnosticType VARIABLE_COUNT_MISMATCH = DiagnosticType.error ( "JSC_VARIABLE_COUNT_MISMATCH", "Variable count does not match." +^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P8_Replace_Mix]^static  DiagnosticType VARIABLE_COUNT_MISMATCH = DiagnosticType.error ( "JSC_VARIABLE_COUNT_MISMATCH", "Variable count does not match." +^56^57^58^59^^56^60^static final DiagnosticType VARIABLE_COUNT_MISMATCH = DiagnosticType.error ( "JSC_VARIABLE_COUNT_MISMATCH", "Variable count does not match." +^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType SCOPE_MISMATCH = DiagnosticType.error ( "JSC_SCOPE_MISMATCH_SCOPE_", "Scope roots used with the symbol table do not match." +^62^63^64^65^^62^66^static final DiagnosticType SCOPE_MISMATCH = DiagnosticType.error ( "JSC_SCOPE_MISMATCH", "Scope roots used with the symbol table do not match." +^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType SCOPE_MISMATCH = DiagnosticType.error ( "JSC_SCOPE_MISMATCH", " used witcope roots used with the symbol table do not match." +^62^63^64^65^^62^66^static final DiagnosticType SCOPE_MISMATCH = DiagnosticType.error ( "JSC_SCOPE_MISMATCH", "Scope roots used with the symbol table do not match." +^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P8_Replace_Mix]^static  DiagnosticType SCOPE_MISMATCH = DiagnosticType.error ( "JSC_SCOPE_MISMATCH", "Scope roots used with the symbol table do not match." +^62^63^64^65^^62^66^static final DiagnosticType SCOPE_MISMATCH = DiagnosticType.error ( "JSC_SCOPE_MISMATCH", "Scope roots used with the symbol table do not match." +^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^68^^^^^63^73^private final AbstractCompiler compiler;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P8_Replace_Mix]^private  ScopeCreator scopeCreator;^69^^^^^64^74^private final ScopeCreator scopeCreator;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P3_Replace_Literal]^private boolean locked = true;^73^^^^^68^78^private boolean locked = false;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P8_Replace_Mix]^private MemoizedData cache = true;^77^^^^^72^82^private MemoizedData cache = null;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P8_Replace_Mix]^private Map<Node, Scope> scopes ;^140^^^^^135^145^private Map<Node, Scope> scopes = Maps.newHashMap (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P8_Replace_Mix]^private  List<Scope> expectedScopes = Lists.newArrayList (  ) ;^163^^^^^158^168^private final List<Scope> expectedScopes = Lists.newArrayList (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P8_Replace_Mix]^private final List<Scope> actualScopes  = null ;^164^^^^^159^169^private final List<Scope> actualScopes = Lists.newArrayList (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P3_Replace_Literal]^private boolean collectingExpected = false;^165^^^^^160^170^private boolean collectingExpected = true;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P12_Insert_Condition]^if  ( collectingExpected )  { private boolean collectingExpected = true; }^165^^^^^160^170^private boolean collectingExpected = true;^[CLASS] SymbolTable MemoizedData VerifyingCallback   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^80^^^^^79^84^this.compiler = compiler;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^compiler .report (  )  ;^81^^^^^79^84^compiler.addChangeHandler ( this ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^81^^^^^79^84^compiler.addChangeHandler ( this ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^scopeCreator =  new SyntacticScopeCreator ( null ) ;^83^^^^^79^84^scopeCreator = new SyntacticScopeCreator ( compiler ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^this.actualRoot = expectedRoot;^170^^^^^169^172^this.actualRoot = actualRoot;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] <init> [RETURN_TYPE] Node)   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^this.expectedRoot = expectedRoot;this.actualRoot = actualRoot;^170^^^^^169^172^this.actualRoot = actualRoot;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] <init> [RETURN_TYPE] Node)   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^this.expectedRoot =  actualRoot;^171^^^^^169^172^this.expectedRoot = expectedRoot;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] <init> [RETURN_TYPE] Node)   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^this.actualRoot = actualRoot;this.expectedRoot = expectedRoot;^171^^^^^169^172^this.expectedRoot = expectedRoot;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] <init> [RETURN_TYPE] Node)   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P3_Replace_Literal]^Preconditions.checkState ( !locked, "SymbolTable already acquiredable" ) ;^87^^^^^86^89^Preconditions.checkState ( !locked, "SymbolTable already acquired" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] acquire [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^Preconditions.checkArgument ( !locked, "SymbolTable already acquired" ) ;^87^^^^^86^89^Preconditions.checkState ( !locked, "SymbolTable already acquired" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] acquire [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^87^^^^^86^89^Preconditions.checkState ( !locked, "SymbolTable already acquired" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] acquire [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( locked, "Unacquired symbol table" ) ;Preconditions.checkState ( !locked, "SymbolTable already acquired" ) ;^87^^^^^86^89^Preconditions.checkState ( !locked, "SymbolTable already acquired" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] acquire [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( locked, "SymbolTable already released" ) ;Preconditions.checkState ( !locked, "SymbolTable already acquired" ) ;^87^^^^^86^89^Preconditions.checkState ( !locked, "SymbolTable already acquired" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] acquire [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P3_Replace_Literal]^locked = false;^88^^^^^86^89^locked = true;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] acquire [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^locked = false;locked = true;^88^^^^^86^89^locked = true;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] acquire [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P3_Replace_Literal]^Preconditions.checkState ( locked, "e alreadyymbolTable already released" ) ;^92^^^^^91^94^Preconditions.checkState ( locked, "SymbolTable already released" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] release [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^Preconditions.checkState ( collectingExpected, "SymbolTable already released" ) ;^92^^^^^91^94^Preconditions.checkState ( locked, "SymbolTable already released" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] release [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^Preconditions.checkArgument ( locked, "SymbolTable already released" ) ;^92^^^^^91^94^Preconditions.checkState ( locked, "SymbolTable already released" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] release [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^Preconditions.checkArgument ( collectingExpected, "SymbolTable already released" ) ;^92^^^^^91^94^Preconditions.checkState ( locked, "SymbolTable already released" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] release [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^92^93^^^^91^94^Preconditions.checkState ( locked, "SymbolTable already released" ) ; locked = false;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] release [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( locked, "Unacquired symbol table" ) ;Preconditions.checkState ( locked, "SymbolTable already released" ) ;^92^^^^^91^94^Preconditions.checkState ( locked, "SymbolTable already released" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] release [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !locked, "SymbolTable already acquired" ) ;Preconditions.checkState ( locked, "SymbolTable already released" ) ;^92^^^^^91^94^Preconditions.checkState ( locked, "SymbolTable already released" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] release [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P3_Replace_Literal]^locked = true;^93^^^^^91^94^locked = false;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] release [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^locked = true;locked = false;^93^^^^^91^94^locked = false;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] release [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P2_Replace_Operator]^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  && n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^102^103^104^105^^100^113^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P2_Replace_Operator]^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK || n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^102^103^104^105^^100^113^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P2_Replace_Operator]^Preconditions.checkArgument ( ( n.getType (  )  != Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^102^103^104^105^^100^113^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P2_Replace_Operator]^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  != null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^102^103^104^105^^100^113^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P3_Replace_Literal]^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functionsMay only create scopes for the global n" ) ;^102^103^104^105^^100^113^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^Preconditions.checkArgument ( ( expectedRoot.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^102^103^104^105^^100^113^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token. "May only create scopes for the global node and functions" ) ;^102^103^104^105^^100^113^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^Preconditions.checkArgument ( ( n.isEquivalentTo (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^102^103^104^105^^100^113^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^Preconditions.checkArgument ( ( n .getParent (  )   == Token.BLOCK && n.getParent (  )  == null )  || n^102^103^104^105^^100^113^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.isEquivalentTo (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^102^103^104^105^^100^113^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n .getType (  )   == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^102^103^104^105^^100^113^Preconditions.checkArgument ( ( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^( expectedRoot.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^103^104^105^^^100^113^( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^( n.isEquivalentTo (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^103^104^105^^^100^113^( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^103^104^105^^^100^113^( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^( n.getType (  )  == Token.BLOCK && n.isEquivalentTo (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^103^104^105^^^100^113^( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^( n.getType (  )  == Token.BLOCK && n .getType (  )   == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^103^104^105^^^100^113^( n.getType (  )  == Token.BLOCK && n.getParent (  )  == null )  || n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^n.isEquivalentTo (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^104^105^^^^100^113^n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^n.getType (  )  == Token.FUNCTION, "May only create scopes for the global expectedRootode and functions" ) ;^104^105^^^^100^113^n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^104^105^^^^100^113^n.getType (  )  == Token.FUNCTION, "May only create scopes for the global node and functions" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^106^^^^^100^113^ensureCacheInitialized (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^if  ( !cache.scopes.containsKey ( expectedRoot )  )  {^108^^^^^100^113^if  ( !cache.scopes.containsKey ( n )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^if  ( !cache.scopes.put ( n )  )  {^108^^^^^100^113^if  ( !cache.scopes.containsKey ( n )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P9_Replace_Statement]^if  ( !cache.scopes.isEmpty (  )  )  {^108^^^^^100^113^if  ( !cache.scopes.containsKey ( n )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P15_Unwrap_Block]^cache.scopes.put(n, scopeCreator.createScope(n, parent));^108^109^110^^^100^113^if  ( !cache.scopes.containsKey ( n )  )  { cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P16_Remove_Block]^^108^109^110^^^100^113^if  ( !cache.scopes.containsKey ( n )  )  { cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^cache.scopes.put ( expectedRoot, scopeCreator.createScope ( n, parent )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^cache.scopes.put (  scopeCreator.createScope ( n, parent )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^cache.scopes.put ( n, scopeCreator.createScope ( n )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^cache.scopes.put ( n.createScope ( n, parent )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^cache.scopes.put ( scopeCreator, n.createScope ( n, parent )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^cache.scopes.put ( n, parent.createScope ( n, scopeCreator )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P13_Insert_Block]^if  ( ! ( containsKey ( n )  )  )  {     put ( n, scopeCreator.createScope ( n, parent )  ) ; }^109^^^^^100^113^[Delete]^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^cache.scopes.put ( parent, scopeCreator.createScope ( n, n )  ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^cache.scopes.put ( n, scopeCreator .ensureCacheInitialized (  )   ) ;^109^^^^^100^113^cache.scopes.put ( n, scopeCreator.createScope ( n, parent )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^return cache.scopes.get ( expectedRoot ) ;^112^^^^^100^113^return cache.scopes.get ( n ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^return n.scopes.get ( cache ) ;^112^^^^^100^113^return cache.scopes.get ( n ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^return cache.get ( n ) ;^112^^^^^100^113^return cache.scopes.get ( n ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^return cache.scopes.put ( n ) ;^112^^^^^100^113^return cache.scopes.get ( n ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P12_Insert_Condition]^if  ( !cache.scopes.isEmpty (  )  )  { return cache.scopes.get ( n ) ; }^112^^^^^100^113^return cache.scopes.get ( n ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^return n.get ( cache.scopes ) ;^112^^^^^100^113^return cache.scopes.get ( n ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^return cache.scopes .put ( actualRoot )  ;^112^^^^^100^113^return cache.scopes.get ( n ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^112^^^^^100^113^return cache.scopes.get ( n ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] createScope [RETURN_TYPE] Scope   Node n Scope parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  parent  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P3_Replace_Literal]^Preconditions.checkState ( locked, "Unacquired symbol tableuired symbo" ) ;^119^^^^^118^123^Preconditions.checkState ( locked, "Unacquired symbol table" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] ensureCacheInitialized [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^Preconditions.checkState ( collectingExpected, "Unacquired symbol table" ) ;^119^^^^^118^123^Preconditions.checkState ( locked, "Unacquired symbol table" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] ensureCacheInitialized [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^Preconditions.checkArgument ( locked, "Unacquired symbol table" ) ;^119^^^^^118^123^Preconditions.checkState ( locked, "Unacquired symbol table" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] ensureCacheInitialized [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^Preconditions.checkArgument ( collectingExpected, "Unacquired symbol table" ) ;^119^^^^^118^123^Preconditions.checkState ( locked, "Unacquired symbol table" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] ensureCacheInitialized [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^119^^^^^118^123^Preconditions.checkState ( locked, "Unacquired symbol table" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] ensureCacheInitialized [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( !locked, "SymbolTable already acquired" ) ;Preconditions.checkState ( locked, "Unacquired symbol table" ) ;^119^^^^^118^123^Preconditions.checkState ( locked, "Unacquired symbol table" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] ensureCacheInitialized [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( locked, "SymbolTable already released" ) ;Preconditions.checkState ( locked, "Unacquired symbol table" ) ;^119^^^^^118^123^Preconditions.checkState ( locked, "Unacquired symbol table" ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] ensureCacheInitialized [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P2_Replace_Operator]^if  ( cache != null )  {^120^^^^^118^123^if  ( cache == null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] ensureCacheInitialized [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^if  ( cache == true )  {^120^^^^^118^123^if  ( cache == null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] ensureCacheInitialized [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P15_Unwrap_Block]^cache = new com.google.javascript.jscomp.SymbolTable.MemoizedData();^120^121^122^^^118^123^if  ( cache == null )  { cache = new MemoizedData (  ) ; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] ensureCacheInitialized [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P16_Remove_Block]^^120^121^122^^^118^123^if  ( cache == null )  { cache = new MemoizedData (  ) ; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] ensureCacheInitialized [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^cache  = null ;^121^^^^^118^123^cache = new MemoizedData (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] ensureCacheInitialized [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P13_Insert_Block]^if  (  ( cache )  == null )  {     cache = new MemoizedData (  ) ; }^121^^^^^118^123^[Delete]^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] ensureCacheInitialized [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^cache ;^121^^^^^118^123^cache = new MemoizedData (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] ensureCacheInitialized [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^if  ( !collectingExpected )  {^131^^^^^130^134^if  ( !locked )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P15_Unwrap_Block]^cache = null;^131^132^133^^^130^134^if  ( !locked )  { cache = null; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P16_Remove_Block]^^131^132^133^^^130^134^if  ( !locked )  { cache = null; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^cache = this;^132^^^^^130^134^cache = null;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^cache = false;^132^^^^^130^134^cache = null;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] reportChange [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P4_Replace_Constructor]^VerifyingCallback callback = new VerifyingCallback (  actualRoot ) ;^153^154^^^^152^156^VerifyingCallback callback = new VerifyingCallback ( expectedRoot, actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  VerifyingCallback  callback  
[P4_Replace_Constructor]^VerifyingCallback callback = new VerifyingCallback ( expectedRoot ) ;^153^154^^^^152^156^VerifyingCallback callback = new VerifyingCallback ( expectedRoot, actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  VerifyingCallback  callback  
[P5_Replace_Variable]^VerifyingCallback callback = new VerifyingCallback ( n, actualRoot ) ;^153^154^^^^152^156^VerifyingCallback callback = new VerifyingCallback ( expectedRoot, actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  VerifyingCallback  callback  
[P5_Replace_Variable]^VerifyingCallback callback = new VerifyingCallback ( expectedRoot, n ) ;^153^154^^^^152^156^VerifyingCallback callback = new VerifyingCallback ( expectedRoot, actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  VerifyingCallback  callback  
[P5_Replace_Variable]^VerifyingCallback callback = new VerifyingCallback ( actualRoot, expectedRoot ) ;^153^154^^^^152^156^VerifyingCallback callback = new VerifyingCallback ( expectedRoot, actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  VerifyingCallback  callback  
[P7_Replace_Invocation]^callback.isNodeAttached (  ) ;^155^^^^^152^156^callback.verify (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  VerifyingCallback  callback  
[P7_Replace_Invocation]^callback .verify ( n , n )  ;^155^^^^^152^156^callback.verify (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  VerifyingCallback  callback  
[P14_Delete_Statement]^^155^156^^^^152^156^callback.verify (  ) ; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   Node expectedRoot Node actualRoot [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  VerifyingCallback  callback  
[P3_Replace_Literal]^return false;^177^^^^^175^178^return true;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  NodeTraversal  nodeTraversal  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^if  ( locked )  {^188^^^^^187^193^if  ( collectingExpected )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  NodeTraversal  t  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P15_Unwrap_Block]^expectedScopes.add(t.getScope());^188^189^190^191^192^187^193^if  ( collectingExpected )  { expectedScopes.add ( t.getScope (  )  ) ; } else { actualScopes.add ( t.getScope (  )  ) ; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  NodeTraversal  t  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P16_Remove_Block]^^188^189^190^191^192^187^193^if  ( collectingExpected )  { expectedScopes.add ( t.getScope (  )  ) ; } else { actualScopes.add ( t.getScope (  )  ) ; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  NodeTraversal  t  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^actualScopes.get ( t.getScope (  )  ) ;^191^^^^^187^193^actualScopes.add ( t.getScope (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  NodeTraversal  t  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^actualScopes.add ( t.traverse (  )  ) ;^191^^^^^187^193^actualScopes.add ( t.getScope (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  NodeTraversal  t  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^191^^^^^187^193^actualScopes.add ( t.getScope (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  NodeTraversal  t  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;actualScopes.add ( t.getScope (  )  ) ;^191^^^^^187^193^actualScopes.add ( t.getScope (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  NodeTraversal  t  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^expectedScopes.add ( t.getScope (  )  ) ;actualScopes.add ( t.getScope (  )  ) ;^191^^^^^187^193^actualScopes.add ( t.getScope (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  NodeTraversal  t  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^expectedScopes.get ( t.getScope (  )  ) ;^189^^^^^187^193^expectedScopes.add ( t.getScope (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  NodeTraversal  t  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^expectedScopes.add ( t.traverse (  )  ) ;^189^^^^^187^193^expectedScopes.add ( t.getScope (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  NodeTraversal  t  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^189^^^^^187^193^expectedScopes.add ( t.getScope (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  NodeTraversal  t  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^actualScopes.add ( t.getScope (  )  ) ;expectedScopes.add ( t.getScope (  )  ) ;^189^^^^^187^193^expectedScopes.add ( t.getScope (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  NodeTraversal  t  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^expectedScopes.add ( t .traverse ( compiler , parent , 0 )   ) ;^189^^^^^187^193^expectedScopes.add ( t.getScope (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  NodeTraversal  t  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P2_Replace_Operator]^if  ( cache != null )  {^196^^^^^195^204^if  ( cache == null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^if  ( cache == true )  {^196^^^^^195^204^if  ( cache == null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P15_Unwrap_Block]^return ;^196^197^198^199^^195^204^if  ( cache == null )  {  return; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P16_Remove_Block]^^196^197^198^199^^195^204^if  ( cache == null )  {  return; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^if  ( cache.scopes.isEmpty (  )  )  {^201^^^^^195^204^if  ( !cache.scopes.isEmpty (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P9_Replace_Statement]^if  ( !cache.scopes.containsKey ( n )  )  {^201^^^^^195^204^if  ( !cache.scopes.isEmpty (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P15_Unwrap_Block]^verifyScopes();^201^202^203^^^195^204^if  ( !cache.scopes.isEmpty (  )  )  { verifyScopes (  ) ; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P16_Remove_Block]^^201^202^203^^^195^204^if  ( !cache.scopes.isEmpty (  )  )  { verifyScopes (  ) ; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^verify (  ) ;^202^^^^^195^204^verifyScopes (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^202^203^^^^195^204^verifyScopes (  ) ; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^if  ( !cache.scopes .get ( actualRoot )   )  {^201^^^^^195^204^if  ( !cache.scopes.isEmpty (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P3_Replace_Literal]^collectingExpected = false;^207^^^^^192^222^collectingExpected = true;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^collectingExpected = false;collectingExpected = true;^207^^^^^192^222^collectingExpected = true;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^NodeTraversal.traverse (  expectedRoot, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^NodeTraversal.traverse ( expectedRoot, compiler, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^NodeTraversal.getScope ( compiler, expectedRoot, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^NodeTraversal.traverse ( compiler, parent, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P3_Replace_Literal]^collectingExpected = true;^210^^^^^195^225^collectingExpected = false;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^collectingExpected = true;collectingExpected = false;^210^^^^^195^225^collectingExpected = false;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P12_Insert_Condition]^if  ( collectingExpected )  { collectingExpected = false; }^210^^^^^195^225^collectingExpected = false;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( parent ) ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^( new NodeTraversal (  this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^( new NodeTraversal ( actualRoot, this, SymbolTable.this )  ) .traverse ( compiler ) ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .getScope ( actualRoot ) ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^( new NodeTraversal ( compiler, this, SymbolTable.this )  )  .traverse ( compiler , parent , 2 )  ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P2_Replace_Operator]^Preconditions.checkState ( expectedScopes.size (  )  != actualScopes.size (  )  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P3_Replace_Literal]^Preconditions.checkState ( expectedScopes.size() + 8  == actualScopes.size() + 8  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^Preconditions.checkState ( actualScopes.size (  )  == expectedScopes.size (  )  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^Preconditions.checkState ( expectedScopes.add (  )  == actualScopes.size (  )  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P3_Replace_Literal]^Preconditions.checkState ( expectedScopes.size() + 0  == actualScopes.size() + 0  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Preconditions.checkState ( 3.size (  )  == actualScopes.size (  )  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P3_Replace_Literal]^Preconditions.checkState ( expectedScopes.size() + 9  == actualScopes.size() + 9  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^while  ( it .next (  )   )  {^239^^^^^224^254^while  ( it.hasNext (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P2_Replace_Operator]^if  ( actualVar == null && expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P2_Replace_Operator]^if  ( actualVar != null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P2_Replace_Operator]^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  == var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( var == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( actualVar == null || actualScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( actualVar == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( expectedScope == null || actualVar.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P6_Replace_Expression]^if  ( actualVar == null ) {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P6_Replace_Expression]^if  (  expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P6_Replace_Expression]^if  ( !(checkNodesMatch(var.getNameNode(), actualVar.getNameNode())) || !(isNodeAttached(actualVar.getNameNode())) )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^if  ( actualVar == null || expectedScope .getVars (  )   != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^if  ( actualVar == null || expectedScope.getVar ( var .getNameNode (  )   )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^if  (  expectedScope .getVars (  )   != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P13_Insert_Block]^if  (  ( ! ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  )  )  ||  ( ! ( isNodeAttached ( actualVar.getNameNode (  )  )  )  )  )  {     compiler.report ( make ( MOVED_VARIABLE, var.getName (  )  )  ) ; }^242^^^^^227^257^[Delete]^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P2_Replace_Operator]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  &&^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) .getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^} else if  ( !VerifyingCallback ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^} else if  ( !checkNodesMatch ( var .getNameNode (  )  , actualVar^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler.addChangeHandler ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar .getNameNode (  )   )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make (  var.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^!checkNodesMatch ( var.getNameNode (  ) .getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^232^262^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^!checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^232^262^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^!VerifyingCallback ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^232^262^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^!checkNodesMatch ( var .getName (  )  , actualVar^247^248^249^250^^232^262^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^var .getName (  )  , actualVar^248^249^250^^^233^263^var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^actualVar.getNameNode (  )  )  || !isNodeAttached ( var.getNameNode (  )  )  )  {^249^250^^^^234^264^actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^actualVar .getName (  )   )  || !isNodeAttached ( var^249^250^^^^234^264^actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^!isNodeAttached ( var.getNameNode (  )  )  )  {^250^^^^^235^265^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^!exitScope ( actualVar.getNameNode (  )  )  )  {^250^^^^^235^265^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^!isNodeAttached ( actualVar .getName (  )   )  )  {^250^^^^^235^265^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^250^251^252^^^235^265^!isNodeAttached ( actualVar.getNameNode (  )  )  )  { compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler.addChangeHandler ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make (  var.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler.addChangeHandler ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( MISSING_VARIABLE, var .getNameNode (  )   )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make (  var.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^JSError.make ( MISSING_VARIABLE, var .getNameNode (  )   )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^} else if  ( !checkNodesMatch ( var .getName (  )  , actualVar^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^Var var = it .hasNext (  )  ;^240^^^^^225^255^Var var = it.next (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^Scope.Var actualVar = expectedScope.getVar ( var.getName (  )  ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^Scope.Var actualVar = var.getVar ( actualScope.getName (  )  ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^Scope.Var actualVar = actualScope .getVars (  )  ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^Scope.Var actualVar = actualScope.getVar ( var .getNameNode (  )   ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^Scope actualScope = actualScopes.get ( i ) ;Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P12_Insert_Condition]^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  { Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ; }^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^240^241^^^^225^255^Var var = it.next (  ) ; Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^Scope.Var actualVar = actualScope.getVar ( actualVar.getName (  )  ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Scope.Var actualVar = expectedScope .getVars (  )  ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^243^^^^^228^258^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^243^244^245^^^228^258^expectedScope.getVar ( var.getName (  )  )  != var )  { compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler.addChangeHandler ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( MISSING_VARIABLE, var .getNameNode (  )   )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make (  var.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^JSError.make ( MISSING_VARIABLE, var .getNameNode (  )   )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler .addChangeHandler ( 2 )   ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , expectedScope.getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) .getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( !checkNodesMatch ( actualScope.getRootNode (  ) , expectedScope.getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^if  ( !VerifyingCallback ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^if  ( !checkNodesMatch ( expectedScope .getVarCount (  )  , actualScope^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  expectedScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( VARIABLE_COUNT_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) .getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make (  expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) , expectedScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( actualScope, expectedScope.getRootNode (  ) .toStringTree (  ) , SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^JSError.make ( SCOPE_MISMATCH, expectedScope .getVarCount (  )  .toStringTree (  ) , actualScope^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^expectedScope .getVarCount (  )  .toStringTree (  ) , actualScope^226^227^^^^221^229^expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^226^227^^^^221^229^expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^226^227^^^^221^229^expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^actualScope .getVarCount (  )  .toStringTree (  )  )  ) ;^227^^^^^221^229^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^227^228^^^^221^229^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ; continue;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P2_Replace_Operator]^if  ( expectedScope.getVarCount (  )  >= actualScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P2_Replace_Operator]^if  ( expectedScope.getVarCount (  )  <= actualScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( actualScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( expectedScope.getVarCount (  )  != expectedScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( actualScope.getVarCount (  )  != expectedScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P6_Replace_Expression]^if  ( actualVar == null || getName()) != var )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P6_Replace_Expression]^if  ( actualVar == null )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P6_Replace_Expression]^if  ( expectedScope.getVar ( var.getName (  )  )  != var )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P6_Replace_Expression]^if  ( !(checkNodesMatch(var.getNameNode(), actualVar.getNameNode())) || !(isNodeAttached(actualVar.getNameNode())) )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^if  ( expectedScope .getVars (  )   != actualScope^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^while  ( 0.hasNext (  )  )  {^239^^^^^231^255^while  ( it.hasNext (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P2_Replace_Operator]^if  ( actualVar == null && expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P2_Replace_Operator]^if  ( actualVar != null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P2_Replace_Operator]^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  == var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( var == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( actualVar == null || actualScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P6_Replace_Expression]^if  ( actualVar == null ) {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P6_Replace_Expression]^if  (  expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P6_Replace_Expression]^if  ( !(checkNodesMatch(var.getNameNode(), actualVar.getNameNode())) || !(isNodeAttached(actualVar.getNameNode())) )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^if  ( actualVar == null || expectedScope .getVars (  )   != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^if  ( actualVar == null || expectedScope.getVar ( var .getNameNode (  )   )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^if  ( actualVar == false ) {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P13_Insert_Block]^if  (  ( ! ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  )  )  ||  ( ! ( isNodeAttached ( actualVar.getNameNode (  )  )  )  )  )  {     compiler.report ( make ( MOVED_VARIABLE, var.getName (  )  )  ) ; }^242^^^^^231^255^[Delete]^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P2_Replace_Operator]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  &&^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) .getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^} else if  ( !VerifyingCallback ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^} else if  ( !checkNodesMatch ( var .getName (  )  , actualVar^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^} else if  ( !checkNodesMatch ( var .getNameNode (  )  , actualVar^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^}  if  ( !checkNodesMatch ( var .getName (  )  , actualVar^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler.addChangeHandler ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^compiler.addChangeHandler ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make (  var.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^JSError.make ( MOVED_VARIABLE, actualVar .getNameNode (  )   )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^!checkNodesMatch ( var.getNameNode (  ) .getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^231^255^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^!checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^231^255^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^!VerifyingCallback ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^231^255^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^!checkNodesMatch ( var .getName (  )  , actualVar^247^248^249^250^^231^255^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^var .getName (  )  , actualVar^248^249^250^^^231^255^var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^actualVar.getNameNode (  )  )  || !isNodeAttached ( var.getNameNode (  )  )  )  {^249^250^^^^231^255^actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^!isNodeAttached ( var.getNameNode (  )  )  )  {^250^^^^^231^255^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^!exitScope ( actualVar.getNameNode (  )  )  )  {^250^^^^^231^255^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^!isNodeAttached ( actualVar .getName (  )   )  )  {^250^^^^^231^255^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^250^251^252^^^231^255^!isNodeAttached ( actualVar.getNameNode (  )  )  )  { compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^compiler.addChangeHandler ( JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler.addChangeHandler ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( MISSING_VARIABLE, var .getNameNode (  )   )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make (  var.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^JSError.make ( MISSING_VARIABLE, var .getNameNode (  )   )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^JSError.make ( MISSING_VARIABLE, actualVar .getNameNode (  )   )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^}  if  ( !VerifyingCallback ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^Scope.Var actualVar = expectedScope.getVar ( var.getName (  )  ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^Scope.Var actualVar = var.getVar ( actualScope.getName (  )  ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^Scope actualScope = actualScopes.get ( i ) ;Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P12_Insert_Condition]^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  { Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ; }^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Var var = it .hasNext (  )  ;^240^^^^^231^255^Var var = it.next (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^240^^^^^231^255^Var var = it.next (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^Scope.Var actualVar = actualScope.getVar ( actualVar.getName (  )  ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^Scope.Var actualVar = actualScope.getVar ( var .getNameNode (  )   ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^243^^^^^231^255^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^expectedScope .getVars (  )   != var )  {^243^^^^^231^255^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^243^244^245^^^231^255^expectedScope.getVar ( var.getName (  )  )  != var )  { compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^compiler.addChangeHandler ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^actualVar .getName (  )   )  || !isNodeAttached ( actualVar^249^250^^^^231^255^actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^!exitScope ( var.getNameNode (  )  )  )  {^250^^^^^231^255^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( actualVar == null || var.getVar ( expectedScope.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( var == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^if  ( actualVar == false || expectedScope .getVars (  )   != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^JSError.make ( VARIABLE_COUNT_MISMATCH, var .getNameNode (  )   )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^JSError.make ( VARIABLE_COUNT_MISMATCH, var .getNameNode (  )   )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^Iterator<Var> it = actualScope.getVars (  ) ;^238^^^^^231^255^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^Iterator<Var> it = expectedScope .getVar (  )  ;^238^^^^^231^255^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^Scope.Var actualVar = actualScope .getVars (  )  ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^238^^^^^231^255^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^239^240^^^^231^255^while  ( it.hasNext (  )  )  { Var var = it.next (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Var var = null .hasNext (  )  ;^240^^^^^231^255^Var var = it.next (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( SCOPE_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  Integer.toString ( expectedScope.getVarCount (  )  ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( expectedScope, Integer.toString ( VARIABLE_COUNT_MISMATCH.getVarCount (  )  ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( SCOPE_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make (  Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( expectedScope, Integer.toString ( VARIABLE_COUNT_MISMATCH.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope .getVars (  )   ) , Integer.toString ( actualScope^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^JSError.make ( SCOPE_MISMATCH, Integer.toString ( expectedScope .getVars (  )   ) , Integer.toString ( actualScope^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^235^236^^^^220^250^Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^235^236^^^^220^250^Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^Integer.toString ( expectedScope .getVars (  )   ) , Integer.toString ( actualScope^235^236^^^^220^250^Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Integer.toString ( actualScope .getVars (  )   ) , Integer.toString ( actualScope^235^236^^^^220^250^Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^Integer.toString ( actualScope .getVars (  )   )  )  ) ;^236^^^^^221^251^Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^236^^^^^221^251^Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^236^^^^^221^251^Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^236^^^^^221^251^Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P12_Insert_Condition]^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  { Integer.toString ( actualScope.getVarCount (  )  )  )  ) ; }^236^^^^^221^251^Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( var == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^if  ( actualVar == true || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^}  if  ( !VerifyingCallback ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^JSError.make ( MOVED_VARIABLE, actualVar .getNameNode (  )   )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^JSError.make ( MOVED_VARIABLE, actualVar .getNameNode (  )   )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^compiler.addChangeHandler ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^compiler.addChangeHandler ( JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < expectedScopes.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= expectedScopes.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P3_Replace_Literal]^for  ( int i = -8; i < expectedScopes.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < expectedScopes.size() + 5 ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^for  ( int i = 0; i < actualScopes.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^for  ( int i = 0; i < expectedScopes.add (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^for  ( int i = 0; i < 2.add (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^if  ( actualVar == this || actualScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^}  if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^compiler.addChangeHandler ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^actualVar .getName (  )   )  || !isNodeAttached ( actualVar^249^250^^^^234^264^actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, var .getNameNode (  )   )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^}  if  ( !checkNodesMatch ( var.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Var var = 0.next (  ) ;^240^^^^^225^255^Var var = it.next (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Scope.Var actualVar = expectedScope.getVar ( var .getNameNode (  )   ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^expectedScope .getVars (  )   != var )  {^243^^^^^228^258^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^expectedScope.getVar ( var .getNameNode (  )   )  != var )  {^243^^^^^228^258^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( !checkNodesMatch ( actualScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope .getVarCount (  )  .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , expectedScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^JSError.make ( SCOPE_MISMATCH, expectedScope .getVarCount (  )  .toStringTree (  ) , expectedScope^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^227^^^^^221^229^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P2_Replace_Operator]^if  ( expectedScope.getVarCount (  )  > actualScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P2_Replace_Operator]^if  ( expectedScope.getVarCount (  )  == actualScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^if  ( expectedScope .getVars (  )   != expectedScope^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^while  ( it .next (  )   )  {^239^^^^^231^255^while  ( it.hasNext (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( actualVar == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^if  ( actualVar == true ) {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Scope.Var actualVar = actualScope.getVar ( actualVar .getNameNode (  )   ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, var .getNameNode (  )   )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^if  ( expectedScope == null || actualVar.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^if  ( actualVar == true || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^}  if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^} else if  ( !VerifyingCallback ( actualVar.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^while  ( 4.hasNext (  )  )  {^239^^^^^231^255^while  ( it.hasNext (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^240^241^^^^231^255^Var var = it.next (  ) ; Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Scope.Var actualVar = expectedScope.getVar ( var .getNameNode (  )   ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^expectedScope.getVar ( var .getNameNode (  )   )  != var )  {^243^^^^^231^255^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^compiler .addChangeHandler ( 2 )   ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope .getVars (  )   ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^!exitScope ( var.getNameNode (  )  )  )  {^250^^^^^235^265^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^compiler.addChangeHandler ( JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^JSError.make ( VARIABLE_COUNT_MISMATCH, var .getNameNode (  )   )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler .addChangeHandler ( null )   ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^Scope expectedScope = i.get ( expectedScopes ) ;^218^^^^^203^233^Scope expectedScope = expectedScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Scope expectedScope = expectedScopes .put ( n )  ;^218^^^^^203^233^Scope expectedScope = expectedScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^Scope actualScope = actualScopes.get ( i ) ;Scope expectedScope = expectedScopes.get ( i ) ;^218^^^^^203^233^Scope expectedScope = expectedScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^Scope actualScope = i.get ( actualScopes ) ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Scope actualScope = actualScopes .put ( actualRoot )  ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;Scope actualScope = actualScopes.get ( i ) ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^Scope expectedScope = expectedScopes.get ( i ) ;Scope actualScope = actualScopes.get ( i ) ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^Iterator<Var> it = actualScope.getVars (  ) ;^238^^^^^223^253^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Iterator<Var> it = expectedScope .getVar (  )  ;^238^^^^^223^253^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^218^^^^^203^233^Scope expectedScope = expectedScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^Scope actualScope = 2.get ( i ) ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^return cache.scopes.get ( n ) ;Scope actualScope = actualScopes.get ( i ) ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^actualScope .getVarCount (  )   )  )  {^222^^^^^207^237^actualScope.getRootNode (  )  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  expectedScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope .getVarCount (  )  .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( VARIABLE_COUNT_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) .getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make (  expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) , expectedScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^JSError.make ( SCOPE_MISMATCH, expectedScope .getVarCount (  )  .toStringTree (  ) , actualScope^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^JSError.make ( VARIABLE_COUNT_MISMATCH, expectedScope .getVarCount (  )  .toStringTree (  ) , actualScope^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^226^227^^^^211^241^expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P11_Insert_Donor_Statement]^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^226^227^^^^211^241^expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^expectedScope .getVarCount (  )  .toStringTree (  ) , actualScope^226^227^^^^211^241^expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^actualScope .getVarCount (  )  .toStringTree (  )  )  ) ;^227^^^^^212^242^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^227^^^^^212^242^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Integer.toString ( expectedScope .getVars (  )   )  )  ) ;^236^^^^^221^251^Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Iterator<Var> it = actualScope .getVar (  )  ;^238^^^^^223^253^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^238^^^^^223^253^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^while  ( 4.hasNext (  )  )  {^239^^^^^224^254^while  ( it.hasNext (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^239^240^^^^224^254^while  ( it.hasNext (  )  )  { Var var = it.next (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^240^^^^^225^255^Var var = it.next (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^expectedScope.getVar ( actualVar .getNameNode (  )   )  != var )  {^243^^^^^228^258^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < expectedScopes.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < expectedScopes.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < expectedScopes.size() + 2 ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Scope expectedScope = null.get ( i ) ;^218^^^^^203^233^Scope expectedScope = expectedScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < expectedScopes.size() - 6 ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^218^219^^^^203^233^Scope expectedScope = expectedScopes.get ( i ) ; Scope actualScope = actualScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P7_Replace_Invocation]^Scope actualScope = actualScopes .put ( n )  ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^Scope actualScope = this.get ( i ) ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, expectedScope .getVarCount (  )  .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P14_Delete_Statement]^^227^228^^^^212^242^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ; continue;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^compiler.addChangeHandler ( JSError.make ( VARIABLE_COUNT_MISMATCH, var.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^JSError.make ( VARIABLE_COUNT_MISMATCH, var .getNameNode (  )   )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^JSError.make ( MISSING_VARIABLE, actualVar .getNameNode (  )   )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P8_Replace_Mix]^compiler.addChangeHandler ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  Scope  actualScope  expectedScope  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  ScopeCreator  scopeCreator  Iterator  it  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  int  i  
[P5_Replace_Variable]^Node currentA = parent;^263^^^^^262^276^Node currentA = nodeA;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^Node currentB = parent;^264^^^^^262^276^Node currentB = nodeB;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P2_Replace_Operator]^while  ( currentA != null || currentB != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P2_Replace_Operator]^while  ( currentA == null && currentB != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P2_Replace_Operator]^while  ( currentA != null && currentB == null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^while  ( parent != null && currentB != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^while  ( currentA != null && parent != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^while  ( currentB != null && currentA != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P2_Replace_Operator]^if  ( currentA.getType (  )  != currentB.getType (  )  && !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P2_Replace_Operator]^if  ( currentA.getType (  )  == currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^if  ( parent.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^if  ( currentA.getType (  )  != parent.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^if  ( currentB.getType (  )  != currentA.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P6_Replace_Expression]^if  ( currentA.getType (  )  != currentB.getType (  )  ) {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P6_Replace_Expression]^if  (  !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^if  ( currentA.isEquivalentTo (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P15_Unwrap_Block]^return false;^266^267^268^269^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  { return false; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P16_Remove_Block]^^266^267^268^269^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  { return false; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P13_Insert_Block]^if  (  ( current.getType (  )  )  ==  ( SCRIPT )  )  {     return true; }^266^^^^^262^276^[Delete]^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P3_Replace_Literal]^return true;^268^^^^^262^276^return false;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^currentA = nodeB.getParent (  ) ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^currentA = currentA.isEquivalentTo (  ) ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^currentA =  parent.getParent (  ) ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^currentB = currentB.getParent (  ) ;currentA = currentA.getParent (  ) ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^currentB = nodeA.getParent (  ) ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^currentB = currentB.isEquivalentTo (  ) ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^currentB =  parent.getParent (  ) ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^currentA = currentA.getParent (  ) ;currentB = currentB.getParent (  ) ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^if  ( nodeB.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^if  ( currentA .getParent (  )   != currentB^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^if  ( currentA.isEquivalentTo (  )  != parent.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^!currentA.isEquivalentTo ( parent )  )  {^267^^^^^262^276^!currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^!currentA .getParent (  )   )  {^267^^^^^262^276^!currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^!currentA.isEquivalentTo ( nodeB )  )  {^267^^^^^262^276^!currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^267^268^^^^262^276^!currentA.isEquivalentTo ( currentB )  )  { return false;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^271^272^^^^262^276^currentA = currentA.getParent (  ) ; currentB = currentB.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^currentB = nodeB.getParent (  ) ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^currentB = currentB .getType (  )  ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P2_Replace_Operator]^if  ( currentA.getType (  )  <= currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^currentA = currentA .getType (  )  ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^if  ( nodeA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^if  ( parent.isEquivalentTo (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^if  ( currentA .getParent (  )   != nodeA^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^currentA = nodeA.getParent (  ) ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^currentA = parent.isEquivalentTo (  ) ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^currentB = parent.isEquivalentTo (  ) ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P2_Replace_Operator]^return currentA == null || currentB == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P2_Replace_Operator]^return currentA != null && currentB == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^return parent == null && currentB == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^return currentA == null && nodeB == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^return currentB == null && currentA == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^return parent ;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P2_Replace_Operator]^if  ( current.getType (  )  != Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^if  ( nodeA.getType (  )  == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^if  ( current.getType (  )  == Token.1 )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^if  ( current.isEquivalentTo (  )  == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P15_Unwrap_Block]^return true;^282^283^284^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  { return true; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P16_Remove_Block]^^282^283^284^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  { return true; }^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P13_Insert_Block]^if  (  (  ( currentA.getType (  )  )  !=  ( currentB.getType (  )  )  )  ||  ( ! ( currentA.isEquivalentTo ( currentB )  )  )  )  {     return false; }^282^^^^^278^287^[Delete]^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P3_Replace_Literal]^return false;^283^^^^^278^287^return true;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^for  ( Node current = nodeA;^280^^^^^278^287^for  ( Node current = node;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^for  ( Node nodeA = node;^280^^^^^278^287^for  ( Node current = node;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^for  ( Node node = current;^280^^^^^278^287^for  ( Node current = node;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^for  ( Node parent = node;^280^^^^^278^287^for  ( Node current = node;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^if  ( nodeB.getType (  )  == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^if  ( current.getType (  )  == Token.4 )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^current != null; node = current.getParent (  )  )  {^281^^^^^278^287^current != null; current = current.getParent (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^current != null; current = current.isEquivalentTo (  )  )  {^281^^^^^278^287^current != null; current = current.getParent (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^current !=  null; nodeB^281^^^^^278^287^current != null; current = current.getParent (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^for  ( Node current = parent;^280^^^^^278^287^for  ( Node current = node;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^for  ( Node current = nodeB;^280^^^^^278^287^for  ( Node current = node;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^Node currentB = nodeB;for  ( Node current = node;^280^^^^^278^287^for  ( Node current = node;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P11_Insert_Donor_Statement]^Node currentA = nodeA;for  ( Node current = node;^280^^^^^278^287^for  ( Node current = node;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P5_Replace_Variable]^current != null; parent = current.getParent (  )  )  {^281^^^^^278^287^current != null; current = current.getParent (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^current != null; nodeB = current.getParent (  )  )  {^281^^^^^278^287^current != null; current = current.getParent (  )  )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P14_Delete_Statement]^^281^282^283^^^278^287^current != null; current = current.getParent (  )  )  { if  ( current.getType (  )  == Token.SCRIPT )  { return true;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P7_Replace_Invocation]^if  ( current .getParent (  )   == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^if  ( node.getType (  )  == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P3_Replace_Literal]^return true;^286^^^^^278^287^return false;^[CLASS] SymbolTable MemoizedData VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^private Map<Node, Scope> scopes ;^140^^^^^135^145^private Map<Node, Scope> scopes = Maps.newHashMap (  ) ;^[CLASS] MemoizedData  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] AbstractCompiler  compiler  boolean  collectingExpected  locked  DiagnosticType  MISSING_VARIABLE  MOVED_VARIABLE  SCOPE_MISMATCH  VARIABLE_COUNT_MISMATCH  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  ScopeCreator  scopeCreator  List  actualScopes  expectedScopes  MemoizedData  cache  Map  scopes  
[P8_Replace_Mix]^private final List<Scope> expectedScopes  = null ;^163^^^^^158^168^private final List<Scope> expectedScopes = Lists.newArrayList (  ) ;^[CLASS] VerifyingCallback  [METHOD] <init> [RETURN_TYPE] SymbolTable$MemoizedData()   [VARIABLES] Map  scopes  boolean  
[P8_Replace_Mix]^private  List<Scope> actualScopes = Lists.newArrayList (  ) ;^164^^^^^159^169^private final List<Scope> actualScopes = Lists.newArrayList (  ) ;^[CLASS] VerifyingCallback  [METHOD] <init> [RETURN_TYPE] SymbolTable$MemoizedData()   [VARIABLES] Map  scopes  boolean  
[P3_Replace_Literal]^private boolean collectingExpected = false;^165^^^^^160^170^private boolean collectingExpected = true;^[CLASS] VerifyingCallback  [METHOD] <init> [RETURN_TYPE] SymbolTable$MemoizedData()   [VARIABLES] Map  scopes  boolean  
[P8_Replace_Mix]^private  Node actualRoot;^166^^^^^161^171^private final Node actualRoot;^[CLASS] VerifyingCallback  [METHOD] <init> [RETURN_TYPE] SymbolTable$MemoizedData()   [VARIABLES] Map  scopes  boolean  
[P5_Replace_Variable]^this.actualRoot = expectedRoot;^170^^^^^169^172^this.actualRoot = actualRoot;^[CLASS] VerifyingCallback  [METHOD] <init> [RETURN_TYPE] Node)   Node expectedRoot Node actualRoot [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  expectedRoot  
[P11_Insert_Donor_Statement]^this.expectedRoot = expectedRoot;this.actualRoot = actualRoot;^170^^^^^169^172^this.actualRoot = actualRoot;^[CLASS] VerifyingCallback  [METHOD] <init> [RETURN_TYPE] Node)   Node expectedRoot Node actualRoot [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  expectedRoot  
[P5_Replace_Variable]^this.expectedRoot = actualRoot;^171^^^^^169^172^this.expectedRoot = expectedRoot;^[CLASS] VerifyingCallback  [METHOD] <init> [RETURN_TYPE] Node)   Node expectedRoot Node actualRoot [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  expectedRoot  
[P11_Insert_Donor_Statement]^this.actualRoot = actualRoot;this.expectedRoot = expectedRoot;^171^^^^^169^172^this.expectedRoot = expectedRoot;^[CLASS] VerifyingCallback  [METHOD] <init> [RETURN_TYPE] Node)   Node expectedRoot Node actualRoot [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  expectedRoot  
[P3_Replace_Literal]^return false;^177^^^^^175^178^return true;^[CLASS] VerifyingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  NodeTraversal  nodeTraversal  Node  actualRoot  expectedRoot  n  parent  
[P15_Unwrap_Block]^expectedScopes.add(t.getScope());^188^189^190^191^192^187^193^if  ( collectingExpected )  { expectedScopes.add ( t.getScope (  )  ) ; } else { actualScopes.add ( t.getScope (  )  ) ; }^[CLASS] VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  NodeTraversal  t  Node  actualRoot  expectedRoot  n  parent  
[P16_Remove_Block]^^188^189^190^191^192^187^193^if  ( collectingExpected )  { expectedScopes.add ( t.getScope (  )  ) ; } else { actualScopes.add ( t.getScope (  )  ) ; }^[CLASS] VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  NodeTraversal  t  Node  actualRoot  expectedRoot  n  parent  
[P7_Replace_Invocation]^actualScopes.get ( t.getScope (  )  ) ;^191^^^^^187^193^actualScopes.add ( t.getScope (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  NodeTraversal  t  Node  actualRoot  expectedRoot  n  parent  
[P7_Replace_Invocation]^actualScopes.add ( t.traverse (  )  ) ;^191^^^^^187^193^actualScopes.add ( t.getScope (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  NodeTraversal  t  Node  actualRoot  expectedRoot  n  parent  
[P14_Delete_Statement]^^191^^^^^187^193^actualScopes.add ( t.getScope (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  NodeTraversal  t  Node  actualRoot  expectedRoot  n  parent  
[P11_Insert_Donor_Statement]^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;actualScopes.add ( t.getScope (  )  ) ;^191^^^^^187^193^actualScopes.add ( t.getScope (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  NodeTraversal  t  Node  actualRoot  expectedRoot  n  parent  
[P11_Insert_Donor_Statement]^expectedScopes.add ( t.getScope (  )  ) ;actualScopes.add ( t.getScope (  )  ) ;^191^^^^^187^193^actualScopes.add ( t.getScope (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  NodeTraversal  t  Node  actualRoot  expectedRoot  n  parent  
[P7_Replace_Invocation]^expectedScopes.get ( t.getScope (  )  ) ;^189^^^^^187^193^expectedScopes.add ( t.getScope (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  NodeTraversal  t  Node  actualRoot  expectedRoot  n  parent  
[P7_Replace_Invocation]^expectedScopes.add ( t.traverse (  )  ) ;^189^^^^^187^193^expectedScopes.add ( t.getScope (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  NodeTraversal  t  Node  actualRoot  expectedRoot  n  parent  
[P14_Delete_Statement]^^189^^^^^187^193^expectedScopes.add ( t.getScope (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  NodeTraversal  t  Node  actualRoot  expectedRoot  n  parent  
[P11_Insert_Donor_Statement]^actualScopes.add ( t.getScope (  )  ) ;expectedScopes.add ( t.getScope (  )  ) ;^189^^^^^187^193^expectedScopes.add ( t.getScope (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] exitScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  NodeTraversal  t  Node  actualRoot  expectedRoot  n  parent  
[P2_Replace_Operator]^if  ( cache != null )  {^196^^^^^195^204^if  ( cache == null )  {^[CLASS] VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  expectedRoot  n  parent  
[P8_Replace_Mix]^if  ( cache == true )  {^196^^^^^195^204^if  ( cache == null )  {^[CLASS] VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  expectedRoot  n  parent  
[P15_Unwrap_Block]^return ;^196^197^198^199^^195^204^if  ( cache == null )  {  return; }^[CLASS] VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  expectedRoot  n  parent  
[P16_Remove_Block]^^196^197^198^199^^195^204^if  ( cache == null )  {  return; }^[CLASS] VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  expectedRoot  n  parent  
[P8_Replace_Mix]^if  ( cache.scopes.isEmpty (  )  )  {^201^^^^^195^204^if  ( !cache.scopes.isEmpty (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  expectedRoot  n  parent  
[P15_Unwrap_Block]^verifyScopes();^201^202^203^^^195^204^if  ( !cache.scopes.isEmpty (  )  )  { verifyScopes (  ) ; }^[CLASS] VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  expectedRoot  n  parent  
[P16_Remove_Block]^^201^202^203^^^195^204^if  ( !cache.scopes.isEmpty (  )  )  { verifyScopes (  ) ; }^[CLASS] VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  expectedRoot  n  parent  
[P14_Delete_Statement]^^202^203^^^^195^204^verifyScopes (  ) ; }^[CLASS] VerifyingCallback  [METHOD] verify [RETURN_TYPE] void   [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  expectedRoot  n  parent  
[P3_Replace_Literal]^collectingExpected = false;^207^^^^^192^222^collectingExpected = true;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^collectingExpected = false;collectingExpected = true;^207^^^^^192^222^collectingExpected = true;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^NodeTraversal.traverse ( 3, expectedRoot, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, parent, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^NodeTraversal.traverse (  expectedRoot, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^NodeTraversal.traverse ( expectedRoot, compiler, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^NodeTraversal.getScope ( compiler, expectedRoot, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^NodeTraversal.getScope ( compiler, parent, this ) ;^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^208^^^^^193^223^NodeTraversal.traverse ( compiler, expectedRoot, this ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P3_Replace_Literal]^collectingExpected = true;^210^^^^^195^225^collectingExpected = false;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^collectingExpected = true;collectingExpected = false;^210^^^^^195^225^collectingExpected = false;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P12_Insert_Condition]^if  ( collectingExpected )  { collectingExpected = false; }^210^^^^^195^225^collectingExpected = false;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( parent ) ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^( new NodeTraversal (  this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^( new NodeTraversal ( actualRoot, this, SymbolTable.this )  ) .traverse ( compiler ) ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .getScope ( actualRoot ) ;^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^211^212^^^^196^226^( new NodeTraversal ( compiler, this, SymbolTable.this )  ) .traverse ( actualRoot ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P2_Replace_Operator]^Preconditions.checkState ( expectedScopes.size (  )  > actualScopes.size (  )  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P3_Replace_Literal]^Preconditions.checkState ( expectedScopes.size() + 6  == actualScopes.size() + 6  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^Preconditions.checkState ( actualScopes.size (  )  == expectedScopes.size (  )  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^Preconditions.checkState ( expectedScopes.add (  )  == actualScopes.size (  )  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^Preconditions.checkState ( expectedScopes.size (  )  == null.size (  )  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P3_Replace_Literal]^Preconditions.checkState ( expectedScopes.size() + 2  == actualScopes.size() + 2  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P3_Replace_Literal]^Preconditions.checkState ( expectedScopes.size() - 6  == actualScopes.size() - 6  ) ;^215^^^^^200^230^Preconditions.checkState ( expectedScopes.size (  )  == actualScopes.size (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^while  ( it .next (  )   )  {^239^^^^^224^254^while  ( it.hasNext (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P2_Replace_Operator]^if  ( actualVar == null && expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P2_Replace_Operator]^if  ( actualVar != null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P2_Replace_Operator]^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  == var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^if  ( actualVar == null || actualScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^if  ( expectedScope == null || actualVar.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^if  ( var == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P6_Replace_Expression]^if  ( actualVar == null ) {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P6_Replace_Expression]^if  (  expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P6_Replace_Expression]^if  ( !(checkNodesMatch(var.getNameNode(), actualVar.getNameNode())) || !(isNodeAttached(actualVar.getNameNode())) )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^if  ( actualVar == null || expectedScope.getVar ( var .getNameNode (  )   )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^if  ( actualVar == false ) {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P13_Insert_Block]^if  (  ( ! ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  )  )  ||  ( ! ( isNodeAttached ( actualVar.getNameNode (  )  )  )  )  )  {     compiler.report ( make ( MOVED_VARIABLE, var.getName (  )  )  ) ; }^242^^^^^227^257^[Delete]^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P2_Replace_Operator]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  &&^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) .getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^} else if  ( !VerifyingCallback ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^} else if  ( !checkNodesMatch ( var .getName (  )  , actualVar^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make (  var.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^!checkNodesMatch ( var.getNameNode (  ) .getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^232^262^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^!checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^232^262^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^!VerifyingCallback ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^232^262^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^!checkNodesMatch ( var .getName (  )  , actualVar^247^248^249^250^^232^262^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^actualVar.getNameNode (  )  )  || !isNodeAttached ( var.getNameNode (  )  )  )  {^249^250^^^^234^264^actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^!isNodeAttached ( var.getNameNode (  )  )  )  {^250^^^^^235^265^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^!exitScope ( actualVar.getNameNode (  )  )  )  {^250^^^^^235^265^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^250^251^252^^^235^265^!isNodeAttached ( actualVar.getNameNode (  )  )  )  { compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^!isNodeAttached ( actualVar .getName (  )   )  )  {^250^^^^^235^265^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make (  var.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make (  var.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^JSError.make ( MISSING_VARIABLE, var .getNameNode (  )   )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^}  if  ( !checkNodesMatch ( var.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( null, var.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^compiler.report ( JSError.make ( 1, var.getName (  )  )  ) ;^251^252^^^^246^253^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^Scope.Var actualVar = expectedScope.getVar ( var.getName (  )  ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^Scope.Var actualVar = var.getVar ( actualScope.getName (  )  ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^Scope actualScope = actualScopes.get ( i ) ;Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P12_Insert_Condition]^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  { Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ; }^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^Var var = it .hasNext (  )  ;^240^^^^^225^255^Var var = it.next (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^240^241^^^^225^255^Var var = it.next (  ) ; Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^Scope.Var actualVar = actualScope.getVar ( actualVar.getName (  )  ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^Scope.Var actualVar = actualScope.getVar ( var .getNameNode (  )   ) ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^Scope.Var actualVar = expectedScope .getVars (  )  ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^243^^^^^228^258^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^expectedScope.getVar ( var .getNameNode (  )   )  != var )  {^243^^^^^228^258^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^243^244^245^^^228^258^expectedScope.getVar ( var.getName (  )  )  != var )  { compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( MISSING_VARIABLE, var .getNameNode (  )   )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar .getNameNode (  )   )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make (  var.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^JSError.make ( MISSING_VARIABLE, var .getNameNode (  )   )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^var .getName (  )  , actualVar^248^249^250^^^233^263^var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^if  ( !checkNodesMatch ( actualScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) .getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^if  ( !checkNodesMatch ( actualScope.getRootNode (  ) , expectedScope.getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^if  ( !VerifyingCallback ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^if  ( !checkNodesMatch ( expectedScope .getVarCount (  )  , actualScope^221^222^^^^206^236^if  ( !checkNodesMatch ( expectedScope.getRootNode (  ) , actualScope.getRootNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  expectedScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope .getVarCount (  )  .toStringTree (  ) ,^223^224^225^226^^221^229^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) .getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make (  expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) , expectedScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( actualScope, expectedScope.getRootNode (  ) .toStringTree (  ) , SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^JSError.make ( SCOPE_MISMATCH, expectedScope .getVarCount (  )  .toStringTree (  ) , actualScope^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^JSError.make ( SCOPE_MISMATCH, actualScope .getVarCount (  )  .toStringTree (  ) , actualScope^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^226^227^^^^221^229^expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^226^227^^^^221^229^expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^expectedScope .getVarCount (  )  .toStringTree (  ) , actualScope^226^227^^^^221^229^expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^227^^^^^221^229^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P2_Replace_Operator]^if  ( expectedScope.getVarCount (  )  >= actualScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P2_Replace_Operator]^if  ( expectedScope.getVarCount (  )  > actualScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^if  ( actualScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^if  ( expectedScope.getVarCount (  )  != expectedScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^if  ( actualScope.getVarCount (  )  != expectedScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P6_Replace_Expression]^if  ( actualVar == null || getName()) != var )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P6_Replace_Expression]^if  ( actualVar == null )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P6_Replace_Expression]^if  ( expectedScope.getVar ( var.getName (  )  )  != var )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P6_Replace_Expression]^if  ( !(checkNodesMatch(var.getNameNode(), actualVar.getNameNode())) || !(isNodeAttached(actualVar.getNameNode())) )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^if  ( expectedScope .getVars (  )   != actualScope^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^if  ( actualScope .getVars (  )   != actualScope^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^while  ( it .next (  )   )  {^239^^^^^231^255^while  ( it.hasNext (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P2_Replace_Operator]^if  ( actualVar == null && expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P2_Replace_Operator]^if  ( actualVar != null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P2_Replace_Operator]^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  == var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^if  ( var == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^if  ( actualVar == null || actualScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^if  ( actualVar == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^if  ( var == null || expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P6_Replace_Expression]^if  ( actualVar == null ) {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P6_Replace_Expression]^if  (  expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P6_Replace_Expression]^if  ( !(checkNodesMatch(var.getNameNode(), actualVar.getNameNode())) || !(isNodeAttached(actualVar.getNameNode())) )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^if  ( actualVar == this || expectedScope.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P13_Insert_Block]^if  (  ( ! ( checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  )  )  ||  ( ! ( isNodeAttached ( actualVar.getNameNode (  )  )  )  )  )  {     compiler.report ( make ( MOVED_VARIABLE, var.getName (  )  )  ) ; }^242^^^^^231^255^[Delete]^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P2_Replace_Operator]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  &&^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) .getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^} else if  ( !VerifyingCallback ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^} else if  ( !checkNodesMatch ( var .getName (  )  , actualVar^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^}  if  ( !checkNodesMatch ( var .getName (  )  , actualVar^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( MOVED_VARIABLE, actualVar.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make (  var.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^!checkNodesMatch ( var.getNameNode (  ) .getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^231^255^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^!checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^231^255^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^!VerifyingCallback ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^247^248^249^250^^231^255^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^actualVar.getNameNode (  )  )  || !isNodeAttached ( var.getNameNode (  )  )  )  {^249^250^^^^231^255^actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^!isNodeAttached ( var.getNameNode (  )  )  )  {^250^^^^^231^255^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^!exitScope ( actualVar.getNameNode (  )  )  )  {^250^^^^^231^255^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^!exitScope ( var.getNameNode (  )  )  )  {^250^^^^^231^255^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^250^251^252^^^231^255^!isNodeAttached ( actualVar.getNameNode (  )  )  )  { compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make (  var.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( var, MISSING_VARIABLE.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^} else if  ( !checkNodesMatch ( var .getNameNode (  )  , actualVar^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^}  if  ( !checkNodesMatch ( var.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^255^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^Var var = it .hasNext (  )  ;^240^^^^^231^255^Var var = it.next (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^Scope.Var actualVar = expectedScope.getVar ( var.getName (  )  ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^Scope.Var actualVar = var.getVar ( actualScope.getName (  )  ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^Scope.Var actualVar = actualScope .getVars (  )  ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^Scope actualScope = actualScopes.get ( i ) ;Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P12_Insert_Condition]^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  { Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ; }^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^240^241^^^^231^255^Var var = it.next (  ) ; Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^Scope.Var actualVar = actualScope.getVar ( actualVar.getName (  )  ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^expectedScope.getVar ( actualVar.getName (  )  )  != var )  {^243^^^^^231^255^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^243^244^245^^^231^255^expectedScope.getVar ( var.getName (  )  )  != var )  { compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^expectedScope.getVar ( var .getNameNode (  )   )  != var )  {^243^^^^^231^255^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( MISSING_VARIABLE, var .getNameNode (  )   )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar .getNameNode (  )   )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^JSError.make ( MISSING_VARIABLE, var .getNameNode (  )   )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^!checkNodesMatch ( var .getName (  )  , actualVar^247^248^249^250^^231^255^!checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^var .getName (  )  , actualVar^248^249^250^^^231^255^var.getNameNode (  ) , actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^!isNodeAttached ( actualVar .getName (  )   )  )  {^250^^^^^231^255^!isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^if  ( expectedScope == null || actualVar.getVar ( var.getName (  )  )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^if  ( actualVar == null || expectedScope.getVar ( var .getNameNode (  )   )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^if  ( actualVar == this ) {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( null, var.getName (  )  )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^Iterator<Var> it = actualScope.getVars (  ) ;^238^^^^^231^255^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^Var var = this.next (  ) ;^240^^^^^231^255^Var var = it.next (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^Scope.Var actualVar = actualScope.getVar ( var .getNameNode (  )   ) ;^241^^^^^231^255^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^Iterator<Var> it = expectedScope .getVar (  )  ;^238^^^^^231^255^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^238^^^^^231^255^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^239^240^^^^231^255^while  ( it.hasNext (  )  )  { Var var = it.next (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^actualVar .getName (  )   )  || !isNodeAttached ( actualVar^249^250^^^^231^255^actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( actualScope.getVarCount (  )  ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  Integer.toString ( expectedScope.getVarCount (  )  ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope .getVars (  )   ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make (  Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( actualScope, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( VARIABLE_COUNT_MISMATCH.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope .getVars (  )   ) , Integer.toString ( actualScope^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^Integer.toString ( actualScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^235^236^^^^220^250^Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^235^236^^^^220^250^Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^Integer.toString ( actualScope .getVars (  )   ) , Integer.toString ( actualScope^235^236^^^^220^250^Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^236^^^^^221^251^Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^236^^^^^221^251^Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^236^^^^^221^251^Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P12_Insert_Condition]^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  { Integer.toString ( actualScope.getVarCount (  )  )  )  ) ; }^236^^^^^221^251^Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^if  ( actualVar == null || var.getVar ( expectedScope.getName (  )  )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^if  ( actualVar == this || expectedScope.getVar ( var .getNameNode (  )   )  != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^} else if  ( !checkNodesMatch ( actualVar.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^JSError.make ( null, var.getName (  )  )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^JSError.make ( MOVED_VARIABLE, actualVar .getNameNode (  )   )  ) ;^252^^^^^237^267^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( null, var.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^JSError.make ( MISSING_VARIABLE, actualVar .getNameNode (  )   )  ) ;^245^^^^^242^253^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^} else if  ( !VerifyingCallback ( var.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < expectedScopes.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= expectedScopes.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < expectedScopes.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < expectedScopes.size() + 3 ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^for  ( expectedScopent i = 0; i < is.size (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^for  ( int i = 0; i < expectedScopes.add (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^for  ( int i = 0; i < actualScopes.add (  ) ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^if  ( actualVar == null || expectedScope .getVars (  )   != var )  {^242^243^^^^227^257^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^actualVar .getName (  )   )  || !isNodeAttached ( actualVar^249^250^^^^234^264^actualVar.getNameNode (  )  )  || !isNodeAttached ( actualVar.getNameNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar .getNameNode (  )   )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( MISSING_VARIABLE, var .getNameNode (  )   )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^240^^^^^225^255^Var var = it.next (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( MISSING_VARIABLE, actualVar.getName (  )  )  ) ;^244^245^^^^229^259^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( null, var.getName (  )  )  ) ;^245^^^^^230^260^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , expectedScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^221^229^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^actualScope .getVarCount (  )  .toStringTree (  )  )  ) ;^227^^^^^221^229^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^227^228^^^^221^229^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ; continue;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P2_Replace_Operator]^if  ( expectedScope.getVarCount (  )  == actualScope.getVarCount (  )  )  {^231^^^^^216^246^if  ( expectedScope.getVarCount (  )  != actualScope.getVarCount (  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^if  ( actualVar == null || expectedScope .getVars (  )   != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^JSError.make ( 2, var.getName (  )  )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^compiler.report ( JSError.make ( MOVED_VARIABLE, actualVar .getNameNode (  )   )  ) ;^251^252^^^^231^255^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^JSError.make ( MOVED_VARIABLE, actualVar .getNameNode (  )   )  ) ;^252^^^^^231^255^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^JSError.make ( MISSING_VARIABLE, actualVar .getNameNode (  )   )  ) ;^245^^^^^231^255^JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^expectedScope .getVars (  )   != var )  {^243^^^^^231^255^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^if  ( actualVar == true || expectedScope.getVar ( var .getNameNode (  )   )  != var )  {^242^243^^^^231^255^if  ( actualVar == null || expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^compiler.report ( JSError.make ( null, var.getName (  )  )  ) ;^244^245^^^^231^255^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( expectedScope, Integer.toString ( VARIABLE_COUNT_MISMATCH.getVarCount (  )  ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( expectedScope, Integer.toString ( VARIABLE_COUNT_MISMATCH.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( expectedScope.getVarCount (  )  )  )  ) ;^233^234^235^236^^218^248^JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^Integer.toString ( expectedScope .getVars (  )   ) , Integer.toString ( actualScope^235^236^^^^220^250^Integer.toString ( expectedScope.getVarCount (  )  ) , Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^Integer.toString ( actualScope .getVars (  )   )  )  ) ;^236^^^^^221^251^Integer.toString ( actualScope.getVarCount (  )  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^} else if  ( !checkNodesMatch ( var .getNameNode (  )  , actualVar^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^JSError.make ( 4, var .getNameNode (  )   )  ) ;^252^^^^^246^253^JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( var, MOVED_VARIABLE.getName (  )  )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( MOVED_VARIABLE, var .getNameNode (  )   )  ) ;^251^252^^^^236^266^compiler.report ( JSError.make ( MOVED_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^compiler.report ( JSError.make ( 4, var.getName (  )  )  ) ;^244^245^^^^242^253^compiler.report ( JSError.make ( MISSING_VARIABLE, var.getName (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , var.getNameNode (  )  )  ||^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^}  if  ( !checkNodesMatch ( var .getName (  )  , actualVar^246^247^248^249^^231^261^} else if  ( !checkNodesMatch ( var.getNameNode (  ) , actualVar.getNameNode (  )  )  ||^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^Scope expectedScope = i.get ( expectedScopes ) ;^218^^^^^203^233^Scope expectedScope = expectedScopes.get ( i ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^Scope actualScope = actualScopes.get ( i ) ;Scope expectedScope = expectedScopes.get ( i ) ;^218^^^^^203^233^Scope expectedScope = expectedScopes.get ( i ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^Scope actualScope = i.get ( actualScopes ) ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;Scope actualScope = actualScopes.get ( i ) ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^Scope expectedScope = expectedScopes.get ( i ) ;Scope actualScope = actualScopes.get ( i ) ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^Iterator<Var> it = actualScope.getVars (  ) ;^238^^^^^223^253^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^Scope.Var actualVar = actualScope .getVars (  )  ;^241^^^^^226^256^Scope.Var actualVar = actualScope.getVar ( var.getName (  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^218^^^^^203^233^Scope expectedScope = expectedScopes.get ( i ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^Scope actualScope = this.get ( i ) ;^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^219^^^^^204^234^Scope actualScope = actualScopes.get ( i ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make (  expectedScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope .getVarCount (  )  .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( 1, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) .getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make (  expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) , expectedScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( actualScope, expectedScope.getRootNode (  ) .toStringTree (  ) , SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^JSError.make ( SCOPE_MISMATCH, expectedScope .getVarCount (  )  .toStringTree (  ) , actualScope^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^expectedScope .getVarCount (  )  .toStringTree (  ) , actualScope^226^227^^^^211^241^expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^226^227^^^^211^241^expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P11_Insert_Donor_Statement]^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^226^227^^^^211^241^expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^227^228^^^^212^242^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ; continue;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^227^^^^^212^242^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^238^^^^^223^253^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^239^240^^^^224^254^while  ( it.hasNext (  )  )  { Var var = it.next (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^Var var = 1.next (  ) ;^240^^^^^225^255^Var var = it.next (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^expectedScope .getVars (  )   != var )  {^243^^^^^228^258^expectedScope.getVar ( var.getName (  )  )  != var )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < expectedScopes.size() - 7 ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^Iterator<Var> it = expectedScope .getVar (  )  ;^238^^^^^223^253^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < expectedScopes.size() + 2 ; i++ )  {^217^^^^^202^232^for  ( int i = 0; i < expectedScopes.size (  ) ; i++ )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P14_Delete_Statement]^^218^219^^^^203^233^Scope expectedScope = expectedScopes.get ( i ) ; Scope actualScope = actualScopes.get ( i ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^actualScope .getVarCount (  )   )  )  {^222^^^^^207^237^actualScope.getRootNode (  )  )  )  {^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^compiler.report ( JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) ,^223^224^225^226^^208^238^compiler.report ( JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( SCOPE_MISMATCH, actualScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^JSError.make ( expectedScope, SCOPE_MISMATCH.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^224^225^226^227^^209^239^JSError.make ( SCOPE_MISMATCH, expectedScope.getRootNode (  ) .toStringTree (  ) , actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P7_Replace_Invocation]^actualScope .getVarCount (  )  .toStringTree (  )  )  ) ;^227^^^^^212^242^actualScope.getRootNode (  ) .toStringTree (  )  )  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^compiler.report ( JSError.make ( 1, Integer.toString ( expectedScope.getVarCount (  )  ) ,^232^233^234^235^^217^247^compiler.report ( JSError.make ( VARIABLE_COUNT_MISMATCH, Integer.toString ( expectedScope.getVarCount (  )  ) ,^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P8_Replace_Mix]^Iterator<Var> it = actualScope .getVar (  )  ;^238^^^^^223^253^Iterator<Var> it = expectedScope.getVars (  ) ;^[CLASS] VerifyingCallback  [METHOD] verifyScopes [RETURN_TYPE] void   [VARIABLES] boolean  collectingExpected  Scope  actualScope  expectedScope  Var  actualVar  var  Node  actualRoot  expectedRoot  n  parent  Iterator  it  List  actualScopes  expectedScopes  int  i  
[P5_Replace_Variable]^Node currentA = parent;^263^^^^^262^276^Node currentA = nodeA;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P5_Replace_Variable]^Node currentB = nodeA;^264^^^^^262^276^Node currentB = nodeB;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P2_Replace_Operator]^while  ( currentA != null || currentB != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P2_Replace_Operator]^while  ( currentA == null && currentB != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P2_Replace_Operator]^while  ( currentA != null && currentB == null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P5_Replace_Variable]^while  ( nodeB != null && currentB != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P5_Replace_Variable]^while  ( currentA != null && parent != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P5_Replace_Variable]^while  ( currentB != null && currentA != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P8_Replace_Mix]^while  ( currentA != null && nodeB != null )  {^265^^^^^262^276^while  ( currentA != null && currentB != null )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P2_Replace_Operator]^if  ( currentA.getType (  )  != currentB.getType (  )  && !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P2_Replace_Operator]^if  ( currentA.getType (  )  <= currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P5_Replace_Variable]^if  ( currentA.getType (  )  != nodeB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P5_Replace_Variable]^if  ( currentB.getType (  )  != currentA.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P6_Replace_Expression]^if  ( currentA.getType (  )  != currentB.getType (  )  ) {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P6_Replace_Expression]^if  (  !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P7_Replace_Invocation]^if  ( currentA.isEquivalentTo (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P15_Unwrap_Block]^return false;^266^267^268^269^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  { return false; }^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P16_Remove_Block]^^266^267^268^269^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  { return false; }^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P13_Insert_Block]^if  (  ( current.getType (  )  )  ==  ( SCRIPT )  )  {     return true; }^266^^^^^262^276^[Delete]^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P3_Replace_Literal]^return true;^268^^^^^262^276^return false;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P7_Replace_Invocation]^currentA = currentA.isEquivalentTo (  ) ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P8_Replace_Mix]^currentA =  nodeA.getParent (  ) ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P11_Insert_Donor_Statement]^currentB = currentB.getParent (  ) ;currentA = currentA.getParent (  ) ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P5_Replace_Variable]^currentB = parent.getParent (  ) ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P7_Replace_Invocation]^currentB = currentB.isEquivalentTo (  ) ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P7_Replace_Invocation]^currentB = currentB .getType (  )  ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P8_Replace_Mix]^currentB =  nodeB.getParent (  ) ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P11_Insert_Donor_Statement]^currentA = currentA.getParent (  ) ;currentB = currentB.getParent (  ) ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P8_Replace_Mix]^if  ( parent.isEquivalentTo (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P5_Replace_Variable]^if  ( currentA.getType (  )  != parent.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P7_Replace_Invocation]^if  ( currentA .getParent (  )   != currentB^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P8_Replace_Mix]^if  ( currentA.isEquivalentTo (  )  != parent.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P5_Replace_Variable]^!currentA.isEquivalentTo ( nodeB )  )  {^267^^^^^262^276^!currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P8_Replace_Mix]^!currentA.isEquivalentTo ( parent )  )  {^267^^^^^262^276^!currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P14_Delete_Statement]^^267^268^^^^262^276^!currentA.isEquivalentTo ( currentB )  )  { return false;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P7_Replace_Invocation]^currentA = currentA .getType (  )  ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P8_Replace_Mix]^currentA = parent.getParent (  ) ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P14_Delete_Statement]^^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P14_Delete_Statement]^^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P2_Replace_Operator]^if  ( currentA.getType (  )  < currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P5_Replace_Variable]^currentA = nodeB.getParent (  ) ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P8_Replace_Mix]^currentA =  null.getParent (  ) ;^271^^^^^262^276^currentA = currentA.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P8_Replace_Mix]^currentB =  null.getParent (  ) ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P5_Replace_Variable]^if  ( nodeA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^266^267^^^^262^276^if  ( currentA.getType (  )  != currentB.getType (  )  || !currentA.isEquivalentTo ( currentB )  )  {^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P14_Delete_Statement]^^271^272^^^^262^276^currentA = currentA.getParent (  ) ; currentB = currentB.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P8_Replace_Mix]^currentB = nodeA.isEquivalentTo (  ) ;^272^^^^^262^276^currentB = currentB.getParent (  ) ;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P2_Replace_Operator]^return currentA == null || currentB == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P2_Replace_Operator]^return currentA != null && currentB == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P5_Replace_Variable]^return parent == null && currentB == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P5_Replace_Variable]^return currentA == null && parent == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P5_Replace_Variable]^return currentB == null && currentA == null;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P8_Replace_Mix]^return currentA ;^275^^^^^262^276^return currentA == null && currentB == null;^[CLASS] VerifyingCallback  [METHOD] checkNodesMatch [RETURN_TYPE] boolean   Node nodeA Node nodeB [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  currentA  currentB  expectedRoot  n  nodeA  nodeB  parent  
[P2_Replace_Operator]^if  ( current.getType (  )  <= Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P7_Replace_Invocation]^if  ( current.isEquivalentTo (  )  == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P8_Replace_Mix]^if  ( nodeA.getType (  )  == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P15_Unwrap_Block]^return true;^282^283^284^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  { return true; }^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P16_Remove_Block]^^282^283^284^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  { return true; }^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P13_Insert_Block]^if  (  (  ( currentA.getType (  )  )  !=  ( currentB.getType (  )  )  )  ||  ( ! ( currentA.isEquivalentTo ( currentB )  )  )  )  {     return false; }^282^^^^^278^287^[Delete]^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P3_Replace_Literal]^return false;^283^^^^^278^287^return true;^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P5_Replace_Variable]^for  ( Node current = nodeA;^280^^^^^278^287^for  ( Node current = node;^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P5_Replace_Variable]^for  ( Node node = node;^280^^^^^278^287^for  ( Node current = node;^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P5_Replace_Variable]^for  ( Node node = current;^280^^^^^278^287^for  ( Node current = node;^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P2_Replace_Operator]^if  ( current.getType (  )  != Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P5_Replace_Variable]^if  ( nodeB.getType (  )  == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P8_Replace_Mix]^if  ( node.getType (  )  == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P5_Replace_Variable]^current != null; nodeB = current.getParent (  )  )  {^281^^^^^278^287^current != null; current = current.getParent (  )  )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P7_Replace_Invocation]^current != null; current = current.isEquivalentTo (  )  )  {^281^^^^^278^287^current != null; current = current.getParent (  )  )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P7_Replace_Invocation]^current != null; current = current .getType (  )   )  {^281^^^^^278^287^current != null; current = current.getParent (  )  )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P8_Replace_Mix]^current !=  null; nodeA^281^^^^^278^287^current != null; current = current.getParent (  )  )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P8_Replace_Mix]^for  ( Node current = parent;^280^^^^^278^287^for  ( Node current = node;^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P11_Insert_Donor_Statement]^Node currentB = nodeB;for  ( Node current = node;^280^^^^^278^287^for  ( Node current = node;^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P11_Insert_Donor_Statement]^Node currentA = nodeA;for  ( Node current = node;^280^^^^^278^287^for  ( Node current = node;^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P5_Replace_Variable]^current != null; node = current.getParent (  )  )  {^281^^^^^278^287^current != null; current = current.getParent (  )  )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P14_Delete_Statement]^^281^282^283^^^278^287^current != null; current = current.getParent (  )  )  { if  ( current.getType (  )  == Token.SCRIPT )  { return true;^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P8_Replace_Mix]^if  ( current .getParent (  )   == Token.SCRIPT )  {^282^^^^^278^287^if  ( current.getType (  )  == Token.SCRIPT )  {^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
[P3_Replace_Literal]^return true;^286^^^^^278^287^return false;^[CLASS] VerifyingCallback  [METHOD] isNodeAttached [RETURN_TYPE] boolean   Node node [VARIABLES] List  actualScopes  expectedScopes  boolean  collectingExpected  Node  actualRoot  current  currentA  currentB  expectedRoot  n  node  nodeA  nodeB  parent  
