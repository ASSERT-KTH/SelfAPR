[P3_Replace_Literal]^static final DiagnosticType UNREACHABLE_CODE = DiagnosticType.error ( "JSC_UNREACHABLE_CODEJS", "unreachable code" ) ;^35^36^^^^35^36^static final DiagnosticType UNREACHABLE_CODE = DiagnosticType.error ( "JSC_UNREACHABLE_CODE", "unreachable code" ) ;^[CLASS] CheckUnreachableCode   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType UNREACHABLE_CODE = DiagnosticType.error ( "JSC_UNREACHABLE_CODE", "achanreachable code" ) ;^35^36^^^^35^36^static final DiagnosticType UNREACHABLE_CODE = DiagnosticType.error ( "JSC_UNREACHABLE_CODE", "unreachable code" ) ;^[CLASS] CheckUnreachableCode   [VARIABLES] 
[P8_Replace_Mix]^static  DiagnosticType UNREACHABLE_CODE = DiagnosticType.error ( "JSC_UNREACHABLE_CODE", "unreachable code" ) ;^35^36^^^^35^36^static final DiagnosticType UNREACHABLE_CODE = DiagnosticType.error ( "JSC_UNREACHABLE_CODE", "unreachable code" ) ;^[CLASS] CheckUnreachableCode   [VARIABLES] 
[P8_Replace_Mix]^private  CheckLevel level;^39^^^^^34^44^private final CheckLevel level;^[CLASS] CheckUnreachableCode   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^42^^^^^41^44^this.compiler = compiler;^[CLASS] CheckUnreachableCode  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  
[P8_Replace_Mix]^this.level =  null;^43^^^^^41^44^this.level = level;^[CLASS] CheckUnreachableCode  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel level [VARIABLES] AbstractCompiler  compiler  boolean  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  
[P7_Replace_Invocation]^new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  ) .compute ( t.getControlFlowGraph (  ) .getEntry (  ) .getNode (  )  ) ;^48^49^50^^^47^51^new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  ) .compute ( t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  
[P7_Replace_Invocation]^new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  ) .compute ( t.getControlFlowGraph (  ) .getNode (  ) .getValue (  )  ) ;^48^49^50^^^47^51^new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  ) .compute ( t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  
[P14_Delete_Statement]^^48^49^50^^^47^51^new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  ) .compute ( t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  
[P14_Delete_Statement]^^49^50^^^^47^51^t.getControlFlowGraph (  )  ) .compute ( t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  
[P11_Insert_Donor_Statement]^t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;t.getControlFlowGraph (  )  ) .compute ( t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;^49^50^^^^47^51^t.getControlFlowGraph (  )  ) .compute ( t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  
[P7_Replace_Invocation]^t.getControlFlowGraph (  ) .getEntry (  ) .getNode (  )  ) ;^50^^^^^47^51^t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  
[P7_Replace_Invocation]^t.getControlFlowGraph (  ) .getNode (  ) .getValue (  )  ) ;^50^^^^^47^51^t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  
[P7_Replace_Invocation]^t.getControlFlowGraph (  )  .getNode ( this )  .getValue (  )  ) ;^50^^^^^47^51^t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  
[P14_Delete_Statement]^^50^^^^^47^51^t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  
[P11_Insert_Donor_Statement]^t.getControlFlowGraph (  )  ) .recompute ( n ) ;t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;^50^^^^^47^51^t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  
[P11_Insert_Donor_Statement]^t.getControlFlowGraph (  )  ) .compute ( t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;^50^^^^^47^51^t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  
[P5_Replace_Variable]^GraphNode<Node, Branch> gNode = t.getControlFlowGraph (  ) .getNode ( parent ) ;^55^^^^^54^76^GraphNode<Node, Branch> gNode = t.getControlFlowGraph (  ) .getNode ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^GraphNode<Node, Branch> gNode = n.getControlFlowGraph (  ) .getNode ( t ) ;^55^^^^^54^76^GraphNode<Node, Branch> gNode = t.getControlFlowGraph (  ) .getNode ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P7_Replace_Invocation]^GraphNode<Node, Branch> gNode = t.getControlFlowGraph (  )  .getEntry (  )  ;^55^^^^^54^76^GraphNode<Node, Branch> gNode = t.getControlFlowGraph (  ) .getNode ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P14_Delete_Statement]^^55^^^^^54^76^GraphNode<Node, Branch> gNode = t.getControlFlowGraph (  ) .getNode ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P2_Replace_Operator]^if  ( gNode != null || gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P2_Replace_Operator]^if  ( gNode == null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^if  ( gNode != parentull && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P6_Replace_Expression]^if  ( gNode != null ) {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P6_Replace_Expression]^if  (  gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P6_Replace_Expression]^if  ( gNode.getAnnotation (  )  != REACHABLE )  {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P6_Replace_Expression]^if  ( (n.getLineno() != -1) && (n.getType() != EMPTY) && n.getType() != BREAK )  {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P6_Replace_Expression]^if  ( (n.getLineno() != -1 && n.getType() != EMPTY) )  {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P6_Replace_Expression]^if  ( n.getLineno (  )  != -1 )  {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P6_Replace_Expression]^if  ( n.getType (  )  != EMPTY )  {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P6_Replace_Expression]^if  ( n.getType (  )  != BREAK )  {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P8_Replace_Mix]^if  ( gNode != true && gNode.getAnnotatioparent (  )  != GraphReachability.REACHABLE )  {^56^^^^^54^76^if  ( gNode != null && gNode.getAnnotation (  )  != GraphReachability.REACHABLE )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P13_Insert_Block]^if  (  (  (  ( n.getLineno (  )  )  !=  ( -1 )  )  &&  (  ( n.getType (  )  )  !=  ( EMPTY )  )  )  &&  (  ( n.getType (  )  )  !=  ( BREAK )  )  )  {     compiler.report ( make ( t, n, level, UNREACHABLE_CODE )  ) ;     new Node, Branch> ( t.getControlFlowGraph (  )  ) .recompute ( n ) ;     return false; }^56^^^^^54^76^[Delete]^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P2_Replace_Operator]^if  ( n.getLineno (  )  != -1 ||  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P2_Replace_Operator]^if  ( n.getLineno (  )  >= -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P2_Replace_Operator]^if  ( n.getLineno (  )  == -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P2_Replace_Operator]^if  ( n.getLineno (  )  <= -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P3_Replace_Literal]^if  ( n.getLineno (  )  != --1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^if  ( parent.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P6_Replace_Expression]^if  ( n.getLineno (  )  != -1 ) {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P6_Replace_Expression]^if  (   n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P6_Replace_Expression]^if  ( (n.getLineno() != -1 && n.getType() != EMPTY) )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P6_Replace_Expression]^if  ( n.getType (  )  != EMPTY )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P6_Replace_Expression]^if  ( n.getType (  )  != BREAK )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P7_Replace_Invocation]^if  ( n .getType (  )   != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P3_Replace_Literal]^return true;^72^^^^^54^76^return false;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, parent, level, UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^compiler.report ( JSError.make (  n, level, UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  level, UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n,  UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, level )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^compiler.report ( JSError.make ( level, n, t, UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, level, n, UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, UNREACHABLE_CODE, level, n )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P14_Delete_Statement]^^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^compiler.report ( JSError.make ( UNREACHABLE_CODE, n, level, t )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, n, UNREACHABLE_CODE, level )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  ) .recompute ( parent ) ;^68^69^^^^54^76^new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  ) .recompute ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^new GraphReachability<Node, ControlFlowGraph.Branch> ( n.getControlFlowGraph (  )  ) .recompute ( t ) ;^68^69^^^^54^76^new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  ) .recompute ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P7_Replace_Invocation]^new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  )  .compute (  )  ;^68^69^^^^54^76^new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  ) .recompute ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P14_Delete_Statement]^^68^69^^^^54^76^new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  ) .recompute ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P11_Insert_Donor_Statement]^GraphNode<Node, Branch> gNode = t.getControlFlowGraph (  ) .getNode ( n ) ;new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  ) .recompute ( n ) ;^68^69^^^^54^76^new GraphReachability<Node, ControlFlowGraph.Branch> ( t.getControlFlowGraph (  )  ) .recompute ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P14_Delete_Statement]^^69^^^^^54^76^t.getControlFlowGraph (  )  ) .recompute ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P11_Insert_Donor_Statement]^t.getControlFlowGraph (  ) .getEntry (  ) .getValue (  )  ) ;t.getControlFlowGraph (  )  ) .recompute ( n ) ;^69^^^^^54^76^t.getControlFlowGraph (  )  ) .recompute ( n ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^n.getType (  )  != Token.EMPTY && parent.getType (  )  != Token.BREAK )  {^64^^^^^54^76^n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P14_Delete_Statement]^^64^65^^^^54^76^n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  { compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P3_Replace_Literal]^if  ( n.getLineno (  )  != --7 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P7_Replace_Invocation]^if  ( n.getLineno (  )  != -1 &&  n .getLineno (  )   != Token.EMPTY && n^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P8_Replace_Mix]^if  ( parent .getType (  )   != -3 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^62^63^64^^^54^76^if  ( n.getLineno (  )  != -1 &&  n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P5_Replace_Variable]^compiler.report ( JSError.make ( n, t, level, UNREACHABLE_CODE )  ) ;^65^^^^^54^76^compiler.report ( JSError.make ( t, n, level, UNREACHABLE_CODE )  ) ;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P7_Replace_Invocation]^n .getLineno (  )   != Token.EMPTY && n^64^^^^^54^76^n.getType (  )  != Token.EMPTY && n.getType (  )  != Token.BREAK )  {^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
[P3_Replace_Literal]^return false;^75^^^^^54^76^return true;^[CLASS] CheckUnreachableCode  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  DiagnosticType  UNREACHABLE_CODE  CheckLevel  level  Node  n  parent  GraphNode  gNode  
