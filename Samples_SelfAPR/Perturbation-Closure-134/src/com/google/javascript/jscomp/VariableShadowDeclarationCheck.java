[P2_Replace_Operator]^static final DiagnosticType SHADOW_VAR_ERROR = DiagnosticType.error ( "JSC_REDECL_NOSHADOW_VARIABLE", "Highly error prone shadowing of variable name {0}."  <  "Consider using a different local variable name." ) ;^40^41^42^43^^40^43^static final DiagnosticType SHADOW_VAR_ERROR = DiagnosticType.error ( "JSC_REDECL_NOSHADOW_VARIABLE", "Highly error prone shadowing of variable name {0}." + "Consider using a different local variable name." ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType SHADOW_VAR_ERROR = DiagnosticType.error ( "JSC_REDECL_NOSHADOW_VARIABLEOSHADOW_VARIA", "Highly error prone shadowing of variable name {0}." + "Consider using a different local variable name." ) ;^40^41^42^43^^40^43^static final DiagnosticType SHADOW_VAR_ERROR = DiagnosticType.error ( "JSC_REDECL_NOSHADOW_VARIABLE", "Highly error prone shadowing of variable name {0}." + "Consider using a different local variable name." ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType SHADOW_VAR_ERROR = DiagnosticType.error ( "JSC_REDECL_NOSHADOW_VARIABLE", "{" + "Consider using a different local variable name." ) ;^40^41^42^43^^40^43^static final DiagnosticType SHADOW_VAR_ERROR = DiagnosticType.error ( "JSC_REDECL_NOSHADOW_VARIABLE", "Highly error prone shadowing of variable name {0}." + "Consider using a different local variable name." ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [VARIABLES] 
[P3_Replace_Literal]^static final DiagnosticType SHADOW_VAR_ERROR = DiagnosticType.error ( "JSC_REDECL_NOSHADOW_VARIABLE", "Highly error prone shadowing of variable name {0}." + " a different loc" ) ;^40^41^42^43^^40^43^static final DiagnosticType SHADOW_VAR_ERROR = DiagnosticType.error ( "JSC_REDECL_NOSHADOW_VARIABLE", "Highly error prone shadowing of variable name {0}." + "Consider using a different local variable name." ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [VARIABLES] 
[P8_Replace_Mix]^static final DiagnosticType SHADOW_VAR_ERROR  = null ;^40^41^42^43^^40^43^static final DiagnosticType SHADOW_VAR_ERROR = DiagnosticType.error ( "JSC_REDECL_NOSHADOW_VARIABLE", "Highly error prone shadowing of variable name {0}." + "Consider using a different local variable name." ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [VARIABLES] 
[P8_Replace_Mix]^private  AbstractCompiler compiler;^45^^^^^40^50^private final AbstractCompiler compiler;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^52^^^^^50^55^this.compiler = compiler;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  
[P11_Insert_Donor_Statement]^this.checkLevel = checkLevel;this.compiler = compiler;^52^^^^^50^55^this.compiler = compiler;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  
[P8_Replace_Mix]^this.checkLevel =  null;^53^^^^^50^55^this.checkLevel = checkLevel;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  
[P11_Insert_Donor_Statement]^this.compiler = compiler;this.checkLevel = checkLevel;^53^^^^^50^55^this.checkLevel = checkLevel;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  
[P8_Replace_Mix]^this.externalNoShadowVariableNames  =  this.externalNoShadowVariableNames ;^54^^^^^50^55^this.externalNoShadowVariableNames = Sets.newHashSet (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  
[P12_Insert_Condition]^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  { this.externalNoShadowVariableNames = Sets.newHashSet (  ) ; }^54^^^^^50^55^this.externalNoShadowVariableNames = Sets.newHashSet (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  
[P14_Delete_Statement]^^54^^^^^50^55^this.externalNoShadowVariableNames = Sets.newHashSet (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  
[P11_Insert_Donor_Statement]^externalNoShadowVariableNames.add ( var.getName (  )  ) ;this.externalNoShadowVariableNames = Sets.newHashSet (  ) ;^54^^^^^50^55^this.externalNoShadowVariableNames = Sets.newHashSet (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] <init> [RETURN_TYPE] CheckLevel)   AbstractCompiler compiler CheckLevel checkLevel [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  
[P4_Replace_Constructor]^new ShadowDeclarationCheckingCallback (  )   ) ;^60^^^^^58^63^new NoShadowAnnotationGatheringCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler, externs, NodeTraversal.traverse ( compiler, externs,  new ShadowDeclarationCheckingCallback (  )   ) ;^59^60^^^^58^63^NodeTraversal.traverse ( compiler, externs, new NoShadowAnnotationGatheringCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, root, new NoShadowAnnotationGatheringCallback (  )  ) ;^59^60^^^^58^63^NodeTraversal.traverse ( compiler, externs, new NoShadowAnnotationGatheringCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new NoShadowAnnotationGatheringCallback (  )  ) ;^59^60^^^^58^63^NodeTraversal.traverse ( compiler, externs, new NoShadowAnnotationGatheringCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  externs, new NoShadowAnnotationGatheringCallback (  )  ) ;^59^60^^^^58^63^NodeTraversal.traverse ( compiler, externs, new NoShadowAnnotationGatheringCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( externs, compiler, new NoShadowAnnotationGatheringCallback (  )  ) ;^59^60^^^^58^63^NodeTraversal.traverse ( compiler, externs, new NoShadowAnnotationGatheringCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[P14_Delete_Statement]^^59^60^^^^58^63^NodeTraversal.traverse ( compiler, externs, new NoShadowAnnotationGatheringCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[P4_Replace_Constructor]^new NoShadowAnnotationGatheringCallback (  )   ) ;^62^^^^^58^63^new ShadowDeclarationCheckingCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[P4_Replace_Constructor]^NodeTraversal.traverse ( compiler, root, NodeTraversal.traverse ( compiler, root,  new NoShadowAnnotationGatheringCallback (  )   ) ;^61^62^^^^58^63^NodeTraversal.traverse ( compiler, root, new ShadowDeclarationCheckingCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, new ShadowDeclarationCheckingCallback (  )  ) ;^61^62^^^^58^63^NodeTraversal.traverse ( compiler, root, new ShadowDeclarationCheckingCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  new ShadowDeclarationCheckingCallback (  )  ) ;^61^62^^^^58^63^NodeTraversal.traverse ( compiler, root, new ShadowDeclarationCheckingCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, new ShadowDeclarationCheckingCallback (  )  ) ;^61^62^^^^58^63^NodeTraversal.traverse ( compiler, root, new ShadowDeclarationCheckingCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, new ShadowDeclarationCheckingCallback (  )  ) ;^61^62^^^^58^63^NodeTraversal.traverse ( compiler, root, new ShadowDeclarationCheckingCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[P14_Delete_Statement]^^61^62^^^^58^63^NodeTraversal.traverse ( compiler, root, new ShadowDeclarationCheckingCallback (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  externs  root  
[P7_Replace_Invocation]^Scope scope = t .inGlobalScope (  )  ;^72^^^^^71^79^Scope scope = t.getScope (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P11_Insert_Donor_Statement]^Scope parentScope = scope.getParent (  ) ;Scope scope = t.getScope (  ) ;^72^^^^^71^79^Scope scope = t.getScope (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P14_Delete_Statement]^^72^^^^^71^79^Scope scope = t.getScope (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P8_Replace_Mix]^if  ( var .isLocal (  )   )  {^75^^^^^71^79^if  ( var.isNoShadow (  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P15_Unwrap_Block]^externalNoShadowVariableNames.add(var.getName());^75^76^77^^^71^79^if  ( var.isNoShadow (  )  )  { externalNoShadowVariableNames.add ( var.getName (  )  ) ; }^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P16_Remove_Block]^^75^76^77^^^71^79^if  ( var.isNoShadow (  )  )  { externalNoShadowVariableNames.add ( var.getName (  )  ) ; }^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P7_Replace_Invocation]^externalNoShadowVariableNames.contains ( var.getName (  )  ) ;^76^^^^^71^79^externalNoShadowVariableNames.add ( var.getName (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P7_Replace_Invocation]^externalNoShadowVariableNames.add ( var .isNoShadow (  )   ) ;^76^^^^^71^79^externalNoShadowVariableNames.add ( var.getName (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P14_Delete_Statement]^^76^^^^^71^79^externalNoShadowVariableNames.add ( var.getName (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P12_Insert_Condition]^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  { externalNoShadowVariableNames.add ( var.getName (  )  ) ; }^76^^^^^71^79^externalNoShadowVariableNames.add ( var.getName (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P13_Insert_Block]^if  ( var.isNoShadow (  )  )  {     externalNoShadowVariableNames.add ( var.getName (  )  ) ; }^76^^^^^71^79^[Delete]^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P5_Replace_Variable]^for  ( Iterator<Var> scopes = var.getVars (  ) ; vars.hasNext (  ) ; )  {^73^^^^^71^79^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P5_Replace_Variable]^for  ( Iterator<Var> var = scope.getVars (  ) ; varss.hasNext (  ) ; )  {^73^^^^^71^79^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P8_Replace_Mix]^for  ( Iterator<Var> vars = scope .getVar (  )  ; vars.hasNext (  ) ; )  {^73^^^^^71^79^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P7_Replace_Invocation]^Var var = vars .hasNext (  )  ;^74^^^^^71^79^Var var = vars.next (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P14_Delete_Statement]^^74^^^^^71^79^Var var = vars.next (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P14_Delete_Statement]^^73^74^75^76^77^71^79^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  { Var var = vars.next (  ) ; if  ( var.isNoShadow (  )  )  { externalNoShadowVariableNames.add ( var.getName (  )  ) ; }^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P8_Replace_Mix]^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars .next (  )  ; )  {^73^^^^^71^79^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  var  Iterator  vars  
[P3_Replace_Literal]^return false;^88^^^^^86^89^return true;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  NodeTraversal  nodeTraversal  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  n  parent  
[P7_Replace_Invocation]^if  ( t .getScope (  )   )  {^103^^^^^102^128^if  ( t.inGlobalScope (  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P15_Unwrap_Block]^return ;^103^104^105^^^102^128^if  ( t.inGlobalScope (  )  )  { return; }^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P16_Remove_Block]^^103^104^105^^^102^128^if  ( t.inGlobalScope (  )  )  { return; }^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P11_Insert_Donor_Statement]^Scope parentScope = scope.getParent (  ) ;Scope scope = t.getScope (  ) ;^107^^^^^102^128^Scope scope = t.getScope (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^107^108^^^^102^128^Scope scope = t.getScope (  ) ; Scope parentScope = scope.getParent (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Scope parentScope = scope.getParent (  ) ;^108^^^^^102^128^Scope parentScope = scope.getParent (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^Scope parentScope = parentScope.getParent (  ) ;^108^^^^^102^128^Scope parentScope = scope.getParent (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^108^^^^^102^128^Scope parentScope = scope.getParent (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^if  ( externalNoShadowVariableNames.add ( var.getName (  )  )  )  {^112^^^^^102^128^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^if  ( externalNoShadowVariableNames.contains ( var .isNoShadow (  )   )  )  {^112^^^^^102^128^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, var.nameNode, checkLevel, com.google.javascript.jscomp.VariableShadowDeclarationCheck.SHADOW_VAR_ERROR, var.getName())); continue;^112^113^114^115^116^102^128^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  { compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ; continue; }^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P16_Remove_Block]^^112^113^114^115^116^102^128^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  { compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ; continue; }^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P13_Insert_Block]^if  (  ( shadowedVar != null )  &&  (  ( shadowedVar.isNoShadow (  )  )  ||  ( shadowedVar.isLocal (  )  )  )  )  {     compiler.report ( make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;     continue; }^112^^^^^102^128^[Delete]^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^113^114^115^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^113^114^115^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^113^114^115^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, var.nameNode,  SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^113^114^115^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel,  var.getName (  )  )  ) ;^113^114^115^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var .isNoShadow (  )   )  ) ;^113^114^115^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^113^114^115^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P13_Insert_Block]^if  (  ( shadowedVar != null )  &&  (  ( shadowedVar.isNoShadow (  )  )  ||  ( shadowedVar.isLocal (  )  )  )  )  {     compiler.report ( make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;     continue; }^113^^^^^102^128^[Delete]^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P13_Insert_Block]^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {     compiler.report ( make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;     continue; }^113^^^^^102^128^[Delete]^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^var .isNoShadow (  )   )  ) ;^115^^^^^102^128^var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^115^116^^^^102^128^var.getName (  )  )  ) ; continue;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P2_Replace_Operator]^if  (  ( shadowedVar != null )  || ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P2_Replace_Operator]^if  (  ( shadowedVar == null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P2_Replace_Operator]^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  && shadowedVar.isLocal (  )  )  )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P6_Replace_Expression]^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  ) {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P6_Replace_Expression]^if  (  shadowedVar.isLocal (  )  )  )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P6_Replace_Expression]^if  ( shadowedVar != null )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P6_Replace_Expression]^if  ( shadowedVar.isNoShadow( || shadowedVar.isLocal()) )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar .isNoShadow (  )   )  )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^if  (  ( shadowedVar != true )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P13_Insert_Block]^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {     compiler.report ( make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;     continue; }^120^^^^^102^128^[Delete]^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^120^126^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^120^126^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^120^126^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, var.nameNode,  SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^120^126^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel,  var.getName (  )  )  ) ;^122^123^124^^^120^126^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var .isNoShadow (  )   )  ) ;^122^123^124^^^120^126^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^122^123^124^^^120^126^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^124^^^^^120^126^var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^for  ( Iterator<Var> vars = scope .getVars (  )  ; )  {^109^^^^^102^128^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^115^^^^^102^128^var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^if  (  ( shadowedVar != false )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^var .isNoShadow (  )   )  ) ;^124^^^^^120^126^var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^124^125^^^^120^126^var.getName (  )  )  ) ; continue;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^Var shadowedVar = scope.getVar ( var.getName (  )  ) ;^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^Var shadowedVar = var.getVar ( parentScope.getName (  )  ) ;^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^Var shadowedVar = parentScope .getVars (  )  ;^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^Var shadowedVar = parentScope.getVar ( var .isNoShadow (  )   ) ;^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^Var shadowedVar = scope .getVars (  )  ;^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^Var var = vars .hasNext (  )  ;^110^^^^^102^128^Var var = vars.next (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^Var var = null .hasNext (  )  ;^110^^^^^102^128^Var var = vars.next (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^110^^^^^102^128^Var var = vars.next (  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^if  ( externalNoShadowVariableNames.contains ( shadowedVar.getName (  )  )  )  {^112^^^^^102^128^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^if  ( var.contains ( externalNoShadowVariableNames.getName (  )  )  )  {^112^^^^^102^128^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P13_Insert_Block]^if  ( var.isNoShadow (  )  )  {     externalNoShadowVariableNames.add ( var.getName (  )  ) ; }^112^^^^^102^128^[Delete]^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^Var shadowedVar = parentScope.getVar ( shadowedVar.getName (  )  ) ;^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P11_Insert_Donor_Statement]^externalNoShadowVariableNames.add ( var.getName (  )  ) ;Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^( var.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^121^^^^^102^128^( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, var.nameNode,  SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel,  var.getName (  )  )  ) ;^122^123^124^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^122^123^124^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var .isNoShadow (  )   )  ) ;^122^123^124^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^var .isNoShadow (  )   )  ) ;^124^^^^^102^128^var.getName (  )  )  ) ;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^124^125^^^^102^128^var.getName (  )  )  ) ; continue;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^for  ( Iterator<Var> vars = parentScope.getVars (  ) ; vars.hasNext (  ) ; )  {^109^^^^^102^128^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^for  ( Iterator<Var> vars = parentScope .getVar (  )  ; vars.hasNext (  ) ; )  {^109^^^^^102^128^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^for  ( Iterator<Var> vars = scope .getVar (  )  ; vars.hasNext (  ) ; )  {^109^^^^^102^128^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^for  ( Iterator<Var> 1 = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^109^^^^^102^128^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars .next (  )  ; )  {^109^^^^^102^128^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^( var .isLocal (  )   || shadowedVar.isLocal (  )  )  )  {^121^^^^^102^128^( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  Scope  parentScope  scope  NodeTraversal  t  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Var  shadowedVar  var  Iterator  vars  
[P3_Replace_Literal]^return false;^137^^^^^135^138^return true;^[CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  externalNoShadowVariableNames  boolean  NodeTraversal  nodeTraversal  DiagnosticType  SHADOW_VAR_ERROR  CheckLevel  checkLevel  Node  n  parent  
[P14_Delete_Statement]^^72^^^^^71^79^Scope scope = t.getScope (  ) ;^[CLASS] NoShadowAnnotationGatheringCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Iterator  vars  
[P15_Unwrap_Block]^externalNoShadowVariableNames.add(var.getName());^75^76^77^^^71^79^if  ( var.isNoShadow (  )  )  { externalNoShadowVariableNames.add ( var.getName (  )  ) ; }^[CLASS] NoShadowAnnotationGatheringCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Iterator  vars  
[P16_Remove_Block]^^75^76^77^^^71^79^if  ( var.isNoShadow (  )  )  { externalNoShadowVariableNames.add ( var.getName (  )  ) ; }^[CLASS] NoShadowAnnotationGatheringCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Iterator  vars  
[P14_Delete_Statement]^^76^^^^^71^79^externalNoShadowVariableNames.add ( var.getName (  )  ) ;^[CLASS] NoShadowAnnotationGatheringCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Iterator  vars  
[P13_Insert_Block]^if  ( var.isNoShadow (  )  )  {     externalNoShadowVariableNames.add ( var.getName (  )  ) ; }^76^^^^^71^79^[Delete]^[CLASS] NoShadowAnnotationGatheringCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Iterator  vars  
[P5_Replace_Variable]^for  ( Iterator<Var> scopes = var.getVars (  ) ; vars.hasNext (  ) ; )  {^73^^^^^71^79^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] NoShadowAnnotationGatheringCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Iterator  vars  
[P8_Replace_Mix]^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars .next (  )  ; )  {^73^^^^^71^79^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] NoShadowAnnotationGatheringCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Iterator  vars  
[P7_Replace_Invocation]^if  ( var .getName (  )   )  {^75^^^^^71^79^if  ( var.isNoShadow (  )  )  {^[CLASS] NoShadowAnnotationGatheringCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Iterator  vars  
[P7_Replace_Invocation]^Var var = vars .hasNext (  )  ;^74^^^^^71^79^Var var = vars.next (  ) ;^[CLASS] NoShadowAnnotationGatheringCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Iterator  vars  
[P14_Delete_Statement]^^74^^^^^71^79^Var var = vars.next (  ) ;^[CLASS] NoShadowAnnotationGatheringCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Iterator  vars  
[P7_Replace_Invocation]^externalNoShadowVariableNames.add ( var .isNoShadow (  )   ) ;^76^^^^^71^79^externalNoShadowVariableNames.add ( var.getName (  )  ) ;^[CLASS] NoShadowAnnotationGatheringCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Iterator  vars  
[P14_Delete_Statement]^^73^74^75^76^77^71^79^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  { Var var = vars.next (  ) ; if  ( var.isNoShadow (  )  )  { externalNoShadowVariableNames.add ( var.getName (  )  ) ; }^[CLASS] NoShadowAnnotationGatheringCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  scope  NodeTraversal  t  Var  var  Iterator  vars  
[P3_Replace_Literal]^return false;^88^^^^^86^89^return true;^[CLASS] NoShadowAnnotationGatheringCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
[P15_Unwrap_Block]^return ;^103^104^105^^^102^128^if  ( t.inGlobalScope (  )  )  { return; }^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P16_Remove_Block]^^103^104^105^^^102^128^if  ( t.inGlobalScope (  )  )  { return; }^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^Scope scope = t .inGlobalScope (  )  ;^107^^^^^102^128^Scope scope = t.getScope (  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P11_Insert_Donor_Statement]^Scope parentScope = scope.getParent (  ) ;Scope scope = t.getScope (  ) ;^107^^^^^102^128^Scope scope = t.getScope (  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^107^^^^^102^128^Scope scope = t.getScope (  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^Scope parentScope = scope .getVars (  )  ;^108^^^^^102^128^Scope parentScope = scope.getParent (  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P11_Insert_Donor_Statement]^Scope scope = t.getScope (  ) ;Scope parentScope = scope.getParent (  ) ;^108^^^^^102^128^Scope parentScope = scope.getParent (  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^Scope parentScope = parentScope.getParent (  ) ;^108^^^^^102^128^Scope parentScope = scope.getParent (  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^108^^^^^102^128^Scope parentScope = scope.getParent (  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^if  ( externalNoShadowVariableNames.contains ( var .isNoShadow (  )   )  )  {^112^^^^^102^128^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P15_Unwrap_Block]^compiler.report(com.google.javascript.jscomp.JSError.make(t, var.nameNode, checkLevel, com.google.javascript.jscomp.VariableShadowDeclarationCheck.SHADOW_VAR_ERROR, var.getName())); continue;^112^113^114^115^116^102^128^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  { compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ; continue; }^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P16_Remove_Block]^^112^113^114^115^116^102^128^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  { compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ; continue; }^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P13_Insert_Block]^if  (  ( shadowedVar != null )  &&  (  ( shadowedVar.isNoShadow (  )  )  ||  ( shadowedVar.isLocal (  )  )  )  )  {     compiler.report ( make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;     continue; }^112^^^^^102^128^[Delete]^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^113^114^115^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^113^114^115^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^113^114^115^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, var.nameNode,  SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^113^114^115^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel,  var.getName (  )  )  ) ;^113^114^115^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^113^114^115^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P13_Insert_Block]^if  (  ( shadowedVar != null )  &&  (  ( shadowedVar.isNoShadow (  )  )  ||  ( shadowedVar.isLocal (  )  )  )  )  {     compiler.report ( make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;     continue; }^113^^^^^102^128^[Delete]^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P13_Insert_Block]^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {     compiler.report ( make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;     continue; }^113^^^^^102^128^[Delete]^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var .isNoShadow (  )   )  ) ;^113^114^115^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^115^116^^^^102^128^var.getName (  )  )  ) ; continue;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P2_Replace_Operator]^if  (  ( shadowedVar != null )  || ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P2_Replace_Operator]^if  (  ( shadowedVar == null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P2_Replace_Operator]^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  && shadowedVar.isLocal (  )  )  )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P6_Replace_Expression]^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  ) {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P6_Replace_Expression]^if  (  shadowedVar.isLocal (  )  )  )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P6_Replace_Expression]^if  ( shadowedVar != null )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P6_Replace_Expression]^if  ( shadowedVar.isNoShadow( || shadowedVar.isLocal()) )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar .isNoShadow (  )   )  )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^if  (  ( shadowedVar != this )  && ( shadowedVar.isNoShadow (  )  ) {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P13_Insert_Block]^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {     compiler.report ( make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;     continue; }^120^^^^^102^128^[Delete]^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^120^126^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^120^126^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^120^126^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, var.nameNode,  SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^120^126^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel,  var.getName (  )  )  ) ;^122^123^124^^^120^126^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^122^123^124^^^120^126^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var .isNoShadow (  )   )  ) ;^122^123^124^^^120^126^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^124^125^^^^120^126^var.getName (  )  )  ) ; continue;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^for  ( Iterator<Var> vars = scope .getVars (  )  ; )  {^109^^^^^102^128^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars .next (  )  ; )  {^109^^^^^102^128^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^if  (  ( shadowedVar != false )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^120^121^^^^102^128^if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^Var shadowedVar = scope.getVar ( var.getName (  )  ) ;^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^Var shadowedVar = var.getVar ( parentScope.getName (  )  ) ;^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^Var shadowedVar = parentScope.getVar ( var .isNoShadow (  )   ) ;^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^Var var = vars .hasNext (  )  ;^110^^^^^102^128^Var var = vars.next (  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^110^^^^^102^128^Var var = vars.next (  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^if  ( externalNoShadowVariableNames.contains ( shadowedVar.getName (  )  )  )  {^112^^^^^102^128^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^if  ( var.contains ( externalNoShadowVariableNames.getName (  )  )  )  {^112^^^^^102^128^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^Var shadowedVar = parentScope.getVar ( shadowedVar.getName (  )  ) ;^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^( var.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^121^^^^^102^128^( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^( shadowedVar .isLocal (  )   || shadowedVar.isLocal (  )  )  )  {^121^^^^^102^128^( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^( var .isLocal (  )   || shadowedVar.isLocal (  )  )  )  {^121^^^^^102^128^( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^( var.isNoShadow (  )  || shadowedVar .isNoShadow (  )   )  )  {^121^^^^^102^128^( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make (  var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t,  checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, var.nameNode,  SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel,  var.getName (  )  )  ) ;^122^123^124^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^122^123^124^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var .isNoShadow (  )   )  ) ;^122^123^124^^^102^128^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^var .isNoShadow (  )   )  ) ;^124^^^^^102^128^var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^124^^^^^102^128^var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P5_Replace_Variable]^for  ( Iterator<Var> vars = parentScope.getVars (  ) ; vars.hasNext (  ) ; )  {^109^^^^^102^128^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^Var shadowedVar = parentScope .getVars (  )  ;^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^Var shadowedVar = scope.getVar ( var .isNoShadow (  )   ) ;^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^for  ( Iterator<Var> vars = scope .getVar (  )  ; vars.hasNext (  ) ; )  {^109^^^^^102^128^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^if  ( externalNoShadowVariableNames.contains ( shadowedVar .isNoShadow (  )   )  )  {^112^^^^^102^128^if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P7_Replace_Invocation]^var .isNoShadow (  )   )  ) ;^115^^^^^102^128^var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P14_Delete_Statement]^^115^^^^^102^128^var.getName (  )  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P8_Replace_Mix]^Var shadowedVar = parentScope.getVar ( shadowedVar .isNoShadow (  )   ) ;^119^^^^^102^128^Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] enterScope [RETURN_TYPE] void   NodeTraversal t [VARIABLES] boolean  Scope  parentScope  scope  NodeTraversal  t  Var  shadowedVar  var  Iterator  vars  
[P3_Replace_Literal]^return false;^137^^^^^135^138^return true;^[CLASS] ShadowDeclarationCheckingCallback  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal nodeTraversal Node n Node parent [VARIABLES] boolean  NodeTraversal  nodeTraversal  Node  n  parent  
