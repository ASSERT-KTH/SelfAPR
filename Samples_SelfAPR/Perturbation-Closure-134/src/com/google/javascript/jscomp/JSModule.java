[P1_Replace_Type]^private final char name;^41^^^^^36^46^private final String name;^[CLASS] JSModule   [VARIABLES] 
[P8_Replace_Mix]^private final List<CompilerInput> inputs  = null ;^44^^^^^39^49^private final List<CompilerInput> inputs = new ArrayList<CompilerInput> (  ) ;^[CLASS] JSModule   [VARIABLES] 
[P8_Replace_Mix]^private  List<JSModule> deps = new ArrayList<JSModule> (  ) ;^47^^^^^42^52^private final List<JSModule> deps = new ArrayList<JSModule> (  ) ;^[CLASS] JSModule   [VARIABLES] 
[P8_Replace_Mix]^this.name =  null;^55^^^^^54^56^this.name = name;^[CLASS] JSModule  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] List  deps  inputs  String  name  boolean  
[P7_Replace_Invocation]^addFirst ( new CompilerInput ( file )  ) ;^65^^^^^64^66^add ( new CompilerInput ( file )  ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   JSSourceFile file [VARIABLES] List  deps  inputs  String  name  JSSourceFile  file  boolean  
[P14_Delete_Statement]^^65^^^^^64^66^add ( new CompilerInput ( file )  ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   JSSourceFile file [VARIABLES] List  deps  inputs  String  name  JSSourceFile  file  boolean  
[P7_Replace_Invocation]^add ( new CompilerInput ( file )  ) ;^70^^^^^69^71^addFirst ( new CompilerInput ( file )  ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   JSSourceFile file [VARIABLES] List  deps  inputs  String  name  JSSourceFile  file  boolean  
[P14_Delete_Statement]^^70^^^^^69^71^addFirst ( new CompilerInput ( file )  ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   JSSourceFile file [VARIABLES] List  deps  inputs  String  name  JSSourceFile  file  boolean  
[P7_Replace_Invocation]^inputs.indexOf ( input ) ;^75^^^^^74^77^inputs.add ( input ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P14_Delete_Statement]^^75^76^^^^74^77^inputs.add ( input ) ; input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^deps.add ( dep ) ;inputs.add ( input ) ;^75^^^^^74^77^inputs.add ( input ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^set.add ( input ) ;inputs.add ( input ) ;^75^^^^^74^77^inputs.add ( input ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^list.add ( module ) ;inputs.add ( input ) ;^75^^^^^74^77^inputs.add ( input ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inProgress.add ( input ) ;inputs.add ( input ) ;^75^^^^^74^77^inputs.add ( input ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.addAll ( list ) ;inputs.add ( input ) ;^75^^^^^74^77^inputs.add ( input ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.clear (  ) ;inputs.add ( input ) ;^75^^^^^74^77^inputs.add ( input ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inProgress.add ( module ) ;inputs.add ( input ) ;^75^^^^^74^77^inputs.add ( input ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.add ( 0, input ) ;inputs.add ( input ) ;^75^^^^^74^77^inputs.add ( input ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^input.setModule ( null ) ;inputs.add ( input ) ;^75^^^^^74^77^inputs.add ( input ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^set.add ( module ) ;inputs.add ( input ) ;^75^^^^^74^77^inputs.add ( input ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^deps.add ( this ) ;inputs.add ( input ) ;^75^^^^^74^77^inputs.add ( input ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^list.add ( input ) ;inputs.add ( input ) ;^75^^^^^74^77^inputs.add ( input ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P7_Replace_Invocation]^input.getProvides ( this ) ;^76^^^^^74^77^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P14_Delete_Statement]^^76^^^^^74^77^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.addAll ( list ) ;input.setModule ( this ) ;^76^^^^^74^77^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^file.setModule ( null ) ;input.setModule ( this ) ;^76^^^^^74^77^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^input.setModule ( null ) ;input.setModule ( this ) ;^76^^^^^74^77^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^deps.add ( this ) ;input.setModule ( this ) ;^76^^^^^74^77^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] add [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P3_Replace_Literal]^inputs.add ( , input ) ;^81^^^^^80^83^inputs.add ( 0, input ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P5_Replace_Variable]^inputs.add ( 0 ) ;^81^^^^^80^83^inputs.add ( 0, input ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P14_Delete_Statement]^^81^82^^^^80^83^inputs.add ( 0, input ) ; input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^deps.add ( dep ) ;inputs.add ( 0, input ) ;^81^^^^^80^83^inputs.add ( 0, input ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^set.add ( input ) ;inputs.add ( 0, input ) ;^81^^^^^80^83^inputs.add ( 0, input ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.add ( input ) ;inputs.add ( 0, input ) ;^81^^^^^80^83^inputs.add ( 0, input ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inProgress.add ( input ) ;inputs.add ( 0, input ) ;^81^^^^^80^83^inputs.add ( 0, input ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.addAll ( list ) ;inputs.add ( 0, input ) ;^81^^^^^80^83^inputs.add ( 0, input ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.clear (  ) ;inputs.add ( 0, input ) ;^81^^^^^80^83^inputs.add ( 0, input ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^deps.add ( this ) ;inputs.add ( 0, input ) ;^81^^^^^80^83^inputs.add ( 0, input ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^list.add ( input ) ;inputs.add ( 0, input ) ;^81^^^^^80^83^inputs.add ( 0, input ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P7_Replace_Invocation]^input.getProvides ( this ) ;^82^^^^^80^83^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P14_Delete_Statement]^^82^^^^^80^83^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.addAll ( list ) ;input.setModule ( this ) ;^82^^^^^80^83^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^file.setModule ( null ) ;input.setModule ( this ) ;^82^^^^^80^83^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^input.setModule ( null ) ;input.setModule ( this ) ;^82^^^^^80^83^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^deps.add ( this ) ;input.setModule ( this ) ;^82^^^^^80^83^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] addFirst [RETURN_TYPE] void   CompilerInput input [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P5_Replace_Variable]^Preconditions.checkState ( inputs.contains ( input )  ) ;^87^^^^^86^90^Preconditions.checkState ( inputs.contains ( other )  ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P5_Replace_Variable]^Preconditions.checkState ( other.contains ( inputs )  ) ;^87^^^^^86^90^Preconditions.checkState ( inputs.contains ( other )  ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P7_Replace_Invocation]^Preconditions.checkState ( inputs.add ( other )  ) ;^87^^^^^86^90^Preconditions.checkState ( inputs.contains ( other )  ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P14_Delete_Statement]^^87^88^^^^86^90^Preconditions.checkState ( inputs.contains ( other )  ) ; inputs.add ( inputs.indexOf ( other ) , input ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( dep != this ) ;Preconditions.checkState ( inputs.contains ( other )  ) ;^87^^^^^86^90^Preconditions.checkState ( inputs.contains ( other )  ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;Preconditions.checkState ( inputs.contains ( other )  ) ;^87^^^^^86^90^Preconditions.checkState ( inputs.contains ( other )  ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P7_Replace_Invocation]^Preconditions.checkState ( inputs .clear (  )   ) ;^87^^^^^86^90^Preconditions.checkState ( inputs.contains ( other )  ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P8_Replace_Mix]^Preconditions.checkState ( inputs.add ( input )  ) ;^87^^^^^86^90^Preconditions.checkState ( inputs.contains ( other )  ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P14_Delete_Statement]^^87^^^^^86^90^Preconditions.checkState ( inputs.contains ( other )  ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P5_Replace_Variable]^inputs.add ( inputs.indexOf ( other )  ) ;^88^^^^^86^90^inputs.add ( inputs.indexOf ( other ) , input ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P5_Replace_Variable]^inputs.add ( others.indexOf ( input ) , input ) ;^88^^^^^86^90^inputs.add ( inputs.indexOf ( other ) , input ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P5_Replace_Variable]^inputs.add ( input.indexOf ( other ) , inputs ) ;^88^^^^^86^90^inputs.add ( inputs.indexOf ( other ) , input ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P7_Replace_Invocation]^inputs.add ( inputs.add ( other ) , input ) ;^88^^^^^86^90^inputs.add ( inputs.indexOf ( other ) , input ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P7_Replace_Invocation]^inputs.add ( inputs .iterator (  )  , input ) ;^88^^^^^86^90^inputs.add ( inputs.indexOf ( other ) , input ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P14_Delete_Statement]^^88^^^^^86^90^inputs.add ( inputs.indexOf ( other ) , input ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P5_Replace_Variable]^inputs.add ( 0.indexOf ( other ) , input ) ;^88^^^^^86^90^inputs.add ( inputs.indexOf ( other ) , input ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P5_Replace_Variable]^inputs.add ( other.indexOf ( inputs ) , input ) ;^88^^^^^86^90^inputs.add ( inputs.indexOf ( other ) , input ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P8_Replace_Mix]^inputs.add ( inputs.add ( input ) , input ) ;^88^^^^^86^90^inputs.add ( inputs.indexOf ( other ) , input ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P14_Delete_Statement]^^88^89^^^^86^90^inputs.add ( inputs.indexOf ( other ) , input ) ; input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P7_Replace_Invocation]^input.getProvides ( this ) ;^89^^^^^86^90^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P14_Delete_Statement]^^89^^^^^86^90^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.addAll ( list ) ;input.setModule ( this ) ;^89^^^^^86^90^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P11_Insert_Donor_Statement]^file.setModule ( null ) ;input.setModule ( this ) ;^89^^^^^86^90^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P11_Insert_Donor_Statement]^input.setModule ( null ) ;input.setModule ( this ) ;^89^^^^^86^90^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P11_Insert_Donor_Statement]^deps.add ( this ) ;input.setModule ( this ) ;^89^^^^^86^90^input.setModule ( this ) ;^[CLASS] JSModule  [METHOD] addAfter [RETURN_TYPE] void   CompilerInput input CompilerInput other [VARIABLES] List  deps  inputs  CompilerInput  input  other  String  name  boolean  
[P2_Replace_Operator]^Preconditions.checkState ( dep <= this ) ;^94^^^^^93^96^Preconditions.checkState ( dep != this ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P14_Delete_Statement]^^94^95^^^^93^96^Preconditions.checkState ( dep != this ) ; deps.add ( dep ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( inputs.contains ( other )  ) ;Preconditions.checkState ( dep != this ) ;^94^^^^^93^96^Preconditions.checkState ( dep != this ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;Preconditions.checkState ( dep != this ) ;^94^^^^^93^96^Preconditions.checkState ( dep != this ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P7_Replace_Invocation]^deps.toArray ( dep ) ;^95^^^^^93^96^deps.add ( dep ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P14_Delete_Statement]^^95^^^^^93^96^deps.add ( dep ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P11_Insert_Donor_Statement]^set.add ( input ) ;deps.add ( dep ) ;^95^^^^^93^96^deps.add ( dep ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.add ( input ) ;deps.add ( dep ) ;^95^^^^^93^96^deps.add ( dep ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P11_Insert_Donor_Statement]^list.add ( module ) ;deps.add ( dep ) ;^95^^^^^93^96^deps.add ( dep ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P11_Insert_Donor_Statement]^inProgress.add ( input ) ;deps.add ( dep ) ;^95^^^^^93^96^deps.add ( dep ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.addAll ( list ) ;deps.add ( dep ) ;^95^^^^^93^96^deps.add ( dep ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P11_Insert_Donor_Statement]^inProgress.add ( module ) ;deps.add ( dep ) ;^95^^^^^93^96^deps.add ( dep ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.add ( 0, input ) ;deps.add ( dep ) ;^95^^^^^93^96^deps.add ( dep ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P11_Insert_Donor_Statement]^workList.add ( dep ) ;deps.add ( dep ) ;^95^^^^^93^96^deps.add ( dep ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P11_Insert_Donor_Statement]^set.add ( module ) ;deps.add ( dep ) ;^95^^^^^93^96^deps.add ( dep ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P11_Insert_Donor_Statement]^deps.add ( this ) ;deps.add ( dep ) ;^95^^^^^93^96^deps.add ( dep ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P11_Insert_Donor_Statement]^list.add ( input ) ;deps.add ( dep ) ;^95^^^^^93^96^deps.add ( dep ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P12_Insert_Condition]^if  ( allDeps.add ( dep )  )  { deps.add ( dep ) ; }^95^^^^^93^96^deps.add ( dep ) ;^[CLASS] JSModule  [METHOD] addDependency [RETURN_TYPE] void   JSModule dep [VARIABLES] JSModule  dep  List  deps  inputs  String  name  boolean  
[P14_Delete_Statement]^^101^^^^^99^104^input.setModule ( null ) ;^[CLASS] JSModule  [METHOD] removeAll [RETURN_TYPE] void   [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.add ( input ) ;input.setModule ( null ) ;^101^^^^^99^104^input.setModule ( null ) ;^[CLASS] JSModule  [METHOD] removeAll [RETURN_TYPE] void   [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.addAll ( list ) ;input.setModule ( null ) ;^101^^^^^99^104^input.setModule ( null ) ;^[CLASS] JSModule  [METHOD] removeAll [RETURN_TYPE] void   [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^file.setModule ( null ) ;input.setModule ( null ) ;^101^^^^^99^104^input.setModule ( null ) ;^[CLASS] JSModule  [METHOD] removeAll [RETURN_TYPE] void   [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^input.setModule ( this ) ;input.setModule ( null ) ;^101^^^^^99^104^input.setModule ( null ) ;^[CLASS] JSModule  [METHOD] removeAll [RETURN_TYPE] void   [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P7_Replace_Invocation]^inputs.iterator (  ) ;^103^^^^^99^104^inputs.clear (  ) ;^[CLASS] JSModule  [METHOD] removeAll [RETURN_TYPE] void   [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P14_Delete_Statement]^^103^^^^^99^104^inputs.clear (  ) ;^[CLASS] JSModule  [METHOD] removeAll [RETURN_TYPE] void   [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^input.clearAst (  ) ;inputs.clear (  ) ;^103^^^^^99^104^inputs.clear (  ) ;^[CLASS] JSModule  [METHOD] removeAll [RETURN_TYPE] void   [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.add ( input ) ;inputs.clear (  ) ;^103^^^^^99^104^inputs.clear (  ) ;^[CLASS] JSModule  [METHOD] removeAll [RETURN_TYPE] void   [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.addAll ( list ) ;inputs.clear (  ) ;^103^^^^^99^104^inputs.clear (  ) ;^[CLASS] JSModule  [METHOD] removeAll [RETURN_TYPE] void   [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.add ( 0, input ) ;inputs.clear (  ) ;^103^^^^^99^104^inputs.clear (  ) ;^[CLASS] JSModule  [METHOD] removeAll [RETURN_TYPE] void   [VARIABLES] List  deps  inputs  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^Set<CompilerInput> set = Sets.newHashSet (  ) ;Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;^120^^^^^119^131^Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P11_Insert_Donor_Statement]^List<JSModule> workList = Lists.newArrayList ( deps ) ;Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;^120^^^^^119^131^Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P11_Insert_Donor_Statement]^Set<JSModule> set = Sets.newHashSet (  ) ;Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;^120^^^^^119^131^Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P11_Insert_Donor_Statement]^Set<JSModule> deps = getAllDependencies (  ) ;Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;^120^^^^^119^131^Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P11_Insert_Donor_Statement]^List<JSModule> list = Lists.newArrayList (  ) ;Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;^120^^^^^119^131^Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P5_Replace_Variable]^Set<JSModule> allDeps = Sets.newHashSet ( this ) ;^120^^^^^119^131^Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P14_Delete_Statement]^^120^^^^^119^131^Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P11_Insert_Donor_Statement]^Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;List<JSModule> workList = Lists.newArrayList ( deps ) ;^121^^^^^119^131^List<JSModule> workList = Lists.newArrayList ( deps ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P11_Insert_Donor_Statement]^List<CompilerInput> list = Lists.newArrayList (  ) ;List<JSModule> workList = Lists.newArrayList ( deps ) ;^121^^^^^119^131^List<JSModule> workList = Lists.newArrayList ( deps ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P11_Insert_Donor_Statement]^Set<JSModule> set = Sets.newHashSet (  ) ;List<JSModule> workList = Lists.newArrayList ( deps ) ;^121^^^^^119^131^List<JSModule> workList = Lists.newArrayList ( deps ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P11_Insert_Donor_Statement]^List<JSModule> list = Lists.newArrayList (  ) ;List<JSModule> workList = Lists.newArrayList ( deps ) ;^121^^^^^119^131^List<JSModule> workList = Lists.newArrayList ( deps ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P14_Delete_Statement]^^121^^^^^119^131^List<JSModule> workList = Lists.newArrayList ( deps ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P2_Replace_Operator]^while  ( workList.size (  )  >= 0 )  {^122^^^^^119^131^while  ( workList.size (  )  > 0 )  {^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P3_Replace_Literal]^while  ( workList.size (  )  > -7 )  {^122^^^^^119^131^while  ( workList.size (  )  > 0 )  {^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P3_Replace_Literal]^while  ( workList.size() - 5  > 0 )  {^122^^^^^119^131^while  ( workList.size (  )  > 0 )  {^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P7_Replace_Invocation]^while  ( workList.add (  )  > 0 )  {^122^^^^^119^131^while  ( workList.size (  )  > 0 )  {^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P5_Replace_Variable]^if  ( allDeps.add ( module )  )  {^125^^^^^119^131^if  ( allDeps.add ( dep )  )  {^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P5_Replace_Variable]^if  ( dep.add ( allDeps )  )  {^125^^^^^119^131^if  ( allDeps.add ( dep )  )  {^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P15_Unwrap_Block]^workList.add(dep);^125^126^127^^^119^131^if  ( allDeps.add ( dep )  )  { workList.add ( dep ) ; }^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P16_Remove_Block]^^125^126^127^^^119^131^if  ( allDeps.add ( dep )  )  { workList.add ( dep ) ; }^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P5_Replace_Variable]^workList.add ( module ) ;^126^^^^^119^131^workList.add ( dep ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P14_Delete_Statement]^^126^^^^^119^131^workList.add ( dep ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P11_Insert_Donor_Statement]^deps.add ( dep ) ;workList.add ( dep ) ;^126^^^^^119^131^workList.add ( dep ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P11_Insert_Donor_Statement]^list.add ( module ) ;workList.add ( dep ) ;^126^^^^^119^131^workList.add ( dep ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P11_Insert_Donor_Statement]^inProgress.add ( input ) ;workList.add ( dep ) ;^126^^^^^119^131^workList.add ( dep ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P11_Insert_Donor_Statement]^inProgress.add ( module ) ;workList.add ( dep ) ;^126^^^^^119^131^workList.add ( dep ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P11_Insert_Donor_Statement]^list.add ( input ) ;workList.add ( dep ) ;^126^^^^^119^131^workList.add ( dep ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P2_Replace_Operator]^JSModule module = workList.remove ( workList.size (  )   !=  1 ) ;^123^^^^^119^131^JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P3_Replace_Literal]^JSModule module = workList.remove ( workList.size (  )  -  ) ;^123^^^^^119^131^JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P3_Replace_Literal]^JSModule module = workList.remove ( workList.size() - 4  - 1 ) ;^123^^^^^119^131^JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P7_Replace_Invocation]^JSModule module = workList.remove ( workList.add (  )  - 1 ) ;^123^^^^^119^131^JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P8_Replace_Mix]^JSModule module = 4.remove ( workList.size (  )  - 1 ) ;^123^^^^^119^131^JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P2_Replace_Operator]^JSModule module = workList.remove ( workList.size (  )   ==  1 ) ;^123^^^^^119^131^JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P3_Replace_Literal]^JSModule module = workList.remove ( workList.size (  )   ) ;^123^^^^^119^131^JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P3_Replace_Literal]^JSModule module = workList.remove ( workList.size() + 4  - 1 ) ;^123^^^^^119^131^JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P14_Delete_Statement]^^123^^^^^119^131^JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P11_Insert_Donor_Statement]^while  ( workList.size (  )  > 0 )  { JSModule module = workList.remove ( workList.size (  )  - 1 ) ;JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^123^^^^^119^131^JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P3_Replace_Literal]^JSModule module = workList.remove ( workList.size() + 5  - 1 ) ;^123^^^^^119^131^JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P5_Replace_Variable]^for  ( JSModule dep : dep.getDependencies (  )  )  {^124^^^^^119^131^for  ( JSModule dep : module.getDependencies (  )  )  {^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P7_Replace_Invocation]^for  ( JSModule dep : module.getByName (  )  )  {^124^^^^^119^131^for  ( JSModule dep : module.getDependencies (  )  )  {^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P7_Replace_Invocation]^for  ( JSModule dep : module .getAllDependencies (  )   )  {^124^^^^^119^131^for  ( JSModule dep : module.getDependencies (  )  )  {^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P14_Delete_Statement]^^124^125^126^127^^119^131^for  ( JSModule dep : module.getDependencies (  )  )  { if  ( allDeps.add ( dep )  )  { workList.add ( dep ) ; }^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P2_Replace_Operator]^JSModule module = workList.remove ( workList.size (  )   >  1 ) ;^123^^^^^119^131^JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P3_Replace_Literal]^JSModule module = workList.remove ( workList.size() + 9  - 1 ) ;^123^^^^^119^131^JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P3_Replace_Literal]^while  ( workList.size() - 2  > 0 )  {^122^^^^^119^131^while  ( workList.size (  )  > 0 )  {^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P14_Delete_Statement]^^122^123^^^^119^131^while  ( workList.size (  )  > 0 )  { JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P2_Replace_Operator]^JSModule module = workList.remove ( workList.size (  )   ||  1 ) ;^123^^^^^119^131^JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P3_Replace_Literal]^JSModule module = workList.remove ( workList.size() + 1  - 1 ) ;^123^^^^^119^131^JSModule module = workList.remove ( workList.size (  )  - 1 ) ;^[CLASS] JSModule  [METHOD] getAllDependencies [RETURN_TYPE] Set   [VARIABLES] JSModule  dep  module  List  deps  inputs  workList  String  name  Set  allDeps  boolean  
[P7_Replace_Invocation]^Set<JSModule> deps = getDependencies (  ) ;^135^^^^^134^138^Set<JSModule> deps = getAllDependencies (  ) ;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P11_Insert_Donor_Statement]^Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;Set<JSModule> deps = getAllDependencies (  ) ;^135^^^^^134^138^Set<JSModule> deps = getAllDependencies (  ) ;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P11_Insert_Donor_Statement]^Set<JSModule> set = Sets.newHashSet (  ) ;Set<JSModule> deps = getAllDependencies (  ) ;^135^^^^^134^138^Set<JSModule> deps = getAllDependencies (  ) ;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P11_Insert_Donor_Statement]^List<JSModule> list = Lists.newArrayList (  ) ;Set<JSModule> deps = getAllDependencies (  ) ;^135^^^^^134^138^Set<JSModule> deps = getAllDependencies (  ) ;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P14_Delete_Statement]^^135^^^^^134^138^Set<JSModule> deps = getAllDependencies (  ) ;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P7_Replace_Invocation]^deps.contains ( this ) ;^136^^^^^134^138^deps.add ( this ) ;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P14_Delete_Statement]^^136^^^^^134^138^deps.add ( this ) ;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P11_Insert_Donor_Statement]^deps.add ( dep ) ;deps.add ( this ) ;^136^^^^^134^138^deps.add ( this ) ;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P11_Insert_Donor_Statement]^set.add ( input ) ;deps.add ( this ) ;^136^^^^^134^138^deps.add ( this ) ;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P11_Insert_Donor_Statement]^inputs.add ( input ) ;deps.add ( this ) ;^136^^^^^134^138^deps.add ( this ) ;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P11_Insert_Donor_Statement]^list.add ( module ) ;deps.add ( this ) ;^136^^^^^134^138^deps.add ( this ) ;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P11_Insert_Donor_Statement]^inputs.addAll ( list ) ;deps.add ( this ) ;^136^^^^^134^138^deps.add ( this ) ;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P11_Insert_Donor_Statement]^inputs.add ( 0, input ) ;deps.add ( this ) ;^136^^^^^134^138^deps.add ( this ) ;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P11_Insert_Donor_Statement]^input.setModule ( this ) ;deps.add ( this ) ;^136^^^^^134^138^deps.add ( this ) ;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P11_Insert_Donor_Statement]^set.add ( module ) ;deps.add ( this ) ;^136^^^^^134^138^deps.add ( this ) ;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P11_Insert_Donor_Statement]^list.add ( input ) ;deps.add ( this ) ;^136^^^^^134^138^deps.add ( this ) ;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P8_Replace_Mix]^return null;^137^^^^^134^138^return deps;^[CLASS] JSModule  [METHOD] getThisAndAllDependencies [RETURN_TYPE] Set   [VARIABLES] List  deps  inputs  workList  String  name  Set  deps  boolean  
[P5_Replace_Variable]^if  ( input.equals ( name.getName (  )  )  )  {^152^^^^^150^157^if  ( name.equals ( input.getName (  )  )  )  {^[CLASS] JSModule  [METHOD] getByName [RETURN_TYPE] CompilerInput   String name [VARIABLES] List  deps  inputs  workList  CompilerInput  input  String  name  boolean  
[P7_Replace_Invocation]^if  ( name.equals ( input.setModule (  )  )  )  {^152^^^^^150^157^if  ( name.equals ( input.getName (  )  )  )  {^[CLASS] JSModule  [METHOD] getByName [RETURN_TYPE] CompilerInput   String name [VARIABLES] List  deps  inputs  workList  CompilerInput  input  String  name  boolean  
[P9_Replace_Statement]^if  ( name.equals ( file.getName (  )  )  )  {^152^^^^^150^157^if  ( name.equals ( input.getName (  )  )  )  {^[CLASS] JSModule  [METHOD] getByName [RETURN_TYPE] CompilerInput   String name [VARIABLES] List  deps  inputs  workList  CompilerInput  input  String  name  boolean  
[P15_Unwrap_Block]^return input;^152^153^154^^^150^157^if  ( name.equals ( input.getName (  )  )  )  { return input; }^[CLASS] JSModule  [METHOD] getByName [RETURN_TYPE] CompilerInput   String name [VARIABLES] List  deps  inputs  workList  CompilerInput  input  String  name  boolean  
[P16_Remove_Block]^^152^153^154^^^150^157^if  ( name.equals ( input.getName (  )  )  )  { return input; }^[CLASS] JSModule  [METHOD] getByName [RETURN_TYPE] CompilerInput   String name [VARIABLES] List  deps  inputs  workList  CompilerInput  input  String  name  boolean  
[P13_Insert_Block]^if  ( name.equals ( input.getName (  )  )  )  {     return input; }^152^^^^^150^157^[Delete]^[CLASS] JSModule  [METHOD] getByName [RETURN_TYPE] CompilerInput   String name [VARIABLES] List  deps  inputs  workList  CompilerInput  input  String  name  boolean  
[P8_Replace_Mix]^return this;^156^^^^^150^157^return null;^[CLASS] JSModule  [METHOD] getByName [RETURN_TYPE] CompilerInput   String name [VARIABLES] List  deps  inputs  workList  CompilerInput  input  String  name  boolean  
[P3_Replace_Literal]^boolean found = true;^163^^^^^162^174^boolean found = false;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P7_Replace_Invocation]^Iterator<CompilerInput> iter = inputs.clear (  ) ;^164^^^^^162^174^Iterator<CompilerInput> iter = inputs.iterator (  ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P5_Replace_Variable]^Iterator<CompilerInput> iter = 3.iterator (  ) ;^164^^^^^162^174^Iterator<CompilerInput> iter = inputs.iterator (  ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P14_Delete_Statement]^^164^^^^^162^174^Iterator<CompilerInput> iter = inputs.iterator (  ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P11_Insert_Donor_Statement]^CompilerInput file = iter.next (  ) ;Iterator<CompilerInput> iter = inputs.iterator (  ) ;^164^^^^^162^174^Iterator<CompilerInput> iter = inputs.iterator (  ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P11_Insert_Donor_Statement]^Set<CompilerInput> set = Sets.newHashSet (  ) ;Iterator<CompilerInput> iter = inputs.iterator (  ) ;^164^^^^^162^174^Iterator<CompilerInput> iter = inputs.iterator (  ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P11_Insert_Donor_Statement]^List<CompilerInput> list = Lists.newArrayList (  ) ;Iterator<CompilerInput> iter = inputs.iterator (  ) ;^164^^^^^162^174^Iterator<CompilerInput> iter = inputs.iterator (  ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P7_Replace_Invocation]^while  ( iter .next (  )   )  {^165^^^^^162^174^while  ( iter.hasNext (  )  )  {^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P5_Replace_Variable]^if  ( file.equals ( name.getName (  )  )  )  {^167^^^^^162^174^if  ( name.equals ( file.getName (  )  )  )  {^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P7_Replace_Invocation]^if  ( name.equals ( file.setModule (  )  )  )  {^167^^^^^162^174^if  ( name.equals ( file.getName (  )  )  )  {^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P9_Replace_Statement]^if  ( name.equals ( input.getName (  )  )  )  {^167^^^^^162^174^if  ( name.equals ( file.getName (  )  )  )  {^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P15_Unwrap_Block]^iter.remove(); file.setModule(null); found = true;^167^168^169^170^171^162^174^if  ( name.equals ( file.getName (  )  )  )  { iter.remove (  ) ; file.setModule ( null ) ; found = true; }^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P16_Remove_Block]^^167^168^169^170^171^162^174^if  ( name.equals ( file.getName (  )  )  )  { iter.remove (  ) ; file.setModule ( null ) ; found = true; }^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P3_Replace_Literal]^found = false;^170^^^^^162^174^found = true;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P7_Replace_Invocation]^iter .size (  )  ;^168^^^^^162^174^iter.remove (  ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P14_Delete_Statement]^^168^169^^^^162^174^iter.remove (  ) ; file.setModule ( null ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P11_Insert_Donor_Statement]^file.setModule ( null ) ;iter.remove (  ) ;^168^^^^^162^174^iter.remove (  ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P14_Delete_Statement]^^169^170^^^^162^174^file.setModule ( null ) ; found = true;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P11_Insert_Donor_Statement]^iter.remove (  ) ;file.setModule ( null ) ;^169^^^^^162^174^file.setModule ( null ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P11_Insert_Donor_Statement]^input.setModule ( null ) ;file.setModule ( null ) ;^169^^^^^162^174^file.setModule ( null ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P11_Insert_Donor_Statement]^input.setModule ( this ) ;file.setModule ( null ) ;^169^^^^^162^174^file.setModule ( null ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P7_Replace_Invocation]^CompilerInput file = iter .hasNext (  )  ;^166^^^^^162^174^CompilerInput file = iter.next (  ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P11_Insert_Donor_Statement]^Iterator<CompilerInput> iter = inputs.iterator (  ) ;CompilerInput file = iter.next (  ) ;^166^^^^^162^174^CompilerInput file = iter.next (  ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P11_Insert_Donor_Statement]^Set<CompilerInput> set = Sets.newHashSet (  ) ;CompilerInput file = iter.next (  ) ;^166^^^^^162^174^CompilerInput file = iter.next (  ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P11_Insert_Donor_Statement]^List<CompilerInput> list = Lists.newArrayList (  ) ;CompilerInput file = iter.next (  ) ;^166^^^^^162^174^CompilerInput file = iter.next (  ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P14_Delete_Statement]^^166^^^^^162^174^CompilerInput file = iter.next (  ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P11_Insert_Donor_Statement]^while  ( iter.hasNext (  )  )  { CompilerInput file = iter.next (  ) ;CompilerInput file = iter.next (  ) ;^166^^^^^162^174^CompilerInput file = iter.next (  ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P14_Delete_Statement]^^168^^^^^162^174^iter.remove (  ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P14_Delete_Statement]^^169^^^^^162^174^file.setModule ( null ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P14_Delete_Statement]^^165^166^^^^162^174^while  ( iter.hasNext (  )  )  { CompilerInput file = iter.next (  ) ;^[CLASS] JSModule  [METHOD] removeByName [RETURN_TYPE] boolean   String name [VARIABLES] Iterator  iter  List  deps  inputs  workList  CompilerInput  file  String  name  boolean  found  
[P7_Replace_Invocation]^input.setModule (  ) ;^188^^^^^186^190^input.clearAst (  ) ;^[CLASS] JSModule  [METHOD] clearAsts [RETURN_TYPE] void   [VARIABLES] List  deps  inputs  workList  CompilerInput  input  String  name  boolean  
[P8_Replace_Mix]^input .getName (  )  ;^188^^^^^186^190^input.clearAst (  ) ;^[CLASS] JSModule  [METHOD] clearAsts [RETURN_TYPE] void   [VARIABLES] List  deps  inputs  workList  CompilerInput  input  String  name  boolean  
[P14_Delete_Statement]^^188^^^^^186^190^input.clearAst (  ) ;^[CLASS] JSModule  [METHOD] clearAsts [RETURN_TYPE] void   [VARIABLES] List  deps  inputs  workList  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^inputs.clear (  ) ;input.clearAst (  ) ;^188^^^^^186^190^input.clearAst (  ) ;^[CLASS] JSModule  [METHOD] clearAsts [RETURN_TYPE] void   [VARIABLES] List  deps  inputs  workList  CompilerInput  input  String  name  boolean  
[P11_Insert_Donor_Statement]^Set<CompilerInput> set = Sets.newHashSet (  ) ;final Map<String, CompilerInput> provides = Maps.newHashMap (  ) ;^197^^^^^195^219^final Map<String, CompilerInput> provides = Maps.newHashMap (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P14_Delete_Statement]^^197^^^^^195^219^final Map<String, CompilerInput> provides = Maps.newHashMap (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P1_Replace_Type]^for  ( char provide : input.getProvides ( compiler )  )  {^199^^^^^195^219^for  ( String provide : input.getProvides ( compiler )  )  {^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P5_Replace_Variable]^for  ( String provide : compiler.getProvides ( input )  )  {^199^^^^^195^219^for  ( String provide : input.getProvides ( compiler )  )  {^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P7_Replace_Invocation]^for  ( String provide : input .getRequires ( compiler )   )  {^199^^^^^195^219^for  ( String provide : input.getProvides ( compiler )  )  {^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P14_Delete_Statement]^^199^200^201^^^195^219^for  ( String provide : input.getProvides ( compiler )  )  { provides.put ( provide, input ) ; }^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P5_Replace_Variable]^provides.put ( name, input ) ;^200^^^^^195^219^provides.put ( provide, input ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P5_Replace_Variable]^provides.put (  input ) ;^200^^^^^195^219^provides.put ( provide, input ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P5_Replace_Variable]^provides.put ( provide ) ;^200^^^^^195^219^provides.put ( provide, input ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P14_Delete_Statement]^^200^^^^^195^219^provides.put ( provide, input ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^CompilerInput file = iter.next (  ) ;List<CompilerInput> list = Lists.newArrayList (  ) ;^208^^^^^195^219^List<CompilerInput> list = Lists.newArrayList (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^Iterator<CompilerInput> iter = inputs.iterator (  ) ;List<CompilerInput> list = Lists.newArrayList (  ) ;^208^^^^^195^219^List<CompilerInput> list = Lists.newArrayList (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^Set<CompilerInput> set = Sets.newHashSet (  ) ;List<CompilerInput> list = Lists.newArrayList (  ) ;^208^^^^^195^219^List<CompilerInput> list = Lists.newArrayList (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^List<JSModule> workList = Lists.newArrayList ( deps ) ;List<CompilerInput> list = Lists.newArrayList (  ) ;^208^^^^^195^219^List<CompilerInput> list = Lists.newArrayList (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^List<JSModule> list = Lists.newArrayList (  ) ;List<CompilerInput> list = Lists.newArrayList (  ) ;^208^^^^^195^219^List<CompilerInput> list = Lists.newArrayList (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P14_Delete_Statement]^^208^^^^^195^219^List<CompilerInput> list = Lists.newArrayList (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^CompilerInput file = iter.next (  ) ;Set<CompilerInput> set = Sets.newHashSet (  ) ;^209^^^^^195^219^Set<CompilerInput> set = Sets.newHashSet (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;Set<CompilerInput> set = Sets.newHashSet (  ) ;^209^^^^^195^219^Set<CompilerInput> set = Sets.newHashSet (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^Iterator<CompilerInput> iter = inputs.iterator (  ) ;Set<CompilerInput> set = Sets.newHashSet (  ) ;^209^^^^^195^219^Set<CompilerInput> set = Sets.newHashSet (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^List<CompilerInput> list = Lists.newArrayList (  ) ;Set<CompilerInput> set = Sets.newHashSet (  ) ;^209^^^^^195^219^Set<CompilerInput> set = Sets.newHashSet (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^Set<JSModule> set = Sets.newHashSet (  ) ;Set<CompilerInput> set = Sets.newHashSet (  ) ;^209^^^^^195^219^Set<CompilerInput> set = Sets.newHashSet (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^final Map<String, CompilerInput> provides = Maps.newHashMap (  ) ;Set<CompilerInput> set = Sets.newHashSet (  ) ;^209^^^^^195^219^Set<CompilerInput> set = Sets.newHashSet (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P14_Delete_Statement]^^209^^^^^195^219^Set<CompilerInput> set = Sets.newHashSet (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^Sets.<CompilerInput>newHashSet (  )  ) ;Set<CompilerInput> set = Sets.newHashSet (  ) ;^209^^^^^195^219^Set<CompilerInput> set = Sets.newHashSet (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P5_Replace_Variable]^addInputAndDeps (  provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( input,  compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( input, provides,  list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( input, provides, compiler,  set, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( input, provides, compiler, list,  Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( set, provides, compiler, list, input, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( input, set, compiler, list, provides, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( input, provides, list, compiler, set, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( list, provides, compiler, input, set, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( input, provides, set, list, compiler, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P14_Delete_Statement]^^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^211^212^^^^195^219^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P14_Delete_Statement]^^212^^^^^195^219^Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^Set<CompilerInput> set = Sets.newHashSet (  ) ;Sets.<CompilerInput>newHashSet (  )  ) ;^212^^^^^195^219^Sets.<CompilerInput>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P2_Replace_Operator]^Preconditions.checkState ( inputs.size (  )  <= list.size (  )  ) ;^216^^^^^195^219^Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P3_Replace_Literal]^Preconditions.checkState ( inputs.size() + 7  == list.size() + 7  ) ;^216^^^^^195^219^Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P5_Replace_Variable]^Preconditions.checkState ( list.size (  )  == inputs.size (  )  ) ;^216^^^^^195^219^Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P7_Replace_Invocation]^Preconditions.checkState ( inputs.clear (  )  == list.size (  )  ) ;^216^^^^^195^219^Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P7_Replace_Invocation]^Preconditions.checkState ( inputs .remove ( 4 )   == list^216^^^^^195^219^Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P7_Replace_Invocation]^Preconditions.checkState ( inputs.add (  )  == list.size (  )  ) ;^216^^^^^195^219^Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P14_Delete_Statement]^^216^^^^^195^219^Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( inputs.contains ( other )  ) ;Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^216^^^^^195^219^Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^Preconditions.checkState ( dep != this ) ;Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^216^^^^^195^219^Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P3_Replace_Literal]^Preconditions.checkState ( inputs.size() - 6  == list.size() - 6  ) ;^216^^^^^195^219^Preconditions.checkState ( inputs.size (  )  == list.size (  )  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P7_Replace_Invocation]^inputs.iterator (  ) ;^217^^^^^195^219^inputs.clear (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P14_Delete_Statement]^^217^218^^^^195^219^inputs.clear (  ) ; inputs.addAll ( list ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^input.clearAst (  ) ;inputs.clear (  ) ;^217^^^^^195^219^inputs.clear (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^inputs.add ( input ) ;inputs.clear (  ) ;^217^^^^^195^219^inputs.clear (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^inputs.addAll ( list ) ;inputs.clear (  ) ;^217^^^^^195^219^inputs.clear (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^inputs.add ( 0, input ) ;inputs.clear (  ) ;^217^^^^^195^219^inputs.clear (  ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P7_Replace_Invocation]^inputs.add ( list ) ;^218^^^^^195^219^inputs.addAll ( list ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P14_Delete_Statement]^^218^^^^^195^219^inputs.addAll ( list ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^deps.add ( dep ) ;inputs.addAll ( list ) ;^218^^^^^195^219^inputs.addAll ( list ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^inputs.add ( input ) ;inputs.addAll ( list ) ;^218^^^^^195^219^inputs.addAll ( list ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^inputs.clear (  ) ;inputs.addAll ( list ) ;^218^^^^^195^219^inputs.addAll ( list ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^inputs.add ( 0, input ) ;inputs.addAll ( list ) ;^218^^^^^195^219^inputs.addAll ( list ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^input.setModule ( null ) ;inputs.addAll ( list ) ;^218^^^^^195^219^inputs.addAll ( list ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^input.setModule ( this ) ;inputs.addAll ( list ) ;^218^^^^^195^219^inputs.addAll ( list ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^deps.add ( this ) ;inputs.addAll ( list ) ;^218^^^^^195^219^inputs.addAll ( list ) ;^[CLASS] JSModule  [METHOD] sortInputsByDeps [RETURN_TYPE] void   Compiler compiler [VARIABLES] Compiler  compiler  CompilerInput  input  Set  set  boolean  List  deps  inputs  list  workList  String  name  provide  Map  provides  
[P11_Insert_Donor_Statement]^Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;List<JSModule> list = Lists.newArrayList (  ) ;^230^^^^^229^236^List<JSModule> list = Lists.newArrayList (  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P11_Insert_Donor_Statement]^List<JSModule> workList = Lists.newArrayList ( deps ) ;List<JSModule> list = Lists.newArrayList (  ) ;^230^^^^^229^236^List<JSModule> list = Lists.newArrayList (  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P11_Insert_Donor_Statement]^List<CompilerInput> list = Lists.newArrayList (  ) ;List<JSModule> list = Lists.newArrayList (  ) ;^230^^^^^229^236^List<JSModule> list = Lists.newArrayList (  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P11_Insert_Donor_Statement]^Set<JSModule> set = Sets.newHashSet (  ) ;List<JSModule> list = Lists.newArrayList (  ) ;^230^^^^^229^236^List<JSModule> list = Lists.newArrayList (  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P11_Insert_Donor_Statement]^Set<JSModule> deps = getAllDependencies (  ) ;List<JSModule> list = Lists.newArrayList (  ) ;^230^^^^^229^236^List<JSModule> list = Lists.newArrayList (  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P8_Replace_Mix]^List<JSModule> list = Lists .newArrayList ( this )  ;^230^^^^^229^236^List<JSModule> list = Lists.newArrayList (  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P14_Delete_Statement]^^230^231^^^^229^236^List<JSModule> list = Lists.newArrayList (  ) ; Set<JSModule> set = Sets.newHashSet (  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P11_Insert_Donor_Statement]^Set<JSModule> allDeps = Sets.newHashSet ( deps ) ;Set<JSModule> set = Sets.newHashSet (  ) ;^231^^^^^229^236^Set<JSModule> set = Sets.newHashSet (  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P11_Insert_Donor_Statement]^Set<CompilerInput> set = Sets.newHashSet (  ) ;Set<JSModule> set = Sets.newHashSet (  ) ;^231^^^^^229^236^Set<JSModule> set = Sets.newHashSet (  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P11_Insert_Donor_Statement]^List<JSModule> workList = Lists.newArrayList ( deps ) ;Set<JSModule> set = Sets.newHashSet (  ) ;^231^^^^^229^236^Set<JSModule> set = Sets.newHashSet (  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P11_Insert_Donor_Statement]^Set<JSModule> deps = getAllDependencies (  ) ;Set<JSModule> set = Sets.newHashSet (  ) ;^231^^^^^229^236^Set<JSModule> set = Sets.newHashSet (  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P11_Insert_Donor_Statement]^List<JSModule> list = Lists.newArrayList (  ) ;Set<JSModule> set = Sets.newHashSet (  ) ;^231^^^^^229^236^Set<JSModule> set = Sets.newHashSet (  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P14_Delete_Statement]^^231^^^^^229^236^Set<JSModule> set = Sets.newHashSet (  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps (  list, set, Sets.<JSModule>newHashSet (  )  ) ;^233^^^^^229^236^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps ( module,  set, Sets.<JSModule>newHashSet (  )  ) ;^233^^^^^229^236^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps ( module, list,  Sets.<JSModule>newHashSet (  )  ) ;^233^^^^^229^236^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps ( list, module, set, Sets.<JSModule>newHashSet (  )  ) ;^233^^^^^229^236^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps ( module, set, list, Sets.<JSModule>newHashSet (  )  ) ;^233^^^^^229^236^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps ( set, list, module, Sets.<JSModule>newHashSet (  )  ) ;^233^^^^^229^236^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P8_Replace_Mix]^addModuleAndDeps ( module, null, set, Sets.<JSModule>newHashSet (  )  ) ;^233^^^^^229^236^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P14_Delete_Statement]^^233^^^^^229^236^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P11_Insert_Donor_Statement]^addInputAndDeps ( input, provides, compiler, list, set, Sets.<CompilerInput>newHashSet (  )  ) ;addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^233^^^^^229^236^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P11_Insert_Donor_Statement]^addModuleAndDeps ( dep, list, set, inProgress ) ;addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^233^^^^^229^236^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P3_Replace_Literal]^return list.toArray ( new JSModule[list.size() + 9 ] ) ;^235^^^^^229^236^return list.toArray ( new JSModule[list.size (  ) ] ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P7_Replace_Invocation]^return list.toArray ( new JSModule[list.add (  ) ] ) ;^235^^^^^229^236^return list.toArray ( new JSModule[list.size (  ) ] ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P14_Delete_Statement]^^235^^^^^229^236^return list.toArray ( new JSModule[list.size (  ) ] ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P3_Replace_Literal]^return list.toArray ( new JSModule[list.size() + 4 ] ) ;^235^^^^^229^236^return list.toArray ( new JSModule[list.size (  ) ] ) ;^[CLASS] JSModule  [METHOD] sortJsModules [RETURN_TYPE] JSModule[]   JSModule> modules [VARIABLES] Collection  modules  JSModule  module  List  deps  inputs  list  workList  String  name  provide  Set  set  boolean  
[P7_Replace_Invocation]^if  ( !set .contains ( input )   )  {^246^^^^^242^263^if  ( !set.contains ( input )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P8_Replace_Mix]^if  ( set.contains ( input )  )  {^246^^^^^242^263^if  ( !set.contains ( input )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P9_Replace_Statement]^if  ( !set.contains ( module )  )  {^246^^^^^242^263^if  ( !set.contains ( input )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P9_Replace_Statement]^if  ( inProgress.contains ( module )  )  {^246^^^^^242^263^if  ( !set.contains ( input )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P9_Replace_Statement]^if  ( inProgress.contains ( input )  )  {^246^^^^^242^263^if  ( !set.contains ( input )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P15_Unwrap_Block]^if (inProgress.contains(input)) {    throw new java.lang.IllegalArgumentException(("Circular dependency involving input: " + (input.getName())));}; inProgress.add(input); for (java.lang.String require : input.getRequires(compiler)) {    if (provides.containsKey(require)) {        com.google.javascript.jscomp.JSModule.addInputAndDeps(provides.get(require), provides, compiler, list, set, inProgress);    }}; list.add(input); set.add(input);^246^247^248^249^250^242^263^if  ( !set.contains ( input )  )  { if  ( inProgress.contains ( input )  )  { throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ; }^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P16_Remove_Block]^^246^247^248^249^250^242^263^if  ( !set.contains ( input )  )  { if  ( inProgress.contains ( input )  )  { throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ; }^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^if  ( null.contains ( input )  )  {^247^^^^^242^263^if  ( inProgress.contains ( input )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^if  ( input.contains ( inProgress )  )  {^247^^^^^242^263^if  ( inProgress.contains ( input )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P7_Replace_Invocation]^if  ( inProgress .contains ( input )   )  {^247^^^^^242^263^if  ( inProgress.contains ( input )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P9_Replace_Statement]^if  ( !set.contains ( module )  )  {^247^^^^^242^263^if  ( inProgress.contains ( input )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P9_Replace_Statement]^if  ( provides.containsKey ( require )  )  {^247^^^^^242^263^if  ( inProgress.contains ( input )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P9_Replace_Statement]^if  ( !set.contains ( input )  )  {^247^^^^^242^263^if  ( inProgress.contains ( input )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P9_Replace_Statement]^if  ( inProgress.contains ( module )  )  {^247^^^^^242^263^if  ( inProgress.contains ( input )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("Circular dependency involving input: " + (input.getName())));^247^248^249^250^^242^263^if  ( inProgress.contains ( input )  )  { throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ; }^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P16_Remove_Block]^^247^248^249^250^^242^263^if  ( inProgress.contains ( input )  )  { throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ; }^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P13_Insert_Block]^if  ( inProgress.contains ( module )  )  {     throw new IllegalArgumentException (  ( "Circular dependency involving module: " +  ( module.getName (  )  )  )  ) ; }^247^^^^^242^263^[Delete]^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Circular dependency involving input: "  !=  input.getName (  )  ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Circular dependency involving input: cy involving inp" + input.getName (  )  ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Circular dependency involving module: " +  ( module.getName (  )  )  )  )   ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P7_Replace_Invocation]^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.setModule (  )  ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P7_Replace_Invocation]^throw new IllegalArgumentException ( "Circular dependency involving input: " + input .getProvides ( compiler )   ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P13_Insert_Block]^if  ( inProgress.contains ( input )  )  {     throw new IllegalArgumentException (  ( "Circular dependency involving input: " +  ( input.getName (  )  )  )  ) ; }^248^^^^^242^263^[Delete]^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P13_Insert_Block]^if  ( inProgress.contains ( module )  )  {     throw new IllegalArgumentException (  ( "Circular dependency involving module: " +  ( module.getName (  )  )  )  ) ; }^248^^^^^242^263^[Delete]^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Circular dependency involving input: "  >>  input.getName (  )  ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Circular depend" + input.getName (  )  ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P7_Replace_Invocation]^"Circular dependency involving input: " + input.setModule (  )  ) ;^249^^^^^242^263^"Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P7_Replace_Invocation]^"Circular dependency involving input: " + input .getProvides ( compiler )   ) ;^249^^^^^242^263^"Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P14_Delete_Statement]^^249^^^^^242^263^"Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^"Circular dependency involving module: " + module.getName (  )  ) ;"Circular dependency involving input: " + input.getName (  )  ) ;^249^^^^^242^263^"Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^if  ( provides.containsKey ( provide )  )  {^254^^^^^242^263^if  ( provides.containsKey ( require )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^if  ( require.containsKey ( provides )  )  {^254^^^^^242^263^if  ( provides.containsKey ( require )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P7_Replace_Invocation]^if  ( provides.put ( require )  )  {^254^^^^^242^263^if  ( provides.containsKey ( require )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P9_Replace_Statement]^if  ( !set.contains ( module )  )  {^254^^^^^242^263^if  ( provides.containsKey ( require )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P9_Replace_Statement]^if  ( inProgress.contains ( module )  )  {^254^^^^^242^263^if  ( provides.containsKey ( require )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P9_Replace_Statement]^if  ( inProgress.contains ( input )  )  {^254^^^^^242^263^if  ( provides.containsKey ( require )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P15_Unwrap_Block]^com.google.javascript.jscomp.JSModule.addInputAndDeps(provides.get(require), provides, compiler, list, set, inProgress);^254^255^256^257^^242^263^if  ( provides.containsKey ( require )  )  { addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ; }^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P16_Remove_Block]^^254^255^256^257^^242^263^if  ( provides.containsKey ( require )  )  { addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ; }^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( provides.get ( provide ) , provides, compiler, list, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( provides.get ( require ) ,  compiler, list, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( provides.get ( require ) , provides,  list, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( provides.get ( require ) , provides, compiler,  set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( provides.get ( require ) , provides, compiler, list,  inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( list.get ( require ) , provides, compiler, provides, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( provides.get ( compiler ) , provides, require, list, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( provides.get ( require ) , provides, list, compiler, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( provides.get ( set ) , provides, compiler, list, require, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, inProgress, set ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P7_Replace_Invocation]^addInputAndDeps ( provides.put ( require ) , provides, compiler, list, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P14_Delete_Statement]^^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P13_Insert_Block]^if  ( provides.containsKey ( require )  )  {     addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ; }^255^^^^^242^263^[Delete]^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( require.get ( provides ) , provides, compiler, list, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P8_Replace_Mix]^addInputAndDeps ( provides.put ( provide ) , provides, compiler, list, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Circular dependency involving input: "  >=  input.getName (  )  ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ircular " + input.getName (  )  ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P1_Replace_Type]^for  ( char require : input.getRequires ( compiler )  )  {^253^^^^^242^263^for  ( String require : input.getRequires ( compiler )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Circular dependency involving input: "  ==  input.getName (  )  ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "r dependency involircular dependency involving input: " + input.getName (  )  ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ; ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P8_Replace_Mix]^if  ( 4 .contains ( input )   )  {^247^^^^^242^263^if  ( inProgress.contains ( input )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P14_Delete_Statement]^^251^^^^^242^263^inProgress.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^deps.add ( dep ) ;inProgress.add ( input ) ;^251^^^^^242^263^inProgress.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^set.add ( input ) ;inProgress.add ( input ) ;^251^^^^^242^263^inProgress.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^inputs.add ( input ) ;inProgress.add ( input ) ;^251^^^^^242^263^inProgress.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^inProgress.add ( module ) ;inProgress.add ( input ) ;^251^^^^^242^263^inProgress.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^inputs.add ( 0, input ) ;inProgress.add ( input ) ;^251^^^^^242^263^inProgress.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^workList.add ( dep ) ;inProgress.add ( input ) ;^251^^^^^242^263^inProgress.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^list.add ( input ) ;inProgress.add ( input ) ;^251^^^^^242^263^inProgress.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P12_Insert_Condition]^if  ( inProgress.contains ( input )  )  { inProgress.add ( input ) ; }^251^^^^^242^263^inProgress.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^for  ( String require : compiler.getRequires ( input )  )  {^253^^^^^242^263^for  ( String require : input.getRequires ( compiler )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P7_Replace_Invocation]^for  ( String require : input .getProvides ( compiler )   )  {^253^^^^^242^263^for  ( String require : input.getRequires ( compiler )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P14_Delete_Statement]^^253^254^255^256^257^242^263^for  ( String require : input.getRequires ( compiler )  )  { if  ( provides.containsKey ( require )  )  { addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ; }^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P8_Replace_Mix]^if  ( provides.put ( provide )  )  {^254^^^^^242^263^if  ( provides.containsKey ( require )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( provides.get ( require ) , provides, compiler, null, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( provides.get ( require ) , provides, inProgress, list, set, compiler ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P7_Replace_Invocation]^addInputAndDeps ( provides .put ( name , input )  , provides, compiler, list, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P14_Delete_Statement]^^260^261^^^^242^263^list.add ( input ) ; set.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^deps.add ( dep ) ;list.add ( input ) ;^260^^^^^242^263^list.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^set.add ( input ) ;list.add ( input ) ;^260^^^^^242^263^list.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^inputs.add ( input ) ;list.add ( input ) ;^260^^^^^242^263^list.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^list.add ( module ) ;list.add ( input ) ;^260^^^^^242^263^list.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^inProgress.add ( input ) ;list.add ( input ) ;^260^^^^^242^263^list.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^inputs.add ( 0, input ) ;list.add ( input ) ;^260^^^^^242^263^list.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^workList.add ( dep ) ;list.add ( input ) ;^260^^^^^242^263^list.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^set.add ( module ) ;list.add ( input ) ;^260^^^^^242^263^list.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^deps.add ( this ) ;list.add ( input ) ;^260^^^^^242^263^list.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P8_Replace_Mix]^set .add ( 4 )  ;^261^^^^^242^263^set.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P14_Delete_Statement]^^261^^^^^242^263^set.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^deps.add ( dep ) ;set.add ( input ) ;^261^^^^^242^263^set.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^inputs.add ( input ) ;set.add ( input ) ;^261^^^^^242^263^set.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^list.add ( module ) ;set.add ( input ) ;^261^^^^^242^263^set.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^inProgress.add ( input ) ;set.add ( input ) ;^261^^^^^242^263^set.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^inputs.add ( 0, input ) ;set.add ( input ) ;^261^^^^^242^263^set.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^set.add ( module ) ;set.add ( input ) ;^261^^^^^242^263^set.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^deps.add ( this ) ;set.add ( input ) ;^261^^^^^242^263^set.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P11_Insert_Donor_Statement]^list.add ( input ) ;set.add ( input ) ;^261^^^^^242^263^set.add ( input ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Circular dependency involving input: "  <  input.getName (  )  ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ency involvingircular dependency involving input: " + input.getName (  )  ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Circular dependency involving input: r depe" + input.getName (  )  ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P8_Replace_Mix]^return ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P7_Replace_Invocation]^if  ( provides .put ( name , input )   )  {^254^^^^^242^263^if  ( provides.containsKey ( require )  )  {^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( compiler.get ( require ) , provides, provides, list, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( set.get ( require ) , provides, compiler, list, provides, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( inProgress.get ( require ) , provides, compiler, list, set, provides ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P7_Replace_Invocation]^addInputAndDeps ( provides .put ( require , input )  , provides, compiler, list, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "nvolv" + input.getName (  )  ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Circular dependency involving input: "   instanceof   input.getName (  )  ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "eircular dependency involving input: " + input.getName (  )  ) ;^248^249^^^^242^263^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( provides.get ( list ) , provides, compiler, require, set, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P5_Replace_Variable]^addInputAndDeps ( provides.get ( require ) , provides, compiler, set, list, inProgress ) ;^255^256^^^^242^263^addInputAndDeps ( provides.get ( require ) , provides, compiler, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addInputAndDeps [RETURN_TYPE] void   CompilerInput input CompilerInput> provides Compiler compiler CompilerInput> list CompilerInput> set CompilerInput> inProgress [VARIABLES] Compiler  compiler  CompilerInput  input  Set  inProgress  set  boolean  List  deps  inputs  list  workList  String  name  provide  require  Map  provides  
[P8_Replace_Mix]^if  ( !set .contains ( 1 )   )  {^272^^^^^269^286^if  ( !set.contains ( module )  )  {^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P9_Replace_Statement]^if  ( provides.containsKey ( require )  )  {^272^^^^^269^286^if  ( !set.contains ( module )  )  {^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P9_Replace_Statement]^if  ( !set.contains ( input )  )  {^272^^^^^269^286^if  ( !set.contains ( module )  )  {^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P9_Replace_Statement]^if  ( inProgress.contains ( module )  )  {^272^^^^^269^286^if  ( !set.contains ( module )  )  {^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P9_Replace_Statement]^if  ( inProgress.contains ( input )  )  {^272^^^^^269^286^if  ( !set.contains ( module )  )  {^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P15_Unwrap_Block]^if (inProgress.contains(module)) {    throw new java.lang.IllegalArgumentException(("Circular dependency involving module: " + (module.getName())));}; inProgress.add(module); for (com.google.javascript.jscomp.JSModule dep : module.getDependencies()) {    com.google.javascript.jscomp.JSModule.addModuleAndDeps(dep, list, set, inProgress);}; list.add(module); set.add(module);^272^273^274^275^276^269^286^if  ( !set.contains ( module )  )  { if  ( inProgress.contains ( module )  )  { throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ; }^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P16_Remove_Block]^^272^273^274^275^276^269^286^if  ( !set.contains ( module )  )  { if  ( inProgress.contains ( module )  )  { throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ; }^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^if  ( module.contains ( inProgress )  )  {^273^^^^^269^286^if  ( inProgress.contains ( module )  )  {^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P8_Replace_Mix]^if  ( inProgress.contains ( dep )  )  {^273^^^^^269^286^if  ( inProgress.contains ( module )  )  {^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P9_Replace_Statement]^if  ( !set.contains ( module )  )  {^273^^^^^269^286^if  ( inProgress.contains ( module )  )  {^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P9_Replace_Statement]^if  ( provides.containsKey ( require )  )  {^273^^^^^269^286^if  ( inProgress.contains ( module )  )  {^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P9_Replace_Statement]^if  ( !set.contains ( input )  )  {^273^^^^^269^286^if  ( inProgress.contains ( module )  )  {^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P9_Replace_Statement]^if  ( inProgress.contains ( input )  )  {^273^^^^^269^286^if  ( inProgress.contains ( module )  )  {^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("Circular dependency involving module: " + (module.getName())));^273^274^275^276^^269^286^if  ( inProgress.contains ( module )  )  { throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ; }^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P16_Remove_Block]^^273^274^275^276^^269^286^if  ( inProgress.contains ( module )  )  { throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ; }^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P13_Insert_Block]^if  ( inProgress.contains ( input )  )  {     throw new IllegalArgumentException (  ( "Circular dependency involving input: " +  ( input.getName (  )  )  )  ) ; }^273^^^^^269^286^[Delete]^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Circular dependency involving module: "  <=  module.getName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Circular dependency involving module: Circular depend" + module.getName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Circular dependency involving input: " +  ( input.getName (  )  )  )  )   ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Circular dependency involving dep: " + module.getName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P7_Replace_Invocation]^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getByName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P13_Insert_Block]^if  ( inProgress.contains ( input )  )  {     throw new IllegalArgumentException (  ( "Circular dependency involving input: " +  ( input.getName (  )  )  )  ) ; }^274^^^^^269^286^[Delete]^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P13_Insert_Block]^if  ( inProgress.contains ( module )  )  {     throw new IllegalArgumentException (  ( "Circular dependency involving module: " +  ( module.getName (  )  )  )  ) ; }^274^^^^^269^286^[Delete]^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Circular dependency involving module: "  &&  module.getName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Cir" + module.getName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ;throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^"Circular dependency involving dep: " + module.getName (  )  ) ;^275^^^^^269^286^"Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P7_Replace_Invocation]^"Circular dependency involving module: " + module.getByName (  )  ) ;^275^^^^^269^286^"Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P14_Delete_Statement]^^275^^^^^269^286^"Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^"Circular dependency involving input: " + input.getName (  )  ) ;"Circular dependency involving module: " + module.getName (  )  ) ;^275^^^^^269^286^"Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Circular dependency involving module: "  &  module.getName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Circular dependency involving module: ving m" + module.getName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Circular dependency involving module: "  !=  module.getName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Circular dependency involving module:  de" + module.getName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Circular dependency involving input: " + input.getName (  )  ) ; ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P8_Replace_Mix]^"Circular dependency involving dep: " + module.getByName (  )  ) ;^275^^^^^269^286^"Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^inProgress.add ( dep ) ;^277^^^^^269^286^inProgress.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P14_Delete_Statement]^^277^^^^^269^286^inProgress.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^deps.add ( dep ) ;inProgress.add ( module ) ;^277^^^^^269^286^inProgress.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^inputs.add ( input ) ;inProgress.add ( module ) ;^277^^^^^269^286^inProgress.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^list.add ( module ) ;inProgress.add ( module ) ;^277^^^^^269^286^inProgress.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^inProgress.add ( input ) ;inProgress.add ( module ) ;^277^^^^^269^286^inProgress.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^workList.add ( dep ) ;inProgress.add ( module ) ;^277^^^^^269^286^inProgress.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^set.add ( module ) ;inProgress.add ( module ) ;^277^^^^^269^286^inProgress.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P12_Insert_Condition]^if  ( inProgress.contains ( module )  )  { inProgress.add ( module ) ; }^277^^^^^269^286^inProgress.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^for  ( JSModule dep : dep.getDependencies (  )  )  {^279^^^^^269^286^for  ( JSModule dep : module.getDependencies (  )  )  {^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P7_Replace_Invocation]^for  ( JSModule dep : module.getByName (  )  )  {^279^^^^^269^286^for  ( JSModule dep : module.getDependencies (  )  )  {^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P14_Delete_Statement]^^279^280^281^^^269^286^for  ( JSModule dep : module.getDependencies (  )  )  { addModuleAndDeps ( dep, list, set, inProgress ) ; }^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps ( module, list, set, inProgress ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps ( dep, list, 4, inProgress ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps (  list, set, inProgress ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps ( dep,  set, inProgress ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps ( dep, list,  inProgress ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps ( dep, list, set ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps ( list, dep, set, inProgress ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps ( dep, list, inProgress, set ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P14_Delete_Statement]^^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^addModuleAndDeps ( module, list, set, Sets.<JSModule>newHashSet (  )  ) ;addModuleAndDeps ( dep, list, set, inProgress ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^list.add ( dep ) ;^283^^^^^269^286^list.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P14_Delete_Statement]^^283^^^^^269^286^list.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^deps.add ( dep ) ;list.add ( module ) ;^283^^^^^269^286^list.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^set.add ( input ) ;list.add ( module ) ;^283^^^^^269^286^list.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^inputs.add ( input ) ;list.add ( module ) ;^283^^^^^269^286^list.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^inProgress.add ( module ) ;list.add ( module ) ;^283^^^^^269^286^list.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^workList.add ( dep ) ;list.add ( module ) ;^283^^^^^269^286^list.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^set.add ( module ) ;list.add ( module ) ;^283^^^^^269^286^list.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^deps.add ( this ) ;list.add ( module ) ;^283^^^^^269^286^list.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^list.add ( input ) ;list.add ( module ) ;^283^^^^^269^286^list.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^set.add ( dep ) ;^284^^^^^269^286^set.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P14_Delete_Statement]^^284^^^^^269^286^set.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^deps.add ( dep ) ;set.add ( module ) ;^284^^^^^269^286^set.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^set.add ( input ) ;set.add ( module ) ;^284^^^^^269^286^set.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^inputs.add ( input ) ;set.add ( module ) ;^284^^^^^269^286^set.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^list.add ( module ) ;set.add ( module ) ;^284^^^^^269^286^set.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^inProgress.add ( module ) ;set.add ( module ) ;^284^^^^^269^286^set.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^deps.add ( this ) ;set.add ( module ) ;^284^^^^^269^286^set.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P11_Insert_Donor_Statement]^list.add ( input ) ;set.add ( module ) ;^284^^^^^269^286^set.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Circular dependency involving module: "  <<  module.getName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "pendency involvi" + module.getName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Circular dependency involving dep: " + module.getByName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Circular dependency involving module: odu" + module.getName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "" + module.getName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Circular dependency involving dep: " + module .getProvides ( 4 )   ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Circular dependency involving module: "  ^  module.getName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Circular dependency involving module: endency involving mo" + module.getName (  )  ) ;^274^275^^^^269^286^throw new IllegalArgumentException ( "Circular dependency involving module: " + module.getName (  )  ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^if  ( !set.contains ( dep )  )  {^272^^^^^269^286^if  ( !set.contains ( module )  )  {^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P7_Replace_Invocation]^inProgress .add ( 2 )  ;^277^^^^^269^286^inProgress.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P7_Replace_Invocation]^for  ( JSModule dep : module .getAllDependencies (  )   )  {^279^^^^^269^286^for  ( JSModule dep : module.getDependencies (  )  )  {^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps ( dep, list, set, 1 ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps ( inProgress, list, set, dep ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P5_Replace_Variable]^addModuleAndDeps ( dep, inProgress, set, list ) ;^280^^^^^269^286^addModuleAndDeps ( dep, list, set, inProgress ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
[P14_Delete_Statement]^^283^284^^^^269^286^list.add ( module ) ; set.add ( module ) ;^[CLASS] JSModule  [METHOD] addModuleAndDeps [RETURN_TYPE] void   JSModule module JSModule> list JSModule> set JSModule> inProgress [VARIABLES] JSModule  dep  module  List  deps  inputs  list  workList  String  name  provide  require  Set  inProgress  set  boolean  
