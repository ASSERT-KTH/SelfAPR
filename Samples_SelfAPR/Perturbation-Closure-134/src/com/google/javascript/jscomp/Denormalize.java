[P8_Replace_Mix]^this.compiler =  null;^43^^^^^42^44^this.compiler = compiler;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  
[P8_Replace_Mix]^this.compiler =  null;^120^^^^^119^121^this.compiler = compiler;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, this ) ;^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, this ) ;^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, this ) ;^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P14_Delete_Statement]^^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, js, this ) ;NodeTraversal.traverse ( compiler, root, this ) ;^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, externs, this ) ;NodeTraversal.traverse ( compiler, root, this ) ;^48^^^^^47^49^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Node  externs  root  boolean  
[P3_Replace_Literal]^return false;^53^^^^^52^54^return true;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] shouldTraverse [RETURN_TYPE] boolean   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeCollapseIntoForStatements (  parent ) ;^58^^^^^57^59^maybeCollapseIntoForStatements ( n, parent ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeCollapseIntoForStatements ( n ) ;^58^^^^^57^59^maybeCollapseIntoForStatements ( n, parent ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  
[P5_Replace_Variable]^maybeCollapseIntoForStatements ( parent, n ) ;^58^^^^^57^59^maybeCollapseIntoForStatements ( n, parent ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  
[P14_Delete_Statement]^^58^^^^^57^59^maybeCollapseIntoForStatements ( n, parent ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  n  parent  
[P2_Replace_Operator]^if  ( parent == null && !NodeUtil.isStatementBlock ( parent )  )  {^68^^^^^53^83^if  ( parent == null || !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P2_Replace_Operator]^if  ( parent != null || !NodeUtil.isStatementBlock ( parent )  )  {^68^^^^^53^83^if  ( parent == null || !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^if  ( nextSibling == null || !NodeUtil.isStatementBlock ( parent )  )  {^68^^^^^53^83^if  ( parent == null || !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P6_Replace_Expression]^if  ( parent == null ) {^68^^^^^53^83^if  ( parent == null || !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P6_Replace_Expression]^if  (  !NodeUtil.isStatementBlock ( parent )  )  {^68^^^^^53^83^if  ( parent == null || !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^if  ( parent == null || !NodeUtil.isExpressionNode ( parent )  )  {^68^^^^^53^83^if  ( parent == null || !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^if  ( parent == null || !NodeUtil .isExpressionNode ( oldInitializer )   )  {^68^^^^^53^83^if  ( parent == null || !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^if  ( parent == false || !NodeUtil.isStatementBlock ( parent )  )  {^68^^^^^53^83^if  ( parent == null || !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P15_Unwrap_Block]^return ;^68^69^70^^^53^83^if  ( parent == null || !NodeUtil.isStatementBlock ( parent )  )  { return; }^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P16_Remove_Block]^^68^69^70^^^53^83^if  ( parent == null || !NodeUtil.isStatementBlock ( parent )  )  { return; }^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P13_Insert_Block]^if  ( containsType ( n, Token.IN )  )  {     return ; }^68^^^^^53^83^[Delete]^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^if  ( oldInitializer == null || !NodeUtil.isStatementBlock ( parent )  )  {^68^^^^^53^83^if  ( parent == null || !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^if  ( oldInitializer == null || !NodeUtil .isExpressionNode ( newInitializer )   )  {^68^^^^^53^83^if  ( parent == null || !NodeUtil.isStatementBlock ( parent )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P13_Insert_Block]^if  (  ( parent == null )  ||  ( ! ( isStatementBlock ( parent )  )  )  )  {     return ; }^68^^^^^53^83^[Delete]^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P2_Replace_Operator]^if  ( !NodeUtil.isExpressionNode ( n )  || !NodeUtil.isVar ( n )  )  {^73^^^^^58^88^if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isVar ( n )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P6_Replace_Expression]^if  ( !NodeUtil.isExpressionNode ( n )  ) {^73^^^^^58^88^if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isVar ( n )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P6_Replace_Expression]^if  (  !NodeUtil.isVar ( n )  )  {^73^^^^^58^88^if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isVar ( n )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^if  ( !NodeUtil.isForIn ( n )  && !NodeUtil.isVar ( n )  )  {^73^^^^^58^88^if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isVar ( n )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^if  ( !NodeUtil .isForIn ( oldInitializer )   && !NodeUtil.isVar ( n )  )  {^73^^^^^58^88^if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isVar ( n )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isForIn ( n )  )  {^73^^^^^58^88^if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isVar ( n )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^if  ( !NodeUtil.isExpressionNode ( parent )  && !NodeUtil.isForIn ( n )  )  {^73^^^^^58^88^if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isVar ( n )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P15_Unwrap_Block]^return ;^73^74^75^^^58^88^if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isVar ( n )  )  { return; }^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P16_Remove_Block]^^73^74^75^^^58^88^if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isVar ( n )  )  { return; }^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P13_Insert_Block]^if  ( containsType ( n, Token.IN )  )  {     return ; }^73^^^^^58^88^[Delete]^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^if  ( !NodeUtil.isExpressionNode ( parent )  && !NodeUtil.isVar ( n )  )  {^73^^^^^58^88^if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isVar ( n )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^if  ( !NodeUtil .isForIn ( forNode )   && !NodeUtil.isVar ( n )  )  {^73^^^^^58^88^if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isVar ( n )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil .isForIn ( forNode )   )  {^73^^^^^58^88^if  ( !NodeUtil.isExpressionNode ( n )  && !NodeUtil.isVar ( n )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^Node parentextSibling = n.getNext (  ) ;^78^^^^^63^93^Node nextSibling = n.getNext (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^Node nextSibling = n.removeChild (  ) ;^78^^^^^63^93^Node nextSibling = n.getNext (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^Node oldInitializerextSibling = n.getNext (  ) ;^78^^^^^63^93^Node nextSibling = n.getNext (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^Node nextSibling = n .getType (  )  ;^78^^^^^63^93^Node nextSibling = n.getNext (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P14_Delete_Statement]^^78^^^^^63^93^Node nextSibling = n.getNext (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P2_Replace_Operator]^if  ( nextSibling != null || nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^79^80^81^82^^64^94^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P2_Replace_Operator]^if  ( nextSibling == null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^79^80^81^82^^64^94^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P2_Replace_Operator]^if  ( nextSibling != null && nextSibling.getType (  )  != Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^79^80^81^82^^64^94^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^if  ( parentextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^79^80^81^82^^64^94^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P6_Replace_Expression]^if  ( nextSibling != null ) {^79^80^81^82^^64^94^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P6_Replace_Expression]^if  (  nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^79^80^81^82^^64^94^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P6_Replace_Expression]^if  ( ((nextSibling != null) && (nextSibling.getType() == FOR) && isForIn(nextSibling))) )  {^79^80^81^82^^64^94^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P6_Replace_Expression]^if  ( (nextSibling != null && nextSibling.getType() == FOR) )  {^79^80^81^82^^64^94^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P6_Replace_Expression]^if  ( nextSibling.getType (  )  == FOR )  {^79^80^81^82^^64^94^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P6_Replace_Expression]^if  ( nextSibling.getFirstChild (  ) .getType (  )  == EMPTY )  {^79^80^81^82^^64^94^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^if  ( nextSibling != null && nextSibling.removeChild (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^79^80^81^82^^64^94^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^if  ( nextSibling != null && nextSibling .getNext (  )   == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  )^79^80^81^82^^64^94^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isVar ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^79^80^81^82^^64^94^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.removeChild (  ) .getType (  )  == Token.EMPTY )  {^79^80^81^82^^64^94^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^if  ( parent != true ) {^79^80^81^82^^64^94^if  ( nextSibling != null && nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^if  ( NodeUtil.containsType ( parent, Token.IN )  )  {^89^^^^^74^104^if  ( NodeUtil.containsType ( n, Token.IN )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^if  ( NodeUtil.isVar ( n, Token.IN )  )  {^89^^^^^74^104^if  ( NodeUtil.containsType ( n, Token.IN )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^if  ( NodeUtil.isVar ( parent, Token.IN )  )  {^89^^^^^74^104^if  ( NodeUtil.containsType ( n, Token.IN )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P15_Unwrap_Block]^return ;^89^90^91^^^74^104^if  ( NodeUtil.containsType ( n, Token.IN )  )  { return; }^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P16_Remove_Block]^^89^90^91^^^74^104^if  ( NodeUtil.containsType ( n, Token.IN )  )  { return; }^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P13_Insert_Block]^if  (  ( parent == null )  ||  ( ! ( isStatementBlock ( parent )  )  )  )  {     return ; }^89^^^^^74^104^[Delete]^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P13_Insert_Block]^if  (  ( ! ( isExpressionNode ( n )  )  )  &&  ( ! ( isVar ( n )  )  )  )  {     return ; }^89^^^^^74^104^[Delete]^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^if  ( NodeUtil.isVar ( parent )  )  {^99^^^^^84^114^if  ( NodeUtil.isVar ( n )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^if  ( NodeUtil.isForIn ( n )  )  {^99^^^^^84^114^if  ( NodeUtil.isVar ( n )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^if  ( NodeUtil.isForIn ( parent )  )  {^99^^^^^84^114^if  ( NodeUtil.isVar ( n )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^newInitializer = parent.getFirstChild (  ) ;^104^^^^^99^106^newInitializer = n.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^newInitializer = n.removeChild (  ) ;^104^^^^^99^106^newInitializer = n.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^103^^^^^99^106^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^Preconditions.checkState ( n.removeChild (  )  ) ;^103^^^^^99^106^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^Preconditions.checkState ( n .removeChild ( nextSibling )   ) ;^103^^^^^99^106^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P14_Delete_Statement]^^103^104^^^^99^106^Preconditions.checkState ( n.hasOneChild (  )  ) ; newInitializer = n.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^Preconditions.checkState ( oldInitializer.hasOneChild (  )  ) ;^103^^^^^99^106^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P14_Delete_Statement]^^103^^^^^99^106^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P14_Delete_Statement]^^104^^^^^99^106^newInitializer = n.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P11_Insert_Donor_Statement]^Node oldInitializer = forNode.getFirstChild (  ) ;newInitializer = n.getFirstChild (  ) ;^104^^^^^99^106^newInitializer = n.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^n.removeChild ( parentewInitializer ) ;^105^^^^^99^106^n.removeChild ( newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^n.removeChild ( parent ) ;^105^^^^^99^106^n.removeChild ( newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^n.removeChild ( newInitializerewInitializer ) ;^105^^^^^99^106^n.removeChild ( newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^n.removeChild ( n ) ;^105^^^^^99^106^n.removeChild ( newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^n.replaceChild ( newInitializer ) ;^105^^^^^99^106^n.removeChild ( newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^n.replaceChild ( parent ) ;^105^^^^^99^106^n.removeChild ( newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P14_Delete_Statement]^^105^^^^^99^106^n.removeChild ( newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^newInitializer = oldInitializer;^100^^^^^85^115^newInitializer = n;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^newInitializer =  parent;^100^^^^^85^115^newInitializer = n;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^newInitializer = parent.getFirstChild (  ) ;^104^^^^^89^119^newInitializer = n.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^newInitializer = n.removeChild (  ) ;^104^^^^^89^119^newInitializer = n.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^Node forNode = parent;^94^^^^^79^109^Node forNode = nextSibling;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^Node oldInitializer = forNode.removeChild (  ) ;^95^^^^^80^110^Node oldInitializer = forNode.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^Node oldInitializer = forNode .removeChild ( oldInitializer )  ;^95^^^^^80^110^Node oldInitializer = forNode.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^if  ( NodeUtil .isStatementBlock ( newInitializer )   )  {^89^^^^^74^104^if  ( NodeUtil.containsType ( n, Token.IN )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P13_Insert_Block]^if  ( containsType ( n, Token.IN )  )  {     return ; }^89^^^^^74^104^[Delete]^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^Node oldInitializer = parent.getFirstChild (  ) ;^95^^^^^80^110^Node oldInitializer = forNode.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P11_Insert_Donor_Statement]^newInitializer = n.getFirstChild (  ) ;Node oldInitializer = forNode.getFirstChild (  ) ;^95^^^^^80^110^Node oldInitializer = forNode.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^parent.replaceChild ( n ) ;^96^^^^^81^111^parent.removeChild ( n ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^parent .replaceChild ( newInitializer , parent )  ;^96^^^^^81^111^parent.removeChild ( n ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^parent.removeChild ( oldInitializer ) ;^96^^^^^81^111^parent.removeChild ( n ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P14_Delete_Statement]^^96^^^^^81^111^parent.removeChild ( n ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^if  ( NodeUtil.isVar ( oldInitializer )  )  {^99^^^^^84^114^if  ( NodeUtil.isVar ( n )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P13_Insert_Block]^if  ( containsType ( n, Token.IN )  )  {     return ; }^99^^^^^84^114^[Delete]^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^Preconditions.checkState ( parent.hasOneChild (  )  ) ;^103^^^^^88^118^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^Preconditions.checkState ( n.removeChild (  )  ) ;^103^^^^^88^118^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^Preconditions.checkState ( n .removeChild ( nextSibling )   ) ;^103^^^^^88^118^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P14_Delete_Statement]^^103^104^^^^88^118^Preconditions.checkState ( n.hasOneChild (  )  ) ; newInitializer = n.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^Preconditions.checkState ( n .removeChild ( forNode )   ) ;^103^^^^^88^118^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^newInitializer = n .removeChild ( n )  ;^104^^^^^89^119^newInitializer = n.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^newInitializer = parent.removeChild (  ) ;^104^^^^^89^119^newInitializer = n.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P14_Delete_Statement]^^104^105^^^^89^119^newInitializer = n.getFirstChild (  ) ; n.removeChild ( newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P11_Insert_Donor_Statement]^Node oldInitializer = forNode.getFirstChild (  ) ;newInitializer = n.getFirstChild (  ) ;^104^^^^^89^119^newInitializer = n.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^n.removeChild ( parent ) ;^105^^^^^90^120^n.removeChild ( newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^n.removeChild ( newInitializerewInitializer ) ;^105^^^^^90^120^n.removeChild ( newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^n.removeChild ( n ) ;^105^^^^^90^120^n.removeChild ( newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^n.replaceChild ( newInitializer ) ;^105^^^^^90^120^n.removeChild ( newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P14_Delete_Statement]^^105^^^^^90^120^n.removeChild ( newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^forNode.replaceChild ( parent, newInitializer ) ;^108^^^^^93^123^forNode.replaceChild ( oldInitializer, newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^forNode.replaceChild ( oldInitializer, parent ) ;^108^^^^^93^123^forNode.replaceChild ( oldInitializer, newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^forNode.replaceChild (  newInitializer ) ;^108^^^^^93^123^forNode.replaceChild ( oldInitializer, newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^forNode.replaceChild ( oldInitializer ) ;^108^^^^^93^123^forNode.replaceChild ( oldInitializer, newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^forNode.replaceChild ( newInitializer, oldInitializer ) ;^108^^^^^93^123^forNode.replaceChild ( oldInitializer, newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P14_Delete_Statement]^^108^109^110^111^^93^123^forNode.replaceChild ( oldInitializer, newInitializer ) ;  compiler.reportCodeChange (  ) ; }^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P11_Insert_Donor_Statement]^n.removeChild ( newInitializer ) ;forNode.replaceChild ( oldInitializer, newInitializer ) ;^108^^^^^93^123^forNode.replaceChild ( oldInitializer, newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P14_Delete_Statement]^^110^^^^^95^125^compiler.reportCodeChange (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^if  ( NodeUtil .isStatementBlock ( forNode )   )  {^89^^^^^74^104^if  ( NodeUtil.containsType ( n, Token.IN )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^if  ( NodeUtil.containsType ( oldInitializer, Token.IN )  )  {^89^^^^^74^104^if  ( NodeUtil.containsType ( n, Token.IN )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^Preconditions.checkState ( parent .removeChild ( forNode )   ) ;^103^^^^^99^106^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^newInitializer = oldInitializer.getFirstChild (  ) ;^104^^^^^99^106^newInitializer = n.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^newInitializer = n .removeChild ( newInitializer )  ;^104^^^^^99^106^newInitializer = n.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P14_Delete_Statement]^^104^105^^^^99^106^newInitializer = n.getFirstChild (  ) ; n.removeChild ( newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^n .replaceChild ( forNode , nextSibling )  ;^105^^^^^99^106^n.removeChild ( newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^newInitializer =  null;^100^^^^^85^115^newInitializer = n;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^newInitializer = oldInitializer.getFirstChild (  ) ;^104^^^^^89^119^newInitializer = n.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^&& oldInitializer.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^80^81^82^^^65^95^&& nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^&& nextSibling.removeChild (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^80^81^82^^^65^95^&& nextSibling.getType (  )  == Token.FOR && !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^&& !NodeUtil.isForIn ( parent ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^81^82^^^^66^96^&& !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^&& !NodeUtil.isVar ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^81^82^^^^66^96^&& !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^&& !NodeUtil .isVar ( forNode )  && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^81^82^^^^66^96^&& !NodeUtil.isForIn ( nextSibling ) && nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^&& parent.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^82^^^^^67^97^&& nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^&& nextSibling.removeChild (  ) .getType (  )  == Token.EMPTY )  {^82^^^^^67^97^&& nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^&& oldInitializer.removeChild (  ) .getType (  )  == Token.EMPTY )  {^82^^^^^67^97^&& nextSibling.getFirstChild (  ) .getType (  )  == Token.EMPTY )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^Node oldInitializer = parent.removeChild (  ) ;^95^^^^^80^110^Node oldInitializer = forNode.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^parent .replaceChild ( newInitializer , forNode )  ;^96^^^^^81^111^parent.removeChild ( n ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^if  ( NodeUtil .isForIn ( oldInitializer )   )  {^99^^^^^84^114^if  ( NodeUtil.isVar ( n )  )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^Preconditions.checkState ( parent.removeChild (  )  ) ;^103^^^^^88^118^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P14_Delete_Statement]^^103^^^^^88^118^Preconditions.checkState ( n.hasOneChild (  )  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P7_Replace_Invocation]^newInitializer = n .removeChild ( newInitializer )  ;^104^^^^^89^119^newInitializer = n.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P8_Replace_Mix]^newInitializer = parent .removeChild ( oldInitializer )  ;^104^^^^^89^119^newInitializer = n.getFirstChild (  ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^n.removeChild ( parentewInitializer ) ;^105^^^^^90^120^n.removeChild ( newInitializer ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] maybeCollapseIntoForStatements [RETURN_TYPE] void   Node n Node parent [VARIABLES] AbstractCompiler  compiler  Node  forNode  n  newInitializer  nextSibling  oldInitializer  parent  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, js, this ) ;^125^^^^^124^127^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^125^^^^^124^127^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse (  externs, this ) ;^125^^^^^124^127^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( externs, compiler, this ) ;^125^^^^^124^127^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P7_Replace_Invocation]^NodeTraversal .traverse ( compiler , externs , null )  ;^125^^^^^124^127^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P14_Delete_Statement]^^125^^^^^124^127^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, root, this ) ;NodeTraversal.traverse ( compiler, externs, this ) ;^125^^^^^124^127^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, js, this ) ;NodeTraversal.traverse ( compiler, externs, this ) ;^125^^^^^124^127^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, this ) ;^126^^^^^124^127^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^126^^^^^124^127^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse (  js, this ) ;^126^^^^^124^127^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( js, compiler, this ) ;^126^^^^^124^127^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P14_Delete_Statement]^^126^^^^^124^127^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, root, this ) ;NodeTraversal.traverse ( compiler, js, this ) ;^126^^^^^124^127^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, externs, this ) ;NodeTraversal.traverse ( compiler, js, this ) ;^126^^^^^124^127^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P2_Replace_Operator]^if  ( node.getType (  )  == Token.NAME && node.getType (  )  == Token.STRING )  {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P2_Replace_Operator]^if  ( node.getType (  )  >= Token.NAME || node.getType (  )  == Token.STRING )  {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P2_Replace_Operator]^if  ( node.getType (  )  != Token.NAME || node.getType (  )  == Token.STRING )  {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P5_Replace_Variable]^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.this )  {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P6_Replace_Expression]^if  ( node.getType (  )  == Token.NAME ) {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P6_Replace_Expression]^if  (  node.getType (  )  == Token.STRING )  {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P6_Replace_Expression]^if  ( node.getType (  )  == NAME )  {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P6_Replace_Expression]^if  ( node.getType (  )  == STRING )  {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P7_Replace_Invocation]^if  ( node.removeChild (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P7_Replace_Invocation]^if  ( node .getNext (  )   == Token.NAME || node^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P15_Unwrap_Block]^node.removeProp(Node.IS_CONSTANT_NAME);^131^132^133^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  { node.removeProp ( Node.IS_CONSTANT_NAME ) ; }^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P16_Remove_Block]^^131^132^133^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  { node.removeProp ( Node.IS_CONSTANT_NAME ) ; }^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P7_Replace_Invocation]^node.removeChild ( Node.IS_CONSTANT_NAME ) ;^132^^^^^130^134^node.removeProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P14_Delete_Statement]^^132^^^^^130^134^node.removeProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] Denormalize StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P8_Replace_Mix]^this.compiler =  null;^120^^^^^119^121^this.compiler = compiler;^[CLASS] StripConstantAnnotations  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, js, this ) ;^125^^^^^124^127^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^125^^^^^124^127^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse (  externs, this ) ;^125^^^^^124^127^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( externs, compiler, this ) ;^125^^^^^124^127^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P14_Delete_Statement]^^125^126^^^^124^127^NodeTraversal.traverse ( compiler, externs, this ) ; NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, js, this ) ;NodeTraversal.traverse ( compiler, externs, this ) ;^125^^^^^124^127^NodeTraversal.traverse ( compiler, externs, this ) ;^[CLASS] StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, this ) ;^126^^^^^124^127^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^126^^^^^124^127^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse (  js, this ) ;^126^^^^^124^127^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P5_Replace_Variable]^NodeTraversal.traverse ( js, compiler, this ) ;^126^^^^^124^127^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P14_Delete_Statement]^^126^^^^^124^127^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P11_Insert_Donor_Statement]^NodeTraversal.traverse ( compiler, externs, this ) ;NodeTraversal.traverse ( compiler, js, this ) ;^126^^^^^124^127^NodeTraversal.traverse ( compiler, js, this ) ;^[CLASS] StripConstantAnnotations  [METHOD] process [RETURN_TYPE] void   Node externs Node js [VARIABLES] AbstractCompiler  compiler  Node  externs  js  boolean  
[P2_Replace_Operator]^if  ( node.getType (  )  == Token.NAME && node.getType (  )  == Token.STRING )  {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P2_Replace_Operator]^if  ( node.getType (  )  != Token.NAME || node.getType (  )  == Token.STRING )  {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P6_Replace_Expression]^if  ( node.getType (  )  == Token.NAME ) {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P6_Replace_Expression]^if  (  node.getType (  )  == Token.STRING )  {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P6_Replace_Expression]^if  ( node.getType (  )  == NAME )  {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P6_Replace_Expression]^if  ( node.getType (  )  == STRING )  {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P7_Replace_Invocation]^if  ( node .removeProp (  )   == Token.NAME || node^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P8_Replace_Mix]^if  ( parent.getType (  )  == Token.NAME ) {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P15_Unwrap_Block]^node.removeProp(Node.IS_CONSTANT_NAME);^131^132^133^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  { node.removeProp ( Node.IS_CONSTANT_NAME ) ; }^[CLASS] StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P16_Remove_Block]^^131^132^133^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  { node.removeProp ( Node.IS_CONSTANT_NAME ) ; }^[CLASS] StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P7_Replace_Invocation]^node .getType (  )  ;^132^^^^^130^134^node.removeProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P14_Delete_Statement]^^132^^^^^130^134^node.removeProp ( Node.IS_CONSTANT_NAME ) ;^[CLASS] StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
[P5_Replace_Variable]^if  ( parent.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^131^^^^^130^134^if  ( node.getType (  )  == Token.NAME || node.getType (  )  == Token.STRING )  {^[CLASS] StripConstantAnnotations  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node node Node parent [VARIABLES] AbstractCompiler  compiler  boolean  NodeTraversal  t  Node  node  parent  
