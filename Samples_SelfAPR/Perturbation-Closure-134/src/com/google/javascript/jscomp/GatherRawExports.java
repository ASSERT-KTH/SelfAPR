[P8_Replace_Mix]^private  AbstractCompiler compiler;^36^^^^^31^41^private final AbstractCompiler compiler;^[CLASS] GatherRawExports   [VARIABLES] 
[P1_Replace_Type]^private static final char GLOBAL_THIS_NAME = "window";^38^^^^^33^43^private static final String GLOBAL_THIS_NAME = "window";^[CLASS] GatherRawExports   [VARIABLES] 
[P3_Replace_Literal]^private static final String GLOBAL_THIS_NAME = "w";^38^^^^^33^43^private static final String GLOBAL_THIS_NAME = "window";^[CLASS] GatherRawExports   [VARIABLES] 
[P8_Replace_Mix]^private static  char GLOBAL_THIS_NAME = "window";^38^^^^^33^43^private static final String GLOBAL_THIS_NAME = "window";^[CLASS] GatherRawExports   [VARIABLES] 
[P8_Replace_Mix]^private  Set<String> exportedVariables = Sets.newHashSet (  ) ;^40^^^^^35^45^private final Set<String> exportedVariables = Sets.newHashSet (  ) ;^[CLASS] GatherRawExports   [VARIABLES] 
[P8_Replace_Mix]^this.compiler =  null;^43^^^^^42^44^this.compiler = compiler;^[CLASS] GatherRawExports  [METHOD] <init> [RETURN_TYPE] AbstractCompiler)   AbstractCompiler compiler [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  
[P14_Delete_Statement]^^48^49^^^^47^50^Preconditions.checkState ( compiler.isNormalized (  )  ) ; NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] GatherRawExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler, externs, this ) ;^49^^^^^47^50^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] GatherRawExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( compiler,  this ) ;^49^^^^^47^50^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] GatherRawExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse (  root, this ) ;^49^^^^^47^50^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] GatherRawExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  Node  externs  root  
[P5_Replace_Variable]^NodeTraversal.traverse ( root, compiler, this ) ;^49^^^^^47^50^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] GatherRawExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  Node  externs  root  
[P7_Replace_Invocation]^NodeTraversal .inGlobalScope (  )  ;^49^^^^^47^50^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] GatherRawExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  Node  externs  root  
[P14_Delete_Statement]^^49^^^^^47^50^NodeTraversal.traverse ( compiler, root, this ) ;^[CLASS] GatherRawExports  [METHOD] process [RETURN_TYPE] void   Node externs Node root [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  Node  externs  root  
[P5_Replace_Variable]^Node sibling = parent.getNext (  ) ;^54^^^^^53^64^Node sibling = n.getNext (  ) ;^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P5_Replace_Variable]^Node sibling = sibling.getNext (  ) ;^54^^^^^53^64^Node sibling = n.getNext (  ) ;^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P7_Replace_Invocation]^Node sibling = n .getType (  )  ;^54^^^^^53^64^Node sibling = n.getNext (  ) ;^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P14_Delete_Statement]^^54^^^^^53^64^Node sibling = n.getNext (  ) ;^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P2_Replace_Operator]^if  ( sibling != null || sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P2_Replace_Operator]^if  ( sibling == null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P2_Replace_Operator]^if  ( sibling != null && sibling.getType (  )  != Token.STRING && NodeUtil.isGet ( parent )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P5_Replace_Variable]^if  ( parent != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P5_Replace_Variable]^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( sibling )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P5_Replace_Variable]^if  ( sibling != parentull && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P5_Replace_Variable]^if  ( parent != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( sibling )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P6_Replace_Expression]^if  ( sibling != null ) {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P6_Replace_Expression]^if  (  sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P6_Replace_Expression]^if  ( (sibling != null && sibling.getType() == STRING) )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P6_Replace_Expression]^if  ( sibling.getType (  )  == STRING )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P7_Replace_Invocation]^if  ( sibling != null && sibling .getString (  )   == Token.STRING && NodeUtil.isGet ( parent )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P7_Replace_Invocation]^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isLabelName ( parent )  )  {^55^56^57^^^53^64^if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P5_Replace_Variable]^if  ( isGlobalThisObject ( t, sibling )  )  {^60^^^^^53^64^if  ( isGlobalThisObject ( t, n )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P5_Replace_Variable]^if  ( isGlobalThisObject (  n )  )  {^60^^^^^53^64^if  ( isGlobalThisObject ( t, n )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P5_Replace_Variable]^if  ( isGlobalThisObject ( t )  )  {^60^^^^^53^64^if  ( isGlobalThisObject ( t, n )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P5_Replace_Variable]^if  ( isGlobalThisObject ( n, t )  )  {^60^^^^^53^64^if  ( isGlobalThisObject ( t, n )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P15_Unwrap_Block]^exportedVariables.add(sibling.getString());^60^61^62^^^53^64^if  ( isGlobalThisObject ( t, n )  )  { exportedVariables.add ( sibling.getString (  )  ) ; }^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P16_Remove_Block]^^60^61^62^^^53^64^if  ( isGlobalThisObject ( t, n )  )  { exportedVariables.add ( sibling.getString (  )  ) ; }^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P5_Replace_Variable]^exportedVariables.add ( parent.getString (  )  ) ;^61^^^^^53^64^exportedVariables.add ( sibling.getString (  )  ) ;^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P14_Delete_Statement]^^61^^^^^53^64^exportedVariables.add ( sibling.getString (  )  ) ;^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P13_Insert_Block]^if  ( isGlobalThisObject ( t, n )  )  {     exportedVariables.add ( sibling.getString (  )  ) ; }^61^^^^^53^64^[Delete]^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P7_Replace_Invocation]^exportedVariables.add ( sibling .getType (  )   ) ;^61^^^^^53^64^exportedVariables.add ( sibling.getString (  )  ) ;^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P8_Replace_Mix]^if  ( isGlobalThisObject ( t, parent )  )  {^60^^^^^53^64^if  ( isGlobalThisObject ( t, n )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P5_Replace_Variable]^&& parent.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^56^57^^^^53^64^&& sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P7_Replace_Invocation]^&& sibling .getString (  )   == Token.STRING && NodeUtil.isGet ( parent )  )  {^56^57^^^^53^64^&& sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P5_Replace_Variable]^&& NodeUtil.isGet ( sibling )  )  {^57^^^^^53^64^&& NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P7_Replace_Invocation]^&& NodeUtil.isLabelName ( parent )  )  {^57^^^^^53^64^&& NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P7_Replace_Invocation]^&& NodeUtil .isLabelName ( sibling )   )  {^57^^^^^53^64^&& NodeUtil.isGet ( parent )  )  {^[CLASS] GatherRawExports  [METHOD] visit [RETURN_TYPE] void   NodeTraversal t Node n Node parent [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  boolean  NodeTraversal  t  Node  n  parent  sibling  
[P2_Replace_Operator]^if  ( n.getType (  )  != Token.THIS )  {^67^^^^^66^76^if  ( n.getType (  )  == Token.THIS )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P6_Replace_Expression]^if  ( n.getType() == NAME && isLabelName(n)) )  {^67^^^^^66^76^if  ( n.getType (  )  == Token.THIS )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P6_Replace_Expression]^if  ( n.getType (  )  == NAME )  {^67^^^^^66^76^if  ( n.getType (  )  == Token.THIS )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P7_Replace_Invocation]^if  ( n .getString (  )   == Token.THIS )  {^67^^^^^66^76^if  ( n.getType (  )  == Token.THIS )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P13_Insert_Block]^if  (  (  ( n.getType (  )  )  ==  ( NAME )  )  &&  ( ! ( isLabelName ( n )  )  )  )  {     String varName = n.getString (  ) ;     if  ( varName.equals ( GLOBAL_THIS_NAME )  )  {         return true;     } }^67^^^^^66^76^[Delete]^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P2_Replace_Operator]^} else if  ( n.getType (  )  == Token.NAME || !NodeUtil.isLabelName ( n )  )  {^69^^^^^66^76^} else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P2_Replace_Operator]^} else if  ( n.getType (  )  != Token.NAME && !NodeUtil.isLabelName ( n )  )  {^69^^^^^66^76^} else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == Token.NAME ) {^69^^^^^66^76^} else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P6_Replace_Expression]^} else if  (  !NodeUtil.isLabelName ( n )  )  {^69^^^^^66^76^} else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P6_Replace_Expression]^} else if  ( n.getType (  )  == NAME )  {^69^^^^^66^76^} else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P6_Replace_Expression]^} else {^69^^^^^66^76^} else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P7_Replace_Invocation]^} else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isGet ( n )  )  {^69^^^^^66^76^} else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P8_Replace_Mix]^}  if  ( n.getType (  )  == Token.NAME && !NodeUtil .isGet ( n )   )  {^69^^^^^66^76^} else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P15_Unwrap_Block]^java.lang.String varName = n.getString(); if (varName.equals(com.google.javascript.jscomp.GatherRawExports.GLOBAL_THIS_NAME)) {    return true;};^69^70^71^72^73^66^76^} else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  { String varName = n.getString (  ) ; if  ( varName.equals ( GLOBAL_THIS_NAME )  )  { return true; }^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P16_Remove_Block]^^69^70^71^72^73^66^76^} else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  { String varName = n.getString (  ) ; if  ( varName.equals ( GLOBAL_THIS_NAME )  )  { return true; }^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P13_Insert_Block]^if  (  ( n.getType (  )  )  ==  ( THIS )  )  {     return t.inGlobalScope (  ) ; }else     if  (  (  ( n.getType (  )  )  ==  ( NAME )  )  &&  ( ! ( isLabelName ( n )  )  )  )  {         String varName = n.getString (  ) ;         if  ( varName.equals ( GLOBAL_THIS_NAME )  )  {             return true;         }     }^69^^^^^66^76^[Delete]^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P5_Replace_Variable]^if  ( GLOBAL_THIS_NAME.equals ( varName )  )  {^71^^^^^66^76^if  ( varName.equals ( GLOBAL_THIS_NAME )  )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P15_Unwrap_Block]^return true;^71^72^73^^^66^76^if  ( varName.equals ( GLOBAL_THIS_NAME )  )  { return true; }^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P16_Remove_Block]^^71^72^73^^^66^76^if  ( varName.equals ( GLOBAL_THIS_NAME )  )  { return true; }^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P3_Replace_Literal]^return false;^72^^^^^66^76^return true;^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P1_Replace_Type]^char varName = n.getchar (  ) ;^70^^^^^66^76^String varName = n.getString (  ) ;^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P14_Delete_Statement]^^70^^^^^66^76^String varName = n.getString (  ) ;^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P13_Insert_Block]^if  ( varName.equals ( GLOBAL_THIS_NAME )  )  {     return true; }^71^^^^^66^76^[Delete]^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P8_Replace_Mix]^String varName = n .getType (  )  ;^70^^^^^66^76^String varName = n.getString (  ) ;^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P7_Replace_Invocation]^} else if  ( n .getString (  )   == Token.NAME && !NodeUtil.isLabelName ( n )  )  {^69^^^^^66^76^} else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  {^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P14_Delete_Statement]^^68^^^^^66^76^return t.inGlobalScope (  ) ;^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P3_Replace_Literal]^return true;^75^^^^^66^76^return false;^[CLASS] GatherRawExports  [METHOD] isGlobalThisObject [RETURN_TYPE] boolean   NodeTraversal t Node n [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  NodeTraversal  t  Node  n  
[P8_Replace_Mix]^return null;^79^^^^^78^80^return exportedVariables;^[CLASS] GatherRawExports  [METHOD] getExportedVariableNames [RETURN_TYPE] Set   [VARIABLES] AbstractCompiler  compiler  Set  exportedVariables  String  GLOBAL_THIS_NAME  varName  boolean  
