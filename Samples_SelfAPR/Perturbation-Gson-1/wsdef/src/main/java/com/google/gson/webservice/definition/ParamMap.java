[P8_Replace_Mix]^this.spec =  null;^30^^^^^29^31^this.spec = spec;^[CLASS] ParamMap Builder  [METHOD] <init> [RETURN_TYPE] ParamMap$Builder(T   T spec [VARIABLES] boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P8_Replace_Mix]^this.spec =  null;^56^^^^^55^58^this.spec = spec;^[CLASS] ParamMap Builder  [METHOD] <init> [RETURN_TYPE] Map)   ParamMapSpec spec Object> contents [VARIABLES] boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P8_Replace_Mix]^this.contents =  null;^57^^^^^55^58^this.contents = contents;^[CLASS] ParamMap Builder  [METHOD] <init> [RETURN_TYPE] Map)   ParamMapSpec spec Object> contents [VARIABLES] boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^return put (  content, content.getClass (  )  ) ;^37^^^^^36^38^return put ( paramName, content, content.getClass (  )  ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content [VARIABLES] Object  content  String  paramName  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^return put ( paramName,  content.getClass (  )  ) ;^37^^^^^36^38^return put ( paramName, content, content.getClass (  )  ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content [VARIABLES] Object  content  String  paramName  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^return put ( content, paramName, content.getClass (  )  ) ;^37^^^^^36^38^return put ( paramName, content, content.getClass (  )  ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content [VARIABLES] Object  content  String  paramName  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P14_Delete_Statement]^^37^^^^^36^38^return put ( paramName, content, content.getClass (  )  ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content [VARIABLES] Object  content  String  paramName  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^Preconditions.checkArgument ( spec.checkIfCompatible (  typeOfContent )  ) ;^41^^^^^40^44^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Type  typeOfContent  boolean  T  spec  Object  content  String  paramName  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName )  ) ;^41^^^^^40^44^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Type  typeOfContent  boolean  T  spec  Object  content  String  paramName  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^Preconditions.checkArgument ( paramName.checkIfCompatible ( spec, typeOfContent )  ) ;^41^^^^^40^44^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Type  typeOfContent  boolean  T  spec  Object  content  String  paramName  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^Preconditions.checkArgument ( typeOfContent.checkIfCompatible ( paramName, spec )  ) ;^41^^^^^40^44^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Type  typeOfContent  boolean  T  spec  Object  content  String  paramName  Map  contents  ParamMapSpec  spec  
[P7_Replace_Invocation]^Preconditions .checkArgument (  )  ;^41^^^^^40^44^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Type  typeOfContent  boolean  T  spec  Object  content  String  paramName  Map  contents  ParamMapSpec  spec  
[P14_Delete_Statement]^^41^42^^^^40^44^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ; contents.put ( paramName, content ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Type  typeOfContent  boolean  T  spec  Object  content  String  paramName  Map  contents  ParamMapSpec  spec  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( spec.checkIfCompatible ( key, typeOfValue ) , "Incompatible key %s for type %s", key, typeOfValue ) ;Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^41^^^^^40^44^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Type  typeOfContent  boolean  T  spec  Object  content  String  paramName  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^contents.put (  content ) ;^42^^^^^40^44^contents.put ( paramName, content ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Type  typeOfContent  boolean  T  spec  Object  content  String  paramName  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^contents.put ( paramName ) ;^42^^^^^40^44^contents.put ( paramName, content ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Type  typeOfContent  boolean  T  spec  Object  content  String  paramName  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^contents.put ( content, paramName ) ;^42^^^^^40^44^contents.put ( paramName, content ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Type  typeOfContent  boolean  T  spec  Object  content  String  paramName  Map  contents  ParamMapSpec  spec  
[P14_Delete_Statement]^^42^^^^^40^44^contents.put ( paramName, content ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Type  typeOfContent  boolean  T  spec  Object  content  String  paramName  Map  contents  ParamMapSpec  spec  
[P11_Insert_Donor_Statement]^return contents.get ( paramName ) ;contents.put ( paramName, content ) ;^42^^^^^40^44^contents.put ( paramName, content ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Type  typeOfContent  boolean  T  spec  Object  content  String  paramName  Map  contents  ParamMapSpec  spec  
[P11_Insert_Donor_Statement]^contents.put ( paramKey.getName (  ) , param ) ;contents.put ( paramName, content ) ;^42^^^^^40^44^contents.put ( paramName, content ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Type  typeOfContent  boolean  T  spec  Object  content  String  paramName  Map  contents  ParamMapSpec  spec  
[P8_Replace_Mix]^return null;^43^^^^^40^44^return this;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Type  typeOfContent  boolean  T  spec  Object  content  String  paramName  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^contents.put ( paramKey.getName (  )  ) ;^47^^^^^46^49^contents.put ( paramKey.getName (  ) , param ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] <K>   TypedKey<K> paramKey K param [VARIABLES] K  param  boolean  T  spec  TypedKey  paramKey  Map  contents  ParamMapSpec  spec  
[P7_Replace_Invocation]^contents.put ( paramKey .getClassOfT (  )  , param ) ;^47^^^^^46^49^contents.put ( paramKey.getName (  ) , param ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] <K>   TypedKey<K> paramKey K param [VARIABLES] K  param  boolean  T  spec  TypedKey  paramKey  Map  contents  ParamMapSpec  spec  
[P14_Delete_Statement]^^47^^^^^46^49^contents.put ( paramKey.getName (  ) , param ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] <K>   TypedKey<K> paramKey K param [VARIABLES] K  param  boolean  T  spec  TypedKey  paramKey  Map  contents  ParamMapSpec  spec  
[P11_Insert_Donor_Statement]^contents.put ( paramName, content ) ;contents.put ( paramKey.getName (  ) , param ) ;^47^^^^^46^49^contents.put ( paramKey.getName (  ) , param ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] <K>   TypedKey<K> paramKey K param [VARIABLES] K  param  boolean  T  spec  TypedKey  paramKey  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^contents.put ( 1.getName (  ) , param ) ;^47^^^^^46^49^contents.put ( paramKey.getName (  ) , param ) ;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] <K>   TypedKey<K> paramKey K param [VARIABLES] K  param  boolean  T  spec  TypedKey  paramKey  Map  contents  ParamMapSpec  spec  
[P8_Replace_Mix]^return null;^48^^^^^46^49^return this;^[CLASS] ParamMap Builder  [METHOD] put [RETURN_TYPE] <K>   TypedKey<K> paramKey K param [VARIABLES] K  param  boolean  T  spec  TypedKey  paramKey  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^return paramName.get ( contents ) ;^65^^^^^64^66^return contents.get ( paramName ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] Object   String paramName [VARIABLES] String  paramName  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P14_Delete_Statement]^^65^^^^^64^66^return contents.get ( paramName ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] Object   String paramName [VARIABLES] String  paramName  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^return  ( T )  get ( null.getName (  ) , key.getClassOfT (  )  ) ;^70^^^^^69^71^return  ( T )  get ( key.getName (  ) , key.getClassOfT (  )  ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] <T>   TypedKey<T> key [VARIABLES] boolean  T  spec  TypedKey  key  Map  contents  ParamMapSpec  spec  
[P7_Replace_Invocation]^return  ( T )  get ( key.ParamMapName (  ) , key.getClassOfT (  )  ) ;^70^^^^^69^71^return  ( T )  get ( key.getName (  ) , key.getClassOfT (  )  ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] <T>   TypedKey<T> key [VARIABLES] boolean  T  spec  TypedKey  key  Map  contents  ParamMapSpec  spec  
[P7_Replace_Invocation]^return  ( T )  get ( key .getClassOfT (  )  , key.getClassOfT (  )  ) ;^70^^^^^69^71^return  ( T )  get ( key.getName (  ) , key.getClassOfT (  )  ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] <T>   TypedKey<T> key [VARIABLES] boolean  T  spec  TypedKey  key  Map  contents  ParamMapSpec  spec  
[P7_Replace_Invocation]^return  ( T )  get ( key.getName (  ) , key .getName (  )   ) ;^70^^^^^69^71^return  ( T )  get ( key.getName (  ) , key.getClassOfT (  )  ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] <T>   TypedKey<T> key [VARIABLES] boolean  T  spec  TypedKey  key  Map  contents  ParamMapSpec  spec  
[P14_Delete_Statement]^^70^^^^^69^71^return  ( T )  get ( key.getName (  ) , key.getClassOfT (  )  ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] <T>   TypedKey<T> key [VARIABLES] boolean  T  spec  TypedKey  key  Map  contents  ParamMapSpec  spec  
[P3_Replace_Literal]^Preconditions.checkArgument ( spec.checkIfCompatible ( key, typeOfValue ) , "s ncompatible key %s for type %s", key, typeOfValue ) ;^75^76^^^^74^78^Preconditions.checkArgument ( spec.checkIfCompatible ( key, typeOfValue ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] <T>   String key Type typeOfValue [VARIABLES] Type  typeOfValue  String  key  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^Preconditions.checkArgument ( spec.checkIfCompatible (  typeOfValue ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^75^76^^^^74^78^Preconditions.checkArgument ( spec.checkIfCompatible ( key, typeOfValue ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] <T>   String key Type typeOfValue [VARIABLES] Type  typeOfValue  String  key  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^Preconditions.checkArgument ( spec.checkIfCompatible ( key ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^75^76^^^^74^78^Preconditions.checkArgument ( spec.checkIfCompatible ( key, typeOfValue ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] <T>   String key Type typeOfValue [VARIABLES] Type  typeOfValue  String  key  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^Preconditions.checkArgument ( key.checkIfCompatible ( spec, typeOfValue ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^75^76^^^^74^78^Preconditions.checkArgument ( spec.checkIfCompatible ( key, typeOfValue ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] <T>   String key Type typeOfValue [VARIABLES] Type  typeOfValue  String  key  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^Preconditions.checkArgument ( typeOfValue.checkIfCompatible ( key, spec ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^75^76^^^^74^78^Preconditions.checkArgument ( spec.checkIfCompatible ( key, typeOfValue ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] <T>   String key Type typeOfValue [VARIABLES] Type  typeOfValue  String  key  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P14_Delete_Statement]^^75^76^^^^74^78^Preconditions.checkArgument ( spec.checkIfCompatible ( key, typeOfValue ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] <T>   String key Type typeOfValue [VARIABLES] Type  typeOfValue  String  key  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;Preconditions.checkArgument ( spec.checkIfCompatible ( key, typeOfValue ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^75^76^^^^74^78^Preconditions.checkArgument ( spec.checkIfCompatible ( key, typeOfValue ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] <T>   String key Type typeOfValue [VARIABLES] Type  typeOfValue  String  key  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^Preconditions.checkArgument ( spec.checkIfCompatible ( typeOfValue, key ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^75^76^^^^74^78^Preconditions.checkArgument ( spec.checkIfCompatible ( key, typeOfValue ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] <T>   String key Type typeOfValue [VARIABLES] Type  typeOfValue  String  key  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^return  ( T )  key.get ( contents ) ;^77^^^^^74^78^return  ( T )  contents.get ( key ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] <T>   String key Type typeOfValue [VARIABLES] Type  typeOfValue  String  key  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P7_Replace_Invocation]^return  ( T )  contents .get ( key , typeOfValue )  ;^77^^^^^74^78^return  ( T )  contents.get ( key ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] <T>   String key Type typeOfValue [VARIABLES] Type  typeOfValue  String  key  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P14_Delete_Statement]^^77^^^^^74^78^return  ( T )  contents.get ( key ) ;^[CLASS] ParamMap Builder  [METHOD] get [RETURN_TYPE] <T>   String key Type typeOfValue [VARIABLES] Type  typeOfValue  String  key  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P5_Replace_Variable]^return headerName.getTypeFor ( spec ) ;^81^^^^^80^82^return spec.getTypeFor ( headerName ) ;^[CLASS] ParamMap Builder  [METHOD] getSpec [RETURN_TYPE] Type   String headerName [VARIABLES] String  headerName  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P14_Delete_Statement]^^81^^^^^80^82^return spec.getTypeFor ( headerName ) ;^[CLASS] ParamMap Builder  [METHOD] getSpec [RETURN_TYPE] Type   String headerName [VARIABLES] String  headerName  boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P7_Replace_Invocation]^return contents.size (  ) ;^85^^^^^84^86^return contents.entrySet (  ) ;^[CLASS] ParamMap Builder  [METHOD] entrySet [RETURN_TYPE] Set   [VARIABLES] boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P14_Delete_Statement]^^85^^^^^84^86^return contents.entrySet (  ) ;^[CLASS] ParamMap Builder  [METHOD] entrySet [RETURN_TYPE] Set   [VARIABLES] boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P3_Replace_Literal]^return contents.size() - 6 ;^89^^^^^88^90^return contents.size (  ) ;^[CLASS] ParamMap Builder  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P7_Replace_Invocation]^return contents.entrySet (  ) ;^89^^^^^88^90^return contents.size (  ) ;^[CLASS] ParamMap Builder  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P3_Replace_Literal]^return contents.size() + 9 ;^89^^^^^88^90^return contents.size (  ) ;^[CLASS] ParamMap Builder  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P14_Delete_Statement]^^89^^^^^88^90^return contents.size (  ) ;^[CLASS] ParamMap Builder  [METHOD] size [RETURN_TYPE] int   [VARIABLES] boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P14_Delete_Statement]^^94^^^^^93^95^return Util.toStringMap ( contents ) ;^[CLASS] ParamMap Builder  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P8_Replace_Mix]^private final T spec;^27^^^^^22^32^protected final T spec;^[CLASS] Builder  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] boolean  T  spec  Map  contents  ParamMapSpec  spec  
[P8_Replace_Mix]^this.spec =  null;^30^^^^^29^31^this.spec = spec;^[CLASS] Builder  [METHOD] <init> [RETURN_TYPE] ParamMap$Builder(T   T spec [VARIABLES] T  spec  Map  contents  boolean  
[P5_Replace_Variable]^return put (  content, content.getClass (  )  ) ;^37^^^^^36^38^return put ( paramName, content, content.getClass (  )  ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content [VARIABLES] Object  content  String  paramName  boolean  T  spec  Map  contents  
[P5_Replace_Variable]^return put ( paramName,  content.getClass (  )  ) ;^37^^^^^36^38^return put ( paramName, content, content.getClass (  )  ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content [VARIABLES] Object  content  String  paramName  boolean  T  spec  Map  contents  
[P5_Replace_Variable]^return put ( content, paramName, content.getClass (  )  ) ;^37^^^^^36^38^return put ( paramName, content, content.getClass (  )  ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content [VARIABLES] Object  content  String  paramName  boolean  T  spec  Map  contents  
[P14_Delete_Statement]^^37^^^^^36^38^return put ( paramName, content, content.getClass (  )  ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content [VARIABLES] Object  content  String  paramName  boolean  T  spec  Map  contents  
[P5_Replace_Variable]^Preconditions.checkArgument ( spec.checkIfCompatible (  typeOfContent )  ) ;^41^^^^^40^44^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Object  content  Type  typeOfContent  String  paramName  boolean  T  spec  Map  contents  
[P5_Replace_Variable]^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName )  ) ;^41^^^^^40^44^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Object  content  Type  typeOfContent  String  paramName  boolean  T  spec  Map  contents  
[P5_Replace_Variable]^Preconditions.checkArgument ( paramName.checkIfCompatible ( spec, typeOfContent )  ) ;^41^^^^^40^44^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Object  content  Type  typeOfContent  String  paramName  boolean  T  spec  Map  contents  
[P5_Replace_Variable]^Preconditions.checkArgument ( typeOfContent.checkIfCompatible ( paramName, spec )  ) ;^41^^^^^40^44^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Object  content  Type  typeOfContent  String  paramName  boolean  T  spec  Map  contents  
[P14_Delete_Statement]^^41^42^^^^40^44^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ; contents.put ( paramName, content ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Object  content  Type  typeOfContent  String  paramName  boolean  T  spec  Map  contents  
[P5_Replace_Variable]^Preconditions.checkArgument ( spec.checkIfCompatible ( typeOfContent, paramName )  ) ;^41^^^^^40^44^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Object  content  Type  typeOfContent  String  paramName  boolean  T  spec  Map  contents  
[P14_Delete_Statement]^^41^^^^^40^44^Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Object  content  Type  typeOfContent  String  paramName  boolean  T  spec  Map  contents  
[P5_Replace_Variable]^contents.put (  content ) ;^42^^^^^40^44^contents.put ( paramName, content ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Object  content  Type  typeOfContent  String  paramName  boolean  T  spec  Map  contents  
[P5_Replace_Variable]^contents.put ( paramName ) ;^42^^^^^40^44^contents.put ( paramName, content ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Object  content  Type  typeOfContent  String  paramName  boolean  T  spec  Map  contents  
[P5_Replace_Variable]^contents.put ( content, paramName ) ;^42^^^^^40^44^contents.put ( paramName, content ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Object  content  Type  typeOfContent  String  paramName  boolean  T  spec  Map  contents  
[P7_Replace_Invocation]^contents .put ( paramName , content , typeOfContent )  ;^42^^^^^40^44^contents.put ( paramName, content ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Object  content  Type  typeOfContent  String  paramName  boolean  T  spec  Map  contents  
[P14_Delete_Statement]^^42^^^^^40^44^contents.put ( paramName, content ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Object  content  Type  typeOfContent  String  paramName  boolean  T  spec  Map  contents  
[P11_Insert_Donor_Statement]^contents.put ( paramKey.getName (  ) , param ) ;contents.put ( paramName, content ) ;^42^^^^^40^44^contents.put ( paramName, content ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Object  content  Type  typeOfContent  String  paramName  boolean  T  spec  Map  contents  
[P8_Replace_Mix]^return null;^43^^^^^40^44^return this;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] ParamMap$Builder   String paramName Object content Type typeOfContent [VARIABLES] Object  content  Type  typeOfContent  String  paramName  boolean  T  spec  Map  contents  
[P5_Replace_Variable]^contents.put ( paramKey.getName (  )  ) ;^47^^^^^46^49^contents.put ( paramKey.getName (  ) , param ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] <K>   TypedKey<K> paramKey K param [VARIABLES] K  param  boolean  T  spec  TypedKey  paramKey  Map  contents  
[P14_Delete_Statement]^^47^^^^^46^49^contents.put ( paramKey.getName (  ) , param ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] <K>   TypedKey<K> paramKey K param [VARIABLES] K  param  boolean  T  spec  TypedKey  paramKey  Map  contents  
[P11_Insert_Donor_Statement]^contents.put ( paramName, content ) ;contents.put ( paramKey.getName (  ) , param ) ;^47^^^^^46^49^contents.put ( paramKey.getName (  ) , param ) ;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] <K>   TypedKey<K> paramKey K param [VARIABLES] K  param  boolean  T  spec  TypedKey  paramKey  Map  contents  
[P8_Replace_Mix]^return null;^48^^^^^46^49^return this;^[CLASS] Builder  [METHOD] put [RETURN_TYPE] <K>   TypedKey<K> paramKey K param [VARIABLES] K  param  boolean  T  spec  TypedKey  paramKey  Map  contents  
