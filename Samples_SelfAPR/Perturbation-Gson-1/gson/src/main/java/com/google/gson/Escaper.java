[P8_Replace_Mix]^private  final char[] HEX_CHARS = {^39^^^^^39^41^private static final char[] HEX_CHARS = {^[CLASS] Escaper   [VARIABLES] 
[P8_Replace_Mix]^private static  Set<Character> JS_ESCAPE_CHARS;^43^^^^^38^48^private static final Set<Character> JS_ESCAPE_CHARS;^[CLASS] Escaper   [VARIABLES] 
[P8_Replace_Mix]^private static  Set<Character> HTML_ESCAPE_CHARS;^44^^^^^39^49^private static final Set<Character> HTML_ESCAPE_CHARS;^[CLASS] Escaper   [VARIABLES] 
[P8_Replace_Mix]^private  boolean escapeHtmlCharacters;^62^^^^^57^67^private final boolean escapeHtmlCharacters;^[CLASS] Escaper   [VARIABLES] 
[P8_Replace_Mix]^this.escapeHtmlCharacters =  null;^65^^^^^64^66^this.escapeHtmlCharacters = escapeHtmlCharacters;^[CLASS] Escaper  [METHOD] <init> [RETURN_TYPE] Escaper(boolean)   boolean escapeHtmlCharacters [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  char[]  HEX_CHARS  
[P2_Replace_Operator]^StringBuffer escapedString = new StringBuffer ( plainText.length (  )   >>  20 ) ;^69^^^^^68^76^StringBuffer escapedString = new StringBuffer ( plainText.length (  )  + 20 ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[P3_Replace_Literal]^StringBuffer escapedString = new StringBuffer ( plainText.length (  )   ) ;^69^^^^^68^76^StringBuffer escapedString = new StringBuffer ( plainText.length (  )  + 20 ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[P3_Replace_Literal]^StringBuffer escapedString = new StringBuffer ( plainText.length() - 8  + 20 ) ;^69^^^^^68^76^StringBuffer escapedString = new StringBuffer ( plainText.length (  )  + 20 ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[P2_Replace_Operator]^StringBuffer escapedString = new StringBuffer ( plainText.length (  )   <=  20 ) ;^69^^^^^68^76^StringBuffer escapedString = new StringBuffer ( plainText.length (  )  + 20 ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[P3_Replace_Literal]^StringBuffer escapedString = new StringBuffer ( plainText.length() + 4  + 20 ) ;^69^^^^^68^76^StringBuffer escapedString = new StringBuffer ( plainText.length (  )  + 20 ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[P3_Replace_Literal]^StringBuffer escapedString = new StringBuffer ( plainText.length() + 2  + 20 ) ;^69^^^^^68^76^StringBuffer escapedString = new StringBuffer ( plainText.length (  )  + 20 ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[P14_Delete_Statement]^^69^^^^^68^76^StringBuffer escapedString = new StringBuffer ( plainText.length (  )  + 20 ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[P5_Replace_Variable]^escapeJsonString (  escapedString ) ;^71^^^^^68^76^escapeJsonString ( plainText, escapedString ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[P5_Replace_Variable]^escapeJsonString ( plainText ) ;^71^^^^^68^76^escapeJsonString ( plainText, escapedString ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[P5_Replace_Variable]^escapeJsonString ( escapedString, plainText ) ;^71^^^^^68^76^escapeJsonString ( plainText, escapedString ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[P7_Replace_Invocation]^appendHexJavaScriptRepresentation ( plainText, escapedString ) ;^71^^^^^68^76^escapeJsonString ( plainText, escapedString ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[P14_Delete_Statement]^^71^^^^^68^76^escapeJsonString ( plainText, escapedString ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[P7_Replace_Invocation]^return escapedString.StringBuffer (  ) ;^75^^^^^68^76^return escapedString.toString (  ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[P14_Delete_Statement]^^75^^^^^68^76^return escapedString.toString (  ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] String   CharSequence plainText [VARIABLES] CharSequence  plainText  StringBuffer  escapedString  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  IOException  e  char[]  HEX_CHARS  
[P1_Replace_Type]^short  pos = 0;^79^^^^^64^94^int pos = 0;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P3_Replace_Literal]^int pos = charCount;^79^^^^^64^94^int pos = 0;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P1_Replace_Type]^short  len = plainText.length (  ) ;^80^^^^^65^95^int len = plainText.length (  ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P3_Replace_Literal]^int len = plainText.length() + 2 ;^80^^^^^65^95^int len = plainText.length (  ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P3_Replace_Literal]^int len = plainText.length() - 7 ;^80^^^^^65^95^int len = plainText.length (  ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^80^^^^^65^95^int len = plainText.length (  ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P2_Replace_Operator]^if  ( !isControlCharacter ( codePoint )  || !mustEscapeCharInJsString ( codePoint )  )  {^86^^^^^71^101^if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^if  ( !isControlCharacter ( pos )  && !mustEscapeCharInJsString ( codePoint )  )  {^86^^^^^71^101^if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P6_Replace_Expression]^if  ( !isControlCharacter ( codePoint )  ) {^86^^^^^71^101^if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P6_Replace_Expression]^if  (  !mustEscapeCharInJsString ( codePoint )  )  {^86^^^^^71^101^if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P7_Replace_Invocation]^if  ( !mustEscapeCharInJsString ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  {^86^^^^^71^101^if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P7_Replace_Invocation]^if  ( !isControlCharacter ( codePoint )  && !isControlCharacter ( codePoint )  )  {^86^^^^^71^101^if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P8_Replace_Mix]^if  ( !isControlCharacter ( len )  && !mustEscapeCharInJsString ( codePoint )  )  {^86^^^^^71^101^if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P15_Unwrap_Block]^continue;^86^87^88^^^71^101^if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  { continue; }^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P16_Remove_Block]^^86^87^88^^^71^101^if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  { continue; }^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P1_Replace_Type]^for  (  short  charCount, i = 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P2_Replace_Operator]^for  ( int charCount, i = 0; i == len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P2_Replace_Operator]^for  <=  ( int charCount, i = 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^for  ( posnt charCount, i = 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^for  ( int charCount, i = 0; i < pos; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^for  ( int len, i = 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^for  ( int charCount = 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^for  ( int  i = 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^for  ( int len, i = 0; i < charCount; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^for  ( charCountnt i, i = 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P7_Replace_Invocation]^for  ( int toChars, i = 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P8_Replace_Mix]^if  ( !mustEscapeCharInJsString ( pos )  && !mustEscapeCharInJsString ( codePoint )  )  {^86^^^^^71^101^if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P1_Replace_Type]^charCount = Character.charCount ( codePo short  ) ;^84^^^^^69^99^charCount = Character.charCount ( codePoint ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^charCount = Character.charCount ( pos ) ;^84^^^^^69^99^charCount = Character.charCount ( codePoint ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P7_Replace_Invocation]^charCount = Character.toChars ( codePoint ) ;^84^^^^^69^99^charCount = Character.charCount ( codePoint ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P7_Replace_Invocation]^charCount = Character .codePointAt ( plainText , i )  ;^84^^^^^69^99^charCount = Character.charCount ( codePoint ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^pos = pos + charCount;^91^^^^^76^106^pos = i + charCount;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^pos = i + pos;^91^^^^^76^106^pos = i + charCount;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^pos = charCount + i;^91^^^^^76^106^pos = i + charCount;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P8_Replace_Mix]^pos =  len + charCount;^91^^^^^76^106^pos = i + charCount;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P1_Replace_Type]^short  codePo short  = Character.codePointAt ( plainText, i ) ;^83^^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^int codePoint = Character.codePointAt ( plainText, pos ) ;^83^^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^int codePoint = Character.codePointAt (  i ) ;^83^^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^int codePoint = Character.codePointAt ( plainText ) ;^83^^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^int codePoint = Character.codePointAt ( i, plainText ) ;^83^^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P8_Replace_Mix]^int codePoint = Character.codePointAt ( plainText, len ) ;^83^^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^83^^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^charCount = Character.charCount ( codePoint ) ;int codePoint = Character.codePointAt ( plainText, i ) ;^83^^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^charCount = Character.charCount ( len ) ;^84^^^^^69^99^charCount = Character.charCount ( codePoint ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^84^^^^^69^99^charCount = Character.charCount ( codePoint ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^int codePoint = Character.codePointAt ( plainText, i ) ;charCount = Character.charCount ( codePoint ) ;^84^^^^^69^99^charCount = Character.charCount ( codePoint ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^char[] surrogates = Character.toChars ( codePoint ) ;charCount = Character.charCount ( codePoint ) ;^84^^^^^69^99^charCount = Character.charCount ( codePoint ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^out.append ( plainText, len, i ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^out.append ( plainText, pos, len ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^out.append (  pos, i ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^out.append ( plainText,  i ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^out.append ( plainText, pos ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^out.append ( plainText, i, pos ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^90^91^^^^75^105^out.append ( plainText, pos, i ) ; pos = i + charCount;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\n" ) ;out.append ( plainText, pos, i ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( plainText, pos, len ) ;out.append ( plainText, pos, i ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\t" ) ;out.append ( plainText, pos, i ) ;^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P3_Replace_Literal]^out.append ( "" ) ;^94^^^^^79^109^out.append ( "\\b" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P7_Replace_Invocation]^out .append ( plainText , len , i )  ;^94^^^^^79^109^out.append ( "\\b" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P8_Replace_Mix]^out .append ( plainText , pos , len )  ;^94^^^^^79^109^out.append ( "\\b" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^94^95^^^^79^109^out.append ( "\\b" ) ; break;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\n" ) ;out.append ( "\\b" ) ;^94^^^^^79^109^out.append ( "\\b" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\f" ) ;out.append ( "\\b" ) ;^94^^^^^79^109^out.append ( "\\b" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\\\" ) ;out.append ( "\\b" ) ;^94^^^^^79^109^out.append ( "\\b" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\\"" ) ;out.append ( "\\b" ) ;^94^^^^^79^109^out.append ( "\\b" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\/" ) ;out.append ( "\\b" ) ;^94^^^^^79^109^out.append ( "\\b" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\r" ) ;out.append ( "\\b" ) ;^94^^^^^79^109^out.append ( "\\b" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\t" ) ;out.append ( "\\b" ) ;^94^^^^^79^109^out.append ( "\\b" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P3_Replace_Literal]^out.append ( "\t" ) ;^97^^^^^82^112^out.append ( "\\t" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P7_Replace_Invocation]^out .append ( plainText , i , len )  ;^97^^^^^82^112^out.append ( "\\t" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^97^98^^^^82^112^out.append ( "\\t" ) ; break;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\n" ) ;out.append ( "\\t" ) ;^97^^^^^82^112^out.append ( "\\t" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\f" ) ;out.append ( "\\t" ) ;^97^^^^^82^112^out.append ( "\\t" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( plainText, pos, i ) ;out.append ( "\\t" ) ;^97^^^^^82^112^out.append ( "\\t" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\\\" ) ;out.append ( "\\t" ) ;^97^^^^^82^112^out.append ( "\\t" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\\"" ) ;out.append ( "\\t" ) ;^97^^^^^82^112^out.append ( "\\t" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\/" ) ;out.append ( "\\t" ) ;^97^^^^^82^112^out.append ( "\\t" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\r" ) ;out.append ( "\\t" ) ;^97^^^^^82^112^out.append ( "\\t" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\b" ) ;out.append ( "\\t" ) ;^97^^^^^82^112^out.append ( "\\t" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P3_Replace_Literal]^out.append ( "\\n\\" ) ;^100^^^^^85^115^out.append ( "\\n" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^100^101^^^^85^115^out.append ( "\\n" ) ; break;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\f" ) ;out.append ( "\\n" ) ;^100^^^^^85^115^out.append ( "\\n" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( plainText, pos, i ) ;out.append ( "\\n" ) ;^100^^^^^85^115^out.append ( "\\n" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\\\" ) ;out.append ( "\\n" ) ;^100^^^^^85^115^out.append ( "\\n" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\\"" ) ;out.append ( "\\n" ) ;^100^^^^^85^115^out.append ( "\\n" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\/" ) ;out.append ( "\\n" ) ;^100^^^^^85^115^out.append ( "\\n" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\r" ) ;out.append ( "\\n" ) ;^100^^^^^85^115^out.append ( "\\n" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\b" ) ;out.append ( "\\n" ) ;^100^^^^^85^115^out.append ( "\\n" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\t" ) ;out.append ( "\\n" ) ;^100^^^^^85^115^out.append ( "\\n" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^103^^^^^88^118^out.append ( "\\f" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\n" ) ;out.append ( "\\f" ) ;^103^^^^^88^118^out.append ( "\\f" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\\\" ) ;out.append ( "\\f" ) ;^103^^^^^88^118^out.append ( "\\f" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\\"" ) ;out.append ( "\\f" ) ;^103^^^^^88^118^out.append ( "\\f" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\/" ) ;out.append ( "\\f" ) ;^103^^^^^88^118^out.append ( "\\f" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\r" ) ;out.append ( "\\f" ) ;^103^^^^^88^118^out.append ( "\\f" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\b" ) ;out.append ( "\\f" ) ;^103^^^^^88^118^out.append ( "\\f" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\t" ) ;out.append ( "\\f" ) ;^103^^^^^88^118^out.append ( "\\f" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P3_Replace_Literal]^out.append ( "\\r\" ) ;^106^^^^^91^121^out.append ( "\\r" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P7_Replace_Invocation]^out .append ( plainText , i , i )  ;^106^^^^^91^121^out.append ( "\\r" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P8_Replace_Mix]^out .append ( plainText , charCount , len )  ;^106^^^^^91^121^out.append ( "\\r" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^106^107^^^^91^121^out.append ( "\\r" ) ; break;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\n" ) ;out.append ( "\\r" ) ;^106^^^^^91^121^out.append ( "\\r" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\f" ) ;out.append ( "\\r" ) ;^106^^^^^91^121^out.append ( "\\r" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\\\" ) ;out.append ( "\\r" ) ;^106^^^^^91^121^out.append ( "\\r" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\\"" ) ;out.append ( "\\r" ) ;^106^^^^^91^121^out.append ( "\\r" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\/" ) ;out.append ( "\\r" ) ;^106^^^^^91^121^out.append ( "\\r" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\b" ) ;out.append ( "\\r" ) ;^106^^^^^91^121^out.append ( "\\r" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\t" ) ;out.append ( "\\r" ) ;^106^^^^^91^121^out.append ( "\\r" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^109^110^^^^94^124^out.append ( "\\\\" ) ; break;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\n" ) ;out.append ( "\\\\" ) ;^109^^^^^94^124^out.append ( "\\\\" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\f" ) ;out.append ( "\\\\" ) ;^109^^^^^94^124^out.append ( "\\\\" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\\"" ) ;out.append ( "\\\\" ) ;^109^^^^^94^124^out.append ( "\\\\" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\/" ) ;out.append ( "\\\\" ) ;^109^^^^^94^124^out.append ( "\\\\" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\r" ) ;out.append ( "\\\\" ) ;^109^^^^^94^124^out.append ( "\\\\" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\b" ) ;out.append ( "\\\\" ) ;^109^^^^^94^124^out.append ( "\\\\" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\t" ) ;out.append ( "\\\\" ) ;^109^^^^^94^124^out.append ( "\\\\" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P3_Replace_Literal]^out.append ( "\/" ) ;^112^^^^^97^127^out.append ( "\\/" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^112^113^^^^97^127^out.append ( "\\/" ) ; break;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\n" ) ;out.append ( "\\/" ) ;^112^^^^^97^127^out.append ( "\\/" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\f" ) ;out.append ( "\\/" ) ;^112^^^^^97^127^out.append ( "\\/" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\\\" ) ;out.append ( "\\/" ) ;^112^^^^^97^127^out.append ( "\\/" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\\"" ) ;out.append ( "\\/" ) ;^112^^^^^97^127^out.append ( "\\/" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\r" ) ;out.append ( "\\/" ) ;^112^^^^^97^127^out.append ( "\\/" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\b" ) ;out.append ( "\\/" ) ;^112^^^^^97^127^out.append ( "\\/" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\t" ) ;out.append ( "\\/" ) ;^112^^^^^97^127^out.append ( "\\/" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P3_Replace_Literal]^out.append ( "\\\"\\" ) ;^115^^^^^100^130^out.append ( "\\\"" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^115^116^^^^100^130^out.append ( "\\\"" ) ; break;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\n" ) ;out.append ( "\\\"" ) ;^115^^^^^100^130^out.append ( "\\\"" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\f" ) ;out.append ( "\\\"" ) ;^115^^^^^100^130^out.append ( "\\\"" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\\\" ) ;out.append ( "\\\"" ) ;^115^^^^^100^130^out.append ( "\\\"" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\/" ) ;out.append ( "\\\"" ) ;^115^^^^^100^130^out.append ( "\\\"" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\r" ) ;out.append ( "\\\"" ) ;^115^^^^^100^130^out.append ( "\\\"" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\b" ) ;out.append ( "\\\"" ) ;^115^^^^^100^130^out.append ( "\\\"" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( "\\t" ) ;out.append ( "\\\"" ) ;^115^^^^^100^130^out.append ( "\\\"" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^appendHexJavaScriptRepresentation ( pos, out ) ;^118^^^^^103^133^appendHexJavaScriptRepresentation ( codePoint, out ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^appendHexJavaScriptRepresentation (  out ) ;^118^^^^^103^133^appendHexJavaScriptRepresentation ( codePoint, out ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^appendHexJavaScriptRepresentation ( codePoint ) ;^118^^^^^103^133^appendHexJavaScriptRepresentation ( codePoint, out ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^appendHexJavaScriptRepresentation ( out, codePoint ) ;^118^^^^^103^133^appendHexJavaScriptRepresentation ( codePoint, out ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P7_Replace_Invocation]^escapeJsonString ( codePoint, out ) ;^118^^^^^103^133^appendHexJavaScriptRepresentation ( codePoint, out ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P8_Replace_Mix]^escapeJsonString ( pos, out ) ;^118^^^^^103^133^appendHexJavaScriptRepresentation ( codePoint, out ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^118^^^^^103^133^appendHexJavaScriptRepresentation ( codePoint, out ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;appendHexJavaScriptRepresentation ( codePoint, out ) ;^118^^^^^103^133^appendHexJavaScriptRepresentation ( codePoint, out ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;appendHexJavaScriptRepresentation ( codePoint, out ) ;^118^^^^^103^133^appendHexJavaScriptRepresentation ( codePoint, out ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P1_Replace_Type]^for  (  long  charCount, i = 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P2_Replace_Operator]^for  ( int charCount, i -= 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^for  ( int pos, i = 0; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P8_Replace_Mix]^for  ( int charCount, i =  0; i < len; i +^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P3_Replace_Literal]^for  ( int charCount, i = len; i < len; i += charCount )  {^82^^^^^67^97^for  ( int charCount, i = 0; i < len; i += charCount )  {^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P1_Replace_Type]^long  codePo long  = Character.codePointAt ( plainText, i ) ;^83^^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P7_Replace_Invocation]^int codePoint = Character .charCount ( charCount )  ;^83^^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^83^84^^^^68^98^int codePoint = Character.codePointAt ( plainText, i ) ; charCount = Character.charCount ( codePoint ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^90^^^^^75^105^out.append ( plainText, pos, i ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P3_Replace_Literal]^out.append ( "\b" ) ;^94^^^^^79^109^out.append ( "\\b" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P7_Replace_Invocation]^out .append ( plainText , charCount , len )  ;^94^^^^^79^109^out.append ( "\\b" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P8_Replace_Mix]^out .append ( plainText , codePoint , len )  ;^94^^^^^79^109^out.append ( "\\b" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P7_Replace_Invocation]^out .append ( plainText , len , pos )  ;^97^^^^^82^112^out.append ( "\\t" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P8_Replace_Mix]^out .append ( plainText , pos , charCount )  ;^97^^^^^82^112^out.append ( "\\t" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^97^^^^^82^112^out.append ( "\\t" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^100^^^^^85^115^out.append ( "\\n" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P3_Replace_Literal]^out.append ( "\\f\" ) ;^103^^^^^88^118^out.append ( "\\f" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^103^104^^^^88^118^out.append ( "\\f" ) ; break;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P3_Replace_Literal]^out.append ( "\\\r" ) ;^106^^^^^91^121^out.append ( "\\r" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^106^^^^^91^121^out.append ( "\\r" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P3_Replace_Literal]^out.append ( "\\" ) ;^109^^^^^94^124^out.append ( "\\\\" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^109^^^^^94^124^out.append ( "\\\\" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P8_Replace_Mix]^out .append ( plainText , len , charCount )  ;^112^^^^^97^127^out.append ( "\\/" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P3_Replace_Literal]^out.append ( "\\\"\" ) ;^115^^^^^100^130^out.append ( "\\\"" ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^118^119^^^^103^133^appendHexJavaScriptRepresentation ( codePoint, out ) ; break;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^out.append ( plainText, i, len ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^out.append ( plainText, pos, i ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^out.append (  pos, len ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^out.append ( plainText,  len ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^out.append ( plainText, pos ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^out.append ( pos, plainText, len ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P5_Replace_Variable]^out.append ( plainText, len, pos ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P8_Replace_Mix]^out.append ( plainText, pos, pos ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P14_Delete_Statement]^^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^out.append ( plainText, pos, i ) ;out.append ( plainText, pos, len ) ;^122^^^^^107^137^out.append ( plainText, pos, len ) ;^[CLASS] Escaper  [METHOD] escapeJsonString [RETURN_TYPE] void   CharSequence plainText StringBuffer out [VARIABLES] CharSequence  plainText  StringBuffer  out  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  charCount  codePoint  i  len  pos  char[]  HEX_CHARS  
[P6_Replace_Expression]^if  ( (escapeHtmlCharacters && contains(c)) )  {^126^^^^^125^132^if  ( !Character.isSupplementaryCodePoint ( codepoint )  )  {^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P7_Replace_Invocation]^if  ( !Character.charCount ( codepoint )  )  {^126^^^^^125^132^if  ( !Character.isSupplementaryCodePoint ( codepoint )  )  {^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P9_Replace_Statement]^if  ( Character.isSupplementaryCodePoint ( codePoint )  )  {^126^^^^^125^132^if  ( !Character.isSupplementaryCodePoint ( codepoint )  )  {^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P15_Unwrap_Block]^char c = ((char) (codepoint)); return (com.google.gson.Escaper.JS_ESCAPE_CHARS.contains(c)) || ((escapeHtmlCharacters) && (com.google.gson.Escaper.HTML_ESCAPE_CHARS.contains(c)));^126^127^128^129^130^125^132^if  ( !Character.isSupplementaryCodePoint ( codepoint )  )  { char c =  ( char )  codepoint; return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ; }^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P16_Remove_Block]^^126^127^128^129^130^125^132^if  ( !Character.isSupplementaryCodePoint ( codepoint )  )  { char c =  ( char )  codepoint; return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ; }^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P2_Replace_Operator]^return JS_ESCAPE_CHARS.contains ( c ) &&  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P2_Replace_Operator]^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters || HTML_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P5_Replace_Variable]^return c.contains ( JS_ESCAPE_CHARS ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P5_Replace_Variable]^return HTML_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && JS_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P5_Replace_Variable]^return escapeHtmlCharacters.contains ( c ) ||  ( JS_ESCAPE_CHARS && HTML_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P5_Replace_Variable]^return JS_ESCAPE_CHARS.contains ( c ) ||  ( HTML_ESCAPE_CHARS && escapeHtmlCharacters.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P7_Replace_Invocation]^return JS_ESCAPE_CHARS.add ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P7_Replace_Invocation]^return JS_ESCAPE_CHARS .add ( null )  ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P1_Replace_Type]^int c =  ( int )  codepoint;^127^^^^^125^132^char c =  ( char )  codepoint;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P8_Replace_Mix]^return 0.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P14_Delete_Statement]^^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P5_Replace_Variable]^||  ( escapeHtmlCharacters && c.contains ( HTML_ESCAPE_CHARS )  ) ;^129^^^^^125^132^||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P7_Replace_Invocation]^||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.add ( c )  ) ;^129^^^^^125^132^||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P14_Delete_Statement]^^129^^^^^125^132^||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P11_Insert_Donor_Statement]^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^129^^^^^125^132^||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P5_Replace_Variable]^return JS_ESCAPE_CHARS.contains ( escapeHtmlCharacters ) ||  ( c && HTML_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P3_Replace_Literal]^return true;^131^^^^^125^132^return false;^[CLASS] Escaper  [METHOD] mustEscapeCharInJsString [RETURN_TYPE] boolean   int codepoint [VARIABLES] char  c  Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codepoint  char[]  HEX_CHARS  
[P2_Replace_Operator]^return codePoint < 0x20 && codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^136^137^138^139^^134^140^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^[CLASS] Escaper  [METHOD] isControlCharacter [RETURN_TYPE] boolean   int codePoint [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  
[P2_Replace_Operator]^return codePoint > 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^136^137^138^139^^134^140^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^[CLASS] Escaper  [METHOD] isControlCharacter [RETURN_TYPE] boolean   int codePoint [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  
[P2_Replace_Operator]^return codePoint < 0x20 || codePoint <= 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^136^137^138^139^^134^140^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^[CLASS] Escaper  [METHOD] isControlCharacter [RETURN_TYPE] boolean   int codePoint [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  
[P2_Replace_Operator]^return codePoint < 0x20 || codePoint != 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^136^137^138^139^^134^140^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^[CLASS] Escaper  [METHOD] isControlCharacter [RETURN_TYPE] boolean   int codePoint [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  
[P2_Replace_Operator]^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f || codePoint <= 0x9f ) ;^136^137^138^139^^134^140^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^[CLASS] Escaper  [METHOD] isControlCharacter [RETURN_TYPE] boolean   int codePoint [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  
[P2_Replace_Operator]^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint == 0x7f && codePoint <= 0x9f ) ;^136^137^138^139^^134^140^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^[CLASS] Escaper  [METHOD] isControlCharacter [RETURN_TYPE] boolean   int codePoint [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  
[P2_Replace_Operator]^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint == 0x9f ) ;^136^137^138^139^^134^140^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^[CLASS] Escaper  [METHOD] isControlCharacter [RETURN_TYPE] boolean   int codePoint [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  
[P8_Replace_Mix]^return true ;^136^137^138^139^^134^140^return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^[CLASS] Escaper  [METHOD] isControlCharacter [RETURN_TYPE] boolean   int codePoint [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  
[P7_Replace_Invocation]^if  ( Character.charCount ( codePoint )  )  {^144^^^^^142^159^if  ( Character.isSupplementaryCodePoint ( codePoint )  )  {^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P9_Replace_Statement]^if  ( !Character.isSupplementaryCodePoint ( codepoint )  )  {^144^^^^^142^159^if  ( Character.isSupplementaryCodePoint ( codePoint )  )  {^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P7_Replace_Invocation]^char[] surrogates = Character.charCount ( codePoint ) ;^149^^^^^142^159^char[] surrogates = Character.toChars ( codePoint ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P14_Delete_Statement]^^149^150^^^^142^159^char[] surrogates = Character.toChars ( codePoint ) ; appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P11_Insert_Donor_Statement]^charCount = Character.charCount ( codePoint ) ;char[] surrogates = Character.toChars ( codePoint ) ;^149^^^^^142^159^char[] surrogates = Character.toChars ( codePoint ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P3_Replace_Literal]^appendHexJavaScriptRepresentation ( surrogates[], out ) ;^150^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P5_Replace_Variable]^appendHexJavaScriptRepresentation ( HEX_CHARS[0], out ) ;^150^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P5_Replace_Variable]^appendHexJavaScriptRepresentation ( surrogates[0] ) ;^150^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P5_Replace_Variable]^appendHexJavaScriptRepresentation ( out[0], surrogates ) ;^150^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P14_Delete_Statement]^^150^151^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[0], out ) ; appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P11_Insert_Donor_Statement]^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^150^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P11_Insert_Donor_Statement]^appendHexJavaScriptRepresentation ( codePoint, out ) ;appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^150^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P3_Replace_Literal]^appendHexJavaScriptRepresentation ( surrogates[codePoint], out ) ;^151^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P5_Replace_Variable]^appendHexJavaScriptRepresentation ( HEX_CHARS[1], out ) ;^151^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P5_Replace_Variable]^appendHexJavaScriptRepresentation ( surrogates[1] ) ;^151^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P5_Replace_Variable]^appendHexJavaScriptRepresentation ( out[1], surrogates ) ;^151^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P14_Delete_Statement]^^151^152^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[1], out ) ; return;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P11_Insert_Donor_Statement]^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^151^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P11_Insert_Donor_Statement]^appendHexJavaScriptRepresentation ( codePoint, out ) ;appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^151^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P14_Delete_Statement]^^149^^^^^142^159^char[] surrogates = Character.toChars ( codePoint ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P3_Replace_Literal]^appendHexJavaScriptRepresentation ( surrogates[-7], out ) ;^150^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P14_Delete_Statement]^^150^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P3_Replace_Literal]^appendHexJavaScriptRepresentation ( surrogates[-4], out ) ;^151^^^^^142^159^appendHexJavaScriptRepresentation ( surrogates[1], out ) ;^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P2_Replace_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   >>  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P2_Replace_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint  ^  12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P2_Replace_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   ^  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P2_Replace_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint  >  8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P2_Replace_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   ||  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P2_Replace_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint  <  4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P2_Replace_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   !=  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P3_Replace_Literal]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> codePoint )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P3_Replace_Literal]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 9 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P5_Replace_Variable]^out.append ( "\\u" ) .append ( surrogates[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P2_Replace_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint  >>  12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P2_Replace_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   >=  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P2_Replace_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint  >=  8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P2_Replace_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint  <=  4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P3_Replace_Literal]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 14 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P3_Replace_Literal]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 6 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P5_Replace_Variable]^out.append ( "\\u" ) .append ( codePoint[ ( HEX_CHARS >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P2_Replace_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   <  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P2_Replace_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint  <  12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P2_Replace_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )   <=  0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P2_Replace_Operator]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint  &&  8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P3_Replace_Literal]^out.append ( "\" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P3_Replace_Literal]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 6 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P3_Replace_Literal]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 9 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P3_Replace_Literal]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 9 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
[P3_Replace_Literal]^out.append ( "\\u\" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^154^155^156^157^^142^159^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[CLASS] Escaper  [METHOD] appendHexJavaScriptRepresentation [RETURN_TYPE] void   int codePoint Appendable out [VARIABLES] Set  HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  boolean  escapeHtmlCharacters  int  codePoint  char[]  HEX_CHARS  surrogates  Appendable  out  
