[P1_Replace_Type]^private final char separatorString;^43^^^^^38^48^private final String separatorString;^[CLASS] CamelCaseSeparatorNamingPolicy   [VARIABLES] 
[P7_Replace_Invocation]^Preconditions.checkArgument ( separatorString ) ;^54^^^^^53^57^Preconditions.checkNotNull ( separatorString ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] <init> [RETURN_TYPE] String)   String separatorString [VARIABLES] String  separatorString  boolean  
[P14_Delete_Statement]^^54^^^^^53^57^Preconditions.checkNotNull ( separatorString ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] <init> [RETURN_TYPE] String)   String separatorString [VARIABLES] String  separatorString  boolean  
[P11_Insert_Donor_Statement]^translation.append ( separatorString ) ;Preconditions.checkNotNull ( separatorString ) ;^54^^^^^53^57^Preconditions.checkNotNull ( separatorString ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] <init> [RETURN_TYPE] String)   String separatorString [VARIABLES] String  separatorString  boolean  
[P11_Insert_Donor_Statement]^Preconditions.checkArgument ( !"".equals ( separatorString )  ) ;Preconditions.checkNotNull ( separatorString ) ;^54^^^^^53^57^Preconditions.checkNotNull ( separatorString ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] <init> [RETURN_TYPE] String)   String separatorString [VARIABLES] String  separatorString  boolean  
[P8_Replace_Mix]^Preconditions .checkNotNull ( separatorString )  ;^55^^^^^53^57^Preconditions.checkArgument ( !"".equals ( separatorString )  ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] <init> [RETURN_TYPE] String)   String separatorString [VARIABLES] String  separatorString  boolean  
[P14_Delete_Statement]^^55^56^^^^53^57^Preconditions.checkArgument ( !"".equals ( separatorString )  ) ; this.separatorString = separatorString;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] <init> [RETURN_TYPE] String)   String separatorString [VARIABLES] String  separatorString  boolean  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( separatorString ) ;Preconditions.checkArgument ( !"".equals ( separatorString )  ) ;^55^^^^^53^57^Preconditions.checkArgument ( !"".equals ( separatorString )  ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] <init> [RETURN_TYPE] String)   String separatorString [VARIABLES] String  separatorString  boolean  
[P1_Replace_Type]^Preconditions.checkArgument ( !"".equals ( separatorchar )  ) ;^55^^^^^53^57^Preconditions.checkArgument ( !"".equals ( separatorString )  ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] <init> [RETURN_TYPE] String)   String separatorString [VARIABLES] String  separatorString  boolean  
[P14_Delete_Statement]^^55^^^^^53^57^Preconditions.checkArgument ( !"".equals ( separatorString )  ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] <init> [RETURN_TYPE] String)   String separatorString [VARIABLES] String  separatorString  boolean  
[P1_Replace_Type]^this.separatorchar = separatorString;^56^^^^^53^57^this.separatorString = separatorString;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] <init> [RETURN_TYPE] String)   String separatorString [VARIABLES] String  separatorString  boolean  
[P8_Replace_Mix]^this.separatorString =  null;^56^^^^^53^57^this.separatorString = separatorString;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] <init> [RETURN_TYPE] String)   String separatorString [VARIABLES] String  separatorString  boolean  
[P2_Replace_Operator]^if  ( Character.isUpperCase ( character )  || translation.length (  )  != 0 )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P2_Replace_Operator]^if  ( Character.isUpperCase ( character )  && translation.length (  )  <= 0 )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P3_Replace_Literal]^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 7 )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P3_Replace_Literal]^if  ( Character.isUpperCase ( character )  && translation.length() - 6  != 0 )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P6_Replace_Expression]^if  ( Character.isUpperCase ( character )  ) {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P6_Replace_Expression]^if  (  translation.length (  )  != 0 )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P8_Replace_Mix]^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0  )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P15_Unwrap_Block]^translation.append(separatorString);^65^66^67^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  { translation.append ( separatorString ) ; }^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P16_Remove_Block]^^65^66^67^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  { translation.append ( separatorString ) ; }^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P5_Replace_Variable]^translation.append ( target ) ;^66^^^^^60^72^translation.append ( separatorString ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P14_Delete_Statement]^^66^^^^^60^72^translation.append ( separatorString ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P11_Insert_Donor_Statement]^translation.append ( character ) ;translation.append ( separatorString ) ;^66^^^^^60^72^translation.append ( separatorString ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P11_Insert_Donor_Statement]^Preconditions.checkNotNull ( separatorString ) ;translation.append ( separatorString ) ;^66^^^^^60^72^translation.append ( separatorString ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < target.length (  ) ; i++ )  {^63^^^^^60^72^for  ( int i = 0; i < target.length (  ) ; i++ )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= target.length (  ) ; i++ )  {^63^^^^^60^72^for  ( int i = 0; i < target.length (  ) ; i++ )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P3_Replace_Literal]^for  ( int i = 8; i < target.length (  ) ; i++ )  {^63^^^^^60^72^for  ( int i = 0; i < target.length (  ) ; i++ )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < target.length (  ) ; i++ )  {^63^^^^^60^72^for  ( int i = 0; i < target.length (  ) ; i++ )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < target.length() + 7 ; i++ )  {^63^^^^^60^72^for  ( int i = 0; i < target.length (  ) ; i++ )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P5_Replace_Variable]^for  ( int i = 0; i < separatorString.length (  ) ; i++ )  {^63^^^^^60^72^for  ( int i = 0; i < target.length (  ) ; i++ )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P7_Replace_Invocation]^for  ( int i = 0; i < target.charAt (  ) ; i++ )  {^63^^^^^60^72^for  ( int i = 0; i < target.length (  ) ; i++ )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P2_Replace_Operator]^if  ( Character.isUpperCase ( character )  && translation.length (  )  == 0 )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P3_Replace_Literal]^if  ( Character.isUpperCase ( character )  && translation.length (  )  != i )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P3_Replace_Literal]^if  ( Character.isUpperCase ( character )  && translation.length() - 8  != 0 )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P5_Replace_Variable]^if  ( Character.isUpperCase ( translation )  && character.length (  )  != 0 )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P1_Replace_Type]^int character = target.charAt ( i ) ;^64^^^^^60^72^char character = target.charAt ( i ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P5_Replace_Variable]^char character = i.charAt ( target ) ;^64^^^^^60^72^char character = target.charAt ( i ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P8_Replace_Mix]^char character = separatorString.charAt ( i ) ;^64^^^^^60^72^char character = target.charAt ( i ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P14_Delete_Statement]^^64^^^^^60^72^char character = target.charAt ( i ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P3_Replace_Literal]^if  ( Character.isUpperCase ( character )  && translation.length() + 8  != 0 )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P3_Replace_Literal]^if  ( Character.isUpperCase ( character )  && translation.length() - 1  != 0 )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P7_Replace_Invocation]^translation .StringBuilder (  )  ;^66^^^^^60^72^translation.append ( separatorString ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P14_Delete_Statement]^^68^^^^^60^72^translation.append ( character ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P11_Insert_Donor_Statement]^translation.append ( separatorString ) ;translation.append ( character ) ;^68^^^^^60^72^translation.append ( character ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < target.length() + 3 ; i++ )  {^63^^^^^60^72^for  ( int i = 0; i < target.length (  ) ; i++ )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < target.length() - 2 ; i++ )  {^63^^^^^60^72^for  ( int i = 0; i < target.length (  ) ; i++ )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P8_Replace_Mix]^for  ( int i = 0; i < separatorString.charAt (  ) ; i++ )  {^63^^^^^60^72^for  ( int i = 0; i < target.length (  ) ; i++ )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P14_Delete_Statement]^^63^64^65^66^67^60^72^for  ( int i = 0; i < target.length (  ) ; i++ )  { char character = target.charAt ( i ) ; if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  { translation.append ( separatorString ) ; }^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P3_Replace_Literal]^if  ( Character.isUpperCase ( character )  && translation.length() - 0  != 0 )  {^65^^^^^60^72^if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P7_Replace_Invocation]^return translation.append (  ) ;^71^^^^^60^72^return translation.toString (  ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P8_Replace_Mix]^return translation .StringBuilder (  )  ;^71^^^^^60^72^return translation.toString (  ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
[P14_Delete_Statement]^^71^^^^^60^72^return translation.toString (  ) ;^[CLASS] CamelCaseSeparatorNamingPolicy  [METHOD] translateName [RETURN_TYPE] String   String target Type fieldType Annotation> annnotations [VARIABLES] Type  fieldType  boolean  StringBuilder  translation  char  character  Collection  annnotations  String  separatorString  target  int  i  
