[P8_Replace_Mix]^private  Type keyType;^31^^^^^26^36^private final Type keyType;^[CLASS] TypeInfoMap   [VARIABLES] 
[P2_Replace_Operator]^if  ( mapType instanceof Class<?> || Properties.class.isAssignableFrom (  ( Class<?> )  mapType )  )  {^35^^^^^34^49^if  ( mapType instanceof Class<?> && Properties.class.isAssignableFrom (  ( Class<?> )  mapType )  )  {^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P2_Replace_Operator]^if  ( mapType  >>  Class<?> && Properties.class.isAssignableFrom (  ( Class<?> )  mapType )  )  {^35^^^^^34^49^if  ( mapType instanceof Class<?> && Properties.class.isAssignableFrom (  ( Class<?> )  mapType )  )  {^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P2_Replace_Operator]^if  ( mapType  ||  Class<?> && Properties.class.isAssignableFrom (  ( Class<?> )  mapType )  )  {^35^^^^^34^49^if  ( mapType instanceof Class<?> && Properties.class.isAssignableFrom (  ( Class<?> )  mapType )  )  {^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P5_Replace_Variable]^if  ( valueType instanceof Class<?> && Properties.class.isAssignableFrom (  ( Class<?> )  mapType )  )  {^35^^^^^34^49^if  ( mapType instanceof Class<?> && Properties.class.isAssignableFrom (  ( Class<?> )  mapType )  )  {^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P6_Replace_Expression]^if  ( mapType instanceof Class<?> ) {^35^^^^^34^49^if  ( mapType instanceof Class<?> && Properties.class.isAssignableFrom (  ( Class<?> )  mapType )  )  {^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P6_Replace_Expression]^if  (  Properties.class.isAssignableFrom (  ( Class<?> )  mapType )  )  {^35^^^^^34^49^if  ( mapType instanceof Class<?> && Properties.class.isAssignableFrom (  ( Class<?> )  mapType )  )  {^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P6_Replace_Expression]^if  ( mapType instanceof ParameterizedType )  {^35^^^^^34^49^if  ( mapType instanceof Class<?> && Properties.class.isAssignableFrom (  ( Class<?> )  mapType )  )  {^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P6_Replace_Expression]^if  ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the TypeToken to extract the ParameterizedType." )  {^35^^^^^34^49^if  ( mapType instanceof Class<?> && Properties.class.isAssignableFrom (  ( Class<?> )  mapType )  )  {^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P13_Insert_Block]^if  ( mapType instanceof ParameterizedType )  {     TypeInfo rawType = new TypeInfo ( mapType ) ;     checkArgument ( isAssignableFrom ( rawType.getRawClass (  )  )  ) ;     ParameterizedType paramType =  (  ( ParameterizedType )   ( mapType )  ) ;     keyType = paramType.getActualTypeArguments (  ) [0];     valueType = paramType.getActualTypeArguments (  ) [1]; }else {     throw new IllegalArgumentException (  ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the TypeToken to extract the ParameterizedType." )  ) ; }^35^^^^^34^49^[Delete]^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P2_Replace_Operator]^} else if  ( mapType  ||  ParameterizedType )  {^38^^^^^34^49^} else if  ( mapType instanceof ParameterizedType )  {^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P5_Replace_Variable]^} else if  ( valueType instanceof ParameterizedType )  {^38^^^^^34^49^} else if  ( mapType instanceof ParameterizedType )  {^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P6_Replace_Expression]^} else if  ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the TypeToken to extract the ParameterizedType." )  {^38^^^^^34^49^} else if  ( mapType instanceof ParameterizedType )  {^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P6_Replace_Expression]^} else {^38^^^^^34^49^} else if  ( mapType instanceof ParameterizedType )  {^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "p objects need to be parameterized unless you use a custom serial" + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "he " ) ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. o be parameterized unless you use a custom seriali" + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType.flect.TypeToken to extract the Parameter" ) ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^keyType = paramType.getActualTypeArguments (  ) [-4];^42^^^^^34^49^keyType = paramType.getActualTypeArguments (  ) [0];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P8_Replace_Mix]^keyType = paramType.getActualTypeArguments (  ) [0 * 4];^42^^^^^34^49^keyType = paramType.getActualTypeArguments (  ) [0];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P11_Insert_Donor_Statement]^valueType = paramType.getActualTypeArguments (  ) [1];keyType = paramType.getActualTypeArguments (  ) [0];^42^^^^^34^49^keyType = paramType.getActualTypeArguments (  ) [0];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^valueType = paramType.getActualTypeArguments (  ) [6];^43^^^^^34^49^valueType = paramType.getActualTypeArguments (  ) [1];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P8_Replace_Mix]^valueType = paramType.getActualTypeArguments (  ) [3];^43^^^^^34^49^valueType = paramType.getActualTypeArguments (  ) [1];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P11_Insert_Donor_Statement]^keyType = paramType.getActualTypeArguments (  ) [0];valueType = paramType.getActualTypeArguments (  ) [1];^43^^^^^34^49^valueType = paramType.getActualTypeArguments (  ) [1];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P8_Replace_Mix]^TypeInfo rawType = new TypeInfo ( valueType ) ;^39^^^^^34^49^TypeInfo rawType = new TypeInfo ( mapType ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P7_Replace_Invocation]^Preconditions.checkArgument ( Map.class.isAssignableFrom ( rawType.TypeInfo (  )  )  ) ;^40^^^^^34^49^Preconditions.checkArgument ( Map.class.isAssignableFrom ( rawType.getRawClass (  )  )  ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P7_Replace_Invocation]^Preconditions.checkArgument ( Map.class.isAssignableFrom ( rawType .TypeInfo ( keyType )   )  ) ;^40^^^^^34^49^Preconditions.checkArgument ( Map.class.isAssignableFrom ( rawType.getRawClass (  )  )  ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P14_Delete_Statement]^^40^41^^^^34^49^Preconditions.checkArgument ( Map.class.isAssignableFrom ( rawType.getRawClass (  )  )  ) ; ParameterizedType paramType =  ( ParameterizedType )  mapType;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P14_Delete_Statement]^^40^^^^^34^49^Preconditions.checkArgument ( Map.class.isAssignableFrom ( rawType.getRawClass (  )  )  ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P7_Replace_Invocation]^Preconditions.checkArgument ( Map.class.isAssignableFrom ( rawType .TypeInfo ( mapType )   )  ) ;^40^^^^^34^49^Preconditions.checkArgument ( Map.class.isAssignableFrom ( rawType.getRawClass (  )  )  ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P14_Delete_Statement]^^42^43^^^^34^49^keyType = paramType.getActualTypeArguments (  ) [0]; valueType = paramType.getActualTypeArguments (  ) [1];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P14_Delete_Statement]^^43^^^^^34^49^valueType = paramType.getActualTypeArguments (  ) [1];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^keyType = paramType.getActualTypeArguments (  ) [-2];^42^^^^^34^49^keyType = paramType.getActualTypeArguments (  ) [0];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P8_Replace_Mix]^keyType = paramType.getActualTypeArguments (  ) [1];^42^^^^^34^49^keyType = paramType.getActualTypeArguments (  ) [0];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^valueType = paramType.getActualTypeArguments (  ) [-3];^43^^^^^34^49^valueType = paramType.getActualTypeArguments (  ) [1];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P8_Replace_Mix]^valueType = paramType.getActualTypeArguments (  ) [1 * 0];^43^^^^^34^49^valueType = paramType.getActualTypeArguments (  ) [1];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "objects need to be parameterized unlesap objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + ".google.gsonse the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "jeap objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType.n.reflect.TypeToken to e" ) ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P7_Replace_Invocation]^Preconditions.checkArgument ( Map.class.isAssignableFrom ( rawType .TypeInfo ( valueType )   )  ) ;^40^^^^^34^49^Preconditions.checkArgument ( Map.class.isAssignableFrom ( rawType.getRawClass (  )  )  ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P8_Replace_Mix]^keyType  =  keyType ;^36^^^^^34^49^keyType = String.class;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P11_Insert_Donor_Statement]^valueType = String.class;keyType = String.class;^36^^^^^34^49^keyType = String.class;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P8_Replace_Mix]^valueType ;^37^^^^^34^49^valueType = String.class;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P11_Insert_Donor_Statement]^keyType = String.class;valueType = String.class;^37^^^^^34^49^valueType = String.class;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P2_Replace_Operator]^} else if  ( mapType  !=  ParameterizedType )  {^38^^^^^34^49^} else if  ( mapType instanceof ParameterizedType )  {^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "rameterized unless you use a cusap objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "com.googl" ) ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Map objects need to be parameteriap objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "TypeToken to extract the Parameterse the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^keyType = paramType.getActualTypeArguments (  ) [2];^42^^^^^34^49^keyType = paramType.getActualTypeArguments (  ) [0];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P8_Replace_Mix]^keyType = paramType.getActualTypeArguments (  ) [0 - 1];^42^^^^^34^49^keyType = paramType.getActualTypeArguments (  ) [0];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^valueType = paramType.getActualTypeArguments (  ) [8];^43^^^^^34^49^valueType = paramType.getActualTypeArguments (  ) [1];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P8_Replace_Mix]^valueType = paramType.getActualTypeArguments (  ) [0];^43^^^^^34^49^valueType = paramType.getActualTypeArguments (  ) [1];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P8_Replace_Mix]^valueType  = null ;^37^^^^^34^49^valueType = String.class;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P8_Replace_Mix]^keyType = paramType.getActualTypeArguments (  ) [0 / 0];^42^^^^^34^49^keyType = paramType.getActualTypeArguments (  ) [0];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^valueType = paramType.getActualTypeArguments (  ) [-8];^43^^^^^34^49^valueType = paramType.getActualTypeArguments (  ) [1];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P8_Replace_Mix]^valueType = paramType.getActualTypeArguments (  ) [1L];^43^^^^^34^49^valueType = paramType.getActualTypeArguments (  ) [1];^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " need to be parameterized unless you u" + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "google.gson.reflect.TypeToken to extract the Parase the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. to be paramete" + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "n.reflect.TypeToken to e" ) ;^45^46^47^^^34^49^throw new IllegalArgumentException ( "Map objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoMap  [METHOD] <init> [RETURN_TYPE] Type)   Type mapType [VARIABLES] ParameterizedType  paramType  Type  keyType  mapType  valueType  boolean  TypeInfo  rawType  
[P5_Replace_Variable]^return valueType;^52^^^^^51^53^return keyType;^[CLASS] TypeInfoMap  [METHOD] getKeyType [RETURN_TYPE] Type   [VARIABLES] Type  keyType  mapType  valueType  boolean  
[P5_Replace_Variable]^return mapType;^56^^^^^55^57^return valueType;^[CLASS] TypeInfoMap  [METHOD] getValueType [RETURN_TYPE] Type   [VARIABLES] Type  keyType  mapType  valueType  boolean  
