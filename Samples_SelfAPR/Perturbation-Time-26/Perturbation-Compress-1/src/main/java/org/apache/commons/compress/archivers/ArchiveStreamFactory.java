[P2_Replace_Operator]^if  ( archiverName == null && in == null )  {^59^^^^^56^75^if  ( archiverName == null || in == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P2_Replace_Operator]^if  ( archiverName != null || in == null )  {^59^^^^^56^75^if  ( archiverName == null || in == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P2_Replace_Operator]^if  ( archiverName == null || in != null )  {^59^^^^^56^75^if  ( archiverName == null || in == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P5_Replace_Variable]^if  ( in == null || archiverName == null )  {^59^^^^^56^75^if  ( archiverName == null || in == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P6_Replace_Expression]^if  ( archiverName == null ) {^59^^^^^56^75^if  ( archiverName == null || in == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P6_Replace_Expression]^if  (  in == null )  {^59^^^^^56^75^if  ( archiverName == null || in == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P8_Replace_Mix]^if  ( archiverName == false || in == false )  {^59^^^^^56^75^if  ( archiverName == null || in == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P9_Replace_Statement]^if  ( archiverName == null || out == null )  {^59^^^^^56^75^if  ( archiverName == null || in == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Archivername must not be null.");^59^60^61^^^56^75^if  ( archiverName == null || in == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P16_Remove_Block]^^59^60^61^^^56^75^if  ( archiverName == null || in == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  (  ( archiverName == null )  ||  ( out == null )  )  {     throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ; }^59^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( in == null )  {     throw new IllegalArgumentException ( "Stream must not be null." ) ; }^59^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( ! ( in.markSupported (  )  )  )  {     throw new IllegalArgumentException ( "Mark is not supported." ) ; }^59^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Archivername and stream must not be null." )   ;^60^^^^^56^75^throw new IllegalArgumentException  (" ")  ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  (  ( archiverName == null )  ||  ( out == null )  )  {     throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ; }^60^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( in == null )  {     throw new IllegalArgumentException ( "Stream must not be null." ) ; }^60^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  (  ( archiverName == null )  ||  ( in == null )  )  {     throw new IllegalArgumentException ( "Archivername must not be null." ) ; }^60^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P11_Insert_Donor_Statement]^throw new ArchiveException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^60^^^^^56^75^throw new IllegalArgumentException  (" ")  ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "ip".equalsIgnoreCase ( archiverName )  )  {^65^^^^^56^75^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P6_Replace_Expression]^} else {^65^^^^^56^75^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P9_Replace_Statement]^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^65^^^^^56^75^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P9_Replace_Statement]^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^65^^^^^56^75^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "aar".equalsIgnoreCase ( archiverName )  )  {^67^^^^^56^75^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P6_Replace_Expression]^} else {^67^^^^^56^75^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P9_Replace_Statement]^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^67^^^^^56^75^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P9_Replace_Statement]^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^67^^^^^56^75^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "ja".equalsIgnoreCase ( archiverName )  )  {^69^^^^^56^75^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P6_Replace_Expression]^} else {^69^^^^^56^75^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P8_Replace_Mix]^}  if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^69^^^^^56^75^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P9_Replace_Statement]^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^69^^^^^56^75^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P9_Replace_Statement]^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^69^^^^^56^75^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P9_Replace_Statement]^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^69^^^^^56^75^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P15_Unwrap_Block]^return new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(in);^69^70^71^72^73^56^75^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  { return new JarArchiveInputStream ( in ) ; } else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  { return new CpioArchiveInputStream ( in ) ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P16_Remove_Block]^^69^70^71^72^73^56^75^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  { return new JarArchiveInputStream ( in ) ; } else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  { return new CpioArchiveInputStream ( in ) ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( "jar".equalsIgnoreCase ( archiverName )  )  {     return new JarArchiveOutputStream ( out ) ; }else     if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {         return new CpioArchiveOutputStream ( out ) ;     }^69^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( "tar".equalsIgnoreCase ( archiverName )  )  {     return new TarArchiveOutputStream ( out ) ; }else     if  ( "jar".equalsIgnoreCase ( archiverName )  )  {         return new JarArchiveOutputStream ( out ) ;     }else         if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {             return new CpioArchiveOutputStream ( out ) ;         }^69^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( "tar".equalsIgnoreCase ( archiverName )  )  {     return new TarArchiveInputStream ( in ) ; }else     if  ( "jar".equalsIgnoreCase ( archiverName )  )  {         return new JarArchiveInputStream ( in ) ;     }else         if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {             return new CpioArchiveInputStream ( in ) ;         }^69^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( matches ( signature, signatureLength )  )  {     return new ArArchiveInputStream ( in ) ; }else     if  ( matches ( signature, signatureLength )  )  {         return new CpioArchiveInputStream ( in ) ;     }^69^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( matches ( signature, signatureLength )  )  {     return new CpioArchiveInputStream ( in ) ; }^69^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "pio".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P6_Replace_Expression]^} else {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P9_Replace_Statement]^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P9_Replace_Statement]^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P15_Unwrap_Block]^return new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(in);^71^72^73^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  { return new CpioArchiveInputStream ( in ) ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P16_Remove_Block]^^71^72^73^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  { return new CpioArchiveInputStream ( in ) ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveOutputStream ( out ) ; }^71^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( matches ( signature, signatureLength )  )  {     return new CpioArchiveInputStream ( in ) ; }^71^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^72^^^^^56^75^return new CpioArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^72^^^^^56^75^return new CpioArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveOutputStream ( out ) ; }^72^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveInputStream ( in ) ; }^72^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "cpioc".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^70^^^^^56^75^return new JarArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^70^^^^^56^75^return new JarArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveOutputStream ( out ) ; }^70^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveInputStream ( in ) ; }^70^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "ar".equalsIgnoreCase ( archiverName )  )  {^69^^^^^56^75^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^68^^^^^56^75^return new TarArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^68^^^^^56^75^return new TarArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveOutputStream ( out ) ; }^68^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveInputStream ( in ) ; }^68^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "jarja".equalsIgnoreCase ( archiverName )  )  {^69^^^^^56^75^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "cpi".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P8_Replace_Mix]^}  if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "ta".equalsIgnoreCase ( archiverName )  )  {^67^^^^^56^75^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "cpiocp".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^66^^^^^56^75^return new ZipArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^66^^^^^56^75^return new ZipArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveOutputStream ( out ) ; }^66^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveInputStream ( in ) ; }^66^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P8_Replace_Mix]^}  if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^67^^^^^56^75^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "cpipio".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "jarj".equalsIgnoreCase ( archiverName )  )  {^69^^^^^56^75^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "ipio".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "a".equalsIgnoreCase ( archiverName )  )  {^69^^^^^56^75^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "cp".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "cppio".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "t".equalsIgnoreCase ( archiverName )  )  {^67^^^^^56^75^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^64^^^^^56^75^return new ArArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^64^^^^^56^75^return new ArArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveOutputStream ( out ) ; }^64^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveInputStream ( in ) ; }^64^^^^^56^75^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "zipz".equalsIgnoreCase ( archiverName )  )  {^65^^^^^56^75^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "j".equalsIgnoreCase ( archiverName )  )  {^69^^^^^56^75^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "cpiocpi".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "".equalsIgnoreCase ( archiverName )  )  {^69^^^^^56^75^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "aar".equalsIgnoreCase ( archiverName )  )  {^69^^^^^56^75^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "c".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "taar".equalsIgnoreCase ( archiverName )  )  {^67^^^^^56^75^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "jaar".equalsIgnoreCase ( archiverName )  )  {^69^^^^^56^75^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "p".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "ppio".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "cpiopi".equalsIgnoreCase ( archiverName )  )  {^71^^^^^56^75^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^if  ( "".equalsIgnoreCase ( archiverName )  )  {^63^^^^^56^75^if  ( "ar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P3_Replace_Literal]^} else if  ( "iip".equalsIgnoreCase ( archiverName )  )  {^65^^^^^56^75^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ")  ; ;^74^^^^^56^75^throw new ArchiveException  (" ")  ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new ArchiveException  (" ")  ;^74^^^^^56^75^throw new ArchiveException  (" ")  ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   String archiverName InputStream in [VARIABLES] boolean  InputStream  in  String  archiverName  
[P2_Replace_Operator]^if  ( archiverName == null && out == null )  {^89^^^^^86^106^if  ( archiverName == null || out == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P2_Replace_Operator]^if  ( archiverName != null || out == null )  {^89^^^^^86^106^if  ( archiverName == null || out == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P2_Replace_Operator]^if  ( archiverName == null || out != null )  {^89^^^^^86^106^if  ( archiverName == null || out == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P5_Replace_Variable]^if  ( out == null || archiverName == null )  {^89^^^^^86^106^if  ( archiverName == null || out == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P6_Replace_Expression]^if  ( archiverName == null ) {^89^^^^^86^106^if  ( archiverName == null || out == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P6_Replace_Expression]^if  (  out == null )  {^89^^^^^86^106^if  ( archiverName == null || out == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P8_Replace_Mix]^if  ( archiverName == this ) {^89^^^^^86^106^if  ( archiverName == null || out == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P9_Replace_Statement]^if  ( archiverName == null || in == null )  {^89^^^^^86^106^if  ( archiverName == null || out == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Archivername and stream must not be null.");^89^90^91^92^^86^106^if  ( archiverName == null || out == null )  { throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P16_Remove_Block]^^89^90^91^92^^86^106^if  ( archiverName == null || out == null )  { throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( in == null )  {     throw new IllegalArgumentException ( "Stream must not be null." ) ; }^89^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( ! ( in.markSupported (  )  )  )  {     throw new IllegalArgumentException ( "Mark is not supported." ) ; }^89^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  (  ( archiverName == null )  ||  ( in == null )  )  {     throw new IllegalArgumentException ( "Archivername must not be null." ) ; }^89^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "chivrchivername and stream must not be null." ) ;^90^91^^^^86^106^throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Stream must not be null." )  ;^90^91^^^^86^106^throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  (  ( archiverName == null )  ||  ( out == null )  )  {     throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ; }^90^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( in == null )  {     throw new IllegalArgumentException ( "Stream must not be null." ) ; }^90^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "and stream rchivername and stream must not be null." ) ;^90^91^^^^86^106^throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P11_Insert_Donor_Statement]^throw new ArchiveException ( "No Archiver found for the stream signature" ) ;throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ;^90^91^^^^86^106^throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  (  ( archiverName == null )  ||  ( in == null )  )  {     throw new IllegalArgumentException ( "Archivername must not be null." ) ; }^90^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Archivername and stream must no" ) ;^90^91^^^^86^106^throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Archivername and stream must not be null.and s" ) ;^90^91^^^^86^106^throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "".equalsIgnoreCase ( archiverName )  )  {^96^^^^^86^106^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P6_Replace_Expression]^} else {^96^^^^^86^106^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P9_Replace_Statement]^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^96^^^^^86^106^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P9_Replace_Statement]^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^96^^^^^86^106^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "t".equalsIgnoreCase ( archiverName )  )  {^98^^^^^86^106^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P6_Replace_Expression]^} else {^98^^^^^86^106^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P9_Replace_Statement]^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^98^^^^^86^106^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P9_Replace_Statement]^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^98^^^^^86^106^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "j".equalsIgnoreCase ( archiverName )  )  {^100^^^^^86^106^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P6_Replace_Expression]^} else {^100^^^^^86^106^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P9_Replace_Statement]^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^100^^^^^86^106^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P9_Replace_Statement]^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^100^^^^^86^106^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P9_Replace_Statement]^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^100^^^^^86^106^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P15_Unwrap_Block]^return new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream(out);^100^101^102^103^104^86^106^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  { return new JarArchiveOutputStream ( out ) ; } else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  { return new CpioArchiveOutputStream ( out ) ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P16_Remove_Block]^^100^101^102^103^104^86^106^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  { return new JarArchiveOutputStream ( out ) ; } else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  { return new CpioArchiveOutputStream ( out ) ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( "tar".equalsIgnoreCase ( archiverName )  )  {     return new TarArchiveOutputStream ( out ) ; }else     if  ( "jar".equalsIgnoreCase ( archiverName )  )  {         return new JarArchiveOutputStream ( out ) ;     }else         if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {             return new CpioArchiveOutputStream ( out ) ;         }^100^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( "tar".equalsIgnoreCase ( archiverName )  )  {     return new TarArchiveInputStream ( in ) ; }else     if  ( "jar".equalsIgnoreCase ( archiverName )  )  {         return new JarArchiveInputStream ( in ) ;     }else         if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {             return new CpioArchiveInputStream ( in ) ;         }^100^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( matches ( signature, signatureLength )  )  {     return new ArArchiveInputStream ( in ) ; }else     if  ( matches ( signature, signatureLength )  )  {         return new CpioArchiveInputStream ( in ) ;     }^100^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( "jar".equalsIgnoreCase ( archiverName )  )  {     return new JarArchiveInputStream ( in ) ; }else     if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {         return new CpioArchiveInputStream ( in ) ;     }^100^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( matches ( signature, signatureLength )  )  {     return new CpioArchiveInputStream ( in ) ; }^100^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P6_Replace_Expression]^} else {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P9_Replace_Statement]^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P9_Replace_Statement]^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P15_Unwrap_Block]^return new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(out);^102^103^104^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  { return new CpioArchiveOutputStream ( out ) ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P16_Remove_Block]^^102^103^104^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  { return new CpioArchiveOutputStream ( out ) ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( matches ( signature, signatureLength )  )  {     return new CpioArchiveInputStream ( in ) ; }^102^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveInputStream ( in ) ; }^102^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P4_Replace_Constructor]^return return  new ArArchiveOutputStream ( out )  ;^103^^^^^86^106^return new CpioArchiveOutputStream ( out ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P8_Replace_Mix]^return  new ArArchiveOutputStream ( out )  ;^103^^^^^86^106^return new CpioArchiveOutputStream ( out ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveOutputStream ( out ) ; }^103^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveInputStream ( in ) ; }^103^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "cp".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^101^^^^^86^106^return new JarArchiveOutputStream ( out ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^101^^^^^86^106^return new JarArchiveOutputStream ( out ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveOutputStream ( out ) ; }^101^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "cppio".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "".equalsIgnoreCase ( archiverName )  )  {^100^^^^^86^106^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^99^^^^^86^106^return new TarArchiveOutputStream ( out ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^99^^^^^86^106^return new TarArchiveOutputStream ( out ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveOutputStream ( out ) ; }^99^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "ja".equalsIgnoreCase ( archiverName )  )  {^100^^^^^86^106^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "cpiop".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P8_Replace_Mix]^}  if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "ta".equalsIgnoreCase ( archiverName )  )  {^98^^^^^86^106^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "jarja".equalsIgnoreCase ( archiverName )  )  {^100^^^^^86^106^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "c".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^97^^^^^86^106^return new ZipArchiveOutputStream ( out ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^97^^^^^86^106^return new ZipArchiveOutputStream ( out ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveOutputStream ( out ) ; }^97^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveInputStream ( in ) ; }^97^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "".equalsIgnoreCase ( archiverName )  )  {^98^^^^^86^106^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "ar".equalsIgnoreCase ( archiverName )  )  {^100^^^^^86^106^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "cpi".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "p".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P8_Replace_Mix]^}  if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^100^^^^^86^106^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "pi".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "ipio".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "ar".equalsIgnoreCase ( archiverName )  )  {^98^^^^^86^106^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^95^^^^^86^106^return new ArArchiveOutputStream ( out ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^95^^^^^86^106^return new ArArchiveOutputStream ( out ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveOutputStream ( out ) ; }^95^^^^^86^106^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "i".equalsIgnoreCase ( archiverName )  )  {^96^^^^^86^106^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P8_Replace_Mix]^}  if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^98^^^^^86^106^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "aar".equalsIgnoreCase ( archiverName )  )  {^100^^^^^86^106^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "pipio".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "cpiocp".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "jaar".equalsIgnoreCase ( archiverName )  )  {^100^^^^^86^106^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "cpioc".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "cpipio".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "jarj".equalsIgnoreCase ( archiverName )  )  {^100^^^^^86^106^} else if  ( "jar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "tarta".equalsIgnoreCase ( archiverName )  )  {^98^^^^^86^106^} else if  ( "tar".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "pio".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "iip".equalsIgnoreCase ( archiverName )  )  {^96^^^^^86^106^} else if  ( "zip".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P3_Replace_Literal]^} else if  ( "i".equalsIgnoreCase ( archiverName )  )  {^102^^^^^86^106^} else if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new ArchiveException  (" ")  ;^105^^^^^86^106^throw new ArchiveException  (" ")  ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveOutputStream [RETURN_TYPE] ArchiveOutputStream   String archiverName OutputStream out [VARIABLES] boolean  OutputStream  out  String  archiverName  
[P2_Replace_Operator]^if  ( in != null )  {^119^^^^^104^134^if  ( in == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^if  ( in == this )  {^119^^^^^104^134^if  ( in == null )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Stream must not be null.");^119^120^121^^^104^134^if  ( in == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P16_Remove_Block]^^119^120^121^^^104^134^if  ( in == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  (  ( archiverName == null )  ||  ( out == null )  )  {     throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ; }^119^^^^^104^134^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( ! ( in.markSupported (  )  )  )  {     throw new IllegalArgumentException ( "Mark is not supported." ) ; }^119^^^^^104^134^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  (  ( archiverName == null )  ||  ( in == null )  )  {     throw new IllegalArgumentException ( "Archivername must not be null." ) ; }^119^^^^^104^134^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Archivername and stream must not be null." )   ;^120^^^^^105^135^throw new IllegalArgumentException  (" ")  ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( in == null )  {     throw new IllegalArgumentException ( "Stream must not be null." ) ; }^120^^^^^105^135^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P11_Insert_Donor_Statement]^throw new ArchiveException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^120^^^^^105^135^throw new IllegalArgumentException  (" ")  ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  (  ( archiverName == null )  ||  ( out == null )  )  {     throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ; }^120^^^^^105^135^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  (  ( archiverName == null )  ||  ( in == null )  )  {     throw new IllegalArgumentException ( "Archivername must not be null." ) ; }^120^^^^^105^135^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^throw new ArchiveException  (" ")  ; ;^120^^^^^105^135^throw new IllegalArgumentException  (" ")  ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P7_Replace_Invocation]^if  ( !in.mark (  )  )  {^123^^^^^108^138^if  ( !in.markSupported (  )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P7_Replace_Invocation]^if  ( !in .mark ( signatureLength )   )  {^123^^^^^108^138^if  ( !in.markSupported (  )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Mark is not supported.");^123^124^125^^^108^138^if  ( !in.markSupported (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P16_Remove_Block]^^123^124^125^^^108^138^if  ( !in.markSupported (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  (  ( archiverName == null )  ||  ( out == null )  )  {     throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ; }^123^^^^^108^138^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( in == null )  {     throw new IllegalArgumentException ( "Stream must not be null." ) ; }^123^^^^^108^138^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  (  ( archiverName == null )  ||  ( in == null )  )  {     throw new IllegalArgumentException ( "Archivername must not be null." ) ; }^123^^^^^108^138^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Stream must not be null." )   ;^124^^^^^109^139^throw new IllegalArgumentException  (" ")  ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( in == null )  {     throw new IllegalArgumentException ( "Stream must not be null." ) ; }^124^^^^^109^139^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( ! ( in.markSupported (  )  )  )  {     throw new IllegalArgumentException ( "Mark is not supported." ) ; }^124^^^^^109^139^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P11_Insert_Donor_Statement]^throw new ArchiveException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^124^^^^^109^139^throw new IllegalArgumentException  (" ")  ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P3_Replace_Literal]^final byte[] signature = new byte[signatureLength];^127^^^^^112^142^final byte[] signature = new byte[12];^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P5_Replace_Variable]^in.mark ( signatureLength ) ;^128^^^^^113^143^in.mark ( signature.length ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P5_Replace_Variable]^in.mark ( signature.length.length ) ;^128^^^^^113^143^in.mark ( signature.length ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P5_Replace_Variable]^in.mark ( signature ) ;^128^^^^^113^143^in.mark ( signature.length ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P14_Delete_Statement]^^128^^^^^113^143^in.mark ( signature.length ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^if  ( ZipArchiveInputStream.matches (  signatureLength )  )  {^132^^^^^117^147^if  ( ZipArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^if  ( ZipArchiveInputStream.matches ( signature )  )  {^132^^^^^117^147^if  ( ZipArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P5_Replace_Variable]^if  ( ZipArchiveInputStream.matches ( signatureLength, signature )  )  {^132^^^^^117^147^if  ( ZipArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P7_Replace_Invocation]^if  ( ZipArchiveInputStream .ZipArchiveInputStream ( in )   )  {^132^^^^^117^147^if  ( ZipArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^} else if  ( JarArchiveInputStream .matches (  signatureLength )  )  {^134^135^^^^119^149^} else if  ( JarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^} else if  ( JarArchiveInputStream .matches ( signature )  )  {^134^135^^^^119^149^} else if  ( JarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P5_Replace_Variable]^} else if  ( JarArchiveInputStream .matches ( signatureLength, signature )  )  {^134^135^^^^119^149^} else if  ( JarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P6_Replace_Expression]^} else {^134^135^^^^119^149^} else if  ( JarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P7_Replace_Invocation]^} else if  ( JarArchiveInputStream  .ZipArchiveInputStream ( in )   )  {^134^135^^^^119^149^} else if  ( JarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^}  if  ( JarArchiveInputStream  .ZipArchiveInputStream ( in )   )  {^134^135^^^^119^149^} else if  ( JarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P9_Replace_Statement]^} else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^134^135^^^^119^149^} else if  ( JarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P9_Replace_Statement]^} else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^134^135^^^^119^149^} else if  ( JarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P9_Replace_Statement]^} else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^134^135^^^^119^149^} else if  ( JarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^} else if  ( TarArchiveInputStream .matches (  signatureLength )  )  {^137^138^^^^122^152^} else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^} else if  ( TarArchiveInputStream .matches ( signature )  )  {^137^138^^^^122^152^} else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P5_Replace_Variable]^} else if  ( TarArchiveInputStream .matches ( signatureLength, signature )  )  {^137^138^^^^122^152^} else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P6_Replace_Expression]^} else {^137^138^^^^122^152^} else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P9_Replace_Statement]^} else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^137^138^^^^122^152^} else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P9_Replace_Statement]^} else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^137^138^^^^122^152^} else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^} else if  ( ArArchiveInputStream.matches (  signatureLength )  )  {^140^^^^^125^155^} else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^} else if  ( ArArchiveInputStream.matches ( signature )  )  {^140^^^^^125^155^} else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P5_Replace_Variable]^} else if  ( ArArchiveInputStream.matches ( signatureLength, signature )  )  {^140^^^^^125^155^} else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P6_Replace_Expression]^} else {^140^^^^^125^155^} else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P7_Replace_Invocation]^} else if  ( ArArchiveInputStream .ZipArchiveInputStream ( in )   )  {^140^^^^^125^155^} else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P9_Replace_Statement]^} else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^140^^^^^125^155^} else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P9_Replace_Statement]^} else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^140^^^^^125^155^} else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P15_Unwrap_Block]^return new org.apache.commons.compress.archivers.ar.ArArchiveInputStream(in);^140^141^142^143^144^125^155^} else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  { return new ArArchiveInputStream ( in ) ; } else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  { return new CpioArchiveInputStream ( in ) ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P16_Remove_Block]^^140^141^142^143^144^125^155^} else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  { return new ArArchiveInputStream ( in ) ; } else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  { return new CpioArchiveInputStream ( in ) ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( "jar".equalsIgnoreCase ( archiverName )  )  {     return new JarArchiveOutputStream ( out ) ; }else     if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {         return new CpioArchiveOutputStream ( out ) ;     }^140^^^^^125^155^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( "tar".equalsIgnoreCase ( archiverName )  )  {     return new TarArchiveOutputStream ( out ) ; }else     if  ( "jar".equalsIgnoreCase ( archiverName )  )  {         return new JarArchiveOutputStream ( out ) ;     }else         if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {             return new CpioArchiveOutputStream ( out ) ;         }^140^^^^^125^155^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( "tar".equalsIgnoreCase ( archiverName )  )  {     return new TarArchiveInputStream ( in ) ; }else     if  ( "jar".equalsIgnoreCase ( archiverName )  )  {         return new JarArchiveInputStream ( in ) ;     }else         if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {             return new CpioArchiveInputStream ( in ) ;         }^140^^^^^125^155^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( matches ( signature, signatureLength )  )  {     return new TarArchiveInputStream ( in ) ; }else     if  ( matches ( signature, signatureLength )  )  {         return new ArArchiveInputStream ( in ) ;     }else         if  ( matches ( signature, signatureLength )  )  {             return new CpioArchiveInputStream ( in ) ;         }^140^^^^^125^155^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( "zip".equalsIgnoreCase ( archiverName )  )  {     return new ZipArchiveOutputStream ( out ) ; }else     if  ( "tar".equalsIgnoreCase ( archiverName )  )  {         return new TarArchiveOutputStream ( out ) ;     }else         if  ( "jar".equalsIgnoreCase ( archiverName )  )  {             return new JarArchiveOutputStream ( out ) ;         }else             if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {                 return new CpioArchiveOutputStream ( out ) ;             }^140^^^^^125^155^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( "zip".equalsIgnoreCase ( archiverName )  )  {     return new ZipArchiveInputStream ( in ) ; }else     if  ( "tar".equalsIgnoreCase ( archiverName )  )  {         return new TarArchiveInputStream ( in ) ;     }else         if  ( "jar".equalsIgnoreCase ( archiverName )  )  {             return new JarArchiveInputStream ( in ) ;         }else             if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {                 return new CpioArchiveInputStream ( in ) ;             }^140^^^^^125^155^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( "jar".equalsIgnoreCase ( archiverName )  )  {     return new JarArchiveInputStream ( in ) ; }else     if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {         return new CpioArchiveInputStream ( in ) ;     }^140^^^^^125^155^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^} else if  ( CpioArchiveInputStream.matches (  signatureLength )  )  {^142^143^^^^127^157^} else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^} else if  ( CpioArchiveInputStream.matches ( signature )  )  {^142^143^^^^127^157^} else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P5_Replace_Variable]^} else if  ( CpioArchiveInputStream.matches ( signatureLength, signature )  )  {^142^143^^^^127^157^} else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P6_Replace_Expression]^} else {^142^143^^^^127^157^} else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^} else if  ( CpioArchiveInputStream .ZipArchiveInputStream ( in )   )  {^142^143^^^^127^157^} else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P9_Replace_Statement]^} else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^142^143^^^^127^157^} else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P9_Replace_Statement]^} else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^142^143^^^^127^157^} else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P15_Unwrap_Block]^return new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(in);^142^143^144^145^^127^157^} else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  { return new CpioArchiveInputStream ( in ) ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P16_Remove_Block]^^142^143^144^145^^127^157^} else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  { return new CpioArchiveInputStream ( in ) ; }^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( "jar".equalsIgnoreCase ( archiverName )  )  {     return new JarArchiveOutputStream ( out ) ; }else     if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {         return new CpioArchiveOutputStream ( out ) ;     }^142^^^^^127^157^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveOutputStream ( out ) ; }^142^^^^^127^157^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( "jar".equalsIgnoreCase ( archiverName )  )  {     return new JarArchiveInputStream ( in ) ; }else     if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {         return new CpioArchiveInputStream ( in ) ;     }^142^^^^^127^157^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveInputStream ( in ) ; }^142^^^^^127^157^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^144^^^^^142^145^return new CpioArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^144^^^^^142^145^return new CpioArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^144^^^^^129^159^return new CpioArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^144^^^^^129^159^return new CpioArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( matches ( signature, signatureLength )  )  {     return new CpioArchiveInputStream ( in ) ; }^142^^^^^127^157^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^141^^^^^126^156^return new ArArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^141^^^^^126^156^return new ArArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveOutputStream ( out ) ; }^141^^^^^126^156^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveInputStream ( in ) ; }^141^^^^^126^156^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^}  if  ( CpioArchiveInputStream .ZipArchiveInputStream ( in )   )  {^142^143^^^^127^157^} else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^139^^^^^137^145^return new TarArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^139^^^^^137^145^return new TarArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^139^^^^^124^154^return new TarArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^139^^^^^124^154^return new TarArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P7_Replace_Invocation]^} else if  ( TarArchiveInputStream  .ZipArchiveInputStream ( in )   )  {^137^138^^^^122^152^} else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^136^^^^^134^145^return new JarArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^136^^^^^134^145^return new JarArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^}  if  ( TarArchiveInputStream  .ZipArchiveInputStream ( in )   )  {^137^138^^^^122^152^} else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^}  if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^142^143^^^^127^157^} else if  ( CpioArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^136^^^^^121^151^return new JarArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^136^^^^^121^151^return new JarArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P4_Replace_Constructor]^return return  new CpioArchiveOutputStream ( out )  ;^133^^^^^118^148^return new ZipArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^return  new CpioArchiveOutputStream ( out )  ;^133^^^^^118^148^return new ZipArchiveInputStream ( in ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveOutputStream ( out ) ; }^133^^^^^118^148^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P13_Insert_Block]^if  ( "cpio".equalsIgnoreCase ( archiverName )  )  {     return new CpioArchiveInputStream ( in ) ; }^133^^^^^118^148^[Delete]^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^}  if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^137^138^^^^122^152^} else if  ( TarArchiveInputStream .matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^}  if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^140^^^^^125^155^} else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^}  if  ( ArArchiveInputStream .ZipArchiveInputStream ( in )   )  {^140^^^^^125^155^} else if  ( ArArchiveInputStream.matches ( signature, signatureLength )  )  {^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P1_Replace_Type]^short  signatureLength = in.read ( signature ) ;^130^^^^^115^145^int signatureLength = in.read ( signature ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P5_Replace_Variable]^int inLength = signature.read ( signature ) ;^130^^^^^115^145^int signatureLength = in.read ( signature ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P7_Replace_Invocation]^int signatureLength = in .reset (  )  ;^130^^^^^115^145^int signatureLength = in.read ( signature ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P14_Delete_Statement]^^130^^^^^115^145^int signatureLength = in.read ( signature ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P7_Replace_Invocation]^in.mark (  ) ;^131^^^^^116^146^in.reset (  ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P14_Delete_Statement]^^131^^^^^116^146^in.reset (  ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P3_Replace_Literal]^throw new ArchiveException ( "raould not use reset and mark operations.", e ) ;^147^148^^^^132^162^throw new ArchiveException ( "Could not use reset and mark operations.", e ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P3_Replace_Literal]^throw new ArchiveException ( "eset and ma", e ) ;^147^148^^^^132^162^throw new ArchiveException ( "Could not use reset and mark operations.", e ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^throw new ArchiveException  (" ")  ; ;^147^148^^^^132^162^throw new ArchiveException ( "Could not use reset and mark operations.", e ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P11_Insert_Donor_Statement]^throw new ArchiveException ( "No Archiver found for the stream signature" ) ;throw new ArchiveException ( "Could not use reset and mark operations.", e ) ;^147^148^^^^132^162^throw new ArchiveException ( "Could not use reset and mark operations.", e ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P3_Replace_Literal]^throw new ArchiveException ( "No Archiver found for the stream signatureound for " ) ;^151^152^^^^136^166^throw new ArchiveException ( "No Archiver found for the stream signature" ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P3_Replace_Literal]^throw new ArchiveException ( "for theo Archiver found for the stream signature" ) ;^151^152^^^^136^166^throw new ArchiveException ( "No Archiver found for the stream signature" ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P8_Replace_Mix]^throw new ArchiveException  (" ")  ; ;^151^152^^^^136^166^throw new ArchiveException ( "No Archiver found for the stream signature" ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Archivername and stream must not be null." ) ;throw new ArchiveException ( "No Archiver found for the stream signature" ) ;^151^152^^^^136^166^throw new ArchiveException ( "No Archiver found for the stream signature" ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
[P11_Insert_Donor_Statement]^throw new ArchiveException ( "Could not use reset and mark operations.", e ) ;throw new ArchiveException ( "No Archiver found for the stream signature" ) ;^151^152^^^^136^166^throw new ArchiveException ( "No Archiver found for the stream signature" ) ;^[CLASS] ArchiveStreamFactory  [METHOD] createArchiveInputStream [RETURN_TYPE] ArchiveInputStream   InputStream in [VARIABLES] byte[]  signature  boolean  InputStream  in  IOException  e  int  signatureLength  
