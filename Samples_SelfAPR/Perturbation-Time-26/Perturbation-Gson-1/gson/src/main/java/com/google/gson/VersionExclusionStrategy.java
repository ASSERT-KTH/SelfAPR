[P1_Replace_Type]^private final int version;^29^^^^^24^34^private final double version;^[CLASS] VersionExclusionStrategy   [VARIABLES] 
[P2_Replace_Operator]^Preconditions.checkArgument ( version > 0.0D ) ;^32^^^^^31^34^Preconditions.checkArgument ( version >= 0.0D ) ;^[CLASS] VersionExclusionStrategy  [METHOD] <init> [RETURN_TYPE] VersionExclusionStrategy(double)   double version [VARIABLES] double  version  boolean  
[P14_Delete_Statement]^^32^^^^^31^34^Preconditions.checkArgument ( version >= 0.0D ) ;^[CLASS] VersionExclusionStrategy  [METHOD] <init> [RETURN_TYPE] VersionExclusionStrategy(double)   double version [VARIABLES] double  version  boolean  
[P8_Replace_Mix]^this.version =  null;^33^^^^^31^34^this.version = version;^[CLASS] VersionExclusionStrategy  [METHOD] <init> [RETURN_TYPE] VersionExclusionStrategy(double)   double version [VARIABLES] double  version  boolean  
[P5_Replace_Variable]^return !isValidVersion ( f.getAnnotation ( Since.class ) .getAnnotation ( Until.class )  ) ;^37^^^^^36^38^return !isValidVersion ( f.getAnnotation ( Since.class ) , f.getAnnotation ( Until.class )  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] shouldSkipField [RETURN_TYPE] boolean   FieldAttributes f [VARIABLES] double  version  FieldAttributes  f  boolean  
[P14_Delete_Statement]^^37^^^^^36^38^return !isValidVersion ( f.getAnnotation ( Since.class ) , f.getAnnotation ( Until.class )  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] shouldSkipField [RETURN_TYPE] boolean   FieldAttributes f [VARIABLES] double  version  FieldAttributes  f  boolean  
[P5_Replace_Variable]^return !isValidVersion ( f.getAnnotation ( Since.2 ) , f.getAnnotation ( Until.class )  ) ;^37^^^^^36^38^return !isValidVersion ( f.getAnnotation ( Since.class ) , f.getAnnotation ( Until.class )  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] shouldSkipField [RETURN_TYPE] boolean   FieldAttributes f [VARIABLES] double  version  FieldAttributes  f  boolean  
[P5_Replace_Variable]^return !isValidVersion ( clazz.getAnnotation ( Since.clazz ) , clazz.getAnnotation ( Until.class )  ) ;^41^^^^^40^42^return !isValidVersion ( clazz.getAnnotation ( Since.class ) , clazz.getAnnotation ( Until.class )  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] shouldSkipClass [RETURN_TYPE] boolean   Class<?> clazz [VARIABLES] double  version  Class  clazz  boolean  
[P5_Replace_Variable]^return !isValidVersion ( clazz.getAnnotation ( Since.class ) .getAnnotation ( Until.class )  ) ;^41^^^^^40^42^return !isValidVersion ( clazz.getAnnotation ( Since.class ) , clazz.getAnnotation ( Until.class )  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] shouldSkipClass [RETURN_TYPE] boolean   Class<?> clazz [VARIABLES] double  version  Class  clazz  boolean  
[P14_Delete_Statement]^^41^^^^^40^42^return !isValidVersion ( clazz.getAnnotation ( Since.class ) , clazz.getAnnotation ( Until.class )  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] shouldSkipClass [RETURN_TYPE] boolean   Class<?> clazz [VARIABLES] double  version  Class  clazz  boolean  
[P5_Replace_Variable]^return !isValidVersion ( this.getAnnotation ( Since.class ) , clazz.getAnnotation ( Until.class )  ) ;^41^^^^^40^42^return !isValidVersion ( clazz.getAnnotation ( Since.class ) , clazz.getAnnotation ( Until.class )  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] shouldSkipClass [RETURN_TYPE] boolean   Class<?> clazz [VARIABLES] double  version  Class  clazz  boolean  
[P2_Replace_Operator]^return  ( isValidSince ( since )  || isValidUntil ( until )  ) ;^45^^^^^44^46^return  ( isValidSince ( since )  && isValidUntil ( until )  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] isValidVersion [RETURN_TYPE] boolean   Since since Until until [VARIABLES] Since  since  boolean  double  version  Until  until  
[P5_Replace_Variable]^return  ( isValidSince ( until )  && isValidUntil ( since )  ) ;^45^^^^^44^46^return  ( isValidSince ( since )  && isValidUntil ( until )  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] isValidVersion [RETURN_TYPE] boolean   Since since Until until [VARIABLES] Since  since  boolean  double  version  Until  until  
[P7_Replace_Invocation]^return  ( isValidUntil ( since )  && isValidUntil ( until )  ) ;^45^^^^^44^46^return  ( isValidSince ( since )  && isValidUntil ( until )  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] isValidVersion [RETURN_TYPE] boolean   Since since Until until [VARIABLES] Since  since  boolean  double  version  Until  until  
[P7_Replace_Invocation]^return  ( isValidSince ( since )  && isValidSince ( until )  ) ;^45^^^^^44^46^return  ( isValidSince ( since )  && isValidUntil ( until )  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] isValidVersion [RETURN_TYPE] boolean   Since since Until until [VARIABLES] Since  since  boolean  double  version  Until  until  
[P14_Delete_Statement]^^45^^^^^44^46^return  ( isValidSince ( since )  && isValidUntil ( until )  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] isValidVersion [RETURN_TYPE] boolean   Since since Until until [VARIABLES] Since  since  boolean  double  version  Until  until  
[P2_Replace_Operator]^if  ( annotation == null )  {^49^^^^^48^56^if  ( annotation != null )  {^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P6_Replace_Expression]^if  ( annotationVersion > version )  {^49^^^^^48^56^if  ( annotation != null )  {^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P8_Replace_Mix]^if  ( annotation != false )  {^49^^^^^48^56^if  ( annotation != null )  {^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P15_Unwrap_Block]^double annotationVersion = annotation.value(); if (annotationVersion > (version)) {    return false;};^49^50^51^52^53^48^56^if  ( annotation != null )  { double annotationVersion = annotation.value (  ) ; if  ( annotationVersion > version )  { return false; }^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P16_Remove_Block]^^49^50^51^52^53^48^56^if  ( annotation != null )  { double annotationVersion = annotation.value (  ) ; if  ( annotationVersion > version )  { return false; }^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P13_Insert_Block]^if  ( annotation != null )  {     double annotationVersion = annotation.value (  ) ;     if  ( annotationVersion <=  ( version )  )  {         return false;     } }^49^^^^^48^56^[Delete]^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P2_Replace_Operator]^if  ( annotationVersion >= version )  {^51^^^^^48^56^if  ( annotationVersion > version )  {^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P5_Replace_Variable]^if  ( version > annotationVersion )  {^51^^^^^48^56^if  ( annotationVersion > version )  {^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P9_Replace_Statement]^if  ( annotationVersion <= version )  {^51^^^^^48^56^if  ( annotationVersion > version )  {^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P15_Unwrap_Block]^return false;^51^52^53^^^48^56^if  ( annotationVersion > version )  { return false; }^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P16_Remove_Block]^^51^52^53^^^48^56^if  ( annotationVersion > version )  { return false; }^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P13_Insert_Block]^if  ( annotationVersion <=  ( version )  )  {     return false; }^51^^^^^48^56^[Delete]^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P3_Replace_Literal]^return true;^52^^^^^48^56^return false;^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P1_Replace_Type]^int annotationVersion = annotation.value (  ) ;^50^^^^^48^56^double annotationVersion = annotation.value (  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P12_Insert_Condition]^if  ( annotationVersion > version )  { double annotationVersion = annotation.value (  ) ; }^50^^^^^48^56^double annotationVersion = annotation.value (  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P12_Insert_Condition]^if  ( annotationVersion <= version )  { double annotationVersion = annotation.value (  ) ; }^50^^^^^48^56^double annotationVersion = annotation.value (  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P14_Delete_Statement]^^50^^^^^48^56^double annotationVersion = annotation.value (  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P2_Replace_Operator]^if  ( annotationVersion == version )  {^51^^^^^48^56^if  ( annotationVersion > version )  {^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P3_Replace_Literal]^return false;^55^^^^^48^56^return true;^[CLASS] VersionExclusionStrategy  [METHOD] isValidSince [RETURN_TYPE] boolean   Since annotation [VARIABLES] Since  annotation  double  annotationVersion  version  boolean  
[P2_Replace_Operator]^if  ( annotation == null )  {^59^^^^^58^66^if  ( annotation != null )  {^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P6_Replace_Expression]^if  ( annotationVersion <= version )  {^59^^^^^58^66^if  ( annotation != null )  {^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P8_Replace_Mix]^if  ( annotation != false )  {^59^^^^^58^66^if  ( annotation != null )  {^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P15_Unwrap_Block]^double annotationVersion = annotation.value(); if (annotationVersion <= (version)) {    return false;};^59^60^61^62^63^58^66^if  ( annotation != null )  { double annotationVersion = annotation.value (  ) ; if  ( annotationVersion <= version )  { return false; }^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P16_Remove_Block]^^59^60^61^62^63^58^66^if  ( annotation != null )  { double annotationVersion = annotation.value (  ) ; if  ( annotationVersion <= version )  { return false; }^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P13_Insert_Block]^if  ( annotation != null )  {     double annotationVersion = annotation.value (  ) ;     if  ( annotationVersion >  ( version )  )  {         return false;     } }^59^^^^^58^66^[Delete]^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P2_Replace_Operator]^if  ( annotationVersion < version )  {^61^^^^^58^66^if  ( annotationVersion <= version )  {^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P5_Replace_Variable]^if  ( version <= annotationVersion )  {^61^^^^^58^66^if  ( annotationVersion <= version )  {^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P9_Replace_Statement]^if  ( annotationVersion > version )  {^61^^^^^58^66^if  ( annotationVersion <= version )  {^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P15_Unwrap_Block]^return false;^61^62^63^^^58^66^if  ( annotationVersion <= version )  { return false; }^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P16_Remove_Block]^^61^62^63^^^58^66^if  ( annotationVersion <= version )  { return false; }^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P13_Insert_Block]^if  ( annotationVersion >  ( version )  )  {     return false; }^61^^^^^58^66^[Delete]^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P3_Replace_Literal]^return true;^62^^^^^58^66^return false;^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P1_Replace_Type]^int annotationVersion = annotation.value (  ) ;^60^^^^^58^66^double annotationVersion = annotation.value (  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P12_Insert_Condition]^if  ( annotationVersion > version )  { double annotationVersion = annotation.value (  ) ; }^60^^^^^58^66^double annotationVersion = annotation.value (  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P12_Insert_Condition]^if  ( annotationVersion <= version )  { double annotationVersion = annotation.value (  ) ; }^60^^^^^58^66^double annotationVersion = annotation.value (  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P14_Delete_Statement]^^60^^^^^58^66^double annotationVersion = annotation.value (  ) ;^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
[P3_Replace_Literal]^return false;^65^^^^^58^66^return true;^[CLASS] VersionExclusionStrategy  [METHOD] isValidUntil [RETURN_TYPE] boolean   Until annotation [VARIABLES] double  annotationVersion  version  Until  annotation  boolean  
