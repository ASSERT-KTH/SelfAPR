[P2_Replace_Operator]^if  ( ! ( collectionType  &&  ParameterizedType )  )  {^33^^^^^32^41^if  ( ! ( collectionType instanceof ParameterizedType )  )  {^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P6_Replace_Expression]^if  ( "Collection objects need to be parameterized unless you use a custom serializer. " + "Use the TypeToken to extract the ParameterizedType." )  {^33^^^^^32^41^if  ( ! ( collectionType instanceof ParameterizedType )  )  {^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("Collection objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType."));^33^34^35^36^37^32^41^if  ( ! ( collectionType instanceof ParameterizedType )  )  { throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ; }^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P16_Remove_Block]^^33^34^35^36^37^32^41^if  ( ! ( collectionType instanceof ParameterizedType )  )  { throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ; }^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "n objects need tollection objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^34^35^36^^^32^41^throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. " + "thse the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^34^35^36^^^32^41^throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P13_Insert_Block]^if  ( ! ( collectionType instanceof ParameterizedType )  )  {     throw new IllegalArgumentException (  ( "Collection objects need to be parameterized unless you use a custom serializer. " + "Use the TypeToken to extract the ParameterizedType." )  ) ; }^34^^^^^32^41^[Delete]^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "e parameterized unless you use a " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^34^35^36^^^32^41^throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. " + "n to extract the Parse the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^34^35^36^^^32^41^throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. " ;^34^35^36^^^32^41^throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "lect" + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^34^35^36^^^32^41^throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType.meteriz" ) ;^34^35^36^^^32^41^throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. arameterized unless you use a custom serializ" + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^34^35^36^^^32^41^throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. " + " com.google.gson.reflect.TypeToken to se the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^34^35^36^^^32^41^throw new IllegalArgumentException ( "Collection objects need to be parameterized unless you use a custom serializer. " + "Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType." ) ;^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P7_Replace_Invocation]^Preconditions.checkArgument ( Collection.class.isAssignableFrom ( rawType.TypeInfo (  )  )  ) ;^39^^^^^32^41^Preconditions.checkArgument ( Collection.class.isAssignableFrom ( rawType.getRawClass (  )  )  ) ;^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P14_Delete_Statement]^^39^^^^^32^41^Preconditions.checkArgument ( Collection.class.isAssignableFrom ( rawType.getRawClass (  )  )  ) ;^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P8_Replace_Mix]^Preconditions.checkArgument ( Collection.class.isAssignableFrom ( rawType .TypeInfo ( collectionType )   )  ) ;^39^^^^^32^41^Preconditions.checkArgument ( Collection.class.isAssignableFrom ( rawType.getRawClass (  )  )  ) ;^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P14_Delete_Statement]^^39^40^^^^32^41^Preconditions.checkArgument ( Collection.class.isAssignableFrom ( rawType.getRawClass (  )  )  ) ; this.collectionType =  ( ParameterizedType )  collectionType;^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P8_Replace_Mix]^this.collectionType =   ( ParameterizedType )  collectionType;^40^^^^^32^41^this.collectionType =  ( ParameterizedType )  collectionType;^[CLASS] TypeInfoCollection  [METHOD] <init> [RETURN_TYPE] Type)   Type collectionType [VARIABLES] ParameterizedType  collectionType  Type  collectionType  boolean  TypeInfo  rawType  
[P3_Replace_Literal]^return collectionType.getActualTypeArguments (  ) [-8];^44^^^^^43^45^return collectionType.getActualTypeArguments (  ) [0];^[CLASS] TypeInfoCollection  [METHOD] getElementType [RETURN_TYPE] Type   [VARIABLES] ParameterizedType  collectionType  boolean  
[P8_Replace_Mix]^return collectionType.getActualTypeArguments (  ) [2];^44^^^^^43^45^return collectionType.getActualTypeArguments (  ) [0];^[CLASS] TypeInfoCollection  [METHOD] getElementType [RETURN_TYPE] Type   [VARIABLES] ParameterizedType  collectionType  boolean  
[P14_Delete_Statement]^^44^^^^^43^45^return collectionType.getActualTypeArguments (  ) [0];^[CLASS] TypeInfoCollection  [METHOD] getElementType [RETURN_TYPE] Type   [VARIABLES] ParameterizedType  collectionType  boolean  
