[P8_Replace_Mix]^private static final Logger logger ;^37^38^^^^37^38^private static final Logger logger = Logger.getLogger ( ParameterizedTypeHandlerMap.class.getName (  )  ) ;^[CLASS] ParameterizedTypeHandlerMap   [VARIABLES] 
[P8_Replace_Mix]^private final Map<Type, T> map ;^39^^^^^34^44^private final Map<Type, T> map = new HashMap<Type, T> (  ) ;^[CLASS] ParameterizedTypeHandlerMap   [VARIABLES] 
[P8_Replace_Mix]^private final List<Pair<Class<?>, T>> typeHierarchyList ;^40^^^^^35^45^private final List<Pair<Class<?>, T>> typeHierarchyList = new ArrayList<Pair<Class<?>, T>> (  ) ;^[CLASS] ParameterizedTypeHandlerMap   [VARIABLES] 
[P3_Replace_Literal]^private boolean modifiable = false;^41^^^^^36^46^private boolean modifiable = true;^[CLASS] ParameterizedTypeHandlerMap   [VARIABLES] 
[P8_Replace_Mix]^private boolean modifiable ;^41^^^^^36^46^private boolean modifiable = true;^[CLASS] ParameterizedTypeHandlerMap   [VARIABLES] 
[P4_Replace_Constructor]^Pair<Class<?>, T> pair = new Pair<Class<?>, T> (  value ) ;^44^^^^^43^46^Pair<Class<?>, T> pair = new Pair<Class<?>, T> ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?> typeOfT T value [VARIABLES] boolean  modifiable  T  value  List  typeHierarchyList  Class  typeOfT  Logger  logger  Map  map  Pair  pair  
[P4_Replace_Constructor]^Pair<Class<?>, T> pair = new Pair<Class<?>, T> ( typeOfT ) ;^44^^^^^43^46^Pair<Class<?>, T> pair = new Pair<Class<?>, T> ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?> typeOfT T value [VARIABLES] boolean  modifiable  T  value  List  typeHierarchyList  Class  typeOfT  Logger  logger  Map  map  Pair  pair  
[P5_Replace_Variable]^Pair<Class<?>, T> pair = new Pair<Class<?>, T> ( value, typeOfT ) ;^44^^^^^43^46^Pair<Class<?>, T> pair = new Pair<Class<?>, T> ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?> typeOfT T value [VARIABLES] boolean  modifiable  T  value  List  typeHierarchyList  Class  typeOfT  Logger  logger  Map  map  Pair  pair  
[P8_Replace_Mix]^Pair<Class<?>, T> pair = new Pair<Class<?>, T> ( null, value ) ;^44^^^^^43^46^Pair<Class<?>, T> pair = new Pair<Class<?>, T> ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?> typeOfT T value [VARIABLES] boolean  modifiable  T  value  List  typeHierarchyList  Class  typeOfT  Logger  logger  Map  map  Pair  pair  
[P7_Replace_Invocation]^getHandlerForTypeHierarchy ( pair ) ;^45^^^^^43^46^registerForTypeHierarchy ( pair ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?> typeOfT T value [VARIABLES] boolean  modifiable  T  value  List  typeHierarchyList  Class  typeOfT  Logger  logger  Map  map  Pair  pair  
[P14_Delete_Statement]^^45^^^^^43^46^registerForTypeHierarchy ( pair ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?> typeOfT T value [VARIABLES] boolean  modifiable  T  value  List  typeHierarchyList  Class  typeOfT  Logger  logger  Map  map  Pair  pair  
[P11_Insert_Donor_Statement]^handler = getHandlerForTypeHierarchy ( rawClass ) ;registerForTypeHierarchy ( pair ) ;^45^^^^^43^46^registerForTypeHierarchy ( pair ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?> typeOfT T value [VARIABLES] boolean  modifiable  T  value  List  typeHierarchyList  Class  typeOfT  Logger  logger  Map  map  Pair  pair  
[P11_Insert_Donor_Statement]^registerForTypeHierarchy ( entry ) ;registerForTypeHierarchy ( pair ) ;^45^^^^^43^46^registerForTypeHierarchy ( pair ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?> typeOfT T value [VARIABLES] boolean  modifiable  T  value  List  typeHierarchyList  Class  typeOfT  Logger  logger  Map  map  Pair  pair  
[P11_Insert_Donor_Statement]^copy.registerForTypeHierarchy ( entry ) ;registerForTypeHierarchy ( pair ) ;^45^^^^^43^46^registerForTypeHierarchy ( pair ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?> typeOfT T value [VARIABLES] boolean  modifiable  T  value  List  typeHierarchyList  Class  typeOfT  Logger  logger  Map  map  Pair  pair  
[P8_Replace_Mix]^if  ( modifiable )  {^49^^^^^48^66^if  ( !modifiable )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException("Attempted to modify an unmodifiable map.");^49^50^51^^^48^66^if  ( !modifiable )  { throw new IllegalStateException  (" ")  ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P16_Remove_Block]^^49^50^51^^^48^66^if  ( !modifiable )  { throw new IllegalStateException  (" ")  ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P13_Insert_Block]^if  ( ! ( modifiable )  )  {     throw new IllegalStateException ( "Attempted to modify an unmodifiable map." ) ; }^50^^^^^48^66^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P8_Replace_Mix]^return ;^50^^^^^48^66^throw new IllegalStateException  (" ")  ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P1_Replace_Type]^short  index = getIndexOfSpecificHandlerForTypeHierarchy ( pair.first ) ;^52^^^^^48^66^int index = getIndexOfSpecificHandlerForTypeHierarchy ( pair.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P7_Replace_Invocation]^int index = getHandlerForTypeHierarchy ( pair.first ) ;^52^^^^^48^66^int index = getIndexOfSpecificHandlerForTypeHierarchy ( pair.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P11_Insert_Donor_Statement]^int index = getIndexOfSpecificHandlerForTypeHierarchy ( entry.first ) ;int index = getIndexOfSpecificHandlerForTypeHierarchy ( pair.first ) ;^52^^^^^48^66^int index = getIndexOfSpecificHandlerForTypeHierarchy ( pair.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P14_Delete_Statement]^^52^53^54^55^56^48^66^int index = getIndexOfSpecificHandlerForTypeHierarchy ( pair.first ) ; if  ( index >= 0 )  { logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", pair.first ) ; typeHierarchyList.remove ( index ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P2_Replace_Operator]^if  ( index > 0 )  {^53^^^^^48^66^if  ( index >= 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^if  ( index >= index )  {^53^^^^^48^66^if  ( index >= 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P8_Replace_Mix]^if  ( index >= 0L )  {^53^^^^^48^66^if  ( index >= 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P9_Replace_Statement]^if  ( handler == null )  {^53^^^^^48^66^if  ( index >= 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P9_Replace_Statement]^if  ( index < 0 )  {^53^^^^^48^66^if  ( index >= 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P15_Unwrap_Block]^com.google.gson.ParameterizedTypeHandlerMap.logger.log(java.util.logging.Level.WARNING, "Overriding the existing type handler for {0}", pair.first); typeHierarchyList.remove(index);^53^54^55^56^^48^66^if  ( index >= 0 )  { logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", pair.first ) ; typeHierarchyList.remove ( index ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P16_Remove_Block]^^53^54^55^56^^48^66^if  ( index >= 0 )  { logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", pair.first ) ; typeHierarchyList.remove ( index ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P13_Insert_Block]^if  ( hasSpecificHandlerFor ( typeOfT )  )  {     log ( WARNING, "Overriding the existing type handler for {0}", typeOfT ) ; }^53^^^^^48^66^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^logger.log ( Level.WARNING, "ridinverriding the existing type handler for {0}", pair.first ) ;^54^^^^^48^66^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", pair.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P5_Replace_Variable]^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}".first ) ;^54^^^^^48^66^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", pair.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P5_Replace_Variable]^logger.log ( Level. "Overriding the existing type handler for {0}", pair.first ) ;^54^^^^^48^66^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", pair.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P5_Replace_Variable]^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}" ) ;^54^^^^^48^66^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", pair.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P14_Delete_Statement]^^54^55^56^^^48^66^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", pair.first ) ; typeHierarchyList.remove ( index ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P13_Insert_Block]^if  ( hasSpecificHandlerFor ( typeOfT )  )  {     log ( WARNING, "Overriding the existing type handler for {0}", typeOfT ) ; }^54^^^^^48^66^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P13_Insert_Block]^if  ( index >= 0 )  {     log ( WARNING, "Overriding the existing type handler for {0}", pair.first ) ;     typeHierarchyList.remove ( index ) ; }^54^^^^^48^66^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P7_Replace_Invocation]^typeHierarchyList.get ( index ) ;^55^^^^^48^66^typeHierarchyList.remove ( index ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P14_Delete_Statement]^^55^^^^^48^66^typeHierarchyList.remove ( index ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P11_Insert_Donor_Statement]^typeHierarchyList.add ( 0, pair ) ;typeHierarchyList.remove ( index ) ;^55^^^^^48^66^typeHierarchyList.remove ( index ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^logger.log ( Level.WARNING, "ng verriding the existing type handler for {0}", pair.first ) ;^54^^^^^48^66^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", pair.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P8_Replace_Mix]^logger .getLogger ( null )  ;^54^^^^^48^66^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", pair.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P7_Replace_Invocation]^index = getHandlerForTypeHierarchy ( pair.first ) ;^57^^^^^48^66^index = getIndexOfAnOverriddenHandler ( pair.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P8_Replace_Mix]^index =  getIndexOfAnOverriddenHandler ( null.first ) ;^57^^^^^48^66^index = getIndexOfAnOverriddenHandler ( pair.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P14_Delete_Statement]^^57^^^^^48^66^index = getIndexOfAnOverriddenHandler ( pair.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P11_Insert_Donor_Statement]^int index = getIndexOfSpecificHandlerForTypeHierarchy ( pair.first ) ;index = getIndexOfAnOverriddenHandler ( pair.first ) ;^57^^^^^48^66^index = getIndexOfAnOverriddenHandler ( pair.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P11_Insert_Donor_Statement]^int index = getIndexOfSpecificHandlerForTypeHierarchy ( entry.first ) ;index = getIndexOfAnOverriddenHandler ( pair.first ) ;^57^^^^^48^66^index = getIndexOfAnOverriddenHandler ( pair.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P2_Replace_Operator]^if  ( index > 0 )  {^58^^^^^48^66^if  ( index >= 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^if  ( index >= 4 )  {^58^^^^^48^66^if  ( index >= 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P6_Replace_Expression]^if  (  (  ( "The specified type handler for type " +  ( pair.first )  )  + " hides the previously registered type hierarchy handler for " )  +  ( typeHierarchyList.get ( index ) .first )  + ". Gson does not allow this." )  {^58^^^^^48^66^if  ( index >= 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P6_Replace_Expression]^if  (  ( "The specified type handler for type " +  ( pair.first )  )  + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first )  {^58^^^^^48^66^if  ( index >= 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P6_Replace_Expression]^if  ( "The specified type handler for type " +  ( pair.first )  + " hides the previously registered type hierarchy handler for " )  {^58^^^^^48^66^if  ( index >= 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P6_Replace_Expression]^if  ( "The specified type handler for type " + pair.first )  {^58^^^^^48^66^if  ( index >= 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P8_Replace_Mix]^if  ( index >= 1 )  {^58^^^^^48^66^if  ( index >= 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P9_Replace_Statement]^if  ( handler == null )  {^58^^^^^48^66^if  ( index >= 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P9_Replace_Statement]^if  ( index < 0 )  {^58^^^^^48^66^if  ( index >= 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((((("The specified type handler for type " + (pair.first)) + " hides the previously registered type hierarchy handler for ") + (typeHierarchyList.get(index).first)) + ". Gson does not allow this."));^58^59^60^61^62^48^66^if  ( index >= 0 )  { throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P16_Remove_Block]^^58^59^60^61^62^48^66^if  ( index >= 0 )  { throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "The specified type handler for type "  <=  pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " handler for " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " the p" + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this.. Gson d" ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P7_Replace_Invocation]^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.remove ( index ) .first + ". Gson does not allow this." ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P13_Insert_Block]^if  ( index >= 0 )  {     throw new IllegalArgumentException (  (  (  (  ( "The specified type handler for type " +  ( pair.first )  )  + " hides the previously registered type hierarchy handler for " )  +  ( typeHierarchyList.get ( index ) .first )  )  + ". Gson does not allow this." )  ) ; }^59^^^^^48^66^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "The specified type handler for type "  !=  pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "The specified type handler for type T" + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for sly registered type hierarchy handler f" + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this.allow t" ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P5_Replace_Variable]^+ index.get ( typeHierarchyList ) .first + ". Gson does not allow this." ) ;^61^^^^^48^66^+ typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P7_Replace_Invocation]^+ typeHierarchyList.remove ( index ) .first + ". Gson does not allow this." ) ;^61^^^^^48^66^+ typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P14_Delete_Statement]^^61^^^^^48^66^+ typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "The specified type handler for type "  &&  pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " type handlehe specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + "type hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this.ot" ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "The specified type handler for type "  &  pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ler fo" + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + "hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + "not allow thi" ) ;^59^60^61^^^48^66^throw new IllegalArgumentException ( "The specified type handler for type " + pair.first + " hides the previously registered type hierarchy handler for " + typeHierarchyList.get ( index ) .first + ". Gson does not allow this." ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P3_Replace_Literal]^typeHierarchyList.add ( index, pair ) ;^65^^^^^48^66^typeHierarchyList.add ( 0, pair ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P5_Replace_Variable]^typeHierarchyList.add ( 0 ) ;^65^^^^^48^66^typeHierarchyList.add ( 0, pair ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P14_Delete_Statement]^^65^^^^^48^66^typeHierarchyList.add ( 0, pair ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P11_Insert_Donor_Statement]^typeHierarchyList.remove ( index ) ;typeHierarchyList.add ( 0, pair ) ;^65^^^^^48^66^typeHierarchyList.add ( 0, pair ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerForTypeHierarchy [RETURN_TYPE] void   Class<?>, T> pair [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  int  index  Pair  pair  
[P15_Unwrap_Block]^return i;^71^72^73^^^68^76^if  ( type.isAssignableFrom ( entry.first )  )  { return i; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P16_Remove_Block]^^71^72^73^^^68^76^if  ( type.isAssignableFrom ( entry.first )  )  { return i; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P13_Insert_Block]^if  ( type.equals ( typeHierarchyList.get ( i ) .first )  )  {     return i; }^71^^^^^68^76^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P13_Insert_Block]^if  ( isAssignableFrom ( type )  )  {     return entry.second; }^71^^^^^68^76^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P1_Replace_Type]^for  (  short  i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^69^^^^^68^76^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P2_Replace_Operator]^for  ( int i = typeHierarchyList.size (  ) -1; i > 0; --i )  {^69^^^^^68^76^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P3_Replace_Literal]^for  ( int i = typeHierarchyList.size (  ) --7; i >= 0; --i )  {^69^^^^^68^76^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P3_Replace_Literal]^for  ( int i = typeHierarchyList.size (  ) -1; i >= i; --i )  {^69^^^^^68^76^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P3_Replace_Literal]^for  ( int i = typeHierarchyList.size() + 5 -1; i >= 0; --i )  {^69^^^^^68^76^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P7_Replace_Invocation]^if  ( type .getName (  )   )  {^71^^^^^68^76^if  ( type.isAssignableFrom ( entry.first )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P5_Replace_Variable]^Pair<Class<?>, T> entry = i.get ( typeHierarchyList ) ;^70^^^^^68^76^Pair<Class<?>, T> entry = typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P7_Replace_Invocation]^Pair<Class<?>, T> entry = typeHierarchyList.remove ( i ) ;^70^^^^^68^76^Pair<Class<?>, T> entry = typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P8_Replace_Mix]^Pair<Class<?>, T> entry = 0.remove ( i ) ;^70^^^^^68^76^Pair<Class<?>, T> entry = typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P14_Delete_Statement]^^70^^^^^68^76^Pair<Class<?>, T> entry = typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P11_Insert_Donor_Statement]^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;Pair<Class<?>, T> entry = typeHierarchyList.get ( i ) ;^70^^^^^68^76^Pair<Class<?>, T> entry = typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P13_Insert_Block]^if  ( type.isAssignableFrom ( entry.first )  )  {     return i; }^71^^^^^68^76^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P1_Replace_Type]^for  (  long  i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^69^^^^^68^76^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P3_Replace_Literal]^for  ( int i = typeHierarchyList.size (  ) -i; i >= 0; --i )  {^69^^^^^68^76^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P3_Replace_Literal]^for  ( int i = typeHierarchyList.size() + 7 -1; i >= 0; --i )  {^69^^^^^68^76^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P3_Replace_Literal]^for  ( int i = typeHierarchyList.size() - 0 -1; i >= 0; --i )  {^69^^^^^68^76^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P8_Replace_Mix]^for  ( int i = typeHierarchyList .remove ( i )  -1; i >= 0; --i )  {^69^^^^^68^76^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P14_Delete_Statement]^^69^70^71^72^73^68^76^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  { Pair<Class<?>, T> entry = typeHierarchyList.get ( i ) ; if  ( type.isAssignableFrom ( entry.first )  )  { return i; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P3_Replace_Literal]^return -i;^75^^^^^68^76^return -1;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P8_Replace_Mix]^return -4;^75^^^^^68^76^return -1;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfAnOverriddenHandler [RETURN_TYPE] int   Class<?> type [VARIABLES] boolean  modifiable  List  typeHierarchyList  Class  type  Logger  logger  Map  map  int  i  Pair  entry  
[P8_Replace_Mix]^if  ( modifiable )  {^79^^^^^78^86^if  ( !modifiable )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException("Attempted to modify an unmodifiable map.");^79^80^81^^^78^86^if  ( !modifiable )  { throw new IllegalStateException  (" ")  ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P16_Remove_Block]^^79^80^81^^^78^86^if  ( !modifiable )  { throw new IllegalStateException  (" ")  ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P13_Insert_Block]^if  ( ! ( modifiable )  )  {     throw new IllegalStateException ( "Attempted to modify an unmodifiable map." ) ; }^80^^^^^78^86^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P7_Replace_Invocation]^if  ( getHandlerFor ( typeOfT )  )  {^82^^^^^78^86^if  ( hasSpecificHandlerFor ( typeOfT )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P15_Unwrap_Block]^com.google.gson.ParameterizedTypeHandlerMap.logger.log(java.util.logging.Level.WARNING, "Overriding the existing type handler for {0}", typeOfT);^82^83^84^^^78^86^if  ( hasSpecificHandlerFor ( typeOfT )  )  { logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", typeOfT ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P16_Remove_Block]^^82^83^84^^^78^86^if  ( hasSpecificHandlerFor ( typeOfT )  )  { logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", typeOfT ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P13_Insert_Block]^if  ( index >= 0 )  {     log ( WARNING, "Overriding the existing type handler for {0}", pair.first ) ;     typeHierarchyList.remove ( index ) ; }^82^^^^^78^86^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P3_Replace_Literal]^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}existing type", typeOfT ) ;^83^^^^^78^86^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", typeOfT ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P5_Replace_Variable]^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}" ) ;^83^^^^^78^86^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", typeOfT ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P5_Replace_Variable]^logger.log ( Level. "Overriding the existing type handler for {0}", typeOfT ) ;^83^^^^^78^86^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", typeOfT ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P14_Delete_Statement]^^83^84^^^^78^86^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", typeOfT ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P13_Insert_Block]^if  ( hasSpecificHandlerFor ( typeOfT )  )  {     log ( WARNING, "Overriding the existing type handler for {0}", typeOfT ) ; }^83^^^^^78^86^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P13_Insert_Block]^if  ( index >= 0 )  {     log ( WARNING, "Overriding the existing type handler for {0}", pair.first ) ;     typeHierarchyList.remove ( index ) ; }^83^^^^^78^86^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P3_Replace_Literal]^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}iding the", typeOfT ) ;^83^^^^^78^86^logger.log ( Level.WARNING, "Overriding the existing type handler for {0}", typeOfT ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P5_Replace_Variable]^map.put (  value ) ;^85^^^^^78^86^map.put ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P5_Replace_Variable]^map.put ( typeOfT ) ;^85^^^^^78^86^map.put ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P14_Delete_Statement]^^85^^^^^78^86^map.put ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P11_Insert_Donor_Statement]^register ( typeOfT, value ) ;map.put ( typeOfT, value ) ;^85^^^^^78^86^map.put ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] register [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P8_Replace_Mix]^if  ( modifiable )  {^89^^^^^88^106^if  ( !modifiable )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException("Attempted to modify an unmodifiable map.");^89^90^91^^^88^106^if  ( !modifiable )  { throw new IllegalStateException  (" ")  ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P16_Remove_Block]^^89^90^91^^^88^106^if  ( !modifiable )  { throw new IllegalStateException  (" ")  ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P13_Insert_Block]^if  ( ! ( modifiable )  )  {     throw new IllegalStateException ( "Attempted to modify an unmodifiable map." ) ; }^90^^^^^88^106^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P7_Replace_Invocation]^if  ( !map.get ( entry.getKey (  )  )  )  {^93^^^^^88^106^if  ( !map.containsKey ( entry.getKey (  )  )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P7_Replace_Invocation]^if  ( !map .entrySet (  )   )  {^93^^^^^88^106^if  ( !map.containsKey ( entry.getKey (  )  )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P7_Replace_Invocation]^if  ( !map.containsKey ( entry .getValue (  )   )  )  {^93^^^^^88^106^if  ( !map.containsKey ( entry.getKey (  )  )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P9_Replace_Statement]^if  ( !map.containsKey ( typeOfT )  )  {^93^^^^^88^106^if  ( !map.containsKey ( entry.getKey (  )  )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P15_Unwrap_Block]^register(entry.getKey(), entry.getValue());^93^94^95^^^88^106^if  ( !map.containsKey ( entry.getKey (  )  )  )  { register ( entry.getKey (  ) , entry.getValue (  )  ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P16_Remove_Block]^^93^94^95^^^88^106^if  ( !map.containsKey ( entry.getKey (  )  )  )  { register ( entry.getKey (  ) , entry.getValue (  )  ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P13_Insert_Block]^if  ( ! ( map.containsKey ( typeOfT )  )  )  {     register ( typeOfT, value ) ; }^93^^^^^88^106^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P7_Replace_Invocation]^registerIfAbsent ( entry.getKey (  ) , entry.getValue (  )  ) ;^94^^^^^88^106^register ( entry.getKey (  ) , entry.getValue (  )  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P8_Replace_Mix]^register ( entry .getValue (  )  , entry.getValue (  )  ) ;^94^^^^^88^106^register ( entry.getKey (  ) , entry.getValue (  )  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P14_Delete_Statement]^^94^^^^^88^106^register ( entry.getKey (  ) , entry.getValue (  )  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P5_Replace_Variable]^for  ( Map.Entry<Type, T> entry : this.entrySet (  )  )  {^92^^^^^88^106^for  ( Map.Entry<Type, T> entry : other.map.entrySet (  )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P5_Replace_Variable]^for  ( Map.Entry<Type, T> entry : other.map.map.entrySet (  )  )  {^92^^^^^88^106^for  ( Map.Entry<Type, T> entry : other.map.entrySet (  )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P5_Replace_Variable]^for  ( Map.Entry<Type, T> entry : other.entrySet (  )  )  {^92^^^^^88^106^for  ( Map.Entry<Type, T> entry : other.map.entrySet (  )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P7_Replace_Invocation]^for  ( Map.Entry<Type, T> entry : other.map.get (  )  )  {^92^^^^^88^106^for  ( Map.Entry<Type, T> entry : other.map.entrySet (  )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P7_Replace_Invocation]^for  ( Map.Entry<Type, T> entry : other.map .containsKey ( null )   )  {^92^^^^^88^106^for  ( Map.Entry<Type, T> entry : other.map.entrySet (  )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P14_Delete_Statement]^^92^93^94^95^^88^106^for  ( Map.Entry<Type, T> entry : other.map.entrySet (  )  )  { if  ( !map.containsKey ( entry.getKey (  )  )  )  { register ( entry.getKey (  ) , entry.getValue (  )  ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P7_Replace_Invocation]^register ( entry.getKey (  ) , entry .getKey (  )   ) ;^94^^^^^88^106^register ( entry.getKey (  ) , entry.getValue (  )  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P2_Replace_Operator]^if  ( index == 0 )  {^102^^^^^88^106^if  ( index < 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P5_Replace_Variable]^if  ( i < 0 )  {^102^^^^^88^106^if  ( index < 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P8_Replace_Mix]^if  ( index < 0 >>> 4 )  {^102^^^^^88^106^if  ( index < 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P9_Replace_Statement]^if  ( index >= 0 )  {^102^^^^^88^106^if  ( index < 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P15_Unwrap_Block]^registerForTypeHierarchy(entry);^102^103^104^^^88^106^if  ( index < 0 )  { registerForTypeHierarchy ( entry ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P16_Remove_Block]^^102^103^104^^^88^106^if  ( index < 0 )  { registerForTypeHierarchy ( entry ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P13_Insert_Block]^if  ( handler == null )  {     handler = getHandlerForTypeHierarchy ( rawClass ) ; }^102^^^^^88^106^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P5_Replace_Variable]^registerForTypeHierarchy ( 2 ) ;^103^^^^^88^106^registerForTypeHierarchy ( entry ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P7_Replace_Invocation]^getHandlerForTypeHierarchy ( entry ) ;^103^^^^^88^106^registerForTypeHierarchy ( entry ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P14_Delete_Statement]^^103^^^^^88^106^registerForTypeHierarchy ( entry ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P11_Insert_Donor_Statement]^registerForTypeHierarchy ( pair ) ;registerForTypeHierarchy ( entry ) ;^103^^^^^88^106^registerForTypeHierarchy ( entry ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P11_Insert_Donor_Statement]^handler = getHandlerForTypeHierarchy ( rawClass ) ;registerForTypeHierarchy ( entry ) ;^103^^^^^88^106^registerForTypeHierarchy ( entry ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P11_Insert_Donor_Statement]^copy.registerForTypeHierarchy ( entry ) ;registerForTypeHierarchy ( entry ) ;^103^^^^^88^106^registerForTypeHierarchy ( entry ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P13_Insert_Block]^if  ( index < 0 )  {     registerForTypeHierarchy ( entry ) ; }^103^^^^^88^106^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P1_Replace_Type]^for  (  short  i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P2_Replace_Operator]^for  ( int i = other.typeHierarchyList.size (  ) -1; i > 0; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P3_Replace_Literal]^for  ( int i = other.typeHierarchyList.size (  ) -5; i >= 0; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P3_Replace_Literal]^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= -1; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P3_Replace_Literal]^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= i; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P3_Replace_Literal]^for  ( int i = other.typeHierarchyList.size() - 2 -1; i >= 0; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P7_Replace_Invocation]^for  ( int i = other.typeHierarchyList.get (  ) -1; i >= 0; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P7_Replace_Invocation]^for  ( int i = other.typeHierarchyList .remove ( index )  -1; i >= 0; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P3_Replace_Literal]^if  ( index < 6 )  {^102^^^^^88^106^if  ( index < 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P8_Replace_Mix]^if  ( index < 0L )  {^102^^^^^88^106^if  ( index < 0 )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P5_Replace_Variable]^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( index ) ;^100^^^^^88^106^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P5_Replace_Variable]^Pair<Class<?>, T> entry = this.get ( i ) ;^100^^^^^88^106^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P5_Replace_Variable]^Pair<Class<?>, T> entry = i.typeHierarchyList.get ( other ) ;^100^^^^^88^106^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P5_Replace_Variable]^Pair<Class<?>, T> entry = i.get ( other.typeHierarchyList ) ;^100^^^^^88^106^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P7_Replace_Invocation]^Pair<Class<?>, T> entry = other.typeHierarchyList.add ( i ) ;^100^^^^^88^106^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P1_Replace_Type]^long  index = getIndexOfSpecificHandlerForTypeHierarchy ( entry.first ) ;^101^^^^^88^106^int index = getIndexOfSpecificHandlerForTypeHierarchy ( entry.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P7_Replace_Invocation]^int index = getHandlerForTypeHierarchy ( entry.first ) ;^101^^^^^88^106^int index = getIndexOfSpecificHandlerForTypeHierarchy ( entry.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P11_Insert_Donor_Statement]^int index = getIndexOfSpecificHandlerForTypeHierarchy ( pair.first ) ;int index = getIndexOfSpecificHandlerForTypeHierarchy ( entry.first ) ;^101^^^^^88^106^int index = getIndexOfSpecificHandlerForTypeHierarchy ( entry.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P13_Insert_Block]^if  ( index < 0 )  {     registerForTypeHierarchy ( entry ) ; }^101^^^^^88^106^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P5_Replace_Variable]^Pair<Class<?>, T> entry = other.get ( i ) ;^100^^^^^88^106^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P14_Delete_Statement]^^100^^^^^88^106^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P11_Insert_Donor_Statement]^Pair<Class<?>, T> entry = typeHierarchyList.get ( i ) ;Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^100^^^^^88^106^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P14_Delete_Statement]^^101^102^103^104^^88^106^int index = getIndexOfSpecificHandlerForTypeHierarchy ( entry.first ) ; if  ( index < 0 )  { registerForTypeHierarchy ( entry ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P1_Replace_Type]^for  (  long  i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P3_Replace_Literal]^for  ( int i = other.typeHierarchyList.size (  ) -i; i >= 0; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P3_Replace_Literal]^for  ( int i = other.typeHierarchyList.size() + 0 -1; i >= 0; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P5_Replace_Variable]^for  ( int i = 3.size (  ) -1; i >= 0; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P5_Replace_Variable]^for  ( int i = other.typeHierarchyList.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P5_Replace_Variable]^for  ( int i = other.size (  ) -1; i >= 0; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P7_Replace_Invocation]^for  ( int i = other.typeHierarchyList .remove ( i )  -1; i >= 0; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P1_Replace_Type]^short  index = getIndexOfSpecificHandlerForTypeHierarchy ( entry.first ) ;^101^^^^^88^106^int index = getIndexOfSpecificHandlerForTypeHierarchy ( entry.first ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P3_Replace_Literal]^for  ( int i = other.typeHierarchyList.size() - 9 -1; i >= 0; --i )  {^99^^^^^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P14_Delete_Statement]^^99^100^101^102^103^88^106^for  ( int i = other.typeHierarchyList.size (  ) -1; i >= 0; --i )  { Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ; int index = getIndexOfSpecificHandlerForTypeHierarchy ( entry.first ) ; if  ( index < 0 )  { registerForTypeHierarchy ( entry ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P5_Replace_Variable]^Pair<Class<?>, T> entry = 3.get ( i ) ;^100^^^^^88^106^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P8_Replace_Mix]^Pair<Class<?>, T> entry = other.typeHierarchyList.add ( index ) ;^100^^^^^88^106^Pair<Class<?>, T> entry = other.typeHierarchyList.get ( i ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   ParameterizedTypeHandlerMap<T> other [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  other  Map  map  int  i  index  Pair  entry  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException("Attempted to modify an unmodifiable map.");^109^110^111^^^108^115^if  ( !modifiable )  { throw new IllegalStateException  (" ")  ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P16_Remove_Block]^^109^110^111^^^108^115^if  ( !modifiable )  { throw new IllegalStateException  (" ")  ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P13_Insert_Block]^if  ( ! ( modifiable )  )  {     throw new IllegalStateException ( "Attempted to modify an unmodifiable map." ) ; }^110^^^^^108^115^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P7_Replace_Invocation]^if  ( !map.get ( typeOfT )  )  {^112^^^^^108^115^if  ( !map.containsKey ( typeOfT )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P7_Replace_Invocation]^if  ( !map .entrySet (  )   )  {^112^^^^^108^115^if  ( !map.containsKey ( typeOfT )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P9_Replace_Statement]^if  ( !map.containsKey ( entry.getKey (  )  )  )  {^112^^^^^108^115^if  ( !map.containsKey ( typeOfT )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P15_Unwrap_Block]^register(typeOfT, value);^112^113^114^^^108^115^if  ( !map.containsKey ( typeOfT )  )  { register ( typeOfT, value ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P16_Remove_Block]^^112^113^114^^^108^115^if  ( !map.containsKey ( typeOfT )  )  { register ( typeOfT, value ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P13_Insert_Block]^if  ( ! ( map.containsKey ( entry.getKey (  )  )  )  )  {     register ( entry.getKey (  ) , entry.getValue (  )  ) ; }^112^^^^^108^115^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P5_Replace_Variable]^register (  value ) ;^113^^^^^108^115^register ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P5_Replace_Variable]^register ( typeOfT ) ;^113^^^^^108^115^register ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P5_Replace_Variable]^register ( value, typeOfT ) ;^113^^^^^108^115^register ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P7_Replace_Invocation]^registerIfAbsent ( typeOfT, value ) ;^113^^^^^108^115^register ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P14_Delete_Statement]^^113^^^^^108^115^register ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P11_Insert_Donor_Statement]^map.put ( typeOfT, value ) ;register ( typeOfT, value ) ;^113^^^^^108^115^register ( typeOfT, value ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] registerIfAbsent [RETURN_TYPE] void   Type typeOfT T value [VARIABLES] List  typeHierarchyList  Type  typeOfT  boolean  modifiable  Logger  logger  T  value  Map  map  
[P3_Replace_Literal]^modifiable = true;^118^^^^^117^119^modifiable = false;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] makeUnmodifiable [RETURN_TYPE] void   [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  
[P11_Insert_Donor_Statement]^first = false;modifiable = false;^118^^^^^117^119^modifiable = false;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] makeUnmodifiable [RETURN_TYPE] void   [VARIABLES] List  typeHierarchyList  boolean  modifiable  Logger  logger  Map  map  
[P5_Replace_Variable]^T handler = 0.get ( type ) ;^122^^^^^121^134^T handler = map.get ( type ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P5_Replace_Variable]^T handler = type.get ( map ) ;^122^^^^^121^134^T handler = map.get ( type ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P7_Replace_Invocation]^T handler = map.containsKey ( type ) ;^122^^^^^121^134^T handler = map.get ( type ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P8_Replace_Mix]^T handler = map .remove ( this )  ;^122^^^^^121^134^T handler = map.get ( type ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P14_Delete_Statement]^^122^^^^^121^134^T handler = map.get ( type ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P2_Replace_Operator]^if  ( handler != null )  {^123^^^^^121^134^if  ( handler == null )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P6_Replace_Expression]^if  ( rawClass != type )  {^123^^^^^121^134^if  ( handler == null )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P8_Replace_Mix]^if  ( handler == false )  {^123^^^^^121^134^if  ( handler == null )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P9_Replace_Statement]^if  ( index >= 0 )  {^123^^^^^121^134^if  ( handler == null )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P15_Unwrap_Block]^java.lang.Class<?> rawClass = com.google.gson.TypeUtils.toRawClass(type); if (rawClass != type) {    handler = getHandlerFor(rawClass);}; if (handler == null) {    handler = getHandlerForTypeHierarchy(rawClass);};^123^124^125^126^127^121^134^if  ( handler == null )  { Class<?> rawClass = TypeUtils.toRawClass ( type ) ; if  ( rawClass != type )  { handler = getHandlerFor ( rawClass ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P16_Remove_Block]^^123^124^125^126^127^121^134^if  ( handler == null )  { Class<?> rawClass = TypeUtils.toRawClass ( type ) ; if  ( rawClass != type )  { handler = getHandlerFor ( rawClass ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P2_Replace_Operator]^if  ( rawClass == type )  {^125^^^^^121^134^if  ( rawClass != type )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P5_Replace_Variable]^if  ( type != rawClass )  {^125^^^^^121^134^if  ( rawClass != type )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P8_Replace_Mix]^if  ( rawClass = type )  {^125^^^^^121^134^if  ( rawClass != type )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P15_Unwrap_Block]^handler = getHandlerFor(rawClass);^125^126^127^^^121^134^if  ( rawClass != type )  { handler = getHandlerFor ( rawClass ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P16_Remove_Block]^^125^126^127^^^121^134^if  ( rawClass != type )  { handler = getHandlerFor ( rawClass ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P13_Insert_Block]^if  ( handler == null )  {     handler = getHandlerForTypeHierarchy ( rawClass ) ; }^125^^^^^121^134^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P7_Replace_Invocation]^handler = hasSpecificHandlerFor ( rawClass ) ;^126^^^^^121^134^handler = getHandlerFor ( rawClass ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P8_Replace_Mix]^handler =  getHandlerFor ( null ) ;^126^^^^^121^134^handler = getHandlerFor ( rawClass ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P11_Insert_Donor_Statement]^handler = getHandlerForTypeHierarchy ( rawClass ) ;handler = getHandlerFor ( rawClass ) ;^126^^^^^121^134^handler = getHandlerFor ( rawClass ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P13_Insert_Block]^if  ( rawClass != type )  {     handler = getHandlerFor ( rawClass ) ; }^126^^^^^121^134^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P14_Delete_Statement]^^126^^^^^121^134^handler = getHandlerFor ( rawClass ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P2_Replace_Operator]^if  ( handler != null )  {^128^^^^^121^134^if  ( handler == null )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P8_Replace_Mix]^if  ( handler == true )  {^128^^^^^121^134^if  ( handler == null )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P9_Replace_Statement]^if  ( index >= 0 )  {^128^^^^^121^134^if  ( handler == null )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P15_Unwrap_Block]^handler = getHandlerForTypeHierarchy(rawClass);^128^129^130^131^^121^134^if  ( handler == null )  {  handler = getHandlerForTypeHierarchy ( rawClass ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P16_Remove_Block]^^128^129^130^131^^121^134^if  ( handler == null )  {  handler = getHandlerForTypeHierarchy ( rawClass ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P13_Insert_Block]^if  ( rawClass != type )  {     handler = getHandlerFor ( rawClass ) ; }^128^^^^^121^134^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P13_Insert_Block]^if  ( index < 0 )  {     registerForTypeHierarchy ( entry ) ; }^128^^^^^121^134^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P7_Replace_Invocation]^handler = getIndexOfSpecificHandlerForTypeHierarchy ( rawClass ) ;^130^^^^^121^134^handler = getHandlerForTypeHierarchy ( rawClass ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P8_Replace_Mix]^handler =  getHandlerForTypeHierarchy ( null ) ;^130^^^^^121^134^handler = getHandlerForTypeHierarchy ( rawClass ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P11_Insert_Donor_Statement]^handler = getHandlerFor ( rawClass ) ;handler = getHandlerForTypeHierarchy ( rawClass ) ;^130^^^^^121^134^handler = getHandlerForTypeHierarchy ( rawClass ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P14_Delete_Statement]^^130^^^^^121^134^handler = getHandlerForTypeHierarchy ( rawClass ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P11_Insert_Donor_Statement]^registerForTypeHierarchy ( pair ) ;handler = getHandlerForTypeHierarchy ( rawClass ) ;^130^^^^^121^134^handler = getHandlerForTypeHierarchy ( rawClass ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P11_Insert_Donor_Statement]^int index = getIndexOfSpecificHandlerForTypeHierarchy ( pair.first ) ;handler = getHandlerForTypeHierarchy ( rawClass ) ;^130^^^^^121^134^handler = getHandlerForTypeHierarchy ( rawClass ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P11_Insert_Donor_Statement]^int index = getIndexOfSpecificHandlerForTypeHierarchy ( entry.first ) ;handler = getHandlerForTypeHierarchy ( rawClass ) ;^130^^^^^121^134^handler = getHandlerForTypeHierarchy ( rawClass ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P11_Insert_Donor_Statement]^registerForTypeHierarchy ( entry ) ;handler = getHandlerForTypeHierarchy ( rawClass ) ;^130^^^^^121^134^handler = getHandlerForTypeHierarchy ( rawClass ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P11_Insert_Donor_Statement]^copy.registerForTypeHierarchy ( entry ) ;handler = getHandlerForTypeHierarchy ( rawClass ) ;^130^^^^^121^134^handler = getHandlerForTypeHierarchy ( rawClass ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P14_Delete_Statement]^^124^^^^^121^134^Class<?> rawClass = TypeUtils.toRawClass ( type ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P8_Replace_Mix]^if  ( null != type )  {^125^^^^^121^134^if  ( rawClass != type )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P8_Replace_Mix]^handler = getHandlerFor ( 1 ) ;^126^^^^^121^134^handler = getHandlerFor ( rawClass ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P8_Replace_Mix]^if  ( handler == this )  {^128^^^^^121^134^if  ( handler == null )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P5_Replace_Variable]^handler = getHandlerForTypeHierarchy ( 2 ) ;^130^^^^^121^134^handler = getHandlerForTypeHierarchy ( rawClass ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerFor [RETURN_TYPE] T   Type type [VARIABLES] Type  type  boolean  modifiable  T  handler  List  typeHierarchyList  Class  rawClass  Logger  logger  Map  map  
[P8_Replace_Mix]^if  ( entry.first .getName (  )   )  {^138^^^^^136^143^if  ( entry.first.isAssignableFrom ( type )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerForTypeHierarchy [RETURN_TYPE] T   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  Pair  entry  
[P15_Unwrap_Block]^return entry.second;^138^139^140^^^136^143^if  ( entry.first.isAssignableFrom ( type )  )  { return entry.second; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerForTypeHierarchy [RETURN_TYPE] T   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  Pair  entry  
[P16_Remove_Block]^^138^139^140^^^136^143^if  ( entry.first.isAssignableFrom ( type )  )  { return entry.second; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerForTypeHierarchy [RETURN_TYPE] T   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  Pair  entry  
[P13_Insert_Block]^if  ( type.isAssignableFrom ( entry.first )  )  {     return i; }^138^^^^^136^143^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerForTypeHierarchy [RETURN_TYPE] T   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  Pair  entry  
[P8_Replace_Mix]^return true;^142^^^^^136^143^return null;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getHandlerForTypeHierarchy [RETURN_TYPE] T   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  Pair  entry  
[P5_Replace_Variable]^return type.containsKey ( map ) ;^146^^^^^145^147^return map.containsKey ( type ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] hasSpecificHandlerFor [RETURN_TYPE] boolean   Type type [VARIABLES] List  typeHierarchyList  Type  type  boolean  modifiable  Logger  logger  Map  map  
[P7_Replace_Invocation]^return map.get ( type ) ;^146^^^^^145^147^return map.containsKey ( type ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] hasSpecificHandlerFor [RETURN_TYPE] boolean   Type type [VARIABLES] List  typeHierarchyList  Type  type  boolean  modifiable  Logger  logger  Map  map  
[P12_Insert_Condition]^if  ( !map.containsKey ( typeOfT )  )  { return map.containsKey ( type ) ; }^146^^^^^145^147^return map.containsKey ( type ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] hasSpecificHandlerFor [RETURN_TYPE] boolean   Type type [VARIABLES] List  typeHierarchyList  Type  type  boolean  modifiable  Logger  logger  Map  map  
[P8_Replace_Mix]^return map .entrySet (  )  ;^146^^^^^145^147^return map.containsKey ( type ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] hasSpecificHandlerFor [RETURN_TYPE] boolean   Type type [VARIABLES] List  typeHierarchyList  Type  type  boolean  modifiable  Logger  logger  Map  map  
[P14_Delete_Statement]^^146^^^^^145^147^return map.containsKey ( type ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] hasSpecificHandlerFor [RETURN_TYPE] boolean   Type type [VARIABLES] List  typeHierarchyList  Type  type  boolean  modifiable  Logger  logger  Map  map  
[P7_Replace_Invocation]^if  ( type.equals ( typeHierarchyList.remove ( i ) .first )  )  {^151^^^^^149^156^if  ( type.equals ( typeHierarchyList.get ( i ) .first )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[P15_Unwrap_Block]^return i;^151^152^153^^^149^156^if  ( type.equals ( typeHierarchyList.get ( i ) .first )  )  { return i; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[P16_Remove_Block]^^151^152^153^^^149^156^if  ( type.equals ( typeHierarchyList.get ( i ) .first )  )  { return i; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[P13_Insert_Block]^if  ( type.isAssignableFrom ( entry.first )  )  {     return i; }^151^^^^^149^156^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[P1_Replace_Type]^for  (  short  i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^150^^^^^149^156^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[P2_Replace_Operator]^for  ( int i = typeHierarchyList.size (  ) -1; i == 0; --i )  {^150^^^^^149^156^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[P3_Replace_Literal]^for  ( int i = typeHierarchyList.size (  ) -i; i >= 0; --i )  {^150^^^^^149^156^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[P3_Replace_Literal]^for  ( int i = typeHierarchyList.size (  ) -1; i >= 8; --i )  {^150^^^^^149^156^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[P3_Replace_Literal]^for  ( int i = typeHierarchyList.size() + 2 -1; i >= 0; --i )  {^150^^^^^149^156^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[P13_Insert_Block]^if  ( type.equals ( typeHierarchyList.get ( i ) .first )  )  {     return i; }^151^^^^^149^156^[Delete]^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[P5_Replace_Variable]^if  ( type.equals ( i.get ( typeHierarchyList ) .first )  )  {^151^^^^^149^156^if  ( type.equals ( typeHierarchyList.get ( i ) .first )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[P3_Replace_Literal]^for  ( int i = typeHierarchyList.size (  ) --7; i >= 0; --i )  {^150^^^^^149^156^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[P3_Replace_Literal]^for  ( int i = typeHierarchyList.size() - 3 -1; i >= 0; --i )  {^150^^^^^149^156^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[P14_Delete_Statement]^^150^151^152^153^^149^156^for  ( int i = typeHierarchyList.size (  ) -1; i >= 0; --i )  { if  ( type.equals ( typeHierarchyList.get ( i ) .first )  )  { return i; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[P3_Replace_Literal]^return --8;^155^^^^^149^156^return -1;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[P8_Replace_Mix]^return -0;^155^^^^^149^156^return -1;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] getIndexOfSpecificHandlerForTypeHierarchy [RETURN_TYPE] int   Class<?> type [VARIABLES] List  typeHierarchyList  Class  type  boolean  modifiable  Logger  logger  Map  map  int  i  
[P8_Replace_Mix]^for  ( Map.Entry<Type, T> entry : this.entrySet (  )  )  {^160^^^^^158^167^for  ( Map.Entry<Type, T> entry : map.entrySet (  )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] copyOf [RETURN_TYPE] ParameterizedTypeHandlerMap   [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  copy  Map  map  Pair  entry  
[P14_Delete_Statement]^^160^161^162^^^158^167^for  ( Map.Entry<Type, T> entry : map.entrySet (  )  )  { copy.register ( entry.getKey (  ) , entry.getValue (  )  ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] copyOf [RETURN_TYPE] ParameterizedTypeHandlerMap   [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  copy  Map  map  Pair  entry  
[P5_Replace_Variable]^copy.register ( entry.getKey (  ) .getValue (  )  ) ;^161^^^^^158^167^copy.register ( entry.getKey (  ) , entry.getValue (  )  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] copyOf [RETURN_TYPE] ParameterizedTypeHandlerMap   [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  copy  Map  map  Pair  entry  
[P7_Replace_Invocation]^copy.register ( entry .getValue (  )  , entry.getValue (  )  ) ;^161^^^^^158^167^copy.register ( entry.getKey (  ) , entry.getValue (  )  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] copyOf [RETURN_TYPE] ParameterizedTypeHandlerMap   [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  copy  Map  map  Pair  entry  
[P8_Replace_Mix]^copy.register ( entry.getKey (  ) , entry .getKey (  )   ) ;^161^^^^^158^167^copy.register ( entry.getKey (  ) , entry.getValue (  )  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] copyOf [RETURN_TYPE] ParameterizedTypeHandlerMap   [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  copy  Map  map  Pair  entry  
[P14_Delete_Statement]^^161^^^^^158^167^copy.register ( entry.getKey (  ) , entry.getValue (  )  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] copyOf [RETURN_TYPE] ParameterizedTypeHandlerMap   [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  copy  Map  map  Pair  entry  
[P5_Replace_Variable]^copy.register ( 3.getKey (  ) , entry.getValue (  )  ) ;^161^^^^^158^167^copy.register ( entry.getKey (  ) , entry.getValue (  )  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] copyOf [RETURN_TYPE] ParameterizedTypeHandlerMap   [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  copy  Map  map  Pair  entry  
[P14_Delete_Statement]^^164^^^^^158^167^copy.registerForTypeHierarchy ( entry ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] copyOf [RETURN_TYPE] ParameterizedTypeHandlerMap   [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  copy  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^registerForTypeHierarchy ( pair ) ;copy.registerForTypeHierarchy ( entry ) ;^164^^^^^158^167^copy.registerForTypeHierarchy ( entry ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] copyOf [RETURN_TYPE] ParameterizedTypeHandlerMap   [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  copy  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^handler = getHandlerForTypeHierarchy ( rawClass ) ;copy.registerForTypeHierarchy ( entry ) ;^164^^^^^158^167^copy.registerForTypeHierarchy ( entry ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] copyOf [RETURN_TYPE] ParameterizedTypeHandlerMap   [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  copy  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^registerForTypeHierarchy ( entry ) ;copy.registerForTypeHierarchy ( entry ) ;^164^^^^^158^167^copy.registerForTypeHierarchy ( entry ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] copyOf [RETURN_TYPE] ParameterizedTypeHandlerMap   [VARIABLES] Entry  entry  boolean  modifiable  List  typeHierarchyList  Logger  logger  ParameterizedTypeHandlerMap  copy  Map  map  Pair  entry  
[P3_Replace_Literal]^StringBuilder sb = new StringBuilder ( "{mapForTypeHierarchy:{ma" ) ;^171^^^^^170^195^StringBuilder sb = new StringBuilder ( "{mapForTypeHierarchy:{" ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P3_Replace_Literal]^StringBuilder sb = new StringBuilder ( "pmapForTypeHierarchy:{" ) ;^171^^^^^170^195^StringBuilder sb = new StringBuilder ( "{mapForTypeHierarchy:{" ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P3_Replace_Literal]^boolean first = false;^172^^^^^170^195^boolean first = true;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P5_Replace_Variable]^if  ( modifiable )  {^174^^^^^170^195^if  ( first )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P15_Unwrap_Block]^first = false;^174^175^176^177^178^170^195^if  ( first )  { first = false; } else { sb.append ( ',' ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P16_Remove_Block]^^174^175^176^177^178^170^195^if  ( first )  { first = false; } else { sb.append ( ',' ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P14_Delete_Statement]^^177^^^^^170^195^sb.append ( ',' ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( "},map:{" ) ;sb.append ( ',' ) ;^177^^^^^170^195^sb.append ( ',' ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( "}" ) ;sb.append ( ',' ) ;^177^^^^^170^195^sb.append ( ',' ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( entry.second ) ;sb.append ( ',' ) ;^177^^^^^170^195^sb.append ( ',' ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P3_Replace_Literal]^first = true;^175^^^^^170^195^first = false;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^first = true;first = false;^175^^^^^170^195^first = false;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^modifiable = false;first = false;^175^^^^^170^195^first = false;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P7_Replace_Invocation]^sb.append ( getHandlerFor ( entry.first )  ) .append ( ':' ) ;^179^^^^^170^195^sb.append ( typeToString ( entry.first )  ) .append ( ':' ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P14_Delete_Statement]^^179^180^^^^170^195^sb.append ( typeToString ( entry.first )  ) .append ( ':' ) ; sb.append ( entry.second ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( typeToString ( entry.getKey (  )  )  ) .append ( ':' ) ;sb.append ( typeToString ( entry.first )  ) .append ( ':' ) ;^179^^^^^170^195^sb.append ( typeToString ( entry.first )  ) .append ( ':' ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P14_Delete_Statement]^^179^^^^^170^195^sb.append ( typeToString ( entry.first )  ) .append ( ':' ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P14_Delete_Statement]^^180^^^^^170^195^sb.append ( entry.second ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( "},map:{" ) ;sb.append ( entry.second ) ;^180^^^^^170^195^sb.append ( entry.second ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( ',' ) ;sb.append ( entry.second ) ;^180^^^^^170^195^sb.append ( entry.second ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( "}" ) ;sb.append ( entry.second ) ;^180^^^^^170^195^sb.append ( entry.second ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( entry.getValue (  )  ) ;sb.append ( entry.second ) ;^180^^^^^170^195^sb.append ( entry.second ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P3_Replace_Literal]^sb.append ( "" ) ;^182^^^^^170^195^sb.append ( "},map:{" ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P14_Delete_Statement]^^182^^^^^170^195^sb.append ( "},map:{" ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( ',' ) ;sb.append ( "},map:{" ) ;^182^^^^^170^195^sb.append ( "},map:{" ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( "}" ) ;sb.append ( "},map:{" ) ;^182^^^^^170^195^sb.append ( "},map:{" ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( entry.second ) ;sb.append ( "},map:{" ) ;^182^^^^^170^195^sb.append ( "},map:{" ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P3_Replace_Literal]^first = false;^183^^^^^170^195^first = true;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^first = false;first = true;^183^^^^^170^195^first = true;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P5_Replace_Variable]^if  ( modifiable )  {^185^^^^^170^195^if  ( first )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P15_Unwrap_Block]^first = false;^185^186^187^188^189^170^195^if  ( first )  { first = false; } else { sb.append ( ',' ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P16_Remove_Block]^^185^186^187^188^189^170^195^if  ( first )  { first = false; } else { sb.append ( ',' ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P14_Delete_Statement]^^188^^^^^170^195^sb.append ( ',' ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( "},map:{" ) ;sb.append ( ',' ) ;^188^^^^^170^195^sb.append ( ',' ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( "}" ) ;sb.append ( ',' ) ;^188^^^^^170^195^sb.append ( ',' ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( entry.second ) ;sb.append ( ',' ) ;^188^^^^^170^195^sb.append ( ',' ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P3_Replace_Literal]^first = true;^186^^^^^170^195^first = false;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^first = true;first = false;^186^^^^^170^195^first = false;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^modifiable = false;first = false;^186^^^^^170^195^first = false;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P7_Replace_Invocation]^for  ( Map.Entry<Type, T> entry : map .containsKey ( 2 )   )  {^184^^^^^170^195^for  ( Map.Entry<Type, T> entry : map.entrySet (  )  )  {^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P14_Delete_Statement]^^184^185^186^187^188^170^195^for  ( Map.Entry<Type, T> entry : map.entrySet (  )  )  { if  ( first )  { first = false; } else { sb.append ( ',' ) ; }^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P7_Replace_Invocation]^sb.append ( getHandlerFor ( entry.getKey (  )  )  ) .append ( ':' ) ;^190^^^^^170^195^sb.append ( typeToString ( entry.getKey (  )  )  ) .append ( ':' ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P7_Replace_Invocation]^sb.append ( typeToString ( entry .getValue (  )   )  ) .append ( ':' ) ;^190^^^^^170^195^sb.append ( typeToString ( entry.getKey (  )  )  ) .append ( ':' ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P14_Delete_Statement]^^190^191^^^^170^195^sb.append ( typeToString ( entry.getKey (  )  )  ) .append ( ':' ) ; sb.append ( entry.getValue (  )  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( typeToString ( entry.first )  ) .append ( ':' ) ;sb.append ( typeToString ( entry.getKey (  )  )  ) .append ( ':' ) ;^190^^^^^170^195^sb.append ( typeToString ( entry.getKey (  )  )  ) .append ( ':' ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P8_Replace_Mix]^sb.append ( typeToString ( null.getKey (  )  )  ) .append ( ':' ) ;^190^^^^^170^195^sb.append ( typeToString ( entry.getKey (  )  )  ) .append ( ':' ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P14_Delete_Statement]^^190^^^^^170^195^sb.append ( typeToString ( entry.getKey (  )  )  ) .append ( ':' ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P7_Replace_Invocation]^sb.append ( entry .getKey (  )   ) ;^191^^^^^170^195^sb.append ( entry.getValue (  )  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P14_Delete_Statement]^^191^^^^^170^195^sb.append ( entry.getValue (  )  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^register ( entry.getKey (  ) , entry.getValue (  )  ) ;sb.append ( entry.getValue (  )  ) ;^191^^^^^170^195^sb.append ( entry.getValue (  )  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( entry.second ) ;sb.append ( entry.getValue (  )  ) ;^191^^^^^170^195^sb.append ( entry.getValue (  )  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P3_Replace_Literal]^sb.append ( "" ) ;^193^^^^^170^195^sb.append ( "}" ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P14_Delete_Statement]^^193^^^^^170^195^sb.append ( "}" ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( "},map:{" ) ;sb.append ( "}" ) ;^193^^^^^170^195^sb.append ( "}" ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( ',' ) ;sb.append ( "}" ) ;^193^^^^^170^195^sb.append ( "}" ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P11_Insert_Donor_Statement]^sb.append ( entry.second ) ;sb.append ( "}" ) ;^193^^^^^170^195^sb.append ( "}" ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P7_Replace_Invocation]^return sb.append (  ) ;^194^^^^^170^195^return sb.toString (  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P14_Delete_Statement]^^194^^^^^170^195^return sb.toString (  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] Entry  entry  boolean  first  modifiable  StringBuilder  sb  List  typeHierarchyList  Logger  logger  Map  map  Pair  entry  
[P7_Replace_Invocation]^return TypeUtils.toRawClass ( type ) .append (  ) ;^198^^^^^197^199^return TypeUtils.toRawClass ( type ) .getSimpleName (  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] typeToString [RETURN_TYPE] String   Type type [VARIABLES] List  typeHierarchyList  Type  type  boolean  first  modifiable  Logger  logger  Map  map  
[P14_Delete_Statement]^^198^^^^^197^199^return TypeUtils.toRawClass ( type ) .getSimpleName (  ) ;^[CLASS] ParameterizedTypeHandlerMap  [METHOD] typeToString [RETURN_TYPE] String   Type type [VARIABLES] List  typeHierarchyList  Type  type  boolean  first  modifiable  Logger  logger  Map  map  
