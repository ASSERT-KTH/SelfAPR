[P1_Replace_Type]^private static final  int  serialVersionUID = 7011031166416885789L;^59^^^^^54^64^private static final long serialVersionUID = 7011031166416885789L;^[CLASS] PolynomialSplineFunction   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = 7011031166416885789;^59^^^^^54^64^private static final long serialVersionUID = 7011031166416885789L;^[CLASS] PolynomialSplineFunction   [VARIABLES] 
[P8_Replace_Mix]^private PolynomialFunction polynomials[] = false;^71^^^^^66^76^private PolynomialFunction polynomials[] = null;^[CLASS] PolynomialSplineFunction   [VARIABLES] 
[P1_Replace_Type]^private  short  n = 0;^77^^^^^72^82^private int n = 0;^[CLASS] PolynomialSplineFunction   [VARIABLES] 
[P8_Replace_Mix]^private int n = 2;^77^^^^^72^82^private int n = 0;^[CLASS] PolynomialSplineFunction   [VARIABLES] 
[P2_Replace_Operator]^if  ( knots.length == 2 )  {^96^^^^^95^114^if  ( knots.length < 2 )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^if  ( knots.length < n )  {^96^^^^^95^114^if  ( knots.length < 2 )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P5_Replace_Variable]^if  ( n < 2 )  {^96^^^^^95^114^if  ( knots.length < 2 )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P5_Replace_Variable]^if  ( knots.length.length < 2 )  {^96^^^^^95^114^if  ( knots.length < 2 )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P5_Replace_Variable]^if  ( knots < 2 )  {^96^^^^^95^114^if  ( knots.length < 2 )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P8_Replace_Mix]^if  ( knots.length < 0  )  {^96^^^^^95^114^if  ( knots.length < 2 )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Not enough knot values -- spline partition must have at least 2 points.");^96^97^98^99^^95^114^if  ( knots.length < 2 )  { throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ; }^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P16_Remove_Block]^^96^97^98^99^^95^114^if  ( knots.length < 2 )  { throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ; }^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P13_Insert_Block]^if  (  (  ( knots.length )  - 1 )  !=  ( polynomials.length )  )  {     throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ; }^96^^^^^95^114^[Delete]^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "spline ot enough knot values -- spline partition must have at least 2 points." ) ;^97^98^^^^95^114^throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P13_Insert_Block]^if  (  ( knots.length )  < 2 )  {     throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ; }^97^^^^^95^114^[Delete]^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points.Not enough knot values -- spline " ) ;^97^98^^^^95^114^throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ;throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ;^97^98^^^^95^114^throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ;throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ;^97^98^^^^95^114^throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points.ues -- spline partit" ) ;^97^98^^^^95^114^throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "No" ) ;^97^98^^^^95^114^throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P2_Replace_Operator]^if  ( knots.length - 1 == polynomials.length )  {^100^^^^^95^114^if  ( knots.length - 1 != polynomials.length )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P2_Replace_Operator]^if  ( knots.length  >=  1 != polynomials.length )  {^100^^^^^95^114^if  ( knots.length - 1 != polynomials.length )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^if  ( knots.length  != polynomials.length )  {^100^^^^^95^114^if  ( knots.length - 1 != polynomials.length )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P6_Replace_Expression]^if  ( knots.length - 1 )  {^100^^^^^95^114^if  ( knots.length - 1 != polynomials.length )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P8_Replace_Mix]^if  ( knots.length - 0  != polynomials.length )  {^100^^^^^95^114^if  ( knots.length - 1 != polynomials.length )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P9_Replace_Statement]^if  (  i >= polynomials.length  )  {^100^^^^^95^114^if  ( knots.length - 1 != polynomials.length )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Number of polynomial interpolants must match the number of segments.");^100^101^102^103^^95^114^if  ( knots.length - 1 != polynomials.length )  { throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ; }^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P16_Remove_Block]^^100^101^102^103^^95^114^if  ( knots.length - 1 != polynomials.length )  { throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ; }^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P13_Insert_Block]^if  (  ( knots.length )  < 2 )  {     throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ; }^100^^^^^95^114^[Delete]^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments. segmen" ) ;^101^102^^^^95^114^throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P13_Insert_Block]^if  (  (  ( knots.length )  - 1 )  !=  ( polynomials.length )  )  {     throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ; }^101^^^^^95^114^[Delete]^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments.er of poly" ) ;^101^102^^^^95^114^throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ;throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ;^101^102^^^^95^114^throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ;throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ;^101^102^^^^95^114^throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "st matumber of polynomial interpolants must match the number of segments." ) ;^101^102^^^^95^114^throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments.umber of po" ) ;^101^102^^^^95^114^throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P7_Replace_Invocation]^if  ( !value ( knots )  )  {^104^^^^^95^114^if  ( !isStrictlyIncreasing ( knots )  )  {^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Knot values must be strictly increasing.");^104^105^106^107^^95^114^if  ( !isStrictlyIncreasing ( knots )  )  { throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ; }^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P16_Remove_Block]^^104^105^106^107^^95^114^if  ( !isStrictlyIncreasing ( knots )  )  { throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ; }^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "st be strictly increanot values must be strictly increasing." ) ;^105^106^^^^95^114^throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Knot values must be strictly increasing.strictl" ) ;^105^106^^^^95^114^throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Not enough knot values -- spline partition must have at least 2 points." ) ;throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ;^105^106^^^^95^114^throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Number of polynomial interpolants must match the number of segments." ) ;throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ;^105^106^^^^95^114^throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "o" ) ;^105^106^^^^95^114^throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ictly increnot values must be strictly increasing." ) ;^105^106^^^^95^114^throw new IllegalArgumentException ( "Knot values must be strictly increasing." ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^this.n = knots.length -n;^109^^^^^95^114^this.n = knots.length -1;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P5_Replace_Variable]^this.n = n -1;^109^^^^^95^114^this.n = knots.length -1;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P5_Replace_Variable]^this.n = knots.length.length -1;^109^^^^^95^114^this.n = knots.length -1;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P5_Replace_Variable]^this.n = knots -1;^109^^^^^95^114^this.n = knots.length -1;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P8_Replace_Mix]^this.n = knots.length -0 ;^109^^^^^95^114^this.n = knots.length -1;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^this.knots = new double[n + n];^110^^^^^95^114^this.knots = new double[n + 1];^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P8_Replace_Mix]^this.knots = new double[n + 3];^110^^^^^95^114^this.knots = new double[n + 1];^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P2_Replace_Operator]^System.arraycopy ( knots, 0, this.knots, 0, n   instanceof   1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^System.arraycopy ( knots, -3, this.knots, -3, n + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^System.arraycopy ( knots, n, this.knots, n, n + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^System.arraycopy ( knots, 0, this.knots, 0, n + n ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P5_Replace_Variable]^System.arraycopy (  0, this.knots, 0, n + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P5_Replace_Variable]^System.arraycopy ( knots, 0,  0, n + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P5_Replace_Variable]^System.arraycopy ( knots, 0, this.knots, 0 + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P5_Replace_Variable]^System.arraycopy ( this.knots, 0, knots, 0, n + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P5_Replace_Variable]^System.arraycopy ( n, 0, this.knots, 0, knots + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P14_Delete_Statement]^^111^112^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ; this.polynomials = new PolynomialFunction[n];^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P11_Insert_Donor_Statement]^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P11_Insert_Donor_Statement]^System.arraycopy ( polynomials, 0, p, 0, n ) ;System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P11_Insert_Donor_Statement]^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^111^^^^^95^114^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P8_Replace_Mix]^this.polynomials  =  this.polynomials ;^112^^^^^95^114^this.polynomials = new PolynomialFunction[n];^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^System.arraycopy ( polynomials, -2, this.polynomials, -2, n ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P3_Replace_Literal]^System.arraycopy ( polynomials, n, this.polynomials, n, n ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P5_Replace_Variable]^System.arraycopy (  0, this.polynomials, 0, n ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P5_Replace_Variable]^System.arraycopy ( polynomials, 0,  0, n ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P5_Replace_Variable]^System.arraycopy ( polynomials, 0, this.polynomials, 0 ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P5_Replace_Variable]^System.arraycopy ( n, 0, this.polynomials, 0, polynomials ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P5_Replace_Variable]^System.arraycopy ( polynomials, 0, n, 0, this.polynomials ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P14_Delete_Statement]^^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P11_Insert_Donor_Statement]^System.arraycopy ( polynomials, 0, p, 0, n ) ;System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P11_Insert_Donor_Statement]^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P11_Insert_Donor_Statement]^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^113^^^^^95^114^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] <init> [RETURN_TYPE] PolynomialFunction[])   double[] knots PolynomialFunction[] polynomials [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  n  
[P2_Replace_Operator]^if  ( v < knots[0] && v > knots[n] )  {^132^^^^^131^146^if  ( v < knots[0] || v > knots[n] )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P2_Replace_Operator]^if  ( v > knots[0] || v > knots[n] )  {^132^^^^^131^146^if  ( v < knots[0] || v > knots[n] )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P2_Replace_Operator]^if  ( v < knots[0] || v >= knots[n] )  {^132^^^^^131^146^if  ( v < knots[0] || v > knots[n] )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P3_Replace_Literal]^if  ( v < knots[-4] || v > knots[n] )  {^132^^^^^131^146^if  ( v < knots[0] || v > knots[n] )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P5_Replace_Variable]^if  ( knots < v[0] || v > knots[n] )  {^132^^^^^131^146^if  ( v < knots[0] || v > knots[n] )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P6_Replace_Expression]^if  ( v < knots[0] ) {^132^^^^^131^146^if  ( v < knots[0] || v > knots[n] )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P6_Replace_Expression]^if  (  v > knots[n] )  {^132^^^^^131^146^if  ( v < knots[0] || v > knots[n] )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P8_Replace_Mix]^if  ( v < knots[3] || v > knots[n] )  {^132^^^^^131^146^if  ( v < knots[0] || v > knots[n] )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P15_Unwrap_Block]^throw new org.apache.commons.math.FunctionEvaluationException(v, "Argument outside domain");^132^133^134^^^131^146^if  ( v < knots[0] || v > knots[n] )  { throw new FunctionEvaluationException  (" ")  ; }^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P16_Remove_Block]^^132^133^134^^^131^146^if  ( v < knots[0] || v > knots[n] )  { throw new FunctionEvaluationException  (" ")  ; }^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P13_Insert_Block]^if  (  ( v <  ( knots[0] )  )  ||  ( v >  ( knots[n] )  )  )  {     throw new FunctionEvaluationException ( v, "Argument outside domain" ) ; }^133^^^^^131^146^[Delete]^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P1_Replace_Type]^short  i = Arrays.binarySearch ( knots, v ) ;^135^^^^^131^146^int i = Arrays.binarySearch ( knots, v ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P5_Replace_Variable]^int i = Arrays.binarySearch ( knots ) ;^135^^^^^131^146^int i = Arrays.binarySearch ( knots, v ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P5_Replace_Variable]^int i = Arrays.binarySearch (  v ) ;^135^^^^^131^146^int i = Arrays.binarySearch ( knots, v ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P5_Replace_Variable]^int i = Arrays.binarySearch ( v, knots ) ;^135^^^^^131^146^int i = Arrays.binarySearch ( knots, v ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P14_Delete_Statement]^^135^^^^^131^146^int i = Arrays.binarySearch ( knots, v ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P2_Replace_Operator]^if  ( i <= 0 )  {^136^^^^^131^146^if  ( i < 0 )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P3_Replace_Literal]^if  ( i < i )  {^136^^^^^131^146^if  ( i < 0 )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P5_Replace_Variable]^if  ( n < 0 )  {^136^^^^^131^146^if  ( i < 0 )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P6_Replace_Expression]^if  ( -i - 2 )  {^136^^^^^131^146^if  ( i < 0 )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P8_Replace_Mix]^if  ( i < 0 - 3 )  {^136^^^^^131^146^if  ( i < 0 )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P15_Unwrap_Block]^i = (-i) - 2;^136^137^138^^^131^146^if  ( i < 0 )  { i = -i - 2; }^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P16_Remove_Block]^^136^137^138^^^131^146^if  ( i < 0 )  { i = -i - 2; }^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P2_Replace_Operator]^i = -i  &&  2;^137^^^^^131^146^i = -i - 2;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P3_Replace_Literal]^i = -i ;^137^^^^^131^146^i = -i - 2;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P5_Replace_Variable]^n = -i - 2;^137^^^^^131^146^i = -i - 2;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P8_Replace_Mix]^i = -i - 4;^137^^^^^131^146^i = -i - 2;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P2_Replace_Operator]^i = -i  >=  2;^137^^^^^131^146^i = -i - 2;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P8_Replace_Mix]^i = -i - 2 - 3;^137^^^^^131^146^i = -i - 2;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P2_Replace_Operator]^if  (  i > polynomials.length  )  {^142^^^^^131^146^if  (  i >= polynomials.length  )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P9_Replace_Statement]^if  ( knots.length - 1 != polynomials.length )  {^142^^^^^131^146^if  (  i >= polynomials.length  )  {^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P15_Unwrap_Block]^i--;^142^143^144^^^131^146^if  (  i >= polynomials.length  )  { i--; }^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P16_Remove_Block]^^142^143^144^^^131^146^if  (  i >= polynomials.length  )  { i--; }^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P2_Replace_Operator]^return polynomials[i].value ( v  >>  knots[i] ) ;^145^^^^^131^146^return polynomials[i].value ( v - knots[i] ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P5_Replace_Variable]^return v[i].value ( polynomials - knots[i] ) ;^145^^^^^131^146^return polynomials[i].value ( v - knots[i] ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P5_Replace_Variable]^return knots[i].value ( v - polynomials[i] ) ;^145^^^^^131^146^return polynomials[i].value ( v - knots[i] ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P7_Replace_Invocation]^return polynomials[i] .PolynomialSplineFunction ( knots , polynomials )  ;^145^^^^^131^146^return polynomials[i].value ( v - knots[i] ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P8_Replace_Mix]^return polynomials[i].value ( v  &  knots[i] ) ;^145^^^^^131^146^return polynomials[i].value ( v - knots[i] ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P2_Replace_Operator]^return polynomials[i].value ( v  |  knots[i] ) ;^145^^^^^131^146^return polynomials[i].value ( v - knots[i] ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P14_Delete_Statement]^^145^^^^^131^146^return polynomials[i].value ( v - knots[i] ) ;^[CLASS] PolynomialSplineFunction  [METHOD] value [RETURN_TYPE] double   double v [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  double  v  
[P14_Delete_Statement]^^153^^^^^152^154^return polynomialSplineDerivative (  ) ;^[CLASS] PolynomialSplineFunction  [METHOD] derivative [RETURN_TYPE] UnivariateRealFunction   [VARIABLES] PolynomialFunction[]  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^PolynomialFunction derivativePolynomials[] = iew PolynomialFunction[n];^162^^^^^161^167^PolynomialFunction derivativePolynomials[] = new PolynomialFunction[n];^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P11_Insert_Donor_Statement]^PolynomialFunction p[] = new PolynomialFunction[n];PolynomialFunction derivativePolynomials[] = new PolynomialFunction[n];^162^^^^^161^167^PolynomialFunction derivativePolynomials[] = new PolynomialFunction[n];^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P1_Replace_Type]^for  (  short  i = 0; i < n; i++ )  {^163^^^^^161^167^for  ( int i = 0; i < n; i++ )  {^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P2_Replace_Operator]^for  ( int i = 0; i <= n; i++ )  {^163^^^^^161^167^for  ( int i = 0; i < n; i++ )  {^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^for  ( int i = n; i < n; i++ )  {^163^^^^^161^167^for  ( int i = 0; i < n; i++ )  {^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^for  ( nnt i = 0; i < n; i++ )  {^163^^^^^161^167^for  ( int i = 0; i < n; i++ )  {^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^for  ( nnt i = 0; i < i; i++ )  {^163^^^^^161^167^for  ( int i = 0; i < n; i++ )  {^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P7_Replace_Invocation]^derivativePolynomials[i] = polynomials[i].value (  ) ;^164^^^^^161^167^derivativePolynomials[i] = polynomials[i].polynomialDerivative (  ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P8_Replace_Mix]^derivativePolynomials[i] ;^164^^^^^161^167^derivativePolynomials[i] = polynomials[i].polynomialDerivative (  ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^derivativePolynomials[i] = derivativePolynomials[i].polynomialDerivative (  ) ;^164^^^^^161^167^derivativePolynomials[i] = polynomials[i].polynomialDerivative (  ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P8_Replace_Mix]^derivativePolynomials[i] = derivativePolynomials[i].value (  ) ;^164^^^^^161^167^derivativePolynomials[i] = polynomials[i].polynomialDerivative (  ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P14_Delete_Statement]^^164^^^^^161^167^derivativePolynomials[i] = polynomials[i].polynomialDerivative (  ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P11_Insert_Donor_Statement]^return polynomialSplineDerivative (  ) ;derivativePolynomials[i] = polynomials[i].polynomialDerivative (  ) ;^164^^^^^161^167^derivativePolynomials[i] = polynomials[i].polynomialDerivative (  ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P8_Replace_Mix]^derivativePolynomials[i]  =  derivativePolynomials[i] ;^164^^^^^161^167^derivativePolynomials[i] = polynomials[i].polynomialDerivative (  ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^return new PolynomialSplineFunction ( knots, polynomials ) ;^166^^^^^161^167^return new PolynomialSplineFunction ( knots, derivativePolynomials ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^return new PolynomialSplineFunction ( knots ) ;^166^^^^^161^167^return new PolynomialSplineFunction ( knots, derivativePolynomials ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^return new PolynomialSplineFunction (  derivativePolynomials ) ;^166^^^^^161^167^return new PolynomialSplineFunction ( knots, derivativePolynomials ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^return new PolynomialSplineFunction ( derivativePolynomials, knots ) ;^166^^^^^161^167^return new PolynomialSplineFunction ( knots, derivativePolynomials ) ;^[CLASS] PolynomialSplineFunction  [METHOD] polynomialSplineDerivative [RETURN_TYPE] PolynomialSplineFunction   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^return i;^176^^^^^175^177^return n;^[CLASS] PolynomialSplineFunction  [METHOD] getN [RETURN_TYPE] int   [VARIABLES] PolynomialFunction[]  derivativePolynomials  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^PolynomialFunction p[] = iew PolynomialFunction[n];^188^^^^^187^191^PolynomialFunction p[] = new PolynomialFunction[n];^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P11_Insert_Donor_Statement]^PolynomialFunction derivativePolynomials[] = new PolynomialFunction[n];PolynomialFunction p[] = new PolynomialFunction[n];^188^^^^^187^191^PolynomialFunction p[] = new PolynomialFunction[n];^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^System.arraycopy ( polynomials, n, p, n, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^System.arraycopy ( polynomials, -3, p, -3, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^System.arraycopy ( derivativePolynomialsolynomials, 0, p, 0, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^System.arraycopy ( derivativePolynomials, 0, p, 0, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^System.arraycopy ( polynomials, 0, p, 0, i ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^System.arraycopy ( polynomials, 0,  0, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^System.arraycopy (  0, p, 0, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^System.arraycopy ( polynomials, 0, p, 0 ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^System.arraycopy ( polynomialsolynomials, 0, p, 0, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^System.arraycopy ( p, 0, polynomials, 0, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^System.arraycopy ( n, 0, p, 0, polynomials ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P14_Delete_Statement]^^189^190^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ; return p;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P11_Insert_Donor_Statement]^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;System.arraycopy ( polynomials, 0, p, 0, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P11_Insert_Donor_Statement]^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;System.arraycopy ( polynomials, 0, p, 0, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P11_Insert_Donor_Statement]^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;System.arraycopy ( polynomials, 0, p, 0, n ) ;^189^^^^^187^191^System.arraycopy ( polynomials, 0, p, 0, n ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P8_Replace_Mix]^return polynomials;^190^^^^^187^191^return p;^[CLASS] PolynomialSplineFunction  [METHOD] getPolynomials [RETURN_TYPE] PolynomialFunction[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^double out[] = new double[n ];^202^^^^^201^205^double out[] = new double[n + 1];^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^double out[] = iew double[n + 1];^202^^^^^201^205^double out[] = new double[n + 1];^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P2_Replace_Operator]^System.arraycopy ( knots, 0, out, 0, n  >  1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^System.arraycopy ( knots, i, out, i, n + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^System.arraycopy ( knots, -8, out, -8, n + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^System.arraycopy ( knots, 0, out, 0, n + n ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^System.arraycopy ( out, 0, out, 0, n + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^System.arraycopy ( knots, 0, out, 0, i + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^System.arraycopy ( knots, 0,  0, n + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^System.arraycopy (  0, out, 0, n + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^System.arraycopy ( knots, 0, out, 0 + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^System.arraycopy ( knots, 0, n, 0, out + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^System.arraycopy ( out, 0, knots, 0, n + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P14_Delete_Statement]^^203^204^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ; return out;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P11_Insert_Donor_Statement]^System.arraycopy ( polynomials, 0, this.polynomials, 0, n ) ;System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P11_Insert_Donor_Statement]^System.arraycopy ( polynomials, 0, p, 0, n ) ;System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P11_Insert_Donor_Statement]^System.arraycopy ( knots, 0, this.knots, 0, n + 1 ) ;System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^203^^^^^201^205^System.arraycopy ( knots, 0, out, 0, n + 1 ) ;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^return knots;^204^^^^^201^205^return out;^[CLASS] PolynomialSplineFunction  [METHOD] getKnots [RETURN_TYPE] double[]   [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  long  serialVersionUID  int  i  n  
[P2_Replace_Operator]^if  ( x[i - 1] > x[i] )  {^217^^^^^215^222^if  ( x[i - 1] >= x[i] )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P2_Replace_Operator]^if  ( x[i  >=  1] >= x[i] )  {^217^^^^^215^222^if  ( x[i - 1] >= x[i] )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^if  ( x[i - i] >= x[i] )  {^217^^^^^215^222^if  ( x[i - 1] >= x[i] )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^if  ( out[i - 1] >= x[i] )  {^217^^^^^215^222^if  ( x[i - 1] >= x[i] )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^if  ( x[n - 1] >= x[i] )  {^217^^^^^215^222^if  ( x[i - 1] >= x[i] )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P6_Replace_Expression]^if  ( i - 1 )  {^217^^^^^215^222^if  ( x[i - 1] >= x[i] )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P8_Replace_Mix]^if  ( x[i - 3] >= x[i] )  {^217^^^^^215^222^if  ( x[i - 1] >= x[i] )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P15_Unwrap_Block]^return false;^217^218^219^^^215^222^if  ( x[i - 1] >= x[i] )  { return false; }^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P16_Remove_Block]^^217^218^219^^^215^222^if  ( x[i - 1] >= x[i] )  { return false; }^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^return true;^218^^^^^215^222^return false;^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P1_Replace_Type]^for  (  short  i = 1; i < x.length; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P2_Replace_Operator]^for  ( int i = 1; i <= x.length; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^for  ( int i = i; i < x.length; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^for  ( int i = ; i < x.length; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^for  ( nnt i = 1; i < x.length; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^for  ( int i = 1; i < out.length; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^for  ( int i = 1; i < n; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^for  ( x.lengthnt i = 1; i < i; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P5_Replace_Variable]^for  ( int i = 1; i < x.length.length; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P2_Replace_Operator]^if  ( x[i  ^  1] >= x[i] )  {^217^^^^^215^222^if  ( x[i - 1] >= x[i] )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P8_Replace_Mix]^if  ( out[i - 0] >= x[i] )  {^217^^^^^215^222^if  ( x[i - 1] >= x[i] )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P1_Replace_Type]^for  (  long  i = 1; i < x.length; ++i )  {^216^^^^^215^222^for  ( int i = 1; i < x.length; ++i )  {^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
[P3_Replace_Literal]^return false;^221^^^^^215^222^return true;^[CLASS] PolynomialSplineFunction  [METHOD] isStrictlyIncreasing [RETURN_TYPE] boolean   double[] x [VARIABLES] PolynomialFunction[]  derivativePolynomials  p  polynomials  boolean  double[]  knots  out  x  long  serialVersionUID  int  i  n  
