[P1_Replace_Type]^private static final  short  serialVersionUID = -5852615386664158222L;^34^^^^^29^39^private static final long serialVersionUID = -5852615386664158222L;^[CLASS] TDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID ;^34^^^^^29^39^private static final long serialVersionUID = -5852615386664158222L;^[CLASS] TDistributionImpl   [VARIABLES] 
[P1_Replace_Type]^private int degreesOfFreedom;^37^^^^^32^42^private double degreesOfFreedom;^[CLASS] TDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private float degreesOfFreedom;^37^^^^^32^42^private double degreesOfFreedom;^[CLASS] TDistributionImpl   [VARIABLES] 
[P14_Delete_Statement]^^44^^^^^43^46^super (  ) ;^[CLASS] TDistributionImpl  [METHOD] <init> [RETURN_TYPE] TDistributionImpl(double)   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^TDistributionImpl ( degreesOfFreedom ) ;^45^^^^^43^46^setDegreesOfFreedom ( degreesOfFreedom ) ;^[CLASS] TDistributionImpl  [METHOD] <init> [RETURN_TYPE] TDistributionImpl(double)   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^45^^^^^43^46^setDegreesOfFreedom ( degreesOfFreedom ) ;^[CLASS] TDistributionImpl  [METHOD] <init> [RETURN_TYPE] TDistributionImpl(double)   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( degreesOfFreedom > 0.0 )  {^53^^^^^52^57^if  ( degreesOfFreedom <= 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] setDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( degreesOfFreedom <= 0.0D )  {^53^^^^^52^57^if  ( degreesOfFreedom <= 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] setDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("degrees of freedom must be positive.");^53^54^55^^^52^57^if  ( degreesOfFreedom <= 0.0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TDistributionImpl  [METHOD] setDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  long  serialVersionUID  boolean  
[P16_Remove_Block]^^53^54^55^^^52^57^if  ( degreesOfFreedom <= 0.0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TDistributionImpl  [METHOD] setDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( degreesOfFreedom <= 0.0 )  {     throw new IllegalArgumentException ( "degrees of freedom must be positive." ) ; }^54^^^^^52^57^[Delete]^[CLASS] TDistributionImpl  [METHOD] setDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return ;^54^^^^^52^57^throw new IllegalArgumentException  (" ")  ;^[CLASS] TDistributionImpl  [METHOD] setDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  long  serialVersionUID  boolean  
[P8_Replace_Mix]^this.degreesOfFreedom =  null;^56^^^^^52^57^this.degreesOfFreedom = degreesOfFreedom;^[CLASS] TDistributionImpl  [METHOD] setDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] double  degreesOfFreedom  long  serialVersionUID  boolean  
[P1_Replace_Type]^int ret;^75^^^^^74^92^double ret;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( x <= 0.0 )  {^76^^^^^74^92^if  ( x == 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( ret == 0.0 )  {^76^^^^^74^92^if  ( x == 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) )  {^76^^^^^74^92^if  ( x == 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( getDegreesOfFreedom (  )  + x * x )  {^76^^^^^74^92^if  ( x == 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( x * x )  {^76^^^^^74^92^if  ( x == 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( 0.5 * getDegreesOfFreedom (  ) )  {^76^^^^^74^92^if  ( x == 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( x < 0.0 )  {^76^^^^^74^92^if  ( x == 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( 0.5 * t )  {^76^^^^^74^92^if  ( x == 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( 1.0 - 0.5 * t )  {^76^^^^^74^92^if  ( x == 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( ret == 4.0d )  {^76^^^^^74^92^if  ( x == 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 1 )  {^76^^^^^74^92^if  ( x == 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 0 )  {^76^^^^^74^92^if  ( x == 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( x <= 0.0 )  {^84^^^^^74^92^if  ( x < 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( ret < 0.0 )  {^84^^^^^74^92^if  ( x < 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( 0.5 * t )  {^84^^^^^74^92^if  ( x < 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( 1.0 - 0.5 * t )  {^84^^^^^74^92^if  ( x < 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( x < 2.0d )  {^84^^^^^74^92^if  ( x < 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 1 )  {^84^^^^^74^92^if  ( x < 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 0 )  {^84^^^^^74^92^if  ( x < 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( x == 0.0 )  {^84^^^^^74^92^if  ( x < 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^ret = 0.5 * t;^84^85^86^87^88^74^92^if  ( x < 0.0 )  { ret = 0.5 * t; } else { ret = 1.0 - 0.5 * t; }^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^84^85^86^87^88^74^92^if  ( x < 0.0 )  { ret = 0.5 * t; } else { ret = 1.0 - 0.5 * t; }^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = 1.0  &  0.5 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret - = 1.0 - 0.5 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 5.0 - 0.5 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 1.0 - 0.08333333333333333 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = 1.0 - 0.5 * x;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 3.0d - 0.5 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = 0.5 * t;ret = 1.0 - 0.5 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret + = 0.5 * t;^85^^^^^74^92^ret = 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 2.0 * t;^85^^^^^74^92^ret = 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = 0.5 * x;^85^^^^^74^92^ret = 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 0.5D * t;^85^^^^^74^92^ret = 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = 1.0 - 0.5 * t;ret = 0.5 * t;^85^^^^^74^92^ret = 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = 0.5;ret = 0.5 * t;^85^^^^^74^92^ret = 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret / = 0.5 * t;^85^^^^^74^92^ret = 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 2.5 * t;^85^^^^^74^92^ret = 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 2.0d * t;^85^^^^^74^92^ret = 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = 1.0  >=  0.5 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 9.0 - 0.5 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 1.0 - 0.0625 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 1.0D - 0.5 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P1_Replace_Type]^int t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^79^80^81^82^^74^92^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  +  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^79^80^81^82^^74^92^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  >  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^79^80^81^82^^74^92^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x + x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^79^80^81^82^^74^92^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 / getDegreesOfFreedom (  ) ,^79^80^81^82^^74^92^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 1.0 * getDegreesOfFreedom (  ) ,^79^80^81^82^^74^92^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( ret * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^79^80^81^82^^74^92^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^Beta.regularizedBeta ( getDegreesOfFreedom (  )  *  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^80^81^82^83^^74^92^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^Beta.regularizedBeta ( getDegreesOfFreedom (  <  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^80^81^82^83^^74^92^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x + x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^80^81^82^83^^74^92^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 + getDegreesOfFreedom (  ) , 0.5 ) ;^80^81^82^83^^74^92^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.125 * getDegreesOfFreedom (  ) , 0.125 ) ;^80^81^82^83^^74^92^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 3.0 * getDegreesOfFreedom (  ) , 3.0 ) ;^80^81^82^83^^74^92^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( t * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^80^81^82^83^^74^92^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^81^82^83^^^74^92^getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^82^83^^^^74^92^0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 2.5;^77^^^^^74^92^ret = 0.5;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 1.0d;^77^^^^^74^92^ret = 0.5;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = 0.5 * t;ret = 0.5;^77^^^^^74^92^ret = 0.5;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( x < 1.0d )  {^84^^^^^74^92^if  ( x < 0.0 )  {^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = 1.0   instanceof   0.5 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret + = 1.0 - 0.5 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 2.0 - 0.5 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 1.0 - 1.5 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 1.0d - 0.5 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret - = 0.5 * t;^85^^^^^74^92^ret = 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 0.05555555555555555 * t;^85^^^^^74^92^ret = 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 4.0d * t;^85^^^^^74^92^ret = 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 3.5;^77^^^^^74^92^ret = 0.5;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 0.16666666666666666 * t;^85^^^^^74^92^ret = 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 3.0d * t;^85^^^^^74^92^ret = 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = 1.0  ^  0.5 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 0.125 - 0.5 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 1.0 - Infinity * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 2.0d - 0.5 * t;^87^^^^^74^92^ret = 1.0 - 0.5 * t;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  ==  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^79^80^81^82^^74^92^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x - x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^79^80^81^82^^74^92^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.05555555555555555 * getDegreesOfFreedom (  ) ,^79^80^81^82^^74^92^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.0625 * getDegreesOfFreedom (  ) ,^79^80^81^82^^74^92^double t = Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) ,^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^Beta.regularizedBeta ( getDegreesOfFreedom (  )  -  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^80^81^82^83^^74^92^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^Beta.regularizedBeta ( getDegreesOfFreedom (  ||  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^80^81^82^83^^74^92^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x / x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^80^81^82^83^^74^92^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 4.5 * getDegreesOfFreedom (  ) , 4.5 ) ;^80^81^82^83^^74^92^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.1 * getDegreesOfFreedom (  ) , 0.1 ) ;^80^81^82^83^^74^92^Beta.regularizedBeta ( getDegreesOfFreedom (  )  /  ( getDegreesOfFreedom (  )  +  ( x * x )  ) , 0.5 * getDegreesOfFreedom (  ) , 0.5 ) ;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return x;^91^^^^^74^92^return ret;^[CLASS] TDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  degreesOfFreedom  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p <= 0 )  {^110^^^^^108^117^if  ( p == 0 )  {^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( p == 3 )  {^110^^^^^108^117^if  ( p == 0 )  {^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( x == 0 )  {^110^^^^^108^117^if  ( p == 0 )  {^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( x == 0L )  {^110^^^^^108^117^if  ( p == 0 )  {^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 1 )  {^110^^^^^108^117^if  ( p == 0 )  {^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( x < 0.0 )  {^110^^^^^108^117^if  ( p == 0 )  {^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( x == 0.0 )  {^110^^^^^108^117^if  ( p == 0 )  {^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^return java.lang.Double.NEGATIVE_INFINITY;^110^111^112^^^108^117^if  ( p == 0 )  { return Double.NEGATIVE_INFINITY; }^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^110^111^112^^^108^117^if  ( p == 0 )  { return Double.NEGATIVE_INFINITY; }^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p == 1 )  {     return POSITIVE_INFINITY; }^110^^^^^108^117^[Delete]^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p == 1 )  {     return POSITIVE_INFINITY; }^111^^^^^108^117^[Delete]^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p == 0 )  {     return NEGATIVE_INFINITY; }^111^^^^^108^117^[Delete]^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p <= 1 )  {^113^^^^^108^117^if  ( p == 1 )  {^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( p == -8 )  {^113^^^^^108^117^if  ( p == 1 )  {^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( x == 1 )  {^113^^^^^108^117^if  ( p == 1 )  {^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( p == 3 )  {^113^^^^^108^117^if  ( p == 1 )  {^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( x < 0.0 )  {^113^^^^^108^117^if  ( p == 1 )  {^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( p == 0 )  {^113^^^^^108^117^if  ( p == 1 )  {^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( x == 0.0 )  {^113^^^^^108^117^if  ( p == 1 )  {^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^return java.lang.Double.POSITIVE_INFINITY;^113^114^115^^^108^117^if  ( p == 1 )  { return Double.POSITIVE_INFINITY; }^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^113^114^115^^^108^117^if  ( p == 1 )  { return Double.POSITIVE_INFINITY; }^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p == 0 )  {     return NEGATIVE_INFINITY; }^113^^^^^108^117^[Delete]^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p == 1 )  {     return POSITIVE_INFINITY; }^114^^^^^108^117^[Delete]^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p == 0 )  {     return NEGATIVE_INFINITY; }^114^^^^^108^117^[Delete]^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return super .cumulativeProbability ( t )  ;^116^^^^^108^117^return super.inverseCumulativeProbability ( p ) ;^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^116^^^^^108^117^return super.inverseCumulativeProbability ( p ) ;^[CLASS] TDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return 0.0D;^154^^^^^153^155^return 0.0;^[CLASS] TDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  degreesOfFreedom  p  ret  t  x  long  serialVersionUID  boolean  
