[P14_Delete_Statement]^^30^^^^^29^31^super (  ) ;^[CLASS] DistributionFactoryImpl  [METHOD] <init> [RETURN_TYPE] DistributionFactoryImpl()   [VARIABLES] boolean  
[P4_Replace_Constructor]^return return  new NormalDistributionImpl ( mean, sd )  ;^42^^^^^39^43^return new ChiSquaredDistributionImpl ( degreesOfFreedom ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createChiSquareDistribution [RETURN_TYPE] ChiSquaredDistribution   final double degreesOfFreedom [VARIABLES] boolean  double  degreesOfFreedom  
[P8_Replace_Mix]^return  new NormalDistributionImpl ( mean, sd )  ;^42^^^^^39^43^return new ChiSquaredDistributionImpl ( degreesOfFreedom ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createChiSquareDistribution [RETURN_TYPE] ChiSquaredDistribution   final double degreesOfFreedom [VARIABLES] boolean  double  degreesOfFreedom  
[P4_Replace_Constructor]^return return  new NormalDistributionImpl ( mean, sd )  ;^55^^^^^52^56^return new GammaDistributionImpl ( alpha, beta ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createGammaDistribution [RETURN_TYPE] GammaDistribution   double alpha double beta [VARIABLES] boolean  double  alpha  beta  
[P4_Replace_Constructor]^return new GammaDistributionImpl (  beta ) ;^55^^^^^52^56^return new GammaDistributionImpl ( alpha, beta ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createGammaDistribution [RETURN_TYPE] GammaDistribution   double alpha double beta [VARIABLES] boolean  double  alpha  beta  
[P4_Replace_Constructor]^return new GammaDistributionImpl ( alpha ) ;^55^^^^^52^56^return new GammaDistributionImpl ( alpha, beta ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createGammaDistribution [RETURN_TYPE] GammaDistribution   double alpha double beta [VARIABLES] boolean  double  alpha  beta  
[P5_Replace_Variable]^return new GammaDistributionImpl ( beta, alpha ) ;^55^^^^^52^56^return new GammaDistributionImpl ( alpha, beta ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createGammaDistribution [RETURN_TYPE] GammaDistribution   double alpha double beta [VARIABLES] boolean  double  alpha  beta  
[P8_Replace_Mix]^return  new NormalDistributionImpl ( mean, sd )  ;^55^^^^^52^56^return new GammaDistributionImpl ( alpha, beta ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createGammaDistribution [RETURN_TYPE] GammaDistribution   double alpha double beta [VARIABLES] boolean  double  alpha  beta  
[P4_Replace_Constructor]^return return  new NormalDistributionImpl ( mean, sd )  ;^65^^^^^64^66^return new TDistributionImpl ( degreesOfFreedom ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createTDistribution [RETURN_TYPE] TDistribution   double degreesOfFreedom [VARIABLES] boolean  double  degreesOfFreedom  
[P8_Replace_Mix]^return  new NormalDistributionImpl ( mean, sd )  ;^65^^^^^64^66^return new TDistributionImpl ( degreesOfFreedom ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createTDistribution [RETURN_TYPE] TDistribution   double degreesOfFreedom [VARIABLES] boolean  double  degreesOfFreedom  
[P4_Replace_Constructor]^return new FDistributionImpl (  denominatorDegreesOfFreedom ) ;^78^79^^^^75^80^return new FDistributionImpl ( numeratorDegreesOfFreedom, denominatorDegreesOfFreedom ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createFDistribution [RETURN_TYPE] FDistribution   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] boolean  double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  
[P4_Replace_Constructor]^return new FDistributionImpl ( numeratorDegreesOfFreedom ) ;^78^79^^^^75^80^return new FDistributionImpl ( numeratorDegreesOfFreedom, denominatorDegreesOfFreedom ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createFDistribution [RETURN_TYPE] FDistribution   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] boolean  double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  
[P5_Replace_Variable]^return new FDistributionImpl ( denominatorDegreesOfFreedom, numeratorDegreesOfFreedom ) ;^78^79^^^^75^80^return new FDistributionImpl ( numeratorDegreesOfFreedom, denominatorDegreesOfFreedom ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createFDistribution [RETURN_TYPE] FDistribution   double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] boolean  double  denominatorDegreesOfFreedom  numeratorDegreesOfFreedom  
[P4_Replace_Constructor]^return return  new NormalDistributionImpl ( mean, sd )  ;^89^^^^^88^90^return new ExponentialDistributionImpl ( mean ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createExponentialDistribution [RETURN_TYPE] ExponentialDistribution   double mean [VARIABLES] boolean  double  mean  
[P8_Replace_Mix]^return  new NormalDistributionImpl ( mean, sd )  ;^89^^^^^88^90^return new ExponentialDistributionImpl ( mean ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createExponentialDistribution [RETURN_TYPE] ExponentialDistribution   double mean [VARIABLES] boolean  double  mean  
[P4_Replace_Constructor]^return return  new PascalDistributionImpl ( numberOfSuccesses, probabilityOfSuccess )  ;^102^103^^^^100^104^return new BinomialDistributionImpl ( numberOfTrials, probabilityOfSuccess ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createBinomialDistribution [RETURN_TYPE] BinomialDistribution   int numberOfTrials double probabilityOfSuccess [VARIABLES] boolean  double  probabilityOfSuccess  int  numberOfTrials  
[P4_Replace_Constructor]^return new BinomialDistributionImpl (  probabilityOfSuccess ) ;^102^103^^^^100^104^return new BinomialDistributionImpl ( numberOfTrials, probabilityOfSuccess ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createBinomialDistribution [RETURN_TYPE] BinomialDistribution   int numberOfTrials double probabilityOfSuccess [VARIABLES] boolean  double  probabilityOfSuccess  int  numberOfTrials  
[P4_Replace_Constructor]^return new BinomialDistributionImpl ( numberOfTrials ) ;^102^103^^^^100^104^return new BinomialDistributionImpl ( numberOfTrials, probabilityOfSuccess ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createBinomialDistribution [RETURN_TYPE] BinomialDistribution   int numberOfTrials double probabilityOfSuccess [VARIABLES] boolean  double  probabilityOfSuccess  int  numberOfTrials  
[P5_Replace_Variable]^return new BinomialDistributionImpl ( probabilityOfSuccess, numberOfTrials ) ;^102^103^^^^100^104^return new BinomialDistributionImpl ( numberOfTrials, probabilityOfSuccess ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createBinomialDistribution [RETURN_TYPE] BinomialDistribution   int numberOfTrials double probabilityOfSuccess [VARIABLES] boolean  double  probabilityOfSuccess  int  numberOfTrials  
[P8_Replace_Mix]^return  new PascalDistributionImpl ( numberOfSuccesses, probabilityOfSuccess )  ;^102^103^^^^100^104^return new BinomialDistributionImpl ( numberOfTrials, probabilityOfSuccess ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createBinomialDistribution [RETURN_TYPE] BinomialDistribution   int numberOfTrials double probabilityOfSuccess [VARIABLES] boolean  double  probabilityOfSuccess  int  numberOfTrials  
[P4_Replace_Constructor]^return new HypergeometricDistributionImpl (  numberOfSuccesses, sampleSize ) ;^117^118^^^^115^119^return new HypergeometricDistributionImpl ( populationSize, numberOfSuccesses, sampleSize ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createHypergeometricDistribution [RETURN_TYPE] HypergeometricDistribution   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean  int  numberOfSuccesses  populationSize  sampleSize  
[P4_Replace_Constructor]^return new HypergeometricDistributionImpl ( populationSize,  sampleSize ) ;^117^118^^^^115^119^return new HypergeometricDistributionImpl ( populationSize, numberOfSuccesses, sampleSize ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createHypergeometricDistribution [RETURN_TYPE] HypergeometricDistribution   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean  int  numberOfSuccesses  populationSize  sampleSize  
[P4_Replace_Constructor]^return new HypergeometricDistributionImpl ( populationSize, numberOfSuccesses ) ;^117^118^^^^115^119^return new HypergeometricDistributionImpl ( populationSize, numberOfSuccesses, sampleSize ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createHypergeometricDistribution [RETURN_TYPE] HypergeometricDistribution   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean  int  numberOfSuccesses  populationSize  sampleSize  
[P5_Replace_Variable]^return new HypergeometricDistributionImpl ( numberOfSuccesses, numberOfSuccesses, sampleSize ) ;^117^118^^^^115^119^return new HypergeometricDistributionImpl ( populationSize, numberOfSuccesses, sampleSize ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createHypergeometricDistribution [RETURN_TYPE] HypergeometricDistribution   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean  int  numberOfSuccesses  populationSize  sampleSize  
[P5_Replace_Variable]^return new HypergeometricDistributionImpl ( populationSize, populationSize, sampleSize ) ;^117^118^^^^115^119^return new HypergeometricDistributionImpl ( populationSize, numberOfSuccesses, sampleSize ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createHypergeometricDistribution [RETURN_TYPE] HypergeometricDistribution   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean  int  numberOfSuccesses  populationSize  sampleSize  
[P5_Replace_Variable]^return new HypergeometricDistributionImpl ( populationSize, numberOfSuccesses, populationSize ) ;^117^118^^^^115^119^return new HypergeometricDistributionImpl ( populationSize, numberOfSuccesses, sampleSize ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createHypergeometricDistribution [RETURN_TYPE] HypergeometricDistribution   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean  int  numberOfSuccesses  populationSize  sampleSize  
[P5_Replace_Variable]^return new HypergeometricDistributionImpl ( numberOfSuccesses, populationSize, sampleSize ) ;^117^118^^^^115^119^return new HypergeometricDistributionImpl ( populationSize, numberOfSuccesses, sampleSize ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createHypergeometricDistribution [RETURN_TYPE] HypergeometricDistribution   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean  int  numberOfSuccesses  populationSize  sampleSize  
[P5_Replace_Variable]^return new HypergeometricDistributionImpl ( populationSize, sampleSize, numberOfSuccesses ) ;^117^118^^^^115^119^return new HypergeometricDistributionImpl ( populationSize, numberOfSuccesses, sampleSize ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createHypergeometricDistribution [RETURN_TYPE] HypergeometricDistribution   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean  int  numberOfSuccesses  populationSize  sampleSize  
[P5_Replace_Variable]^return new HypergeometricDistributionImpl ( populationSize, numberOfSuccesses, numberOfSuccesses ) ;^117^118^^^^115^119^return new HypergeometricDistributionImpl ( populationSize, numberOfSuccesses, sampleSize ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createHypergeometricDistribution [RETURN_TYPE] HypergeometricDistribution   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean  int  numberOfSuccesses  populationSize  sampleSize  
[P8_Replace_Mix]^return new HypergeometricDistributionImpl ( sampleSize, numberOfSuccesses, sampleSize ) ;^117^118^^^^115^119^return new HypergeometricDistributionImpl ( populationSize, numberOfSuccesses, sampleSize ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createHypergeometricDistribution [RETURN_TYPE] HypergeometricDistribution   int populationSize int numberOfSuccesses int sampleSize [VARIABLES] boolean  int  numberOfSuccesses  populationSize  sampleSize  
[P4_Replace_Constructor]^return return  new TDistributionImpl ( degreesOfFreedom )  ;^130^^^^^129^131^return new NormalDistributionImpl ( mean, sd ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createNormalDistribution [RETURN_TYPE] NormalDistribution   double mean double sd [VARIABLES] boolean  double  mean  sd  
[P4_Replace_Constructor]^return new NormalDistributionImpl (  sd ) ;^130^^^^^129^131^return new NormalDistributionImpl ( mean, sd ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createNormalDistribution [RETURN_TYPE] NormalDistribution   double mean double sd [VARIABLES] boolean  double  mean  sd  
[P4_Replace_Constructor]^return new NormalDistributionImpl ( mean ) ;^130^^^^^129^131^return new NormalDistributionImpl ( mean, sd ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createNormalDistribution [RETURN_TYPE] NormalDistribution   double mean double sd [VARIABLES] boolean  double  mean  sd  
[P5_Replace_Variable]^return new NormalDistributionImpl ( sd, mean ) ;^130^^^^^129^131^return new NormalDistributionImpl ( mean, sd ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createNormalDistribution [RETURN_TYPE] NormalDistribution   double mean double sd [VARIABLES] boolean  double  mean  sd  
[P8_Replace_Mix]^return  new TDistributionImpl ( degreesOfFreedom )  ;^130^^^^^129^131^return new NormalDistributionImpl ( mean, sd ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createNormalDistribution [RETURN_TYPE] NormalDistribution   double mean double sd [VARIABLES] boolean  double  mean  sd  
[P4_Replace_Constructor]^return return  new NormalDistributionImpl ( mean, sd )  ;^140^^^^^139^141^return new NormalDistributionImpl (  ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createNormalDistribution [RETURN_TYPE] NormalDistribution   [VARIABLES] boolean  
[P8_Replace_Mix]^return  new NormalDistributionImpl ( mean, sd )  ;^140^^^^^139^141^return new NormalDistributionImpl (  ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createNormalDistribution [RETURN_TYPE] NormalDistribution   [VARIABLES] boolean  
[P4_Replace_Constructor]^return return  new NormalDistributionImpl ( mean, sd )  ;^154^^^^^153^155^return new PoissonDistributionImpl ( lambda ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createPoissonDistribution [RETURN_TYPE] PoissonDistribution   double lambda [VARIABLES] boolean  double  lambda  
[P8_Replace_Mix]^return  new NormalDistributionImpl ( mean, sd )  ;^154^^^^^153^155^return new PoissonDistributionImpl ( lambda ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createPoissonDistribution [RETURN_TYPE] PoissonDistribution   double lambda [VARIABLES] boolean  double  lambda  
[P4_Replace_Constructor]^return return  new BinomialDistributionImpl ( numberOfTrials, probabilityOfSuccess )  ;^166^^^^^165^167^return new PascalDistributionImpl ( numberOfSuccesses, probabilityOfSuccess ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createPascalDistribution [RETURN_TYPE] PascalDistribution   int numberOfSuccesses double probabilityOfSuccess [VARIABLES] boolean  double  probabilityOfSuccess  int  numberOfSuccesses  
[P4_Replace_Constructor]^return new PascalDistributionImpl (  probabilityOfSuccess ) ;^166^^^^^165^167^return new PascalDistributionImpl ( numberOfSuccesses, probabilityOfSuccess ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createPascalDistribution [RETURN_TYPE] PascalDistribution   int numberOfSuccesses double probabilityOfSuccess [VARIABLES] boolean  double  probabilityOfSuccess  int  numberOfSuccesses  
[P4_Replace_Constructor]^return new PascalDistributionImpl ( numberOfSuccesses ) ;^166^^^^^165^167^return new PascalDistributionImpl ( numberOfSuccesses, probabilityOfSuccess ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createPascalDistribution [RETURN_TYPE] PascalDistribution   int numberOfSuccesses double probabilityOfSuccess [VARIABLES] boolean  double  probabilityOfSuccess  int  numberOfSuccesses  
[P5_Replace_Variable]^return new PascalDistributionImpl ( probabilityOfSuccess, numberOfSuccesses ) ;^166^^^^^165^167^return new PascalDistributionImpl ( numberOfSuccesses, probabilityOfSuccess ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createPascalDistribution [RETURN_TYPE] PascalDistribution   int numberOfSuccesses double probabilityOfSuccess [VARIABLES] boolean  double  probabilityOfSuccess  int  numberOfSuccesses  
[P8_Replace_Mix]^return  new BinomialDistributionImpl ( numberOfTrials, probabilityOfSuccess )  ;^166^^^^^165^167^return new PascalDistributionImpl ( numberOfSuccesses, probabilityOfSuccess ) ;^[CLASS] DistributionFactoryImpl  [METHOD] createPascalDistribution [RETURN_TYPE] PascalDistribution   int numberOfSuccesses double probabilityOfSuccess [VARIABLES] boolean  double  probabilityOfSuccess  int  numberOfSuccesses  
