[P1_Replace_Type]^private static final  short  serialVersionUID = 8589540077390120676L;^32^^^^^27^37^private static final long serialVersionUID = 8589540077390120676L;^[CLASS] WeibullDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = 8589540077390120676;^32^^^^^27^37^private static final long serialVersionUID = 8589540077390120676L;^[CLASS] WeibullDistributionImpl   [VARIABLES] 
[P1_Replace_Type]^private int alpha;^35^^^^^30^40^private double alpha;^[CLASS] WeibullDistributionImpl   [VARIABLES] 
[P1_Replace_Type]^private int beta;^38^^^^^33^43^private double beta;^[CLASS] WeibullDistributionImpl   [VARIABLES] 
[P14_Delete_Statement]^^47^^^^^46^50^super (  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] <init> [RETURN_TYPE] WeibullDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P5_Replace_Variable]^setShape ( beta ) ;^48^^^^^46^50^setShape ( alpha ) ;^[CLASS] WeibullDistributionImpl  [METHOD] <init> [RETURN_TYPE] WeibullDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^setScale ( alpha ) ;^48^^^^^46^50^setShape ( alpha ) ;^[CLASS] WeibullDistributionImpl  [METHOD] <init> [RETURN_TYPE] WeibullDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^48^^^^^46^50^setShape ( alpha ) ;^[CLASS] WeibullDistributionImpl  [METHOD] <init> [RETURN_TYPE] WeibullDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^setScale ( beta ) ;setShape ( alpha ) ;^48^^^^^46^50^setShape ( alpha ) ;^[CLASS] WeibullDistributionImpl  [METHOD] <init> [RETURN_TYPE] WeibullDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P5_Replace_Variable]^setScale ( alpha ) ;^49^^^^^46^50^setScale ( beta ) ;^[CLASS] WeibullDistributionImpl  [METHOD] <init> [RETURN_TYPE] WeibullDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^setShape ( beta ) ;^49^^^^^46^50^setScale ( beta ) ;^[CLASS] WeibullDistributionImpl  [METHOD] <init> [RETURN_TYPE] WeibullDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P8_Replace_Mix]^setShape ( alpha ) ;^49^^^^^46^50^setScale ( beta ) ;^[CLASS] WeibullDistributionImpl  [METHOD] <init> [RETURN_TYPE] WeibullDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^49^^^^^46^50^setScale ( beta ) ;^[CLASS] WeibullDistributionImpl  [METHOD] <init> [RETURN_TYPE] WeibullDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^setShape ( alpha ) ;setScale ( beta ) ;^49^^^^^46^50^setScale ( beta ) ;^[CLASS] WeibullDistributionImpl  [METHOD] <init> [RETURN_TYPE] WeibullDistributionImpl(double,double)   double alpha double beta [VARIABLES] double  alpha  beta  long  serialVersionUID  boolean  
[P1_Replace_Type]^int ret;^58^^^^^57^65^double ret;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( x == 0.0 )  {^59^^^^^57^65^if  ( x <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( ret <= 0.0 )  {^59^^^^^57^65^if  ( x <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( 1.0 - pow((x / (getScale())), getShape())))) )  {^59^^^^^57^65^if  ( x <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( x / getScale (  ) )  {^59^^^^^57^65^if  ( x <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( x <= 0.0D )  {^59^^^^^57^65^if  ( x <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( alpha <= 0.0 )  {^59^^^^^57^65^if  ( x <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( beta <= 0.0 )  {^59^^^^^57^65^if  ( x <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^ret = 0.0;^59^60^61^62^63^57^65^if  ( x <= 0.0 )  { ret = 0.0; } else { ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ; }^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^59^60^61^62^63^57^65^if  ( x <= 0.0 )  { ret = 0.0; } else { ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ; }^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = 1.0  |  Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = 1.0 - Math.exp ( -Math.pow ( x + getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 0.16666666666666666 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = 1.0 - Math.exp ( -Math.pow ( ret / getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = 1.0 - Math.log ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = 1.0 - Math.exp ( -Math.log ( x / getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = 1.0 - Math.exp ( -Math.pow ( x / getShape (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getScale (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 1.0D - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( x <= 0.0 )  {     ret = 0.0; }else {     ret = 1.0 -  ( exp (  ( - ( pow (  ( x /  ( getScale (  )  )  ) , getShape (  )  )  )  )  )  ) ; }^62^^^^^57^65^[Delete]^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = 1.0 - Math.exp ( -Math.pow ( x * getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = 1.0 - Math.exp ( -Math .log ( alpha )   )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 2.0d;^60^^^^^57^65^ret = 0.0;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = NaN;^60^^^^^57^65^ret = 0.0;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = 1.0   instanceof   Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = 3.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = 1.0 - Math.exp ( -Math .log ( x )   )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 0.0d - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = 1.0 - Math.exp ( -Math.pow ( x - getScale (  ) , getShape (  )  )  ) ;^62^^^^^57^65^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return x;^64^^^^^57^65^return ret;^[CLASS] WeibullDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return x;^72^^^^^71^73^return alpha;^[CLASS] WeibullDistributionImpl  [METHOD] getShape [RETURN_TYPE] double   [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return x;^80^^^^^79^81^return beta;^[CLASS] WeibullDistributionImpl  [METHOD] getScale [RETURN_TYPE] double   [VARIABLES] double  alpha  beta  ret  x  long  serialVersionUID  boolean  
[P1_Replace_Type]^int ret;^96^^^^^95^108^double ret;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p < 0.0 && p > 1.0 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p <= 0.0 || p > 1.0 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( p < 0.0 || p < 1.0 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( p < 0.0 || p > 2.0 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( p < 3.3 || p > 1.3 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( p < 0.0 || p > 0.14285714285714285 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( p < 0.0 || p > 0.1111111111111111 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( x < 0.0 || p > 1.0 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( p < 0.0 ) {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  (  p > 1.0 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( p == 0 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( p == 1 )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( getScale() * 0 - p)))), (1.0 / getShape())) )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( 1.0 - p )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( 1.0 / getShape (  ) )  {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( p < 0.0D ) {^97^^^^^95^108^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^} else if  ( p >= 0 )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^} else if  ( p != 0 )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^} else if  ( p == 1 )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^} else if  ( ret == 0 )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else if  ( getScale() * 0 - p)))), (1.0 / getShape())) )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else if  ( 1.0 - p )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else if  ( 1.0 / getShape (  ) )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^}  if  ( p == 0 >> 4 )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p == 1 )  {     ret = POSITIVE_INFINITY; }else {     ret =  ( getScale (  )  )  *  ( pow (  ( - ( log (  ( 1.0 - p )  )  )  ) ,  ( 1.0 /  ( getShape (  )  )  )  )  ) ; }^100^^^^^95^108^[Delete]^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  (  ( p < 0.0 )  ||  ( p > 1.0 )  )  {     throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ; }else     if  ( p == 0 )  {         ret = 0.0;     }else         if  ( p == 1 )  {             ret = POSITIVE_INFINITY;         }else {             ret =  ( getScale (  )  )  *  ( pow (  ( - ( log (  ( 1.0 - p )  )  )  ) ,  ( 1.0 /  ( getShape (  )  )  )  )  ) ;         }^100^^^^^95^108^[Delete]^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^} else  if  ( p > 1 )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^} else  if  ( p == -1 )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^} else  if  ( x == 1 )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else  if  ( getScale() * 0 - p)))), (1.0 / getShape())) )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else  if  ( 1.0 - p )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else  if  ( 1.0 / getShape (  ) )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P6_Replace_Expression]^} else {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^} else if  ( p == 0 )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^ret = java.lang.Double.POSITIVE_INFINITY;^102^103^104^105^106^95^108^} else  if  ( p == 1 )  { ret = Double.POSITIVE_INFINITY; } else { ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ; }^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^102^103^104^105^106^95^108^} else  if  ( p == 1 )  { ret = Double.POSITIVE_INFINITY; } else { ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ; }^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret + = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  &  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 + getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( 0.25 - p ) , 0.25 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - ret ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getShape (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  )  * Math.pow ( -Math.pow ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getScale (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = getScale (  )  * Math.pow ( -Math.log ( 3.0d - p ) , 3.0d / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^ret = 1.0 - Math.exp ( -Math.pow ( x / getScale (  ) , getShape (  )  )  ) ;ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( p == 1 )  {     ret = POSITIVE_INFINITY; }else {     ret =  ( getScale (  )  )  *  ( pow (  ( - ( log (  ( 1.0 - p )  )  )  ) ,  ( 1.0 /  ( getShape (  )  )  )  )  ) ; }^105^^^^^95^108^[Delete]^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  >=  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 - getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( 9.0 - p ) , 9.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( 0.2 - p ) , 0.2 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - x ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  )  * Math.pow ( -Math .pow ( x , x )  , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0   instanceof   p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret ;^103^^^^^95^108^ret = Double.POSITIVE_INFINITY;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret  =  ret ;^103^^^^^95^108^ret = Double.POSITIVE_INFINITY;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret / = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  |  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 * getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( Infinity - p ) , Infinity / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  >  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( 0.1111111111111111 - p ) , 0.1111111111111111 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  )  * Math .log ( ret )   ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = getScale (  )  * Math .log ( p )   ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( 6.0 - p ) , 6.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 0.0d;^101^^^^^95^108^ret = 0.0;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^} else  if  ( p >= 1 )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^} else  if  ( p == 7 )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^} else  if  ( ret == 1 )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret - = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( 0.0 - p ) , 0.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( 7.0 - p ) , 7.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  )  * Math .log ( alpha )   ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  )  * Math.pow ( -Math .pow ( ret , ret )  , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0D - p ) , 1.0D / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  ||  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( 8.0 - p ) , 8.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( 5.0 - p ) , 5.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  )  * Math.pow ( -Math .pow ( beta , alpha )  , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  <=  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 3.0d;^101^^^^^95^108^ret = 0.0;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  ^  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( 0.14285714285714285 - p ) , 0.14285714285714285 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  )  * Math .log ( x )   ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  )  * Math.pow ( -Math .pow ( p , beta )  , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  &&  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( 4.0 - p ) , 4.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  <<  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Shape must be positive." ) ;throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ;^98^99^^^^95^108^throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Scale must be positive." ) ;throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ;^98^99^^^^95^108^throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^} else if  ( p < 0 )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^} else if  ( p == -6 )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^} else if  ( ret == 2 )  {^100^^^^^95^108^} else if  ( p == 0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^} else  if  ( p == 5 )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^} else  if  ( p == 1L )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  !=  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( 3.0 - p ) , 3.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  )  * Math.pow ( -Math .pow ( alpha , x )  , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( 2.0 - p ) , 2.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  )  * Math.pow ( -Math .pow ( p , x )  , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = getScale (  )  * Math.pow ( -Math.log ( 4.0d - p ) , 4.0d / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( 0.5 - p ) , 0.5 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^} else  if  ( p != 1 )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^} else  if  ( p == null )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^}   if  ( p == 1 << 1 )  {^102^^^^^95^108^} else  if  ( p == 1 )  {^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  )  * Math.pow ( -Math .pow ( p , ret )  , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^ret = 0.0D;^101^^^^^95^108^ret = 0.0;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0  >>  p ) , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( 0.125 - p ) , 0.125 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return 0;^98^99^^^^95^108^throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^ret = getScale (  )  * Math.pow ( -Math .pow ( ret , alpha )  , 1.0 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^ret = getScale (  )  * Math.pow ( -Math.log ( 0.3333333333333333 - p ) , 0.3333333333333333 / getShape (  )  ) ;^105^^^^^95^108^ret = getScale (  )  * Math.pow ( -Math.log ( 1.0 - p ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^return x;^107^^^^^95^108^return ret;^[CLASS] WeibullDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( alpha == 0.0 )  {^115^^^^^114^120^if  ( alpha <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( alpha <= NaN )  {^115^^^^^114^120^if  ( alpha <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( x <= 0.0 )  {^115^^^^^114^120^if  ( alpha <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( alpha <= 3.0d )  {^115^^^^^114^120^if  ( alpha <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( beta <= 0.0 )  {^115^^^^^114^120^if  ( alpha <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Shape must be positive.");^115^116^117^118^^114^120^if  ( alpha <= 0.0 )  { throw new IllegalArgumentException ( "Shape must be positive." ) ; }^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^115^116^117^118^^114^120^if  ( alpha <= 0.0 )  { throw new IllegalArgumentException ( "Shape must be positive." ) ; }^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( beta <= 0.0 )  {     throw new IllegalArgumentException ( "Scale must be positive." ) ; }^115^^^^^114^120^[Delete]^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Shape must be positive.hape" ) ;^116^117^^^^114^120^throw new IllegalArgumentException ( "Shape must be positive." ) ;^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Scale must be positive." )  ;^116^117^^^^114^120^throw new IllegalArgumentException ( "Shape must be positive." ) ;^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( alpha <= 0.0 )  {     throw new IllegalArgumentException ( "Shape must be positive." ) ; }^116^^^^^114^120^[Delete]^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( beta <= 0.0 )  {     throw new IllegalArgumentException ( "Scale must be positive." ) ; }^116^^^^^114^120^[Delete]^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "st be positivehape must be positive." ) ;^116^117^^^^114^120^throw new IllegalArgumentException ( "Shape must be positive." ) ;^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Scale must be positive." ) ;throw new IllegalArgumentException ( "Shape must be positive." ) ;^116^117^^^^114^120^throw new IllegalArgumentException ( "Shape must be positive." ) ;^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ;throw new IllegalArgumentException ( "Shape must be positive." ) ;^116^117^^^^114^120^throw new IllegalArgumentException ( "Shape must be positive." ) ;^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Shape must be positive.Sh" ) ;^116^117^^^^114^120^throw new IllegalArgumentException ( "Shape must be positive." ) ;^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Shape mushape must be positive." ) ;^116^117^^^^114^120^throw new IllegalArgumentException ( "Shape must be positive." ) ;^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^this.alpha = ret;^119^^^^^114^120^this.alpha = alpha;^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^this.alpha =  x;^119^^^^^114^120^this.alpha = alpha;^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^this.beta = beta;this.alpha = alpha;^119^^^^^114^120^this.alpha = alpha;^[CLASS] WeibullDistributionImpl  [METHOD] setShape [RETURN_TYPE] void   double alpha [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( beta < 0.0 )  {^127^^^^^126^132^if  ( beta <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( x <= 0.0 )  {^127^^^^^126^132^if  ( beta <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( beta <= 0.0D )  {^127^^^^^126^132^if  ( beta <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( alpha <= 0.0 )  {^127^^^^^126^132^if  ( beta <= 0.0 )  {^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Scale must be positive.");^127^128^129^130^^126^132^if  ( beta <= 0.0 )  { throw new IllegalArgumentException ( "Scale must be positive." ) ; }^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P16_Remove_Block]^^127^128^129^130^^126^132^if  ( beta <= 0.0 )  { throw new IllegalArgumentException ( "Scale must be positive." ) ; }^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( alpha <= 0.0 )  {     throw new IllegalArgumentException ( "Shape must be positive." ) ; }^127^^^^^126^132^[Delete]^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Scalecale must be positive." ) ;^128^129^^^^126^132^throw new IllegalArgumentException ( "Scale must be positive." ) ;^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Shape must be positive." )  ;^128^129^^^^126^132^throw new IllegalArgumentException ( "Scale must be positive." ) ;^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( alpha <= 0.0 )  {     throw new IllegalArgumentException ( "Shape must be positive." ) ; }^128^^^^^126^132^[Delete]^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P13_Insert_Block]^if  ( beta <= 0.0 )  {     throw new IllegalArgumentException ( "Scale must be positive." ) ; }^128^^^^^126^132^[Delete]^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Scale must be positive.le mus" ) ;^128^129^^^^126^132^throw new IllegalArgumentException ( "Scale must be positive." ) ;^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Shape must be positive." ) ;throw new IllegalArgumentException ( "Scale must be positive." ) ;^128^129^^^^126^132^throw new IllegalArgumentException ( "Scale must be positive." ) ;^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "probability argument must be between 0 and 1  ( inclusive ) " ) ;throw new IllegalArgumentException ( "Scale must be positive." ) ;^128^129^^^^126^132^throw new IllegalArgumentException ( "Scale must be positive." ) ;^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Scale must be po" ) ;^128^129^^^^126^132^throw new IllegalArgumentException ( "Scale must be positive." ) ;^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "e must be pocale must be positive." ) ;^128^129^^^^126^132^throw new IllegalArgumentException ( "Scale must be positive." ) ;^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P5_Replace_Variable]^this.beta = ret;^131^^^^^126^132^this.beta = beta;^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^this.beta =  x;^131^^^^^126^132^this.beta = beta;^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^this.alpha = alpha;this.beta = beta;^131^^^^^126^132^this.beta = beta;^[CLASS] WeibullDistributionImpl  [METHOD] setScale [RETURN_TYPE] void   double beta [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return 0.0d;^144^^^^^143^145^return 0.0;^[CLASS] WeibullDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^return - Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 - getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^return Math.pow ( getScale (  )  * Math.log ( 8.0 ) , 1.0 / getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 4.0 / getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^return Math.pow ( getShape (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^return Math.pow ( getScale (  )  * Math.exp ( 2.0 ) , 1.0 / getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^return Math.pow ( getScale (  )  * Math .pow ( beta , x )  , 1.0 / getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getScale (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P8_Replace_Mix]^return Math.pow ( getScale (  )  * Math .pow ( p , x )  , 1.0 / getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P2_Replace_Operator]^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 + getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^return Math.pow ( getScale (  )  * Math.log ( 0.6666666666666666 ) , 1.0 / getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 9.0 / getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P7_Replace_Invocation]^return Math .log ( ret )  , 1.0 / getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P14_Delete_Statement]^^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
[P3_Replace_Literal]^return Math.pow ( getScale (  )  * Math.log ( 4.0 ) , 1.0 / getShape (  )  ) ;^170^^^^^168^171^return Math.pow ( getScale (  )  * Math.log ( 2.0 ) , 1.0 / getShape (  )  ) ;^[CLASS] WeibullDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] double  alpha  beta  p  ret  x  long  serialVersionUID  boolean  
