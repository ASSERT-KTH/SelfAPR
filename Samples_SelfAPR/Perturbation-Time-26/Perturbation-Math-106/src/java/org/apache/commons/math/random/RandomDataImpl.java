[P1_Replace_Type]^private static final  short  serialVersionUID = -626730818244969716L;^84^^^^^79^89^private static final long serialVersionUID = -626730818244969716L;^[CLASS] RandomDataImpl   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = -626730818244969716;^84^^^^^79^89^private static final long serialVersionUID = -626730818244969716L;^[CLASS] RandomDataImpl   [VARIABLES] 
[P8_Replace_Mix]^private RandomGenerator rand = false;^87^^^^^82^92^private RandomGenerator rand = null;^[CLASS] RandomDataImpl   [VARIABLES] 
[P8_Replace_Mix]^private SecureRandom secRand  = null ;^90^^^^^85^95^private SecureRandom secRand = null;^[CLASS] RandomDataImpl   [VARIABLES] 
[P14_Delete_Statement]^^106^107^^^^105^108^super (  ) ; this.rand = rand;^[CLASS] RandomDataImpl  [METHOD] <init> [RETURN_TYPE] RandomGenerator)   RandomGenerator rand [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  rand  
[P8_Replace_Mix]^this.rand =  null;^107^^^^^105^108^this.rand = rand;^[CLASS] RandomDataImpl  [METHOD] <init> [RETURN_TYPE] RandomGenerator)   RandomGenerator rand [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  rand  
[P2_Replace_Operator]^if  ( len < 0 )  {^121^^^^^106^136^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^if  ( len <= i )  {^121^^^^^106^136^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P5_Replace_Variable]^if  ( i <= 0 )  {^121^^^^^106^136^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P8_Replace_Mix]^if  ( len <= 2 )  {^121^^^^^106^136^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P9_Replace_Statement]^if  ( i == 0 )  {^121^^^^^106^136^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P9_Replace_Statement]^if  ( mean <= 0 )  {^121^^^^^106^136^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P9_Replace_Statement]^if  ( mean < 0.0 )   {^121^^^^^106^136^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P9_Replace_Statement]^if  ( k == 0 )  {^121^^^^^106^136^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P9_Replace_Statement]^if  ( sigma <= 0 )  {^121^^^^^106^136^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P9_Replace_Statement]^if  ( r >= p )  {^121^^^^^106^136^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P9_Replace_Statement]^if  ( rand == null )  {^121^^^^^106^136^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P9_Replace_Statement]^if  ( k > n )  {^121^^^^^106^136^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("length must be positive");^121^122^123^^^106^136^if  ( len <= 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P16_Remove_Block]^^121^122^123^^^106^136^if  ( len <= 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^121^^^^^106^136^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^121^^^^^106^136^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^121^^^^^106^136^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^121^^^^^106^136^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^121^^^^^106^136^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^121^^^^^106^136^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^121^^^^^106^136^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^121^^^^^106^136^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^121^^^^^106^136^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^121^^^^^106^136^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "sample size must be > 0" )   ;^122^^^^^107^137^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^122^^^^^107^137^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^122^^^^^107^137^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^122^^^^^107^137^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;throw new IllegalArgumentException  (" ")  ;^122^^^^^107^137^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;throw new IllegalArgumentException  (" ")  ;^122^^^^^107^137^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;throw new IllegalArgumentException  (" ")  ;^122^^^^^107^137^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;throw new IllegalArgumentException  (" ")  ;^122^^^^^107^137^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;throw new IllegalArgumentException  (" ")  ;^122^^^^^107^137^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size must be > 0" ) ;throw new IllegalArgumentException  (" ")  ;^122^^^^^107^137^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;throw new IllegalArgumentException  (" ")  ;^122^^^^^107^137^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;throw new IllegalArgumentException  (" ")  ;^122^^^^^107^137^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^122^^^^^107^137^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^122^^^^^107^137^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^122^^^^^107^137^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^122^^^^^107^137^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^122^^^^^107^137^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^122^^^^^107^137^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^122^^^^^107^137^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^122^^^^^107^137^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P7_Replace_Invocation]^RandomGenerator ran = getSecRan (  ) ;^126^^^^^111^141^RandomGenerator ran = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P11_Insert_Donor_Statement]^SecureRandom secRan = getSecRan (  ) ;RandomGenerator ran = getRan (  ) ;^126^^^^^111^141^RandomGenerator ran = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P11_Insert_Donor_Statement]^RandomGenerator rand = getRan (  ) ;RandomGenerator ran = getRan (  ) ;^126^^^^^111^141^RandomGenerator ran = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P14_Delete_Statement]^^126^^^^^111^141^RandomGenerator ran = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P2_Replace_Operator]^byte[] randomBytes = new byte[ ( len / 2 )  >  + 1];^132^^^^^117^147^byte[] randomBytes = new byte[ ( len / 2 )  + 1];^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P2_Replace_Operator]^byte[] randomBytes = new byte[ ( len - 2 )  + 1];^132^^^^^117^147^byte[] randomBytes = new byte[ ( len / 2 )  + 1];^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^byte[] randomBytes = new byte[ ( len / -5 )  + 1];^132^^^^^117^147^byte[] randomBytes = new byte[ ( len / 2 )  + 1];^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^byte[] randomBytes = new byte[ ( len / 2 )  ];^132^^^^^117^147^byte[] randomBytes = new byte[ ( len / 2 )  + 1];^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P5_Replace_Variable]^byte[] randomBytes = new byte[ ( i / 2 )  + 1];^132^^^^^117^147^byte[] randomBytes = new byte[ ( len / 2 )  + 1];^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P11_Insert_Donor_Statement]^int numIter =  ( len / 40 )  + 1;byte[] randomBytes = new byte[ ( len / 2 )  + 1];^132^^^^^117^147^byte[] randomBytes = new byte[ ( len / 2 )  + 1];^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P11_Insert_Donor_Statement]^byte[] randomBytes = new byte[40];byte[] randomBytes = new byte[ ( len / 2 )  + 1];^132^^^^^117^147^byte[] randomBytes = new byte[ ( len / 2 )  + 1];^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P5_Replace_Variable]^ran.nextBytes ( randdomBytes ) ;^133^^^^^118^148^ran.nextBytes ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P5_Replace_Variable]^ran.nextBytes ( randomBytesdomBytes ) ;^133^^^^^118^148^ran.nextBytes ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P5_Replace_Variable]^ran.nextBytes ( ran ) ;^133^^^^^118^148^ran.nextBytes ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P14_Delete_Statement]^^133^^^^^118^148^ran.nextBytes ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P11_Insert_Donor_Statement]^secRan.nextBytes ( randomBytes ) ;ran.nextBytes ( randomBytes ) ;^133^^^^^118^148^ran.nextBytes ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P11_Insert_Donor_Statement]^alg.update ( randomBytes ) ;ran.nextBytes ( randomBytes ) ;^133^^^^^118^148^ran.nextBytes ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P2_Replace_Operator]^if  ( hex.length (  )  <= 1 )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^if  ( hex.length (  )  == len )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^if  ( hex.length() + 3  == 1 )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P6_Replace_Expression]^if  ( "0" + hex )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P7_Replace_Invocation]^if  ( hex .substring ( len , len )   == 1 )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P8_Replace_Mix]^if  ( hex.length (  )  == 0  )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P15_Unwrap_Block]^hex = "0" + hex;^147^148^149^^^132^162^if  ( hex.length (  )  == 1 )   { hex = "0" + hex; }^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P16_Remove_Block]^^147^148^149^^^132^162^if  ( hex.length (  )  == 1 )   { hex = "0" + hex; }^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^hex = "" + hex;^148^^^^^133^163^hex = "0" + hex;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P8_Replace_Mix]^hex =  "0" + null;^148^^^^^133^163^hex = "0" + hex;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P1_Replace_Type]^for  (  short  i = 0; i < randomBytes.length; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P2_Replace_Operator]^for  ( int i = 0; i <= randomBytes.length; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P2_Replace_Operator]^for  ==  ( int i = 0; i < randomBytes.length; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P2_Replace_Operator]^for  <=  ( int i = 0; i < randomBytes.length; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^for  ( int i = 4; i < randomBytes.length; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P5_Replace_Variable]^for  ( lennt i = 0; i < randomBytes.length; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P5_Replace_Variable]^for  ( randomBytes.lengthnt i = 0; i < i; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P8_Replace_Mix]^for  ( int i = 0; i < len; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P2_Replace_Operator]^if  ( hex.length (  )  >= 1 )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^if  ( hex.length (  )  == 8 )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^if  ( hex.length() + 1  == 1 )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P4_Replace_Constructor]^Integer c = new Integer ( hash[i] )  ;^137^^^^^122^152^Integer c = new Integer ( randomBytes[i] ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P11_Insert_Donor_Statement]^Integer c = new Integer ( hash[i] ) ;Integer c = new Integer ( randomBytes[i] ) ;^137^^^^^122^152^Integer c = new Integer ( randomBytes[i] ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P1_Replace_Type]^char hex = Integer.toHexchar ( c.intValue (  )  + 128 ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P2_Replace_Operator]^String hex = Integer.toHexString ( c.intValue (  )   ||  128 ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^String hex = Integer.toHexString ( c.intValue (  )  + len ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P7_Replace_Invocation]^String hex = Integer .Integer ( len )  ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P7_Replace_Invocation]^String hex = Integer.toHexString ( c.Integer (  )  + 128 ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P7_Replace_Invocation]^String hex = Integer.toHexString ( c .Integer ( len )   + 128 ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P2_Replace_Operator]^String hex = Integer.toHexString ( c.intValue (  )   <=  128 ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^String hex = Integer.toHexString ( c.intValue (  )  + i ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P8_Replace_Mix]^String hex = Integer.toHexString ( c .Integer ( i )   + 128 ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P14_Delete_Statement]^^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^if  ( hex.length() - 3  == 1 )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P7_Replace_Invocation]^if  ( hex .substring ( i , len )   == 1 )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P7_Replace_Invocation]^outBuffer .toString (  )  ;^150^^^^^135^165^outBuffer.append ( hex ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P14_Delete_Statement]^^150^^^^^135^165^outBuffer.append ( hex ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^for  ( int i = len; i < randomBytes.length; i++ )  {^136^^^^^121^151^for  ( int i = 0; i < randomBytes.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P2_Replace_Operator]^String hex = Integer.toHexString ( c.intValue (  )   ^  128 ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P7_Replace_Invocation]^String hex = Integer .Integer ( i )  ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P2_Replace_Operator]^String hex = Integer.toHexString ( c.intValue (  )   <  128 ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^String hex = Integer.toHexString ( c.intValue (  )   ) ;^144^^^^^129^159^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^if  ( hex.length() + 9  == 1 )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P8_Replace_Mix]^if  ( hex .substring ( len , i )   == 1 )   {^147^^^^^132^162^if  ( hex.length (  )  == 1 )   {^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^return outBuffer.toString (  ) .substring ( len, len ) ;^152^^^^^137^167^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P5_Replace_Variable]^return outBuffer.toString (  ) .substring ( 0, i ) ;^152^^^^^137^167^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P5_Replace_Variable]^return outBuffer.toString (  ) .substring ( 0 ) ;^152^^^^^137^167^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P5_Replace_Variable]^return len.toString (  ) .substring ( 0, outBuffer ) ;^152^^^^^137^167^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P7_Replace_Invocation]^return outBuffer.append (  ) .substring ( 0, len ) ;^152^^^^^137^167^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P8_Replace_Mix]^return outBuffer.toString (  )  .length (  )  ;^152^^^^^137^167^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P3_Replace_Literal]^return outBuffer.toString (  ) .substring ( i, len ) ;^152^^^^^137^167^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P14_Delete_Statement]^^152^^^^^137^167^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRand  String  hex  long  serialVersionUID  RandomGenerator  ran  rand  int  i  len  
[P2_Replace_Operator]^if  ( lower < upper )  {^164^^^^^163^170^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P5_Replace_Variable]^if  ( upper >= lower )  {^164^^^^^163^170^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P9_Replace_Statement]^if  ( r >= p )  {^164^^^^^163^170^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("upper bound must be > lower bound");^164^165^166^167^^163^170^if  ( lower >= upper )  { throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P16_Remove_Block]^^164^165^166^167^^163^170^if  ( lower >= upper )  { throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^164^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^164^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^164^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^164^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^164^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^164^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^164^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^164^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^164^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^164^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "d must be > " ) ;^165^166^^^^163^170^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "sample size must be > 0" )  ;^165^166^^^^163^170^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^165^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^165^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^165^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "upper bound must be > lower bound must" ) ;^165^166^^^^163^170^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ")  ; ;^165^166^^^^163^170^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^165^166^^^^163^170^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^165^166^^^^163^170^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^165^166^^^^163^170^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^165^166^^^^163^170^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^165^166^^^^163^170^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size must be > 0" ) ;throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^165^166^^^^163^170^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^165^166^^^^163^170^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^165^166^^^^163^170^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^165^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^165^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^165^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^165^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^165^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^165^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^165^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^165^^^^^163^170^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "upper bound must be > lower " ) ;^165^166^^^^163^170^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "u" ) ;^165^166^^^^163^170^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P7_Replace_Invocation]^RandomGenerator rand = getSecRan (  ) ;^168^^^^^163^170^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^RandomGenerator ran = getRan (  ) ;RandomGenerator rand = getRan (  ) ;^168^^^^^163^170^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P14_Delete_Statement]^^168^^^^^163^170^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P1_Replace_Type]^return lower +  (  long  )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P2_Replace_Operator]^return lower +  >>  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P2_Replace_Operator]^return / lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P2_Replace_Operator]^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower  >>  1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P2_Replace_Operator]^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper  !=  lower + 1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P3_Replace_Literal]^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower  )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P5_Replace_Variable]^return lower +  ( int )   ( ran.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P5_Replace_Variable]^return rand +  ( int )   ( lower.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P5_Replace_Variable]^return lower +  ( int )   ( upper.nextDouble (  )  *  ( rand - lower + 1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P5_Replace_Variable]^return upper +  ( int )   ( rand.nextDouble (  )  *  ( lower - lower + 1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P7_Replace_Invocation]^return lower +  ( int )   ( rand.nextBytes (  )  *  ( upper - lower + 1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P8_Replace_Mix]^return lower +  ( int )   ( rand.nextBytes (  )  *  ( upper - lower + 1 / 1 )  ) ;^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P14_Delete_Statement]^^169^^^^^163^170^return lower +  ( int )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  secRand  boolean  long  serialVersionUID  RandomGenerator  ran  rand  int  lower  upper  
[P2_Replace_Operator]^if  ( lower > upper )  {^181^^^^^180^187^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^if  ( serialVersionUID >= upper )  {^181^^^^^180^187^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^if  ( upper >= lower )  {^181^^^^^180^187^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( r >= p )  {^181^^^^^180^187^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("upper bound must be > lower bound");^181^182^183^184^^180^187^if  ( lower >= upper )  { throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P16_Remove_Block]^^181^182^183^184^^180^187^if  ( lower >= upper )  { throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^181^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^181^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^181^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^181^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^181^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^181^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^181^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^181^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^181^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^181^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "upper bound must be > lower boundlower bou" ) ;^182^183^^^^180^187^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "sample size must be > 0" )  ;^182^183^^^^180^187^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^182^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^182^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^182^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "upper bound must be > lower bounder bound m" ) ;^182^183^^^^180^187^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^182^183^^^^180^187^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^182^183^^^^180^187^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^182^183^^^^180^187^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^182^183^^^^180^187^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^182^183^^^^180^187^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size must be > 0" ) ;throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^182^183^^^^180^187^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^182^183^^^^180^187^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^182^183^^^^180^187^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^182^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^182^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^182^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^182^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^182^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^182^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^182^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^182^^^^^180^187^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "uppepper bound must be > lower bound" ) ;^182^183^^^^180^187^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " be" ) ;^182^183^^^^180^187^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P7_Replace_Invocation]^RandomGenerator rand = getSecRan (  ) ;^185^^^^^180^187^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^RandomGenerator ran = getRan (  ) ;RandomGenerator rand = getRan (  ) ;^185^^^^^180^187^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P14_Delete_Statement]^^185^^^^^180^187^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P1_Replace_Type]^return lower +  (  short  )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P2_Replace_Operator]^return lower +  !=  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P2_Replace_Operator]^return / lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P2_Replace_Operator]^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower  <  1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P2_Replace_Operator]^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper  >  lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P3_Replace_Literal]^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower  )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^return serialVersionUID +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^return lower +  ( long )   ( ran.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^return lower +  ( long )   ( rand.nextDouble (  )  *  ( serialVersionUID - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^return rand +  ( long )   ( lower.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^return lower +  ( long )   ( upper.nextDouble (  )  *  ( rand - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^return upper +  ( long )   ( rand.nextDouble (  )  *  ( lower - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P7_Replace_Invocation]^return lower +  ( long )   ( rand.nextBytes (  )  *  ( upper - lower + 1 )  ) ;^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P14_Delete_Statement]^^186^^^^^180^187^return lower +  ( long )   ( rand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P2_Replace_Operator]^if  ( len < 0 )  {^204^^^^^189^219^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^if  ( len <= i )  {^204^^^^^189^219^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P5_Replace_Variable]^if  ( numIter <= 0 )  {^204^^^^^189^219^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P8_Replace_Mix]^if  ( len <= 1 )  {^204^^^^^189^219^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P9_Replace_Statement]^if  ( i == 0 )  {^204^^^^^189^219^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P9_Replace_Statement]^if  ( mean <= 0 )  {^204^^^^^189^219^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P9_Replace_Statement]^if  ( mean < 0.0 )   {^204^^^^^189^219^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P9_Replace_Statement]^if  ( k == 0 )  {^204^^^^^189^219^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P9_Replace_Statement]^if  ( sigma <= 0 )  {^204^^^^^189^219^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P9_Replace_Statement]^if  ( r >= p )  {^204^^^^^189^219^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P9_Replace_Statement]^if  ( rand == null )  {^204^^^^^189^219^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P9_Replace_Statement]^if  ( k > n )  {^204^^^^^189^219^if  ( len <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("length must be positive");^204^205^206^^^189^219^if  ( len <= 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P16_Remove_Block]^^204^205^206^^^189^219^if  ( len <= 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^204^^^^^189^219^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^204^^^^^189^219^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^204^^^^^189^219^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^204^^^^^189^219^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^204^^^^^189^219^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^204^^^^^189^219^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^204^^^^^189^219^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^204^^^^^189^219^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^204^^^^^189^219^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^204^^^^^189^219^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "sample size must be > 0" )   ;^205^^^^^190^220^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^205^^^^^190^220^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^205^^^^^190^220^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^205^^^^^190^220^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;throw new IllegalArgumentException  (" ")  ;^205^^^^^190^220^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;throw new IllegalArgumentException  (" ")  ;^205^^^^^190^220^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;throw new IllegalArgumentException  (" ")  ;^205^^^^^190^220^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;throw new IllegalArgumentException  (" ")  ;^205^^^^^190^220^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;throw new IllegalArgumentException  (" ")  ;^205^^^^^190^220^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size must be > 0" ) ;throw new IllegalArgumentException  (" ")  ;^205^^^^^190^220^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;throw new IllegalArgumentException  (" ")  ;^205^^^^^190^220^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;throw new IllegalArgumentException  (" ")  ;^205^^^^^190^220^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^205^^^^^190^220^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^205^^^^^190^220^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^205^^^^^190^220^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^205^^^^^190^220^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^205^^^^^190^220^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^205^^^^^190^220^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^205^^^^^190^220^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^205^^^^^190^220^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^SecureRandom secRan = getRan (  ) ;^209^^^^^194^224^SecureRandom secRan = getSecRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^SecureRandom sec = getSecRan (  ) ;SecureRandom secRan = getSecRan (  ) ;^209^^^^^194^224^SecureRandom secRan = getSecRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^RandomGenerator ran = getRan (  ) ;SecureRandom secRan = getSecRan (  ) ;^209^^^^^194^224^SecureRandom secRan = getSecRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P14_Delete_Statement]^^209^210^^^^194^224^SecureRandom secRan = getSecRan (  ) ; MessageDigest alg = null;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^alg = MessageDigest.getInstance ( "SHA" ) ;^212^^^^^197^227^alg = MessageDigest.getInstance ( "SHA-1" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^alg = MessageDigest.update ( "SHA-1" ) ;^212^^^^^197^227^alg = MessageDigest.getInstance ( "SHA-1" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P8_Replace_Mix]^alg ;^212^^^^^197^227^alg = MessageDigest.getInstance ( "SHA-1" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^alg = MessageDigest.getInstance ( "" ) ;^212^^^^^197^227^alg = MessageDigest.getInstance ( "SHA-1" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P14_Delete_Statement]^^212^^^^^197^227^alg = MessageDigest.getInstance ( "SHA-1" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^alg = MessageDigest.getInstance ( "SHA-1S" ) ;^212^^^^^197^227^alg = MessageDigest.getInstance ( "SHA-1" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^alg = MessageDigest .getInstance ( hex , hex )  ;^212^^^^^197^227^alg = MessageDigest.getInstance ( "SHA-1" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P8_Replace_Mix]^alg  =  alg ;^212^^^^^197^227^alg = MessageDigest.getInstance ( "SHA-1" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P8_Replace_Mix]^return this;^214^^^^^199^229^return null;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^alg = MessageDigest.getInstance ( "AHA-1" ) ;^212^^^^^197^227^alg = MessageDigest.getInstance ( "SHA-1" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^alg.update (  ) ;^216^^^^^201^231^alg.reset (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^alg .digest (  )  ;^216^^^^^201^231^alg.reset (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P14_Delete_Statement]^^216^^^^^201^231^alg.reset (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^rand.setSeed ( seed ) ;alg.reset (  ) ;^216^^^^^201^231^alg.reset (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P1_Replace_Type]^long  numIter =  ( len / 40 )  + 1;^219^^^^^204^234^int numIter =  ( len / 40 )  + 1;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^int numIter =  ||  ( len / 40 )  + 1;^219^^^^^204^234^int numIter =  ( len / 40 )  + 1;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^int numIter =  ( len * 40 )  + 1;^219^^^^^204^234^int numIter =  ( len / 40 )  + 1;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^int numIter =  ( len / iter )  + 1;^219^^^^^204^234^int numIter =  ( len / 40 )  + 1;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^int numIter =  ( len / 40 )  + i;^219^^^^^204^234^int numIter =  ( len / 40 )  + 1;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P5_Replace_Variable]^int numIter =  ( iter / 40 )  + 1;^219^^^^^204^234^int numIter =  ( len / 40 )  + 1;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^byte[] randomBytes = new byte[ ( len / 2 )  + 1];int numIter =  ( len / 40 )  + 1;^219^^^^^204^234^int numIter =  ( len / 40 )  + 1;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^if  ( hex.length (  )  != 1 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^if  ( hex.length (  )  == -3 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^if  ( hex.length() + 5  == 1 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P6_Replace_Expression]^if  ( "0" + hex )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^if  ( hex .substring ( len , iter )   == 1 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P8_Replace_Mix]^if  ( hex.length (  )  == 0  )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P15_Unwrap_Block]^hex = "0" + hex;^242^243^244^^^227^257^if  ( hex.length (  )  == 1 )  { hex = "0" + hex; }^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P16_Remove_Block]^^242^243^244^^^227^257^if  ( hex.length (  )  == 1 )  { hex = "0" + hex; }^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P8_Replace_Mix]^hex =  "0" + null;^243^^^^^228^258^hex = "0" + hex;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P1_Replace_Type]^for  (  short  iter = 1; iter < numIter + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^for  ( int iter = 1; iter == numIter + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^for  ^  ( int iter = 1; iter < numIter + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^for  ( int iter = 1; iter <= numIter + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^for  <  ( int iter = 1; iter < numIter + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^for  !=  ( int iter = 1; iter < numIter + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^for  ( int iter = iter; iter < numIter + iter; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^for  ( int iter = len; iter < numIter + len; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^for  ( int iter = 1; iter < numIter ; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P5_Replace_Variable]^for  ( int numIter = 1; iter < numIter + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P5_Replace_Variable]^for  ( int iter = 1; iter < len + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P5_Replace_Variable]^for  ( iternt i = 1; iter < numIter + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P5_Replace_Variable]^for  ( int numIter = 1; iter < iter + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P5_Replace_Variable]^for  ( numIternt iter = 1; iter < i + 1; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^if  ( hex.length (  )  == len )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^hex = "" + hex;^243^^^^^228^258^hex = "0" + hex;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P1_Replace_Type]^for  (  short  i = 0; i < hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^for  ( int i = 0; i == hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^for   instanceof   ( int i = 0; i < hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^for  <<  ( int i = 0; i < hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^for  ( int i = numIter; i < hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P5_Replace_Variable]^for  ( numIternt i = 0; i < hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P5_Replace_Variable]^for  ( int i = 0; i < randomBytes.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P5_Replace_Variable]^for  ( int i = 0; i < numIter; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^if  ( hex.length (  )  == 4 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^if  ( hex.length() + 7  == 1 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^if  ( hex .substring ( iter , i )   == 1 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P8_Replace_Mix]^if  ( hex .substring ( len , len )   == 0  )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P4_Replace_Constructor]^Integer c = new Integer ( randomBytes[i] )  ;^232^^^^^217^247^Integer c = new Integer ( hash[i] ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^Integer c = new Integer ( randomBytes[i] ) ;Integer c = new Integer ( hash[i] ) ;^232^^^^^217^247^Integer c = new Integer ( hash[i] ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P1_Replace_Type]^char hex = Integer.toHexchar ( c.intValue (  )  + 128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^String hex = Integer.toHexString ( c.intValue (  )   ^  128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^String hex = Integer.toHexString ( c.intValue (  )  + numIter ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^String hex = Integer .Integer ( len )  ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^String hex = Integer.toHexString ( c.Integer (  )  + 128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^String hex = Integer.toHexString ( c.intValue (  )   <<  128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^String hex = Integer.toHexString ( c.intValue (  )   ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^String hex = Integer.toHexString ( c .Integer ( i )   + 128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P14_Delete_Statement]^^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^String hex = Integer.toHexString ( c .Integer ( len )   + 128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^if  ( hex.length() + 8  == 1 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P8_Replace_Mix]^if  ( hex .substring ( len , len )   == 1 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P14_Delete_Statement]^^245^^^^^230^260^outBuffer.append ( hex ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^byte[] randomBytes = new byte[i];^223^^^^^208^238^byte[] randomBytes = new byte[40];^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^byte[] randomBytes = new byte[ ( len / 2 )  + 1];byte[] randomBytes = new byte[40];^223^^^^^208^238^byte[] randomBytes = new byte[40];^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^byte hash[] = alg.update (  ) ;^228^^^^^213^243^byte hash[] = alg.digest (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^byte hash[] = alg .reset (  )  ;^228^^^^^213^243^byte hash[] = alg.digest (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^for  ( int i = len; i < hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^String hex = Integer.toHexString ( c.intValue (  )   >  128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^String hex = Integer .Integer ( numIter )  ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P5_Replace_Variable]^secRan.nextBytes ( hash ) ;^224^^^^^209^239^secRan.nextBytes ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^secRan.getInstance ( randomBytes ) ;^224^^^^^209^239^secRan.nextBytes ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P8_Replace_Mix]^secRan.getInstance ( hash ) ;^224^^^^^209^239^secRan.nextBytes ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P14_Delete_Statement]^^224^^^^^209^239^secRan.nextBytes ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^ran.nextBytes ( randomBytes ) ;secRan.nextBytes ( randomBytes ) ;^224^^^^^209^239^secRan.nextBytes ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^alg.update ( randomBytes ) ;secRan.nextBytes ( randomBytes ) ;^224^^^^^209^239^secRan.nextBytes ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P5_Replace_Variable]^alg.update ( hash ) ;^225^^^^^210^240^alg.update ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^alg .getInstance ( hex )  ;^225^^^^^210^240^alg.update ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P14_Delete_Statement]^^225^^^^^210^240^alg.update ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^secRan.nextBytes ( randomBytes ) ;alg.update ( randomBytes ) ;^225^^^^^210^240^alg.update ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P11_Insert_Donor_Statement]^ran.nextBytes ( randomBytes ) ;alg.update ( randomBytes ) ;^225^^^^^210^240^alg.update ( randomBytes ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P14_Delete_Statement]^^228^^^^^213^243^byte hash[] = alg.digest (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^String hex = Integer.toHexString ( c .Integer ( iter )   + 128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^if  ( hex.length() + 2  == 1 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P8_Replace_Mix]^if  ( hex .substring ( iter , iter )   == 1 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^outBuffer .toString (  )  ;^245^^^^^230^260^outBuffer.append ( hex ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^for  ( int i = 0; i <= hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^for  <  ( int i = 0; i < hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^for  ==  ( int i = 0; i < hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P5_Replace_Variable]^for  ( hash.lengthnt i = 0; i < i; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^if  ( hex.length (  )  > 1 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^if  ( hex.length() - 3  == 1 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^String hex = Integer.toHexString ( c.intValue (  )   &&  128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^String hex = Integer.toHexString ( c.intValue (  )  + len ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^String hex = Integer .Integer ( i )  ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^if  ( hex.length() + 3  == 1 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^for  ( int iter = numIter; iter < numIter + numIter; iter++ )  {^222^^^^^207^237^for  ( int iter = 1; iter < numIter + 1; iter++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^byte[] randomBytes = new byte[len];^223^^^^^208^238^byte[] randomBytes = new byte[40];^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^for  ( int i = 4; i < hash.length; i++ )  {^231^^^^^216^246^for  ( int i = 0; i < hash.length; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^String hex = Integer.toHexString ( c.intValue (  )   &  128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^String hex = Integer.toHexString ( c.intValue (  )  + iter ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^String hex = Integer.toHexString ( c .Integer ( numIter )   + 128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^String hex = Integer.toHexString ( c.intValue (  )    instanceof   128 ) ;^239^^^^^224^254^String hex = Integer.toHexString ( c.intValue (  )  + 128 ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^if  ( hex.length() - 5  == 1 )  {^242^^^^^227^257^if  ( hex.length (  )  == 1 )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^return outBuffer.toString (  ) .substring ( iter, len ) ;^248^^^^^233^263^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P5_Replace_Variable]^return outBuffer.toString (  ) .substring ( 0, numIter ) ;^248^^^^^233^263^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P5_Replace_Variable]^return outBuffer.toString (  ) .substring ( 0 ) ;^248^^^^^233^263^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P5_Replace_Variable]^return len.toString (  ) .substring ( 0, outBuffer ) ;^248^^^^^233^263^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^return outBuffer.append (  ) .substring ( 0, len ) ;^248^^^^^233^263^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^return outBuffer .StringBuffer (  )  .substring ( 0, len ) ;^248^^^^^233^263^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P8_Replace_Mix]^return outBuffer.append (  ) .substring ( 0, numIter ) ;^248^^^^^233^263^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P3_Replace_Literal]^return outBuffer.toString (  ) .substring ( 8, len ) ;^248^^^^^233^263^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P7_Replace_Invocation]^return outBuffer.toString (  )  .length (  )  ;^248^^^^^233^263^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P14_Delete_Statement]^^248^^^^^233^263^return outBuffer.toString (  ) .substring ( 0, len ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureHexString [RETURN_TYPE] String   int len [VARIABLES] byte[]  hash  randomBytes  Integer  c  StringBuffer  outBuffer  boolean  SecureRandom  secRan  secRand  NoSuchAlgorithmException  ex  String  hex  MessageDigest  alg  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  iter  len  numIter  
[P2_Replace_Operator]^if  ( lower == upper )  {^261^^^^^260^267^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P5_Replace_Variable]^if  ( upper >= lower )  {^261^^^^^260^267^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P9_Replace_Statement]^if  ( r >= p )  {^261^^^^^260^267^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("lower bound must be < upper bound");^261^262^263^264^^260^267^if  ( lower >= upper )  { throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P16_Remove_Block]^^261^262^263^264^^260^267^if  ( lower >= upper )  { throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^261^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^261^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^261^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^261^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^261^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^261^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^261^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^261^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^261^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^261^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "t be <" ) ;^262^263^^^^260^267^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "lower bound must be <= upper bound" )  ;^262^263^^^^260^267^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^262^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^262^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^262^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "bound must be < uower bound must be < upper bound" ) ;^262^263^^^^260^267^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ")  ; ;^262^263^^^^260^267^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^262^263^^^^260^267^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^262^263^^^^260^267^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^262^263^^^^260^267^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^262^263^^^^260^267^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^262^263^^^^260^267^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^262^263^^^^260^267^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size must be > 0" ) ;throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^262^263^^^^260^267^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^262^263^^^^260^267^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^262^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^262^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^262^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^262^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^262^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^262^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^262^^^^^260^267^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "lower bound must be < upper boundwer " ) ;^262^263^^^^260^267^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " ower bound must be < upper bound" ) ;^262^263^^^^260^267^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P7_Replace_Invocation]^SecureRandom sec = getRan (  ) ;^265^^^^^260^267^SecureRandom sec = getSecRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P11_Insert_Donor_Statement]^SecureRandom secRan = getSecRan (  ) ;SecureRandom sec = getSecRan (  ) ;^265^^^^^260^267^SecureRandom sec = getSecRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P14_Delete_Statement]^^265^266^^^^260^267^SecureRandom sec = getSecRan (  ) ; return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P1_Replace_Type]^return lower +  (  short  )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P2_Replace_Operator]^return lower +  |  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P2_Replace_Operator]^return + lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P2_Replace_Operator]^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower   instanceof   1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P2_Replace_Operator]^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper  <  lower + 1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P3_Replace_Literal]^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower  )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P5_Replace_Variable]^return upper +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P5_Replace_Variable]^return lower +  ( int )   ( secRand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P5_Replace_Variable]^return upper +  ( int )   ( sec.nextDouble (  )  *  ( lower - lower + 1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P5_Replace_Variable]^return lower +  ( int )   ( upper.nextDouble (  )  *  ( sec - lower + 1 )  ) ;^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P14_Delete_Statement]^^266^^^^^260^267^return lower +  ( int )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureInt [RETURN_TYPE] int   int lower int upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  int  lower  upper  
[P2_Replace_Operator]^if  ( lower < upper )  {^279^^^^^278^285^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^if  ( serialVersionUID >= upper )  {^279^^^^^278^285^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^if  ( lower >= serialVersionUID )  {^279^^^^^278^285^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^if  ( upper >= lower )  {^279^^^^^278^285^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( r >= p )  {^279^^^^^278^285^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("lower bound must be < upper bound");^279^280^281^282^^278^285^if  ( lower >= upper )  { throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P16_Remove_Block]^^279^280^281^282^^278^285^if  ( lower >= upper )  { throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^279^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^279^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^279^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^279^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^279^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^279^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^279^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^279^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^279^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^279^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "wower bound must be < upper bound" ) ;^280^281^^^^278^285^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "lower bound must be <= upper bound" )  ;^280^281^^^^278^285^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^280^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^280^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^280^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^280^281^^^^278^285^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^280^281^^^^278^285^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^280^281^^^^278^285^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^280^281^^^^278^285^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^280^281^^^^278^285^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^280^281^^^^278^285^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size must be > 0" ) ;throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^280^281^^^^278^285^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^280^281^^^^278^285^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^280^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^280^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^280^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^280^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^280^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^280^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^280^^^^^278^285^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "lower bound must be < upper boundbe < upper" ) ;^280^281^^^^278^285^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "wer ower bound must be < upper bound" ) ;^280^281^^^^278^285^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P7_Replace_Invocation]^SecureRandom sec = getRan (  ) ;^283^^^^^278^285^SecureRandom sec = getSecRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^SecureRandom secRan = getSecRan (  ) ;SecureRandom sec = getSecRan (  ) ;^283^^^^^278^285^SecureRandom sec = getSecRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P14_Delete_Statement]^^283^^^^^278^285^SecureRandom sec = getSecRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P1_Replace_Type]^return lower +  (  short  )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P2_Replace_Operator]^return lower +  !=  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P2_Replace_Operator]^return - lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P2_Replace_Operator]^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower   instanceof   1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P2_Replace_Operator]^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper  |  lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P3_Replace_Literal]^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower  )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^return serialVersionUID +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^return lower +  ( long )   ( secRand.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^return lower +  ( long )   ( sec.nextDouble (  )  *  ( serialVersionUID - lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^return upper +  ( long )   ( sec.nextDouble (  )  *  ( lower - lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^return lower +  ( long )   ( upper.nextDouble (  )  *  ( sec - lower + 1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^return lower  &&   ( long )   ( sec.nextDouble (  )  *  ( upper - lower  &&  1 )  ) ;^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P14_Delete_Statement]^^284^^^^^278^285^return lower +  ( long )   ( sec.nextDouble (  )  *  ( upper - lower + 1 )  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSecureLong [RETURN_TYPE] long   long lower long upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  serialVersionUID  upper  RandomGenerator  ran  rand  
[P2_Replace_Operator]^if  ( mean < 0 )  {^304^^^^^303^322^if  ( mean <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P3_Replace_Literal]^if  ( mean <= 1 )  {^304^^^^^303^322^if  ( mean <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P5_Replace_Variable]^if  ( rnd <= 0 )  {^304^^^^^303^322^if  ( mean <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P8_Replace_Mix]^if  ( mean <= 2 )  {^304^^^^^303^322^if  ( mean <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( i == 0 )  {^304^^^^^303^322^if  ( mean <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( len <= 0 )  {^304^^^^^303^322^if  ( mean <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( secRand == null )  {^304^^^^^303^322^if  ( mean <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( mean < 0.0 )   {^304^^^^^303^322^if  ( mean <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( k == 0 )  {^304^^^^^303^322^if  ( mean <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( sigma <= 0 )  {^304^^^^^303^322^if  ( mean <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( r >= p )  {^304^^^^^303^322^if  ( mean <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( rand == null )  {^304^^^^^303^322^if  ( mean <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Poisson mean must be > 0");^304^305^306^^^303^322^if  ( mean <= 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P16_Remove_Block]^^304^305^306^^^303^322^if  ( mean <= 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^304^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^304^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^304^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^304^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^304^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^304^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^304^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^304^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^304^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^304^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Gaussian std dev must be > 0" )   ;^305^^^^^303^322^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^305^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^305^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^305^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^305^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^305^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^305^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; ;^305^^^^^303^322^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;throw new IllegalArgumentException  (" ")  ;^305^^^^^303^322^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;throw new IllegalArgumentException  (" ")  ;^305^^^^^303^322^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;throw new IllegalArgumentException  (" ")  ;^305^^^^^303^322^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;throw new IllegalArgumentException  (" ")  ;^305^^^^^303^322^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;throw new IllegalArgumentException  (" ")  ;^305^^^^^303^322^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size must be > 0" ) ;throw new IllegalArgumentException  (" ")  ;^305^^^^^303^322^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;throw new IllegalArgumentException  (" ")  ;^305^^^^^303^322^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;throw new IllegalArgumentException  (" ")  ;^305^^^^^303^322^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^305^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^305^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^305^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^305^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^305^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P1_Replace_Type]^float p = Math.exp ( -mean ) ;^307^^^^^303^322^double p = Math.exp ( -mean ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P5_Replace_Variable]^double p = Math.exp ( -rnd ) ;^307^^^^^303^322^double p = Math.exp ( -mean ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P7_Replace_Invocation]^double p = Math.log ( -mean ) ;^307^^^^^303^322^double p = Math.exp ( -mean ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P8_Replace_Mix]^double p = Math.log ( -rnd ) ;^307^^^^^303^322^double p = Math.exp ( -mean ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^double u = rand.nextDouble (  ) ;double p = Math.exp ( -mean ) ;^307^^^^^303^322^double p = Math.exp ( -mean ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^double unif = rand.nextDouble (  ) ;double p = Math.exp ( -mean ) ;^307^^^^^303^322^double p = Math.exp ( -mean ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P14_Delete_Statement]^^307^^^^^303^322^double p = Math.exp ( -mean ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P1_Replace_Type]^short  n = 0;^308^^^^^303^322^long n = 0;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P3_Replace_Literal]^long n = -1;^308^^^^^303^322^long n = 0;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P1_Replace_Type]^int r = 1.0d;^309^^^^^303^322^double r = 1.0d;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P3_Replace_Literal]^double r = 7.0d;^309^^^^^303^322^double r = 1.0d;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^double rnd = 1.0d;double r = 1.0d;^309^^^^^303^322^double r = 1.0d;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P1_Replace_Type]^int rnd = 1.0d;^310^^^^^303^322^double rnd = 1.0d;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P3_Replace_Literal]^double rnd = 0.16666666666666666d;^310^^^^^303^322^double rnd = 1.0d;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^double r = 1.0d;double rnd = 1.0d;^310^^^^^303^322^double rnd = 1.0d;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P7_Replace_Invocation]^RandomGenerator rand = getSecRan (  ) ;^311^^^^^303^322^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^RandomGenerator ran = getRan (  ) ;RandomGenerator rand = getRan (  ) ;^311^^^^^303^322^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P14_Delete_Statement]^^311^^^^^303^322^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P2_Replace_Operator]^while  ( n > 1000 * mean )  {^312^^^^^303^322^while  ( n < 1000 * mean )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P2_Replace_Operator]^while  ( n < 1000 / mean )  {^312^^^^^303^322^while  ( n < 1000 * mean )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P2_Replace_Operator]^while + ( n < 1000 * mean )  {^312^^^^^303^322^while  ( n < 1000 * mean )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P5_Replace_Variable]^while  ( upper < 1000 * mean )  {^312^^^^^303^322^while  ( n < 1000 * mean )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P5_Replace_Variable]^while  ( n < 1000 * rnd )  {^312^^^^^303^322^while  ( n < 1000 * mean )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P2_Replace_Operator]^if  ( r > p )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P5_Replace_Variable]^if  ( r >= rnd )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P5_Replace_Variable]^if  ( p >= r )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( i == 0 )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( lower >= upper )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( len <= 0 )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( mean <= 0 )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( k == 0 )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( sigma <= 0 )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( k > len )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( rand == null )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P9_Replace_Statement]^if  ( k > n )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P15_Unwrap_Block]^n++;^315^316^317^318^319^303^322^if  ( r >= p )  { n++; } else { return n; }^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P16_Remove_Block]^^315^316^317^318^319^303^322^if  ( r >= p )  { n++; } else { return n; }^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P13_Insert_Block]^if  ( i == 0 )  {     target = 0; }else {     target = nextInt ( 0, i ) ; }^315^^^^^303^322^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P5_Replace_Variable]^return upper;^318^^^^^303^322^return n;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P5_Replace_Variable]^rnd = ran.nextDouble (  ) ;^313^^^^^303^322^rnd = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P7_Replace_Invocation]^rnd = rand.nextBytes (  ) ;^313^^^^^303^322^rnd = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^u = rand.nextDouble (  ) ;rnd = rand.nextDouble (  ) ;^313^^^^^303^322^rnd = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^unif = rand.nextDouble (  ) ;rnd = rand.nextDouble (  ) ;^313^^^^^303^322^rnd = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P2_Replace_Operator]^r / = r * rnd;^314^^^^^303^322^r = r * rnd;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P5_Replace_Variable]^r = rnd * r;^314^^^^^303^322^r = r * rnd;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P8_Replace_Mix]^r =  rnd * rndnd;^314^^^^^303^322^r = r * rnd;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P7_Replace_Invocation]^rnd = rand .nextGaussian ( r , p )  ;^313^^^^^303^322^rnd = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P8_Replace_Mix]^rnd = ran.nextBytes (  ) ;^313^^^^^303^322^rnd = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P14_Delete_Statement]^^313^314^^^^303^322^rnd = rand.nextDouble (  ) ; r = r * rnd;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^double u = rand.nextDouble (  ) ;rnd = rand.nextDouble (  ) ;^313^^^^^303^322^rnd = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P11_Insert_Donor_Statement]^double unif = rand.nextDouble (  ) ;rnd = rand.nextDouble (  ) ;^313^^^^^303^322^rnd = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P2_Replace_Operator]^if  ( r == p )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P5_Replace_Variable]^if  ( rnd >= p )  {^315^^^^^303^322^if  ( r >= p )  {^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P5_Replace_Variable]^r = r * p;^314^^^^^303^322^r = r * rnd;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P5_Replace_Variable]^return upper;^321^^^^^303^322^return n;^[CLASS] RandomDataImpl  [METHOD] nextPoisson [RETURN_TYPE] long   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  p  r  rnd  
[P2_Replace_Operator]^if  ( sigma < 0 )  {^334^^^^^333^339^if  ( sigma <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P3_Replace_Literal]^if  ( sigma <= -2 )  {^334^^^^^333^339^if  ( sigma <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P5_Replace_Variable]^if  ( mu <= 0 )  {^334^^^^^333^339^if  ( sigma <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P8_Replace_Mix]^if  ( mu <= 2 )  {^334^^^^^333^339^if  ( sigma <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P9_Replace_Statement]^if  ( i == 0 )  {^334^^^^^333^339^if  ( sigma <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P9_Replace_Statement]^if  ( len <= 0 )  {^334^^^^^333^339^if  ( sigma <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P9_Replace_Statement]^if  ( mean <= 0 )  {^334^^^^^333^339^if  ( sigma <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P9_Replace_Statement]^if  ( k == 0 )  {^334^^^^^333^339^if  ( sigma <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P9_Replace_Statement]^if  ( r >= p )  {^334^^^^^333^339^if  ( sigma <= 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Gaussian std dev must be > 0");^334^335^336^^^333^339^if  ( sigma <= 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P16_Remove_Block]^^334^335^336^^^333^339^if  ( sigma <= 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^334^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^334^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^334^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^334^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^334^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^334^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^334^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^334^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^334^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^334^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "sample size must be > 0" )   ;^335^^^^^333^339^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^335^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^335^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^335^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^335^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^335^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;throw new IllegalArgumentException  (" ")  ;^335^^^^^333^339^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;throw new IllegalArgumentException  (" ")  ;^335^^^^^333^339^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;throw new IllegalArgumentException  (" ")  ;^335^^^^^333^339^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;throw new IllegalArgumentException  (" ")  ;^335^^^^^333^339^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;throw new IllegalArgumentException  (" ")  ;^335^^^^^333^339^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size must be > 0" ) ;throw new IllegalArgumentException  (" ")  ;^335^^^^^333^339^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;throw new IllegalArgumentException  (" ")  ;^335^^^^^333^339^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;throw new IllegalArgumentException  (" ")  ;^335^^^^^333^339^throw new IllegalArgumentException  (" ")  ;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^335^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^335^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^335^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^335^^^^^333^339^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P7_Replace_Invocation]^RandomGenerator rand = getSecRan (  ) ;^337^^^^^333^339^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P11_Insert_Donor_Statement]^RandomGenerator ran = getRan (  ) ;RandomGenerator rand = getRan (  ) ;^337^^^^^333^339^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P14_Delete_Statement]^^337^^^^^333^339^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P2_Replace_Operator]^return sigma * rand.nextGaussian (  >=  )  + mu;^338^^^^^333^339^return sigma * rand.nextGaussian (  )  + mu;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P2_Replace_Operator]^return sigma + rand.nextGaussian (  )  + mu;^338^^^^^333^339^return sigma * rand.nextGaussian (  )  + mu;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P5_Replace_Variable]^return sigma * ran.nextGaussian (  )  + mu;^338^^^^^333^339^return sigma * rand.nextGaussian (  )  + mu;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P5_Replace_Variable]^return mu * rand.nextGaussian (  )  + sigma;^338^^^^^333^339^return sigma * rand.nextGaussian (  )  + mu;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P5_Replace_Variable]^return sigma * mu.nextGaussian (  )  + rand;^338^^^^^333^339^return sigma * rand.nextGaussian (  )  + mu;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P7_Replace_Invocation]^return sigma * rand.setSeed (  )  + mu;^338^^^^^333^339^return sigma * rand.nextGaussian (  )  + mu;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P7_Replace_Invocation]^return sigma * rand .nextGaussian ( sigma , sigma )   + mu;^338^^^^^333^339^return sigma * rand.nextGaussian (  )  + mu;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P8_Replace_Mix]^return sigma * ran.setSeed (  )  + mu;^338^^^^^333^339^return sigma * rand.nextGaussian (  )  + mu;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P14_Delete_Statement]^^338^^^^^333^339^return sigma * rand.nextGaussian (  )  + mu;^[CLASS] RandomDataImpl  [METHOD] nextGaussian [RETURN_TYPE] double   double mu double sigma [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mu  sigma  
[P2_Replace_Operator]^if  ( mean > 0.0 )   {^354^^^^^353^364^if  ( mean < 0.0 )   {^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P5_Replace_Variable]^if  ( unif < 0.0 )   {^354^^^^^353^364^if  ( mean < 0.0 )   {^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P8_Replace_Mix]^if  ( unif < 0.0D )   {^354^^^^^353^364^if  ( mean < 0.0 )   {^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P9_Replace_Statement]^if  ( len <= 0 )  {^354^^^^^353^364^if  ( mean < 0.0 )   {^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P9_Replace_Statement]^if  ( mean <= 0 )  {^354^^^^^353^364^if  ( mean < 0.0 )   {^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Exponential mean must be >= 0");^354^355^356^357^^353^364^if  ( mean < 0.0 )   { throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P16_Remove_Block]^^354^355^356^357^^353^364^if  ( mean < 0.0 )   { throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^354^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^354^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^354^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^354^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^354^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^354^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^354^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^354^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^354^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^354^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Exponential mean must be >= 0Exponentia" ) ;^355^356^^^^353^364^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Gaussian std dev must be > 0" )  ;^355^356^^^^353^364^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^355^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^355^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^355^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^355^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^355^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "nential mean must" ) ;^355^356^^^^353^364^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ")  ; ;^355^356^^^^353^364^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^355^356^^^^353^364^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^355^356^^^^353^364^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^355^356^^^^353^364^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^355^356^^^^353^364^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^355^356^^^^353^364^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^355^356^^^^353^364^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size must be > 0" ) ;throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^355^356^^^^353^364^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^355^356^^^^353^364^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^355^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^355^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^355^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^355^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^355^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^355^^^^^353^364^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "al mean must bexponential mean must be >= 0" ) ;^355^356^^^^353^364^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "xponential mean must be xponential mean must be >= 0" ) ;^355^356^^^^353^364^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P7_Replace_Invocation]^RandomGenerator rand = getSecRan (  ) ;^358^^^^^353^364^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P11_Insert_Donor_Statement]^RandomGenerator ran = getRan (  ) ;RandomGenerator rand = getRan (  ) ;^358^^^^^353^364^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P14_Delete_Statement]^^358^359^^^^353^364^RandomGenerator rand = getRan (  ) ; double unif = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P1_Replace_Type]^int unif = rand.nextDouble (  ) ;^359^^^^^353^364^double unif = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P5_Replace_Variable]^double unif = ran.nextDouble (  ) ;^359^^^^^353^364^double unif = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P7_Replace_Invocation]^double unif = rand.nextBytes (  ) ;^359^^^^^353^364^double unif = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P11_Insert_Donor_Statement]^double p = Math.exp ( -mean ) ;double unif = rand.nextDouble (  ) ;^359^^^^^353^364^double unif = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P11_Insert_Donor_Statement]^double u = rand.nextDouble (  ) ;double unif = rand.nextDouble (  ) ;^359^^^^^353^364^double unif = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P14_Delete_Statement]^^359^360^361^362^^353^364^double unif = rand.nextDouble (  ) ; while  ( unif == 0.0d )  { unif = rand.nextDouble (  ) ; }^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P2_Replace_Operator]^while  ( unif != 0.0d )  {^360^^^^^353^364^while  ( unif == 0.0d )  {^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P5_Replace_Variable]^while  ( mean == 0.0d )  {^360^^^^^353^364^while  ( unif == 0.0d )  {^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P5_Replace_Variable]^unif = ran.nextDouble (  ) ;^361^^^^^353^364^unif = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P7_Replace_Invocation]^unif = rand.nextBytes (  ) ;^361^^^^^353^364^unif = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P11_Insert_Donor_Statement]^u = rand.nextDouble (  ) ;unif = rand.nextDouble (  ) ;^361^^^^^353^364^unif = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P11_Insert_Donor_Statement]^rnd = rand.nextDouble (  ) ;unif = rand.nextDouble (  ) ;^361^^^^^353^364^unif = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P7_Replace_Invocation]^unif = rand .nextGaussian ( mean , unif )  ;^361^^^^^353^364^unif = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P14_Delete_Statement]^^361^362^^^^353^364^unif = rand.nextDouble (  ) ; }^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P7_Replace_Invocation]^unif = rand .nextGaussian ( unif , unif )  ;^361^^^^^353^364^unif = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P2_Replace_Operator]^return + -mean * Math.log ( unif ) ;^363^^^^^353^364^return -mean * Math.log ( unif ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P7_Replace_Invocation]^return -mean * Math.exp ( unif ) ;^363^^^^^353^364^return -mean * Math.log ( unif ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P5_Replace_Variable]^return -mean * Math.log ( mean ) ;^363^^^^^353^364^return -mean * Math.log ( unif ) ;^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P14_Delete_Statement]^^363^364^^^^353^364^return -mean * Math.log ( unif ) ; }^[CLASS] RandomDataImpl  [METHOD] nextExponential [RETURN_TYPE] double   double mean [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  mean  unif  
[P2_Replace_Operator]^if  ( lower > upper )  {^378^^^^^377^391^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P5_Replace_Variable]^if  ( lower >= u )  {^378^^^^^377^391^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P5_Replace_Variable]^if  ( upper >= lower )  {^378^^^^^377^391^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P8_Replace_Mix]^if  ( u >= upper )  {^378^^^^^377^391^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P9_Replace_Statement]^if  ( r >= p )  {^378^^^^^377^391^if  ( lower >= upper )  {^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("lower bound must be <= upper bound");^378^379^380^381^^377^391^if  ( lower >= upper )  { throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P16_Remove_Block]^^378^379^380^381^^377^391^if  ( lower >= upper )  { throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^378^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^378^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^378^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^378^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^378^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^378^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^378^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^378^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^378^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^378^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "lower bound must be <= upper boundnd mus" ) ;^379^380^^^^377^391^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "lower bound must be < upper bound" )  ;^379^380^^^^377^391^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^379^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^379^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^379^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ower bound mower bound must be <= upper bound" ) ;^379^380^^^^377^391^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^379^380^^^^377^391^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^379^380^^^^377^391^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^379^380^^^^377^391^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^379^380^^^^377^391^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^379^380^^^^377^391^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size must be > 0" ) ;throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^379^380^^^^377^391^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^379^380^^^^377^391^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^379^380^^^^377^391^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^379^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^379^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^379^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^379^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^379^^^^^377^391^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "lower bound must be <= up" ) ;^379^380^^^^377^391^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "<= upper bower bound must be <= upper bound" ) ;^379^380^^^^377^391^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P7_Replace_Invocation]^RandomGenerator rand = getSecRan (  ) ;^382^^^^^377^391^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^RandomGenerator ran = getRan (  ) ;RandomGenerator rand = getRan (  ) ;^382^^^^^377^391^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P14_Delete_Statement]^^382^^^^^377^391^RandomGenerator rand = getRan (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P1_Replace_Type]^int u = rand.nextDouble (  ) ;^385^^^^^377^391^double u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P5_Replace_Variable]^double u = ran.nextDouble (  ) ;^385^^^^^377^391^double u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P7_Replace_Invocation]^double u = rand.nextBytes (  ) ;^385^^^^^377^391^double u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P7_Replace_Invocation]^double u = rand .nextGaussian ( upper , upper )  ;^385^^^^^377^391^double u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^double p = Math.exp ( -mean ) ;double u = rand.nextDouble (  ) ;^385^^^^^377^391^double u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^double unif = rand.nextDouble (  ) ;double u = rand.nextDouble (  ) ;^385^^^^^377^391^double u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P14_Delete_Statement]^^385^^^^^377^391^double u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^u = rand.nextDouble (  ) ;double u = rand.nextDouble (  ) ;^385^^^^^377^391^double u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^rnd = rand.nextDouble (  ) ;double u = rand.nextDouble (  ) ;^385^^^^^377^391^double u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^unif = rand.nextDouble (  ) ;double u = rand.nextDouble (  ) ;^385^^^^^377^391^double u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P2_Replace_Operator]^while ( u < 0.0 ) {^386^^^^^377^391^while ( u <= 0.0 ) {^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P5_Replace_Variable]^while ( upper <= 0.0 ) {^386^^^^^377^391^while ( u <= 0.0 ) {^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P5_Replace_Variable]^u = ran.nextDouble (  ) ;^387^^^^^377^391^u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P7_Replace_Invocation]^u = rand.nextBytes (  ) ;^387^^^^^377^391^u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P7_Replace_Invocation]^u = rand .nextGaussian ( upper , lower )  ;^387^^^^^377^391^u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^rnd = rand.nextDouble (  ) ;u = rand.nextDouble (  ) ;^387^^^^^377^391^u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^unif = rand.nextDouble (  ) ;u = rand.nextDouble (  ) ;^387^^^^^377^391^u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P7_Replace_Invocation]^u = rand .nextGaussian ( lower , u )  ;^387^^^^^377^391^u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P8_Replace_Mix]^u = ran.nextBytes (  ) ;^387^^^^^377^391^u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P14_Delete_Statement]^^387^^^^^377^391^u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^double u = rand.nextDouble (  ) ;u = rand.nextDouble (  ) ;^387^^^^^377^391^u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P11_Insert_Donor_Statement]^double unif = rand.nextDouble (  ) ;u = rand.nextDouble (  ) ;^387^^^^^377^391^u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P7_Replace_Invocation]^u = rand .nextGaussian ( upper , u )  ;^387^^^^^377^391^u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P8_Replace_Mix]^u =  null.nextDouble (  ) ;^387^^^^^377^391^u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P7_Replace_Invocation]^u = rand .nextGaussian ( upper , upper )  ;^387^^^^^377^391^u = rand.nextDouble (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P2_Replace_Operator]^return lower + u *  <  ( upper - lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P2_Replace_Operator]^return + lower + u *  ( upper - lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P2_Replace_Operator]^return lower + u *  ( upper  ||  lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P5_Replace_Variable]^return upper + u *  ( upper - lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P5_Replace_Variable]^return lower + upper *  ( upper - lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P5_Replace_Variable]^return lower + u *  ( lower - lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P5_Replace_Variable]^return upper + u *  ( lower - lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P5_Replace_Variable]^return lower + upper *  ( u - lower ) ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P8_Replace_Mix]^return lower  ;^390^^^^^377^391^return lower + u *  ( upper - lower ) ;^[CLASS] RandomDataImpl  [METHOD] nextUniform [RETURN_TYPE] double   double lower double upper [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  double  lower  u  upper  
[P2_Replace_Operator]^if  ( rand != null )  {^403^^^^^402^408^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^if  ( ran == null )  {^403^^^^^402^408^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^if  ( ran == this )  {^403^^^^^402^408^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( i == 0 )  {^403^^^^^402^408^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( len <= 0 )  {^403^^^^^402^408^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( secRand == null )  {^403^^^^^402^408^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( mean <= 0 )  {^403^^^^^402^408^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( k == 0 )  {^403^^^^^402^408^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( r >= p )  {^403^^^^^402^408^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P15_Unwrap_Block]^rand = new org.apache.commons.math.random.JDKRandomGenerator(); rand.setSeed(java.lang.System.currentTimeMillis());^403^404^405^406^^402^408^if  ( rand == null )  { rand = new JDKRandomGenerator (  ) ; rand.setSeed ( System.currentTimeMillis (  )  ) ; }^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P16_Remove_Block]^^403^404^405^406^^402^408^if  ( rand == null )  { rand = new JDKRandomGenerator (  ) ; rand.setSeed ( System.currentTimeMillis (  )  ) ; }^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( rand )  == null )  {     rand = new JDKRandomGenerator (  ) ; }^403^^^^^402^408^[Delete]^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( secRand )  == null )  {     secRand = new SecureRandom (  ) ;     secRand.setSeed ( currentTimeMillis (  )  ) ; }^403^^^^^402^408^[Delete]^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^rand ;^404^^^^^402^408^rand = new JDKRandomGenerator (  ) ;^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( rand )  == null )  {     rand = new JDKRandomGenerator (  ) ; }^404^^^^^402^408^[Delete]^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P7_Replace_Invocation]^rand.nextGaussian ( System.currentTimeMillis (  )  ) ;^405^^^^^402^408^rand.setSeed ( System.currentTimeMillis (  )  ) ;^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P14_Delete_Statement]^^405^^^^^402^408^rand.setSeed ( System.currentTimeMillis (  )  ) ;^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^secRand.setSeed ( System.currentTimeMillis (  )  ) ;rand.setSeed ( System.currentTimeMillis (  )  ) ;^405^^^^^402^408^rand.setSeed ( System.currentTimeMillis (  )  ) ;^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^rand  = null ;^404^^^^^402^408^rand = new JDKRandomGenerator (  ) ;^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^return ran;^407^^^^^402^408^return rand;^[CLASS] RandomDataImpl  [METHOD] getRan [RETURN_TYPE] RandomGenerator   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P2_Replace_Operator]^if  ( secRand != null )  {^418^^^^^417^423^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^if  ( secRan == null )  {^418^^^^^417^423^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^if  ( secRan == false )  {^418^^^^^417^423^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( mean <= 0 )  {^418^^^^^417^423^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( rand == null )  {^418^^^^^417^423^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P15_Unwrap_Block]^secRand = new java.security.SecureRandom(); secRand.setSeed(java.lang.System.currentTimeMillis());^418^419^420^421^^417^423^if  ( secRand == null )  { secRand = new SecureRandom (  ) ; secRand.setSeed ( System.currentTimeMillis (  )  ) ; }^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P16_Remove_Block]^^418^419^420^421^^417^423^if  ( secRand == null )  { secRand = new SecureRandom (  ) ; secRand.setSeed ( System.currentTimeMillis (  )  ) ; }^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( rand )  == null )  {     rand = new JDKRandomGenerator (  ) ;     rand.setSeed ( currentTimeMillis (  )  ) ; }^418^^^^^417^423^[Delete]^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( secRand )  == null )  {     secRand = new SecureRandom (  ) ; }^418^^^^^417^423^[Delete]^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^secRand  = null ;^419^^^^^417^423^secRand = new SecureRandom (  ) ;^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( secRand )  == null )  {     secRand = new SecureRandom (  ) ; }^419^^^^^417^423^[Delete]^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P7_Replace_Invocation]^secRand.SecureRandom ( System.currentTimeMillis (  )  ) ;^420^^^^^417^423^secRand.setSeed ( System.currentTimeMillis (  )  ) ;^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P14_Delete_Statement]^^420^^^^^417^423^secRand.setSeed ( System.currentTimeMillis (  )  ) ;^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^rand.setSeed ( System.currentTimeMillis (  )  ) ;secRand.setSeed ( System.currentTimeMillis (  )  ) ;^420^^^^^417^423^secRand.setSeed ( System.currentTimeMillis (  )  ) ;^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^return secRan;^422^^^^^417^423^return secRand;^[CLASS] RandomDataImpl  [METHOD] getSecRan [RETURN_TYPE] SecureRandom   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  serialVersionUID  upper  RandomGenerator  ran  rand  
[P2_Replace_Operator]^if  ( rand != null )  {^433^^^^^432^437^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^if  ( ran == null )  {^433^^^^^432^437^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^if  ( ran == false )  {^433^^^^^432^437^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( i == 0 )  {^433^^^^^432^437^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( len <= 0 )  {^433^^^^^432^437^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( secRand == null )  {^433^^^^^432^437^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( mean <= 0 )  {^433^^^^^432^437^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( k == 0 )  {^433^^^^^432^437^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( r >= p )  {^433^^^^^432^437^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P15_Unwrap_Block]^rand = new org.apache.commons.math.random.JDKRandomGenerator();^433^434^435^^^432^437^if  ( rand == null )  { rand = new JDKRandomGenerator (  ) ; }^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P16_Remove_Block]^^433^434^435^^^432^437^if  ( rand == null )  { rand = new JDKRandomGenerator (  ) ; }^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( rand )  == null )  {     rand = new JDKRandomGenerator (  ) ;     rand.setSeed ( currentTimeMillis (  )  ) ; }^433^^^^^432^437^[Delete]^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( secRand )  == null )  {     secRand = new SecureRandom (  ) ; }^433^^^^^432^437^[Delete]^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^rand  =  rand ;^434^^^^^432^437^rand = new JDKRandomGenerator (  ) ;^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( rand )  == null )  {     rand = new JDKRandomGenerator (  ) ; }^434^^^^^432^437^[Delete]^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^rand ;^434^^^^^432^437^rand = new JDKRandomGenerator (  ) ;^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^rand.setSeed ( upper ) ;^436^^^^^432^437^rand.setSeed ( seed ) ;^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P7_Replace_Invocation]^rand.nextBytes ( seed ) ;^436^^^^^432^437^rand.setSeed ( seed ) ;^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P14_Delete_Statement]^^436^^^^^432^437^rand.setSeed ( seed ) ;^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^secRand.setSeed ( seed ) ;rand.setSeed ( seed ) ;^436^^^^^432^437^rand.setSeed ( seed ) ;^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^alg.reset (  ) ;rand.setSeed ( seed ) ;^436^^^^^432^437^rand.setSeed ( seed ) ;^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P2_Replace_Operator]^if  ( secRand != null )  {^446^^^^^445^450^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^if  ( secRand == this )  {^446^^^^^445^450^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( mean <= 0 )  {^446^^^^^445^450^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( rand == null )  {^446^^^^^445^450^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P15_Unwrap_Block]^secRand = new java.security.SecureRandom();^446^447^448^^^445^450^if  ( secRand == null )  { secRand = new SecureRandom (  ) ; }^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P16_Remove_Block]^^446^447^448^^^445^450^if  ( secRand == null )  { secRand = new SecureRandom (  ) ; }^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( rand )  == null )  {     rand = new JDKRandomGenerator (  ) ; }^446^^^^^445^450^[Delete]^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( secRand )  == null )  {     secRand = new SecureRandom (  ) ;     secRand.setSeed ( currentTimeMillis (  )  ) ; }^446^^^^^445^450^[Delete]^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^secRand ;^447^^^^^445^450^secRand = new SecureRandom (  ) ;^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( secRand )  == null )  {     secRand = new SecureRandom (  ) ; }^447^^^^^445^450^[Delete]^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^secRand  =  secRand ;^447^^^^^445^450^secRand = new SecureRandom (  ) ;^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P7_Replace_Invocation]^secRand.SecureRandom ( System.currentTimeMillis (  )  ) ;^449^^^^^445^450^secRand.setSeed ( System.currentTimeMillis (  )  ) ;^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P14_Delete_Statement]^^449^^^^^445^450^secRand.setSeed ( System.currentTimeMillis (  )  ) ;^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^rand.setSeed ( System.currentTimeMillis (  )  ) ;secRand.setSeed ( System.currentTimeMillis (  )  ) ;^449^^^^^445^450^secRand.setSeed ( System.currentTimeMillis (  )  ) ;^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P2_Replace_Operator]^if  ( secRand != null )  {^460^^^^^459^464^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^if  ( secRan == null )  {^460^^^^^459^464^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^if  ( secRan == this )  {^460^^^^^459^464^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( mean <= 0 )  {^460^^^^^459^464^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( rand == null )  {^460^^^^^459^464^if  ( secRand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P15_Unwrap_Block]^secRand = new java.security.SecureRandom();^460^461^462^^^459^464^if  ( secRand == null )  { secRand = new SecureRandom (  ) ; }^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P16_Remove_Block]^^460^461^462^^^459^464^if  ( secRand == null )  { secRand = new SecureRandom (  ) ; }^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( rand )  == null )  {     rand = new JDKRandomGenerator (  ) ; }^460^^^^^459^464^[Delete]^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( secRand )  == null )  {     secRand = new SecureRandom (  ) ;     secRand.setSeed ( currentTimeMillis (  )  ) ; }^460^^^^^459^464^[Delete]^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^secRand  =  secRand ;^461^^^^^459^464^secRand = new SecureRandom (  ) ;^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( secRand )  == null )  {     secRand = new SecureRandom (  ) ; }^461^^^^^459^464^[Delete]^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^secRand.setSeed ( serialVersionUID ) ;^463^^^^^459^464^secRand.setSeed ( seed ) ;^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P7_Replace_Invocation]^secRand.nextBytes ( seed ) ;^463^^^^^459^464^secRand.setSeed ( seed ) ;^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^secRand.setSeed ( upper ) ;^463^^^^^459^464^secRand.setSeed ( seed ) ;^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P14_Delete_Statement]^^463^^^^^459^464^secRand.setSeed ( seed ) ;^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^rand.setSeed ( seed ) ;secRand.setSeed ( seed ) ;^463^^^^^459^464^secRand.setSeed ( seed ) ;^[CLASS] RandomDataImpl  [METHOD] reSeedSecure [RETURN_TYPE] void   long seed [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P2_Replace_Operator]^if  ( rand != null )  {^471^^^^^470^475^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^if  ( rand == true )  {^471^^^^^470^475^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( i == 0 )  {^471^^^^^470^475^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( len <= 0 )  {^471^^^^^470^475^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( secRand == null )  {^471^^^^^470^475^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( mean <= 0 )  {^471^^^^^470^475^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( k == 0 )  {^471^^^^^470^475^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P9_Replace_Statement]^if  ( r >= p )  {^471^^^^^470^475^if  ( rand == null )  {^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P15_Unwrap_Block]^rand = new org.apache.commons.math.random.JDKRandomGenerator();^471^472^473^^^470^475^if  ( rand == null )  { rand = new JDKRandomGenerator (  ) ; }^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P16_Remove_Block]^^471^472^473^^^470^475^if  ( rand == null )  { rand = new JDKRandomGenerator (  ) ; }^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( rand )  == null )  {     rand = new JDKRandomGenerator (  ) ;     rand.setSeed ( currentTimeMillis (  )  ) ; }^471^^^^^470^475^[Delete]^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( secRand )  == null )  {     secRand = new SecureRandom (  ) ; }^471^^^^^470^475^[Delete]^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^rand  =  rand ;^472^^^^^470^475^rand = new JDKRandomGenerator (  ) ;^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P13_Insert_Block]^if  (  ( rand )  == null )  {     rand = new JDKRandomGenerator (  ) ; }^472^^^^^470^475^[Delete]^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P7_Replace_Invocation]^rand.nextGaussian ( System.currentTimeMillis (  )  ) ;^474^^^^^470^475^rand.setSeed ( System.currentTimeMillis (  )  ) ;^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P14_Delete_Statement]^^474^^^^^470^475^rand.setSeed ( System.currentTimeMillis (  )  ) ;^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P11_Insert_Donor_Statement]^secRand.setSeed ( System.currentTimeMillis (  )  ) ;rand.setSeed ( System.currentTimeMillis (  )  ) ;^474^^^^^470^475^rand.setSeed ( System.currentTimeMillis (  )  ) ;^[CLASS] RandomDataImpl  [METHOD] reSeed [RETURN_TYPE] void   [VARIABLES] SecureRandom  sec  secRan  secRand  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^secRand = SecureRandom.getInstance (  provider ) ;^496^^^^^494^497^secRand = SecureRandom.getInstance ( algorithm, provider ) ;^[CLASS] RandomDataImpl  [METHOD] setSecureAlgorithm [RETURN_TYPE] void   String algorithm String provider [VARIABLES] SecureRandom  sec  secRan  secRand  String  algorithm  provider  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^secRand = SecureRandom.getInstance ( algorithm ) ;^496^^^^^494^497^secRand = SecureRandom.getInstance ( algorithm, provider ) ;^[CLASS] RandomDataImpl  [METHOD] setSecureAlgorithm [RETURN_TYPE] void   String algorithm String provider [VARIABLES] SecureRandom  sec  secRan  secRand  String  algorithm  provider  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P5_Replace_Variable]^secRand = SecureRandom.getInstance ( provider, algorithm ) ;^496^^^^^494^497^secRand = SecureRandom.getInstance ( algorithm, provider ) ;^[CLASS] RandomDataImpl  [METHOD] setSecureAlgorithm [RETURN_TYPE] void   String algorithm String provider [VARIABLES] SecureRandom  sec  secRan  secRand  String  algorithm  provider  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P8_Replace_Mix]^secRand =  SecureRandom.getInstance ( provider, provider ) ;^496^^^^^494^497^secRand = SecureRandom.getInstance ( algorithm, provider ) ;^[CLASS] RandomDataImpl  [METHOD] setSecureAlgorithm [RETURN_TYPE] void   String algorithm String provider [VARIABLES] SecureRandom  sec  secRan  secRand  String  algorithm  provider  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P14_Delete_Statement]^^496^^^^^494^497^secRand = SecureRandom.getInstance ( algorithm, provider ) ;^[CLASS] RandomDataImpl  [METHOD] setSecureAlgorithm [RETURN_TYPE] void   String algorithm String provider [VARIABLES] SecureRandom  sec  secRan  secRand  String  algorithm  provider  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  
[P2_Replace_Operator]^if  ( k == n )  {^509^^^^^508^526^if  ( k > n )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^if  ( i > n )  {^509^^^^^508^526^if  ( k > n )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^if  ( n > k )  {^509^^^^^508^526^if  ( k > n )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P8_Replace_Mix]^if  ( k > i )  {^509^^^^^508^526^if  ( k > n )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P9_Replace_Statement]^if  ( i == 0 )  {^509^^^^^508^526^if  ( k > n )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P9_Replace_Statement]^if  ( len <= 0 )  {^509^^^^^508^526^if  ( k > n )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P9_Replace_Statement]^if  ( k == 0 )  {^509^^^^^508^526^if  ( k > n )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P9_Replace_Statement]^if  ( k > len )  {^509^^^^^508^526^if  ( k > n )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P9_Replace_Statement]^if  ( r >= p )  {^509^^^^^508^526^if  ( k > n )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("permutation k exceeds n");^509^510^511^512^^508^526^if  ( k > n )  { throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P16_Remove_Block]^^509^510^511^512^^508^526^if  ( k > n )  { throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^509^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^509^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^509^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^509^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^509^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^509^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^509^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^509^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^509^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^509^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "permutation k exceeds nce" ) ;^510^511^^^^508^526^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "sample size must be > 0" )  ;^510^511^^^^508^526^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^510^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^510^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "permutation k exceeds npermu" ) ;^510^511^^^^508^526^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^510^511^^^^508^526^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^510^511^^^^508^526^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^510^511^^^^508^526^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^510^511^^^^508^526^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^510^511^^^^508^526^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size must be > 0" ) ;throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^510^511^^^^508^526^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^510^511^^^^508^526^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^510^511^^^^508^526^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^510^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^510^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^510^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^510^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^510^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^510^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^510^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^510^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^510^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "permutation k exceeds nn k exceeds" ) ;^510^511^^^^508^526^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "p" ) ;^510^511^^^^508^526^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P2_Replace_Operator]^if  ( k <= 0 )  {^513^^^^^508^526^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^if  ( n == 0 )  {^513^^^^^508^526^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P8_Replace_Mix]^if  ( k == 4 )  {^513^^^^^508^526^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P9_Replace_Statement]^if  ( i == 0 )  {^513^^^^^508^526^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P9_Replace_Statement]^if  ( len <= 0 )  {^513^^^^^508^526^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P9_Replace_Statement]^if  ( mean <= 0 )  {^513^^^^^508^526^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P9_Replace_Statement]^if  ( sigma <= 0 )  {^513^^^^^508^526^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P9_Replace_Statement]^if  ( k > len )  {^513^^^^^508^526^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P9_Replace_Statement]^if  ( r >= p )  {^513^^^^^508^526^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P9_Replace_Statement]^if  ( rand == null )  {^513^^^^^508^526^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P9_Replace_Statement]^if  ( k > n )  {^513^^^^^508^526^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("permutation k must be > 0");^513^514^515^516^^508^526^if  ( k == 0 )  { throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P16_Remove_Block]^^513^514^515^516^^508^526^if  ( k == 0 )  { throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ermutation ermutation k must be > 0" ) ;^514^515^^^^508^526^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Gaussian std dev must be > 0" )  ;^514^515^^^^508^526^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^514^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^514^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^514^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^514^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^514^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^514^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "permuta" ) ;^514^515^^^^508^526^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^514^515^^^^508^526^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^514^515^^^^508^526^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^514^515^^^^508^526^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^514^515^^^^508^526^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^514^515^^^^508^526^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size must be > 0" ) ;throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^514^515^^^^508^526^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^514^515^^^^508^526^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^514^515^^^^508^526^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^514^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^514^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^514^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^514^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^514^^^^^508^526^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "permutation k must be > 0mutation" ) ;^514^515^^^^508^526^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "on k must be >ermutation k must be > 0" ) ;^514^515^^^^508^526^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P8_Replace_Mix]^return 0;^514^515^^^^508^526^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^int[] index = getNatural ( k ) ;^518^^^^^508^526^int[] index = getNatural ( n ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P7_Replace_Invocation]^int[] index = nextHexString ( n ) ;^518^^^^^508^526^int[] index = getNatural ( n ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^int[] index = nextPermutation ( len, k ) ;int[] index = getNatural ( n ) ;^518^^^^^508^526^int[] index = getNatural ( n ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P14_Delete_Statement]^^518^^^^^508^526^int[] index = getNatural ( n ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P2_Replace_Operator]^shuffle ( index, n   instanceof   k ) ;^519^^^^^508^526^shuffle ( index, n - k ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^shuffle ( result, n - k ) ;^519^^^^^508^526^shuffle ( index, n - k ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^shuffle ( index, i - k ) ;^519^^^^^508^526^shuffle ( index, n - k ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^shuffle (  n - k ) ;^519^^^^^508^526^shuffle ( index, n - k ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^shuffle ( index - k ) ;^519^^^^^508^526^shuffle ( index, n - k ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^shuffle ( k, n - index ) ;^519^^^^^508^526^shuffle ( index, n - k ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^shuffle ( index, k - n ) ;^519^^^^^508^526^shuffle ( index, n - k ) ;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P14_Delete_Statement]^^519^520^^^^508^526^shuffle ( index, n - k ) ; int[] result = new int[k];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^Object[] result = new Object[k];int[] result = new int[k];^520^^^^^508^526^int[] result = new int[k];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P11_Insert_Donor_Statement]^int[] natural = new int[n];int[] result = new int[k];^520^^^^^508^526^int[] result = new int[k];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P1_Replace_Type]^for  (  long  i = 0; i < k; i++ )  {^521^^^^^508^526^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P2_Replace_Operator]^for  ( int i = 0; i <= k; i++ )  {^521^^^^^508^526^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P3_Replace_Literal]^for  ( int i = 6; i < k; i++ )  {^521^^^^^508^526^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^for  ( nnt i = 0; i < k; i++ )  {^521^^^^^508^526^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^for  ( int i = 0; i < n; i++ )  {^521^^^^^508^526^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^for  ( knt i = 0; i < i; i++ )  {^521^^^^^508^526^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P2_Replace_Operator]^result[i] = index[n  >=  i - 1];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P2_Replace_Operator]^result[i] = index[n  ||  i - 1];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P3_Replace_Literal]^result[i] = index[n - i - k];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^result[i] = nndex[n - i - 1];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^result[i] = index[k - i - 1];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P8_Replace_Mix]^result[i] = index[n - i - 2];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P2_Replace_Operator]^result[i] = index[n  ^  i - 1];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P3_Replace_Literal]^result[i] = index[n - i - n];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^result[i] = kndex[n - i - 1];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P8_Replace_Mix]^result[i] = index[n - i - 1 >> 3];^522^^^^^508^526^result[i] = index[n - i - 1];^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P3_Replace_Literal]^for  ( int i = ; i < k; i++ )  {^521^^^^^508^526^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P5_Replace_Variable]^return index;^525^^^^^508^526^return result;^[CLASS] RandomDataImpl  [METHOD] nextPermutation [RETURN_TYPE] int[]   int n int k [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  index  result  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  n  
[P1_Replace_Type]^long  len = c.size (  ) ;^542^^^^^541^559^int len = c.size (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P3_Replace_Literal]^int len = c.size() - 8 ;^542^^^^^541^559^int len = c.size (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P3_Replace_Literal]^int len = c.size() + 4 ;^542^^^^^541^559^int len = c.size (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P14_Delete_Statement]^^542^^^^^541^559^int len = c.size (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P2_Replace_Operator]^if  ( k >= len )  {^543^^^^^541^559^if  ( k > len )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P5_Replace_Variable]^if  ( i > len )  {^543^^^^^541^559^if  ( k > len )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P5_Replace_Variable]^if  ( k > i )  {^543^^^^^541^559^if  ( k > len )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P5_Replace_Variable]^if  ( len > k )  {^543^^^^^541^559^if  ( k > len )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P9_Replace_Statement]^if  ( i == 0 )  {^543^^^^^541^559^if  ( k > len )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P9_Replace_Statement]^if  ( k == 0 )  {^543^^^^^541^559^if  ( k > len )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P9_Replace_Statement]^if  ( r >= p )  {^543^^^^^541^559^if  ( k > len )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P9_Replace_Statement]^if  ( k > n )  {^543^^^^^541^559^if  ( k > len )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("sample size exceeds collection size");^543^544^545^546^^541^559^if  ( k > len )  { throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P16_Remove_Block]^^543^544^545^546^^541^559^if  ( k > len )  { throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^543^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^543^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^543^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^543^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^543^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^543^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^543^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^543^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^543^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^543^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "sample size exceeds collection sizeollectio" ) ;^544^545^^^^541^559^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "sample size must be > 0" )  ;^544^545^^^^541^559^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^544^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ds co" ) ;^544^545^^^^541^559^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^544^545^^^^541^559^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^544^545^^^^541^559^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^544^545^^^^541^559^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^544^545^^^^541^559^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^544^545^^^^541^559^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size must be > 0" ) ;throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^544^545^^^^541^559^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^544^545^^^^541^559^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^544^545^^^^541^559^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^544^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^544^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " exceeds collection s" ) ;^544^545^^^^541^559^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " exceeds colample size exceeds collection size" ) ;^544^545^^^^541^559^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P2_Replace_Operator]^if  ( k >= 0 )  {^547^^^^^541^559^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P3_Replace_Literal]^if  ( k == -8 )  {^547^^^^^541^559^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P5_Replace_Variable]^if  ( len == 0 )  {^547^^^^^541^559^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P8_Replace_Mix]^if  ( k == 0L )  {^547^^^^^541^559^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P9_Replace_Statement]^if  ( i == 0 )  {^547^^^^^541^559^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P9_Replace_Statement]^if  ( len <= 0 )  {^547^^^^^541^559^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P9_Replace_Statement]^if  ( mean <= 0 )  {^547^^^^^541^559^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P9_Replace_Statement]^if  ( sigma <= 0 )  {^547^^^^^541^559^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P9_Replace_Statement]^if  ( k > len )  {^547^^^^^541^559^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P9_Replace_Statement]^if  ( r >= p )  {^547^^^^^541^559^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P9_Replace_Statement]^if  ( rand == null )  {^547^^^^^541^559^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P9_Replace_Statement]^if  ( k > n )  {^547^^^^^541^559^if  ( k == 0 )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("sample size must be > 0");^547^548^549^550^^541^559^if  ( k == 0 )  { throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P16_Remove_Block]^^547^548^549^550^^541^559^if  ( k == 0 )  { throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ze" ) ;^548^549^^^^541^559^throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Gaussian std dev must be > 0" )  ;^548^549^^^^541^559^throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( len <= 0 )  {     throw new IllegalArgumentException ( "length must be positive" ) ; }^548^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( k > n )  {     throw new IllegalArgumentException ( "permutation k exceeds n" ) ; }^548^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( k > len )  {     throw new IllegalArgumentException ( "sample size exceeds collection size" ) ; }^548^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( mean <= 0 )  {     throw new IllegalArgumentException ( "Poisson mean must be > 0" ) ; }^548^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( sigma <= 0 )  {     throw new IllegalArgumentException ( "Gaussian std dev must be > 0" ) ; }^548^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "permutation k must be > 0" ) ; }^548^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( k == 0 )  {     throw new IllegalArgumentException ( "sample size must be > 0" ) ; }^548^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( mean < 0.0 )  {     throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ; }^548^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "e size musample size must be > 0" ) ;^548^549^^^^541^559^throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new IllegalArgumentException ( "sample size must be > 0" ) ;^548^549^^^^541^559^throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ;throw new IllegalArgumentException ( "sample size must be > 0" ) ;^548^549^^^^541^559^throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k exceeds n" ) ;throw new IllegalArgumentException ( "sample size must be > 0" ) ;^548^549^^^^541^559^throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "sample size exceeds collection size" ) ;throw new IllegalArgumentException ( "sample size must be > 0" ) ;^548^549^^^^541^559^throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "permutation k must be > 0" ) ;throw new IllegalArgumentException ( "sample size must be > 0" ) ;^548^549^^^^541^559^throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ;throw new IllegalArgumentException ( "sample size must be > 0" ) ;^548^549^^^^541^559^throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ;throw new IllegalArgumentException ( "sample size must be > 0" ) ;^548^549^^^^541^559^throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Exponential mean must be >= 0" ) ;throw new IllegalArgumentException ( "sample size must be > 0" ) ;^548^549^^^^541^559^throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be < upper bound" ) ; }^548^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "lower bound must be <= upper bound" ) ; }^548^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P13_Insert_Block]^if  ( lower >= upper )  {     throw new IllegalArgumentException ( "upper bound must be > lower bound" ) ; }^548^^^^^541^559^[Delete]^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "sample size must be > 0s" ) ;^548^549^^^^541^559^throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "sample size must be > 0be " ) ;^548^549^^^^541^559^throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P8_Replace_Mix]^return 0;^548^549^^^^541^559^throw new IllegalArgumentException ( "sample size must be > 0" ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P14_Delete_Statement]^^552^^^^^541^559^Object[] objects = c.toArray (  ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P5_Replace_Variable]^int[] index = nextPermutation ( k, k ) ;^553^^^^^541^559^int[] index = nextPermutation ( len, k ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P5_Replace_Variable]^int[] index = nextPermutation ( len, len ) ;^553^^^^^541^559^int[] index = nextPermutation ( len, k ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P5_Replace_Variable]^int[] index = nextPermutation (  k ) ;^553^^^^^541^559^int[] index = nextPermutation ( len, k ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P5_Replace_Variable]^int[] index = nextPermutation ( len ) ;^553^^^^^541^559^int[] index = nextPermutation ( len, k ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P5_Replace_Variable]^int[] index = nextPermutation ( k, len ) ;^553^^^^^541^559^int[] index = nextPermutation ( len, k ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P7_Replace_Invocation]^int[] index = nextSecureInt ( len, k ) ;^553^^^^^541^559^int[] index = nextPermutation ( len, k ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^int[] index = getNatural ( n ) ;int[] index = nextPermutation ( len, k ) ;^553^^^^^541^559^int[] index = nextPermutation ( len, k ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P5_Replace_Variable]^int[] index = nextPermutation ( i, k ) ;^553^^^^^541^559^int[] index = nextPermutation ( len, k ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P5_Replace_Variable]^int[] index = nextPermutation ( len, i ) ;^553^^^^^541^559^int[] index = nextPermutation ( len, k ) ;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P14_Delete_Statement]^^553^554^^^^541^559^int[] index = nextPermutation ( len, k ) ; Object[] result = new Object[k];^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P11_Insert_Donor_Statement]^int[] result = new int[k];Object[] result = new Object[k];^554^^^^^541^559^Object[] result = new Object[k];^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P1_Replace_Type]^for  (  short  i = 0; i < k; i++ )  {^555^^^^^541^559^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P2_Replace_Operator]^for  ( int i = 0; i <= k; i++ )  {^555^^^^^541^559^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P3_Replace_Literal]^for  ( int i = -7; i < k; i++ )  {^555^^^^^541^559^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P5_Replace_Variable]^for  ( lennt i = 0; i < k; i++ )  {^555^^^^^541^559^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P5_Replace_Variable]^for  ( int i = 0; i < len; i++ )  {^555^^^^^541^559^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P5_Replace_Variable]^for  ( knt i = 0; i < i; i++ )  {^555^^^^^541^559^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P5_Replace_Variable]^result[i] = result[index[i]];^556^^^^^541^559^result[i] = objects[index[i]];^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P8_Replace_Mix]^result[i]  = null ;^556^^^^^541^559^result[i] = objects[index[i]];^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P8_Replace_Mix]^result[i]  =  result[i] ;^556^^^^^541^559^result[i] = objects[index[i]];^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P3_Replace_Literal]^for  ( int i = i; i < k; i++ )  {^555^^^^^541^559^for  ( int i = 0; i < k; i++ )  {^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P5_Replace_Variable]^return objects;^558^^^^^541^559^return result;^[CLASS] RandomDataImpl  [METHOD] nextSample [RETURN_TYPE] Object[]   Collection c int k [VARIABLES] boolean  SecureRandom  sec  secRan  secRand  Collection  c  int[]  index  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  k  len  Object[]  objects  result  
[P1_Replace_Type]^short  target = 0;^571^^^^^570^582^int target = 0;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P3_Replace_Literal]^int target = -2;^571^^^^^570^582^int target = 0;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P2_Replace_Operator]^if  ( i != 0 )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P3_Replace_Literal]^if  ( i == end )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P5_Replace_Variable]^if  ( temp == 0 )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P8_Replace_Mix]^if  ( i == 0L )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P9_Replace_Statement]^if  ( len <= 0 )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P9_Replace_Statement]^if  ( mean <= 0 )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P9_Replace_Statement]^if  ( k == 0 )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P9_Replace_Statement]^if  ( sigma <= 0 )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P9_Replace_Statement]^if  ( k > len )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P9_Replace_Statement]^if  ( r >= p )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P9_Replace_Statement]^if  ( rand == null )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P9_Replace_Statement]^if  ( k > n )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P15_Unwrap_Block]^target = 0;^573^574^575^576^577^570^582^if  ( i == 0 )  { target = 0; } else { target = nextInt ( 0, i ) ; }^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P16_Remove_Block]^^573^574^575^576^577^570^582^if  ( i == 0 )  { target = 0; } else { target = nextInt ( 0, i ) ; }^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P13_Insert_Block]^if  ( r >= p )  {     n++; }else {     return n; }^573^^^^^570^582^[Delete]^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P3_Replace_Literal]^target = nextInt ( target, i ) ;^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P5_Replace_Variable]^target = nextInt ( 0, temp ) ;^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P7_Replace_Invocation]^target = nextSecureInt ( 0, i ) ;^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P8_Replace_Mix]^target = nextInt ( 0 >> 2, i ) ;^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P3_Replace_Literal]^target = nextInt ( 2, i ) ;^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P14_Delete_Statement]^^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P8_Replace_Mix]^target = 0L;^574^^^^^570^582^target = 0;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P1_Replace_Type]^for  (  short  i = list.length - 1 ; i >= end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P2_Replace_Operator]^for  ( int i = list.length  <  1 ; i >= end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P2_Replace_Operator]^for  ( int i = list.length - 1 ; i > end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P3_Replace_Literal]^for  ( int i = list.length  ; i >= end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P5_Replace_Variable]^for  ( tempnt i = list.length - 1 ; i >= end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P5_Replace_Variable]^for  ( int i = list.length - 1 ; i >= temp; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P5_Replace_Variable]^for  ( int i = temp - 1 ; i >= end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P5_Replace_Variable]^for  ( int i = end - 1 ; i >= list.length; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P2_Replace_Operator]^if  ( i >= 0 )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P3_Replace_Literal]^if  ( i == -1 )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P3_Replace_Literal]^if  ( i == i )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P3_Replace_Literal]^if  ( i == -2 )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P8_Replace_Mix]^if  ( i == 0 - 2 )  {^573^^^^^570^582^if  ( i == 0 )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P3_Replace_Literal]^target = nextInt ( end, i ) ;^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P8_Replace_Mix]^target = nextInt ( 3, i ) ;^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P3_Replace_Literal]^target = nextInt ( , i ) ;^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P3_Replace_Literal]^target = 6;^574^^^^^570^582^target = 0;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P8_Replace_Mix]^target = 4;^574^^^^^570^582^target = 0;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P8_Replace_Mix]^target = 3;^574^^^^^570^582^target = 0;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P3_Replace_Literal]^target = nextInt ( -8, i ) ;^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P8_Replace_Mix]^target = nextInt ( 0 >>> 3, i ) ;^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P8_Replace_Mix]^list[target]  =  list[target] ;^579^^^^^570^582^list[target] = list[i];^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P5_Replace_Variable]^list[i] = target;^580^^^^^570^582^list[i] = temp;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P8_Replace_Mix]^list[i]  = null ;^580^^^^^570^582^list[i] = temp;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P1_Replace_Type]^long  temp = list[target];^578^^^^^570^582^int temp = list[target];^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P8_Replace_Mix]^target = 0 / 0;^574^^^^^570^582^target = 0;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P8_Replace_Mix]^target = nextInt ( 4, i ) ;^576^^^^^570^582^target = nextInt ( 0, i ) ;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P8_Replace_Mix]^list[target]  = null ;^579^^^^^570^582^list[target] = list[i];^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P8_Replace_Mix]^list[i]  =  list[i] ;^580^^^^^570^582^list[i] = temp;^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P2_Replace_Operator]^for  ( int i = list.length   instanceof   1 ; i >= end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P5_Replace_Variable]^for  ( int i = list.length.length - 1 ; i >= end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P5_Replace_Variable]^for  ( int i = list - 1 ; i >= end; i-- )  {^572^^^^^570^582^for  ( int i = list.length - 1 ; i >= end; i-- )  {^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P1_Replace_Type]^short  temp = list[target];^578^^^^^570^582^int temp = list[target];^[CLASS] RandomDataImpl  [METHOD] shuffle [RETURN_TYPE] void   int[] list int end [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  list  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  end  i  target  temp  
[P5_Replace_Variable]^int[] iatural = new int[n];^591^^^^^590^596^int[] natural = new int[n];^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
[P11_Insert_Donor_Statement]^int[] result = new int[k];int[] natural = new int[n];^591^^^^^590^596^int[] natural = new int[n];^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
[P1_Replace_Type]^for  (  short  i = 0; i < n; i++ )  {^592^^^^^590^596^for  ( int i = 0; i < n; i++ )  {^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
[P2_Replace_Operator]^for  ( int i = 0; i <= n; i++ )  {^592^^^^^590^596^for  ( int i = 0; i < n; i++ )  {^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
[P3_Replace_Literal]^for  ( int i = 5; i < n; i++ )  {^592^^^^^590^596^for  ( int i = 0; i < n; i++ )  {^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
[P5_Replace_Variable]^for  ( nnt i = 0; i < n; i++ )  {^592^^^^^590^596^for  ( int i = 0; i < n; i++ )  {^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
[P5_Replace_Variable]^for  ( nnt i = 0; i < i; i++ )  {^592^^^^^590^596^for  ( int i = 0; i < n; i++ )  {^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
[P5_Replace_Variable]^natural[i] = n;^593^^^^^590^596^natural[i] = i;^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
[P8_Replace_Mix]^natural[i] ;^593^^^^^590^596^natural[i] = i;^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
[P3_Replace_Literal]^for  ( int i = 4; i < n; i++ )  {^592^^^^^590^596^for  ( int i = 0; i < n; i++ )  {^[CLASS] RandomDataImpl  [METHOD] getNatural [RETURN_TYPE] int[]   int n [VARIABLES] SecureRandom  sec  secRan  secRand  int[]  natural  boolean  long  lower  n  seed  serialVersionUID  upper  RandomGenerator  ran  rand  int  i  n  
