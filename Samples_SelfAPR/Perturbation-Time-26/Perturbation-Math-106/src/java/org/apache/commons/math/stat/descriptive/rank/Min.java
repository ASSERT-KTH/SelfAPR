[P1_Replace_Type]^private static final  short  serialVersionUID = -2941995784909003131L;^42^^^^^37^47^private static final long serialVersionUID = -2941995784909003131L;^[CLASS] Min   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID ;^42^^^^^37^47^private static final long serialVersionUID = -2941995784909003131L;^[CLASS] Min   [VARIABLES] 
[P1_Replace_Type]^private  int  n;^45^^^^^40^50^private long n;^[CLASS] Min   [VARIABLES] 
[P8_Replace_Mix]^private  short  n;^45^^^^^40^50^private long n;^[CLASS] Min   [VARIABLES] 
[P1_Replace_Type]^private int value;^48^^^^^43^53^private double value;^[CLASS] Min   [VARIABLES] 
[P8_Replace_Mix]^n = 0 - 0;^54^^^^^53^56^n = 0;^[CLASS] Min  [METHOD] <init> [RETURN_TYPE] Min()   [VARIABLES] double  value  long  n  serialVersionUID  boolean  
[P8_Replace_Mix]^value  = null ;^55^^^^^53^56^value = Double.NaN;^[CLASS] Min  [METHOD] <init> [RETURN_TYPE] Min()   [VARIABLES] double  value  long  n  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^value = d;value = Double.NaN;^55^^^^^53^56^value = Double.NaN;^[CLASS] Min  [METHOD] <init> [RETURN_TYPE] Min()   [VARIABLES] double  value  long  n  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( d < value && Double.isNaN ( value )  )  {^62^^^^^61^66^if  ( d < value || Double.isNaN ( value )  )  {^[CLASS] Min  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( d <= value || Double.isNaN ( value )  )  {^62^^^^^61^66^if  ( d < value || Double.isNaN ( value )  )  {^[CLASS] Min  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( value < d || Double.isNaN ( value )  )  {^62^^^^^61^66^if  ( d < value || Double.isNaN ( value )  )  {^[CLASS] Min  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( d < value ) {^62^^^^^61^66^if  ( d < value || Double.isNaN ( value )  )  {^[CLASS] Min  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P6_Replace_Expression]^if  (  Double.isNaN ( value )  )  {^62^^^^^61^66^if  ( d < value || Double.isNaN ( value )  )  {^[CLASS] Min  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P15_Unwrap_Block]^value = d;^62^63^64^^^61^66^if  ( d < value || Double.isNaN ( value )  )  { value = d; }^[CLASS] Min  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P16_Remove_Block]^^62^63^64^^^61^66^if  ( d < value || Double.isNaN ( value )  )  { value = d; }^[CLASS] Min  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P5_Replace_Variable]^value = value;^63^^^^^61^66^value = d;^[CLASS] Min  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P8_Replace_Mix]^value =  null;^63^^^^^61^66^value = d;^[CLASS] Min  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^value = Double.NaN;value = d;^63^^^^^61^66^value = d;^[CLASS] Min  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( d < d || Double.isNaN ( value )  )  {^62^^^^^61^66^if  ( d < value || Double.isNaN ( value )  )  {^[CLASS] Min  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P8_Replace_Mix]^value  = null ;^72^^^^^71^74^value = Double.NaN;^[CLASS] Min  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^value = d;value = Double.NaN;^72^^^^^71^74^value = Double.NaN;^[CLASS] Min  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P3_Replace_Literal]^n = -7;^73^^^^^71^74^n = 0;^[CLASS] Min  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P8_Replace_Mix]^n = 2;^73^^^^^71^74^n = 0;^[CLASS] Min  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P5_Replace_Variable]^return d;^80^^^^^79^81^return value;^[CLASS] Min  [METHOD] getResult [RETURN_TYPE] double   [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P5_Replace_Variable]^return serialVersionUID;^87^^^^^86^88^return n;^[CLASS] Min  [METHOD] getN [RETURN_TYPE] long   [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P1_Replace_Type]^int min = Double.NaN;^113^^^^^112^123^double min = Double.NaN;^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test ( values, length, length )  )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test ( values, begin, begin )  )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test (  begin, length )  )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test ( values,  length )  )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test ( values, begin )  )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test ( values, length, begin )  )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P6_Replace_Expression]^if  ( begin + length )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P6_Replace_Expression]^if  ( min < values[i] )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P15_Unwrap_Block]^min = values[begin]; for (int i = begin; i < (begin + length); i++) {    if (!(java.lang.Double.isNaN(values[i]))) {        min = (min < (values[i])) ? min : values[i];    }};^114^115^116^117^118^112^123^if  ( test ( values, begin, length )  )  { min = values[begin]; for  ( int i = begin; i < begin + length; i++ )  { if  ( !Double.isNaN ( values[i] )  )  { min =  ( min < values[i] )  ? min : values[i]; }^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P16_Remove_Block]^^114^115^116^117^118^112^123^if  ( test ( values, begin, length )  )  { min = values[begin]; for  ( int i = begin; i < begin + length; i++ )  { if  ( !Double.isNaN ( values[i] )  )  { min =  ( min < values[i] )  ? min : values[i]; }^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P15_Unwrap_Block]^min = (min < (values[i])) ? min : values[i];^117^118^119^^^112^123^if  ( !Double.isNaN ( values[i] )  )  { min =  ( min < values[i] )  ? min : values[i]; }^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P16_Remove_Block]^^117^118^119^^^112^123^if  ( !Double.isNaN ( values[i] )  )  { min =  ( min < values[i] )  ? min : values[i]; }^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P2_Replace_Operator]^min =  ( min > values[i] )  ? min : values[i];^118^^^^^112^123^min =  ( min < values[i] )  ? min : values[i];^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^min =  ( value < values[i] )  ? min : values[i];^118^^^^^112^123^min =  ( min < values[i] )  ? min : values[i];^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^min =  ( values < min[i] )  ? min : values[i];^118^^^^^112^123^min =  ( min < values[i] )  ? min : values[i];^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P6_Replace_Expression]^min  =  values[i];^118^^^^^112^123^min =  ( min < values[i] )  ? min : values[i];^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P6_Replace_Expression]^min  =  min ;^118^^^^^112^123^min =  ( min < values[i] )  ? min : values[i];^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P8_Replace_Mix]^min =   ( value < values[i] )  ? value : values[i];^118^^^^^112^123^min =  ( min < values[i] )  ? min : values[i];^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P1_Replace_Type]^for  (  short  i = begin; i < begin + length; i++ )  {^116^^^^^112^123^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P2_Replace_Operator]^for  ( int i = begin; i == begin + length; i++ )  {^116^^^^^112^123^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P2_Replace_Operator]^for  <<  ( int i = begin; i < begin + length; i++ )  {^116^^^^^112^123^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P2_Replace_Operator]^for  ( int i = begin; i <= begin + length; i++ )  {^116^^^^^112^123^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^for  ( int i = length; i < begin + length; i++ )  {^116^^^^^112^123^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^for  ( lengthnt i = begin; i < begin + length; i++ )  {^116^^^^^112^123^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^for  ( int i = begin; i < begin + begin; i++ )  {^116^^^^^112^123^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^for  ( int i = length; i < begin + begin; i++ )  {^116^^^^^112^123^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^for  ( lengthnt i = begin; i < begin + i; i++ )  {^116^^^^^112^123^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P8_Replace_Mix]^if  ( Double.isNaN ( values[i] )  )  {^117^^^^^112^123^if  ( !Double.isNaN ( values[i] )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P2_Replace_Operator]^min =  ( min <= values[i] )  ? min : values[i];^118^^^^^112^123^min =  ( min < values[i] )  ? min : values[i];^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P8_Replace_Mix]^min =  null[begin];^115^^^^^112^123^min = values[begin];^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P2_Replace_Operator]^for  <=  ( int i = begin; i < begin + length; i++ )  {^116^^^^^112^123^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^for  ( beginnt i = i; i < begin + length; i++ )  {^116^^^^^112^123^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test ( values, i, length )  )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test ( values, begin, i )  )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test ( begin, values, length )  )  {^114^^^^^112^123^if  ( test ( values, begin, length )  )  {^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^return value;^122^^^^^112^123^return min;^[CLASS] Min  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  min  value  long  n  serialVersionUID  int  begin  i  length  
