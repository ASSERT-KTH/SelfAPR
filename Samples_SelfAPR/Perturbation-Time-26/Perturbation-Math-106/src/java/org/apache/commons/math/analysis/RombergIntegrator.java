[P1_Replace_Type]^static final  short  serialVersionUID = -1058849527738180243L;^36^^^^^31^41^static final long serialVersionUID = -1058849527738180243L;^[CLASS] RombergIntegrator   [VARIABLES] 
[P8_Replace_Mix]^static final long serialVersionUID = -1058849527738180243;^36^^^^^31^41^static final long serialVersionUID = -1058849527738180243L;^[CLASS] RombergIntegrator   [VARIABLES] 
[P3_Replace_Literal]^super ( f, 40 ) ;^44^^^^^43^45^super ( f, 32 ) ;^[CLASS] RombergIntegrator  [METHOD] <init> [RETURN_TYPE] UnivariateRealFunction)   UnivariateRealFunction f [VARIABLES] long  serialVersionUID  UnivariateRealFunction  f  boolean  
[P14_Delete_Statement]^^44^^^^^43^45^super ( f, 32 ) ;^[CLASS] RombergIntegrator  [METHOD] <init> [RETURN_TYPE] UnivariateRealFunction)   UnivariateRealFunction f [VARIABLES] long  serialVersionUID  UnivariateRealFunction  f  boolean  
[P1_Replace_Type]^short  i = 1, j, m = maximalIterationCount + 1;^62^^^^^47^77^int i = 1, j, m = maximalIterationCount + 1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^int i = i, j, m = maximalIterationCount + i;^62^^^^^47^77^int i = 1, j, m = maximalIterationCount + 1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P12_Insert_Condition]^if  ( i >= minimalIterationCount )  { int i = 1, j, m = maximalIterationCount + 1; }^62^^^^^47^77^int i = 1, j, m = maximalIterationCount + 1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P1_Replace_Type]^long  i = 1, j, m = maximalIterationCount + 1;^62^^^^^47^77^int i = 1, j, m = maximalIterationCount + 1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^int i = 1, j, m = maximalIterationCount ;^62^^^^^47^77^int i = 1, j, m = maximalIterationCount + 1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P1_Replace_Type]^int r, t[][] = new double[m][m], s, olds;^65^^^^^50^80^double r, t[][] = new double[m][m], s, olds;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P7_Replace_Invocation]^verifyIterationCount (  ) ;^67^^^^^52^82^clearResult (  ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P14_Delete_Statement]^^67^^^^^52^82^clearResult (  ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P11_Insert_Donor_Statement]^setResult ( s, i ) ;clearResult (  ) ;^67^^^^^52^82^clearResult (  ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^verifyInterval ( s, max ) ;^68^^^^^53^83^verifyInterval ( min, max ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^verifyInterval ( min, s ) ;^68^^^^^53^83^verifyInterval ( min, max ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^verifyInterval (  max ) ;^68^^^^^53^83^verifyInterval ( min, max ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^verifyInterval ( min ) ;^68^^^^^53^83^verifyInterval ( min, max ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^verifyInterval ( max, min ) ;^68^^^^^53^83^verifyInterval ( min, max ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P7_Replace_Invocation]^setResult ( min, max ) ;^68^^^^^53^83^verifyInterval ( min, max ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P12_Insert_Condition]^if  ( maximalIterationCount > 32 )  { verifyIterationCount (  ) ; }^69^^^^^54^84^verifyIterationCount (  ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^t[m][m] = qtrap.stage ( min, max, m ) ;^72^^^^^57^87^t[0][0] = qtrap.stage ( min, max, 0 ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^t[-8][-8] = qtrap.stage ( min, max, -8 ) ;^72^^^^^57^87^t[0][0] = qtrap.stage ( min, max, 0 ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[0][0] = qtrap.stage ( s, max, 0 ) ;^72^^^^^57^87^t[0][0] = qtrap.stage ( min, max, 0 ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[0][0] = qtrap.stage ( min, s, 0 ) ;^72^^^^^57^87^t[0][0] = qtrap.stage ( min, max, 0 ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[0][0] = qtrap.stage (  max, 0 ) ;^72^^^^^57^87^t[0][0] = qtrap.stage ( min, max, 0 ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[0][0] = qtrap.stage ( min,  0 ) ;^72^^^^^57^87^t[0][0] = qtrap.stage ( min, max, 0 ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[0][0] = max.stage ( min, qtrap, 0 ) ;^72^^^^^57^87^t[0][0] = qtrap.stage ( min, max, 0 ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[0][0] = qtrap.stage ( max, min, 0 ) ;^72^^^^^57^87^t[0][0] = qtrap.stage ( min, max, 0 ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P8_Replace_Mix]^t[2][2] = qtrap.stage ( min, max, 2 ) ;^72^^^^^57^87^t[0][0] = qtrap.stage ( min, max, 0 ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P11_Insert_Donor_Statement]^t[i][0] = qtrap.stage ( min, max, i ) ;t[0][0] = qtrap.stage ( min, max, 0 ) ;^72^^^^^57^87^t[0][0] = qtrap.stage ( min, max, 0 ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P14_Delete_Statement]^^72^^^^^57^87^t[0][0] = qtrap.stage ( min, max, 0 ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^olds = t[-1][-1];^73^^^^^58^88^olds = t[0][0];^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P8_Replace_Mix]^olds = t[0 % 3][0 % 3];^73^^^^^58^88^olds = t[0][0];^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P11_Insert_Donor_Statement]^s = t[i][i];olds = t[0][0];^73^^^^^58^88^olds = t[0][0];^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P11_Insert_Donor_Statement]^olds = s;olds = t[0][0];^73^^^^^58^88^olds = t[0][0];^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^while  ( i < maximalIterationCount )  {^74^^^^^59^89^while  ( i <= maximalIterationCount )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^while  ( m <= maximalIterationCount )  {^74^^^^^59^89^while  ( i <= maximalIterationCount )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^while  ( i <= simalIterationCount )  {^74^^^^^59^89^while  ( i <= maximalIterationCount )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^if  ( i > minimalIterationCount )  {^82^^^^^67^97^if  ( i >= minimalIterationCount )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^if  ( m >= minimalIterationCount )  {^82^^^^^67^97^if  ( i >= minimalIterationCount )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P6_Replace_Expression]^if  ( abs((s - olds)) <= abs(((relativeAccuracy) * olds)) )  {^82^^^^^67^97^if  ( i >= minimalIterationCount )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P6_Replace_Expression]^if  ( s - olds )  {^82^^^^^67^97^if  ( i >= minimalIterationCount )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P6_Replace_Expression]^if  ( relativeAccuracy * olds )  {^82^^^^^67^97^if  ( i >= minimalIterationCount )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P9_Replace_Statement]^if  ( maximalIterationCount > 32 )  {^82^^^^^67^97^if  ( i >= minimalIterationCount )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P15_Unwrap_Block]^if ((java.lang.Math.abs((s - olds))) <= (java.lang.Math.abs(((relativeAccuracy) * olds)))) {    setResult(s, i);    return result;};^82^83^84^85^86^67^97^if  ( i >= minimalIterationCount )  { if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  { setResult ( s, i ) ; return result; }^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P16_Remove_Block]^^82^83^84^85^86^67^97^if  ( i >= minimalIterationCount )  { if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  { setResult ( s, i ) ; return result; }^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P13_Insert_Block]^if  (  ( abs (  ( s - olds )  )  )  <=  ( abs (  (  ( relativeAccuracy )  * olds )  )  )  )  {     setResult ( s, i ) ;     return result; }^82^^^^^67^97^[Delete]^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^if  ( Math.abs ( s - olds )  > Math.abs ( relativeAccuracy * olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^if  ( Math.abs ( s  ||  olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy + olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^if  ( Math.abs ( r - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^if  ( Math.abs ( s - s )  <= Math.abs ( relativeAccuracy * olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^if  ( Math.abs ( s - relativeAccuracy )  <= Math.abs ( olds * olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P6_Replace_Expression]^if  ( s - olds )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P6_Replace_Expression]^if  ( relativeAccuracy * olds )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P15_Unwrap_Block]^setResult(s, i); return result;^83^84^85^86^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  { setResult ( s, i ) ; return result; }^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P16_Remove_Block]^^83^84^85^86^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  { setResult ( s, i ) ; return result; }^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P13_Insert_Block]^if  ( i >=  ( minimalIterationCount )  )  {     if  (  ( abs (  ( s - olds )  )  )  <=  ( abs (  (  ( relativeAccuracy )  * olds )  )  )  )  {         setResult ( s, i ) ;         return result;     } }^83^^^^^68^98^[Delete]^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^setResult ( r, i ) ;^84^^^^^69^99^setResult ( s, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^setResult (  i ) ;^84^^^^^69^99^setResult ( s, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^setResult ( s ) ;^84^^^^^69^99^setResult ( s, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^setResult ( i, s ) ;^84^^^^^69^99^setResult ( s, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P8_Replace_Mix]^setResult ( s, m ) ;^84^^^^^69^99^setResult ( s, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P14_Delete_Statement]^^84^^^^^69^99^setResult ( s, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P11_Insert_Donor_Statement]^clearResult (  ) ;setResult ( s, i ) ;^84^^^^^69^99^setResult ( s, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^if  ( Math.abs ( s  &  olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^if  ( Math.abs ( olds - s )  <= Math.abs ( relativeAccuracy * olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P7_Replace_Invocation]^if  ( Math .abs ( min )   <= Math^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P8_Replace_Mix]^if  ( Math.abs ( s - olds )  <= Math.abs ( null * olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P14_Delete_Statement]^^84^85^^^^69^99^setResult ( s, i ) ; return result;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^if  ( Math.abs ( s - olds )  < Math.abs ( relativeAccuracy * olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^if  ( Math.abs ( s  >>  olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy / olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P8_Replace_Mix]^if  ( Math .abs ( r )   <= Math^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^for  ( j = 1; j < i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^for  <=  ( j = 1; j <= i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^for  ( j = -8; j <= i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^for  ( j = -7; j <= i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^for  ( j = 2; j <= i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^for  ( j = m; j <= i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^for  ( j = ; j <= i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^for  ( j = i; j <= i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^for  ( m = 1; j <= i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^for  ( j = 1; j <= m; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^fos  ( j = 1; j <= i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^r =  ( 1L  |   ( 2 * j )  )  -1;^78^^^^^63^93^r =  ( 1L <<  ( 2 * j )  )  -1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^r =  ( 1L <<  ( 2 / j )  )  -1;^78^^^^^63^93^r =  ( 1L <<  ( 2 * j )  )  -1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^r =  ( 1L <<  ( m * j )  )  -1;^78^^^^^63^93^r =  ( 1L <<  ( 2 * j )  )  -1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^r =  ( -3L <<  ( 2 * j )  )  --3;^78^^^^^63^93^r =  ( 1L <<  ( 2 * j )  )  -1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^r =  ( 1L <<  ( 2 * m )  )  -1;^78^^^^^63^93^r =  ( 1L <<  ( 2 * j )  )  -1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P8_Replace_Mix]^r =  ( 1 <<  ( 2 * j )  )  -1;^78^^^^^63^93^r =  ( 1L <<  ( 2 * j )  )  -1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  >  ( t[i][j-1] - t[i-1][j-1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  ( t[i][j-1]  >  t[i-1][j-1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  + r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  ( t[i][j-1]  >>  t[i-1][j-1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  ( t[i][j-1]  &  t[i-1][j-1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  ( t[i][j-1]  >=  t[i-1][j-1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  ( t[i][j-1]  <=  t[i-1][j-1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^t[i][j] = t[i][j-2] +  ( t[i][j-2] - t[i-2][j-2] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^t[i][j] = t[i][j-j] +  ( t[i][j-j] - t[i-j][j-j] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^t[i][j] = t[i][j-8] +  ( t[i][j-8] - t[i-8][j-8] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / s;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[i][j] = r[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / t;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^t[i][m] = qtrap.stage ( min, max, i ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[i][0] = qtrap.stage ( min, max, m ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[i][0] = qtrap.stage ( s, max, i ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[i][0] = qtrap.stage ( min, s, i ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[i][0] = qtrap.stage ( min, max ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[i][0] = qtrap.stage (  max, i ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[i][0] = qtrap.stage ( min,  i ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[i][0] = qtrap.stage ( min, i, max ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[i][0] = min.stage ( qtrap, max, i ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[i][0] = qtrap.stage ( max, min, i ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P8_Replace_Mix]^t[i][2] = qtrap.stage ( min, max, i ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P11_Insert_Donor_Statement]^t[0][0] = qtrap.stage ( min, max, 0 ) ;t[i][0] = qtrap.stage ( min, max, i ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P8_Replace_Mix]^for  ( j = 1 / 1; j <= i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^r =  ( 1L <<  ( 2 + j )  )  -1;^78^^^^^63^93^r =  ( 1L <<  ( 2 * j )  )  -1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^r =  ( 1L <<  (  * j )  )  -1;^78^^^^^63^93^r =  ( 1L <<  ( 2 * j )  )  -1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^r =  ( L <<  ( 2 * j )  )  -;^78^^^^^63^93^r =  ( 1L <<  ( 2 * j )  )  -1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  ^  ( t[i][j-1] - t[i-1][j-1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  ( t[i][j-1]  ==  t[i-1][j-1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  - r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  ( t[i][j-1]  |  t[i-1][j-1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^t[i][j] = t[i][j-3] +  ( t[i][j-3] - t[i-3][j-3] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^t[i][j] = t[i][j-m] +  ( t[i][j-m] - t[i-m][j-m] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^t[i][j] = t[i][j--1] +  ( t[i][j--1] - t[i--1][j--1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / olds;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P8_Replace_Mix]^t[i][j] = t[i][j-1 % 0] +  ( t[i][j-1 % 0] - t[i-1 % 0][j-1 % 0] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P8_Replace_Mix]^s =  null[i][i];^81^^^^^66^96^s = t[i][i];^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P11_Insert_Donor_Statement]^olds = t[0][0];s = t[i][i];^81^^^^^66^96^s = t[i][i];^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^olds = r;^88^^^^^73^103^olds = s;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P11_Insert_Donor_Statement]^olds = t[0][0];olds = s;^88^^^^^73^103^olds = s;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[i][0] = i.stage ( min, max, qtrap ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P14_Delete_Statement]^^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^if  ( Math.abs ( s  >=  olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^if  ( Math.abs ( s - r )  <= Math.abs ( relativeAccuracy * olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^if  ( Math.abs ( s - olds )  <= Math.abs ( this * olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^if  ( minimalIterationCount >= i )  {^82^^^^^67^97^if  ( i >= minimalIterationCount )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^if  ( Math.abs ( s  <  olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P7_Replace_Invocation]^if  ( Math .abs ( olds )   <= Math^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^if  ( Math.abs ( s   instanceof   olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P8_Replace_Mix]^setResult ( olds, i ) ;^84^^^^^69^99^setResult ( s, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^return null;^85^^^^^70^100^return result;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^for  ( j = 1; j > i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^for  |  ( j = 1; j <= i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^for  ( j = j; j <= i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^for  ( j = -6; j <= i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^foolds  ( j = 1; j <= i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^for  ( i = 1; j <= j; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^r =  ( 1L  >   ( 2 * j )  )  -1;^78^^^^^63^93^r =  ( 1L <<  ( 2 * j )  )  -1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^r =  ( 1L <<  ( 2 - j )  )  -1;^78^^^^^63^93^r =  ( 1L <<  ( 2 * j )  )  -1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^r =  ( 1L <<  ( 9 * j )  )  -1;^78^^^^^63^93^r =  ( 1L <<  ( 2 * j )  )  -1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^r =  ( iL <<  ( 2 * j )  )  -i;^78^^^^^63^93^r =  ( 1L <<  ( 2 * j )  )  -1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  &  ( t[i][j-1] - t[i-1][j-1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  ( t[i][j-1]   instanceof   t[i-1][j-1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  ( t[i][j-1]  <<  t[i-1][j-1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^t[i][j] = t[i][j-5] +  ( t[i][j-5] - t[i-5][j-5] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^t[i][j] = t[i][j--4] +  ( t[i][j--4] - t[i--4][j--4] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^t[i][j] = t[i][j-i] +  ( t[i][j-i] - t[i-i][j-i] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^t[i][7] = qtrap.stage ( min, max, i ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[i][0] = qtrap.stage ( i, max, min ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P5_Replace_Variable]^t[i][0] = max.stage ( min, qtrap, i ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P8_Replace_Mix]^t[i][4] = qtrap.stage ( min, max, i ) ;^75^^^^^60^90^t[i][0] = qtrap.stage ( min, max, i ) ;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P8_Replace_Mix]^for  ( j = 0; j <= i; j++ )  {^76^^^^^61^91^for  ( j = 1; j <= i; j++ )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^r =  ( 1L  ^   ( 2 * j )  )  -1;^78^^^^^63^93^r =  ( 1L <<  ( 2 * j )  )  -1;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  |  ( t[i][j-1] - t[i-1][j-1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  ( t[i][j-1]  <  t[i-1][j-1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  ( t[i][j-1]  ^  t[i-1][j-1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^t[i][j] = t[i][j-1] +  ( t[i][j-1]  ||  t[i-1][j-1] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P3_Replace_Literal]^t[i][j] = t[i][j-] +  ( t[i][j-] - t[i-][j-] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P8_Replace_Mix]^t[i][j] = t[i][j-1 - 2] +  ( t[i][j-1 - 2] - t[i-1 - 2][j-1 - 2] )  / r;^79^^^^^64^94^t[i][j] = t[i][j-1] +  ( t[i][j-1] - t[i-1][j-1] )  / r;^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P2_Replace_Operator]^if  ( Math.abs ( s  <<  olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P8_Replace_Mix]^if  ( Math .abs ( s )   <= Math^83^^^^^68^98^if  ( Math.abs ( s - olds )  <= Math.abs ( relativeAccuracy * olds )  )  {^[CLASS] RombergIntegrator  [METHOD] integrate [RETURN_TYPE] double   double min double max [VARIABLES] double[][]  t  boolean  long  serialVersionUID  double  max  min  olds  r  s  int  i  j  m  TrapezoidIntegrator  qtrap  
[P12_Insert_Condition]^if  ( maximalIterationCount > 32 )  { super.verifyIterationCount (  ) ; }^100^^^^^99^107^super.verifyIterationCount (  ) ;^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( maximalIterationCount >= 32 )  {^102^^^^^99^107^if  ( maximalIterationCount > 32 )  {^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( maximalIterationCount > 23 )  {^102^^^^^99^107^if  ( maximalIterationCount > 32 )  {^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( "Iteration upper limit out of [0, 32] range: " + maximalIterationCount )  {^102^^^^^99^107^if  ( maximalIterationCount > 32 )  {^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( maximalIterationCount > 32 - 0 )  {^102^^^^^99^107^if  ( maximalIterationCount > 32 )  {^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P9_Replace_Statement]^if  ( i >= minimalIterationCount )  {^102^^^^^99^107^if  ( maximalIterationCount > 32 )  {^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("Iteration upper limit out of [0, 32] range: " + (maximalIterationCount)));^102^103^104^105^106^99^107^if  ( maximalIterationCount > 32 )  { throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: " + maximalIterationCount ) ; }^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P16_Remove_Block]^^102^103^104^105^106^99^107^if  ( maximalIterationCount > 32 )  { throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: " + maximalIterationCount ) ; }^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: "  <<  maximalIterationCount ) ;^103^104^105^^^99^107^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: " + maximalIterationCount ) ;^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Iteratioteration upper limit out of [0, 32] range: " + maximalIterationCount ) ;^103^104^105^^^99^107^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: " + maximalIterationCount ) ;^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: " + 2 ) ;^103^104^105^^^99^107^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: " + maximalIterationCount ) ;^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P13_Insert_Block]^if  (  ( maximalIterationCount )  > 32 )  {     throw new IllegalArgumentException (  ( "Iteration upper limit out of [0, 32] range: " +  ( maximalIterationCount )  )  ) ; }^103^^^^^99^107^[Delete]^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: "  >  maximalIterationCount ) ;^103^104^105^^^99^107^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: " + maximalIterationCount ) ;^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "tion upper literation upper limit out of [0, 32] range: " + maximalIterationCount ) ;^103^104^105^^^99^107^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: " + maximalIterationCount ) ;^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: " + ;^103^104^105^^^99^107^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: " + maximalIterationCount ) ;^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: "  !=  maximalIterationCount ) ;^103^104^105^^^99^107^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: " + maximalIterationCount ) ;^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: f [0, 32] " + maximalIterationCount ) ;^103^104^105^^^99^107^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: " + maximalIterationCount ) ;^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "n upper limit out " + maximalIterationCount ) ;^103^104^105^^^99^107^throw new IllegalArgumentException ( "Iteration upper limit out of [0, 32] range: " + maximalIterationCount ) ;^[CLASS] RombergIntegrator  [METHOD] verifyIterationCount [RETURN_TYPE] void   [VARIABLES] long  serialVersionUID  boolean  
