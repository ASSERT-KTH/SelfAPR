[P8_Replace_Mix]^private DistributionFactory distributionFactory ;^35^^^^^30^40^private DistributionFactory distributionFactory = null;^[CLASS] TTestImpl   [VARIABLES] 
[P14_Delete_Statement]^^41^^^^^40^42^super (  ) ;^[CLASS] TTestImpl  [METHOD] <init> [RETURN_TYPE] TTestImpl()   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P2_Replace_Operator]^if  (  ( sample1 == null )  &&  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P2_Replace_Operator]^if  (  ( sample1 != null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P2_Replace_Operator]^if  (  ( sample1 == null )  ||  ( sample2 != null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P2_Replace_Operator]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  <= 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P3_Replace_Literal]^if  (  ( sample1 == null )  ||  ( sample0 == null || Math.min ( sample1.length, sample0.length )  < 0 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P4_Replace_Constructor]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample1 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min (  sample2.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^if  (  ( sample2 == null )  ||  ( sample1 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample2.length, sample1.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2.length == null || Math.min ( sample1.length, sample2 )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P6_Replace_Expression]^if  (  ( sample1 == null )  ) {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P6_Replace_Expression]^if  (   ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P6_Replace_Expression]^if  ( sample1 == null )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P6_Replace_Expression]^if  ( (sample2 == null || length, sample2.length)) < 2) )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P6_Replace_Expression]^if  ( sample2 == null )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P6_Replace_Expression]^if  ( min ( sample1.length, sample2.length )  < 2 )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P8_Replace_Mix]^if  (  ( sample1 == this )  ) {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P9_Replace_Statement]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^66^67^^^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("insufficient data for t statistic");^66^67^68^69^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P16_Remove_Block]^^66^67^68^69^^64^74^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^66^^^^^64^74^[Delete]^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^66^^^^^64^74^[Delete]^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^66^^^^^64^74^[Delete]^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data" ) ; }^66^^^^^64^74^[Delete]^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P13_Insert_Block]^if  (  ( sampleStats1 == null )  ||  (  ( sampleStats2 == null )  ||  (  ( min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^66^^^^^64^74^[Delete]^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "insufficient data" )   ;^68^^^^^64^74^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P8_Replace_Mix]^return ;^68^^^^^64^74^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^Math.min ( sample1.length.length )  < 2 )  )  {^67^^^^^64^74^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^Math.min (  sample2.length )  < 2 )  )  {^67^^^^^64^74^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^Math.min ( sample1.length )  < 2 )  )  {^67^^^^^64^74^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^Math.min ( sample2.length, sample1.length )  < 2 )  )  {^67^^^^^64^74^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P14_Delete_Statement]^^67^68^^^^64^74^Math.min ( sample1.length, sample2.length )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P1_Replace_Type]^float meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^70^^^^^64^74^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^double meanDifference = StatUtils.meanDifference ( sample1, sample1 ) ;^70^^^^^64^74^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^double meanDifference = StatUtils.meanDifference (  sample2 ) ;^70^^^^^64^74^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^double meanDifference = StatUtils.meanDifference ( sample1 ) ;^70^^^^^64^74^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^double meanDifference = StatUtils.meanDifference ( sample2, sample1 ) ;^70^^^^^64^74^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P8_Replace_Mix]^double meanDifference = StatUtils.meanDifference ( sample2, sample2 ) ;^70^^^^^64^74^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P14_Delete_Statement]^^70^71^72^73^74^64^74^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ; return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ; }^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P3_Replace_Literal]^return t ( meanDifference, 5, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^return t (  0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^return t ( meanDifference, 0, StatUtils.varianceDifference (  sample2, meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1,  meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample2, sample1, meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P8_Replace_Mix]^return t ( meanDifference, 0, StatUtils .meanDifference ( sample2 , sample1 )  , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P3_Replace_Literal]^return t ( meanDifference, 3, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^return t ( sample1, 0, StatUtils.varianceDifference ( meanDifference, sample2, meanDifference ) , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P7_Replace_Invocation]^return t ( meanDifference, 0, StatUtils .meanDifference ( sample1 , sample2 )  , ( double )  sample1.length ) ;^71^72^73^^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P14_Delete_Statement]^^71^72^73^74^^64^74^return t ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ; }^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^StatUtils.varianceDifference (  sample2, meanDifference ) , ( double )  sample1.length ) ;^72^73^^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^StatUtils.varianceDifference ( sample1,  meanDifference ) , ( double )  sample1.length ) ;^72^73^^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^StatUtils.varianceDifference ( sample1, sample2 ) , ( double )  sample1.length ) ;^72^73^^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^StatUtils.varianceDifference ( meanDifference, sample2, sample1 ) , ( double )  sample1.length ) ;^72^73^^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^StatUtils.varianceDifference ( sample2, sample1, meanDifference ) , ( double )  sample1.length ) ;^72^73^^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^StatUtils.varianceDifference ( sample1, meanDifference, sample2 ) , ( double )  sample1.length ) ;^72^73^^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P8_Replace_Mix]^StatUtils.varianceDifference ( sample2, sample2, meanDifference ) , ( double )  sample1.length ) ;^72^73^^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P14_Delete_Statement]^^72^73^74^^^64^74^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ; }^[CLASS] TTestImpl  [METHOD] pairedT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P1_Replace_Type]^int meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^111^^^^^109^115^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^double meanDifference = StatUtils.meanDifference ( sample2, sample2 ) ;^111^^^^^109^115^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^double meanDifference = StatUtils.meanDifference (  sample2 ) ;^111^^^^^109^115^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^double meanDifference = StatUtils.meanDifference ( sample1 ) ;^111^^^^^109^115^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^double meanDifference = StatUtils.meanDifference ( sample2, sample1 ) ;^111^^^^^109^115^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P8_Replace_Mix]^double meanDifference = StatUtils.meanDifference ( sample1, sample1 ) ;^111^^^^^109^115^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P8_Replace_Mix]^double meanDifference = StatUtils .varianceDifference ( sample2 , sample1 , meanDifference )  ;^111^^^^^109^115^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P14_Delete_Statement]^^111^112^113^114^115^109^115^double meanDifference = StatUtils.meanDifference ( sample1, sample2 ) ; return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ; }^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P3_Replace_Literal]^return tTest ( meanDifference, 6, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^return tTest (  0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^return tTest ( meanDifference, 0, StatUtils.varianceDifference (  sample2, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1,  meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^return tTest ( sample1, 0, StatUtils.varianceDifference ( meanDifference, sample2, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample2, sample1, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P7_Replace_Invocation]^return tTest ( meanDifference, 0, StatUtils .meanDifference ( sample2 , sample1 )  , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P3_Replace_Literal]^return tTest ( meanDifference, -2, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample1, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^return tTest ( sample2, 0, StatUtils.varianceDifference ( sample1, meanDifference, meanDifference ) , ( double )  sample1.length ) ;^112^113^114^^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P14_Delete_Statement]^^112^113^114^115^^109^115^return tTest ( meanDifference, 0, StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ; }^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^StatUtils.varianceDifference ( sample1, sample1, meanDifference ) , ( double )  sample1.length ) ;^113^114^^^^109^115^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^StatUtils.varianceDifference (  sample2, meanDifference ) , ( double )  sample1.length ) ;^113^114^^^^109^115^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^StatUtils.varianceDifference ( sample1,  meanDifference ) , ( double )  sample1.length ) ;^113^114^^^^109^115^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^StatUtils.varianceDifference ( sample1, sample2 ) , ( double )  sample1.length ) ;^113^114^^^^109^115^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^StatUtils.varianceDifference ( sample2, sample1, meanDifference ) , ( double )  sample1.length ) ;^113^114^^^^109^115^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^StatUtils.varianceDifference ( sample1, meanDifference, sample2 ) , ( double )  sample1.length ) ;^113^114^^^^109^115^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P5_Replace_Variable]^StatUtils.varianceDifference ( meanDifference, sample2, sample1 ) , ( double )  sample1.length ) ;^113^114^^^^109^115^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P14_Delete_Statement]^^113^114^115^^^109^115^StatUtils.varianceDifference ( sample1, sample2, meanDifference ) , ( double )  sample1.length ) ; }^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  meanDifference  
[P2_Replace_Operator]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^151^^^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P2_Replace_Operator]^if  (  ( alpha < 0 )  ||  ( alpha > 0.5 )  )  {^151^^^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P2_Replace_Operator]^if  (  ( alpha <= 0 )  ||  ( alpha >= 0.5 )  )  {^151^^^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P3_Replace_Literal]^if  (  ( alpha <= 6 )  ||  ( alpha > 6.5 )  )  {^151^^^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P3_Replace_Literal]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.25 )  )  {^151^^^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P6_Replace_Expression]^if  (  ( alpha <= 0 )  ) {^151^^^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P6_Replace_Expression]^if  (   ( alpha > 0.5 )  )  {^151^^^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P6_Replace_Expression]^if  ( alpha <= 0 )  {^151^^^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P6_Replace_Expression]^if  ( alpha > 0.5 )  {^151^^^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P6_Replace_Expression]^if  ( "bad significance level: " + alpha )  {^151^^^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P8_Replace_Mix]^if  (   ( alpha > 1.5 )  )  {^151^^^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("bad significance level: " + alpha));^151^152^153^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P16_Remove_Block]^^151^152^153^^^149^155^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^151^^^^^149^155^[Delete]^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^151^^^^^149^155^[Delete]^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^151^^^^^149^155^[Delete]^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P13_Insert_Block]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {     throw new IllegalArgumentException (  ( "bad significance level: " + alpha )  ) ; }^152^^^^^149^155^[Delete]^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P8_Replace_Mix]^return ;^152^^^^^149^155^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P2_Replace_Operator]^return  ( pairedTTest ( sample1, sample2 )  <= alpha ) ;^154^^^^^149^155^return  ( pairedTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P5_Replace_Variable]^return  ( pairedTTest (  sample2 )  < alpha ) ;^154^^^^^149^155^return  ( pairedTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P5_Replace_Variable]^return  ( pairedTTest ( sample1 )  < alpha ) ;^154^^^^^149^155^return  ( pairedTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P5_Replace_Variable]^return  ( pairedTTest ( alpha, sample2 )  < sample1 ) ;^154^^^^^149^155^return  ( pairedTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P5_Replace_Variable]^return  ( pairedTTest ( sample2, sample1 )  < alpha ) ;^154^^^^^149^155^return  ( pairedTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P7_Replace_Invocation]^return  ( pairedT ( sample1, sample2 )  < alpha ) ;^154^^^^^149^155^return  ( pairedTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P14_Delete_Statement]^^154^^^^^149^155^return  ( pairedTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] pairedTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P2_Replace_Operator]^if  (  ( observed == null )  &&  ( observed.length < 2 )  )  {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P2_Replace_Operator]^if  (  ( observed != null )  ||  ( observed.length < 2 )  )  {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P2_Replace_Operator]^if  (  ( observed == null )  ||  ( observed.length <= 2 )  )  {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P3_Replace_Literal]^if  (  ( observed == null )  ||  ( observed.length < 4 )  )  {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P5_Replace_Variable]^if  (  ( observed == null )  ||  ( 3 < 2 )  )  {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P5_Replace_Variable]^if  (  ( observed.length == null )  ||  ( observed < 2 )  )  {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P6_Replace_Expression]^if  (  ( observed == null )  ) {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P6_Replace_Expression]^if  (   ( observed.length < 2 )  )  {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P6_Replace_Expression]^if  ( observed == null )  {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P6_Replace_Expression]^if  ( observed.length < 2 )  {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P8_Replace_Mix]^if  (  ( observed == this )  ||  ( observed.length < 2 )  )  {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P9_Replace_Statement]^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^174^^^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("insufficient data for t statistic");^174^175^176^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P16_Remove_Block]^^174^175^176^^^172^179^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^174^^^^^172^179^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^174^^^^^172^179^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P13_Insert_Block]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {     throw new IllegalArgumentException (  ( "bad significance level: " + alpha )  ) ; }^174^^^^^172^179^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^174^^^^^172^179^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data" ) ; }^174^^^^^172^179^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P13_Insert_Block]^if  (  ( sampleStats1 == null )  ||  (  ( sampleStats2 == null )  ||  (  ( min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^174^^^^^172^179^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "insufficient data" )   ;^175^^^^^172^179^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^175^^^^^172^179^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^175^^^^^172^179^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^175^^^^^172^179^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P8_Replace_Mix]^return ;^175^^^^^172^179^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P5_Replace_Variable]^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) .length ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P5_Replace_Variable]^return t ( StatUtils.mean ( observed ) ,  StatUtils.variance ( observed ) , observed.length ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P5_Replace_Variable]^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed )  ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P5_Replace_Variable]^return t ( StatUtils.mean ( mu ) , observed, StatUtils.variance ( observed ) , observed.length ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P5_Replace_Variable]^return t ( StatUtils.mean ( observed ) , observed.length, StatUtils.variance ( observed ) , mu ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P5_Replace_Variable]^return t ( StatUtils.mean ( observed.length ) , mu, StatUtils.variance ( observed ) , observed ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P7_Replace_Invocation]^redfurn t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P7_Replace_Invocation]^return t ( StatUtils.variance ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P7_Replace_Invocation]^return t ( StatUtils.mean ( observed ) , mu, StatUtils.mean ( observed ) , observed.length ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P7_Replace_Invocation]^return t ( StatUtils.mean ( observed ) , mu, StatUtils .varianceDifference ( observed , observed , mu )  , observed.length ) ;^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P14_Delete_Statement]^^177^178^^^^172^179^return t ( StatUtils.mean ( observed ) , mu, StatUtils.variance ( observed ) , observed.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu double[] observed [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  observed  double  mu  
[P2_Replace_Operator]^if  (  ( sampleStats == null )  &&  ( sampleStats.getN (  )  < 2 )  )  {^199^^^^^197^204^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P2_Replace_Operator]^if  (  ( sampleStats != null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^199^^^^^197^204^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P2_Replace_Operator]^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  == 2 )  )  {^199^^^^^197^204^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P3_Replace_Literal]^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 8 )  )  {^199^^^^^197^204^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P6_Replace_Expression]^if  (  ( sampleStats == null )  ) {^199^^^^^197^204^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P6_Replace_Expression]^if  (   ( sampleStats.getN (  )  < 2 )  )  {^199^^^^^197^204^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P6_Replace_Expression]^if  ( sampleStats == null )  {^199^^^^^197^204^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P6_Replace_Expression]^if  ( sampleStats.getN (  )  < 2 )  {^199^^^^^197^204^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P9_Replace_Statement]^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^199^^^^^197^204^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("insufficient data for t statistic");^199^200^201^^^197^204^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P16_Remove_Block]^^199^200^201^^^197^204^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^199^^^^^197^204^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {     throw new IllegalArgumentException (  ( "bad significance level: " + alpha )  ) ; }^199^^^^^197^204^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^199^^^^^197^204^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^199^^^^^197^204^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data" ) ; }^199^^^^^197^204^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( sampleStats1 == null )  ||  (  ( sampleStats2 == null )  ||  (  ( min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^199^^^^^197^204^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "insufficient data" )   ;^200^^^^^197^204^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^200^^^^^197^204^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^200^^^^^197^204^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^200^^^^^197^204^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P5_Replace_Variable]^return t ( sampleStats.getMean (  ) , mu.getVariance (  ) , sampleStats.getN (  )  ) ;^202^203^^^^197^204^return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P5_Replace_Variable]^return t ( sampleStats.getMean (  ) ,  sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^202^203^^^^197^204^return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P5_Replace_Variable]^return t ( mu.getMean (  ) , sampleStats, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^202^203^^^^197^204^return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P7_Replace_Invocation]^redfurn t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^202^203^^^^197^204^return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P7_Replace_Invocation]^return t ( sampleStats .getN (  )  , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^202^203^^^^197^204^return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P7_Replace_Invocation]^return t ( sampleStats.getMean (  ) , mu, sampleStats .getMean (  )  , sampleStats.getN (  )  ) ;^202^203^^^^197^204^return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P7_Replace_Invocation]^return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats .getMean (  )   ) ;^202^203^^^^197^204^return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P14_Delete_Statement]^^202^203^^^^197^204^return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P7_Replace_Invocation]^sampleStats .getMean (  )   ) ;^203^^^^^197^204^sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P14_Delete_Statement]^^203^^^^^197^204^sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P11_Insert_Donor_Statement]^( double )  sampleStats2.getN (  )  ) ;sampleStats.getN (  )  ) ;^203^^^^^197^204^sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P2_Replace_Operator]^if  (  ( sample1 == null )  &&  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P2_Replace_Operator]^if  (  ( sample1 != null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P2_Replace_Operator]^if  (  ( sample1 == null )  ||  ( sample2 != null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P2_Replace_Operator]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  <= 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P3_Replace_Literal]^if  (  ( sample1 == null )  ||  ( sample5 == null || Math.min ( sample1.length, sample5.length )  < 5 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P4_Replace_Constructor]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min (  sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample2 == null )  ||  ( sample1 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample1.length == null || Math.min ( sample2, sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample2.length, sample1.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  (  ( sample1 == null )  ) {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  (   ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  ( sample1 == null )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  ( (sample2 == null || length, sample2.length)) < 2) )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  ( sample2 == null )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  ( min ( sample1.length, sample2.length )  < 2 )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^if  (  ( sample1 == false )  ||  ( sample2 == false || Math.min ( this, sample2.length )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P9_Replace_Statement]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^241^242^^^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("insufficient data for t statistic");^241^242^243^244^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P16_Remove_Block]^^241^242^243^244^^239^248^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^241^^^^^239^248^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^241^^^^^239^248^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^241^^^^^239^248^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data" ) ; }^241^^^^^239^248^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( sampleStats1 == null )  ||  (  ( sampleStats2 == null )  ||  (  ( min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^241^^^^^239^248^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "insufficient data" )   ;^243^^^^^239^248^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample1.length.length )  < 2 )  )  {^242^^^^^239^248^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min (  sample2.length )  < 2 )  )  {^242^^^^^239^248^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample1.length )  < 2 )  )  {^242^^^^^239^248^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample2.length, sample1.length )  < 2 )  )  {^242^^^^^239^248^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P14_Delete_Statement]^^242^243^^^^239^248^Math.min ( sample1.length, sample2.length )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^return homoscedasticT ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^245^246^247^^^239^248^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^245^246^247^^^239^248^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^return homoscedasticT ( StatUtils.variance ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^245^246^247^^^239^248^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^245^246^247^^^239^248^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^return homoscedasticT ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^245^246^247^^^239^248^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^245^246^247^^^239^248^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P14_Delete_Statement]^^245^246^247^^^239^248^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^return homoscedasticT ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^245^246^247^^^239^248^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^return homoscedasticT ( StatUtils.variance ( sample2 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^245^246^247^^^239^248^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^return homoscedasticT ( StatUtils .meanDifference ( sample2 , sample2 )  , StatUtils^245^246^247^^^239^248^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^StatUtils.variance ( sample2 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^246^247^^^^239^248^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^StatUtils.mean ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^246^247^^^^239^248^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^StatUtils.mean ( sample2 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^246^247^^^^239^248^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P14_Delete_Statement]^^246^247^^^^239^248^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample1 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^246^247^^^^239^248^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P2_Replace_Operator]^if  (  ( sample1 == null )  &&  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P2_Replace_Operator]^if  (  ( sample1 != null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P2_Replace_Operator]^if  (  ( sample1 == null )  ||  ( sample2 != null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P2_Replace_Operator]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  == 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P3_Replace_Literal]^if  (  ( sample1 == null )  ||  ( sample-1 == null || Math.min ( sample1.length, sample-1.length )  < -1 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P4_Replace_Constructor]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample2 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min (  sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample2 == null )  ||  ( sample1 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample1.length == null || Math.min ( sample2, sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample2.length, sample1.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample2.length == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample1 )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  (  ( sample1 == null )  ) {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  (   ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  ( sample1 == null )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  ( (sample2 == null || length, sample2.length)) < 2) )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  ( sample2 == null )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  ( min ( sample1.length, sample2.length )  < 2 )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^if  (  ( sample1 == true )  ||  ( sample2 == true || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P9_Replace_Statement]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^280^281^^^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("insufficient data for t statistic");^280^281^282^283^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P16_Remove_Block]^^280^281^282^283^^278^287^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^280^^^^^278^287^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^280^^^^^278^287^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^280^^^^^278^287^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data" ) ; }^280^^^^^278^287^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( sampleStats1 == null )  ||  (  ( sampleStats2 == null )  ||  (  ( min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^280^^^^^278^287^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "insufficient data" )   ;^282^^^^^278^287^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample1.length.length )  < 2 )  )  {^281^^^^^278^287^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min (  sample2.length )  < 2 )  )  {^281^^^^^278^287^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample1.length )  < 2 )  )  {^281^^^^^278^287^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample2.length, sample1.length )  < 2 )  )  {^281^^^^^278^287^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample2, sample1.length.length )  < 2 )  )  {^281^^^^^278^287^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample2.length.length, sample1 )  < 2 )  )  {^281^^^^^278^287^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^Math.min ( sample2.length, sample2.length )  < 2 )  )  {^281^^^^^278^287^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P14_Delete_Statement]^^281^282^^^^278^287^Math.min ( sample1.length, sample2.length )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^return t ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^284^285^286^^^278^287^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^retTesturn t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^284^285^286^^^278^287^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^return t ( StatUtils.variance ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^284^285^286^^^278^287^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^284^285^286^^^278^287^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils .varianceDifference ( sample2 , sample1 , this )  , StatUtils^284^285^286^^^278^287^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^return t ( StatUtils .meanDifference ( sample1 , sample2 )  , StatUtils^284^285^286^^^278^287^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^284^285^286^^^278^287^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P14_Delete_Statement]^^284^285^286^^^278^287^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^return t ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^284^285^286^^^278^287^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^return t ( StatUtils .meanDifference ( sample1 , sample1 )  , StatUtils^284^285^286^^^278^287^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^StatUtils.variance ( sample2 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^285^286^^^^278^287^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^StatUtils.mean ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^285^286^^^^278^287^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P14_Delete_Statement]^^285^286^^^^278^287^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample1 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^285^286^^^^278^287^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^StatUtils .varianceDifference ( sample2 , sample1 , 2 )  , StatUtils^285^286^^^^278^287^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P2_Replace_Operator]^if  (  ( sampleStats1 == null )  && ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P2_Replace_Operator]^if  (  ( sampleStats1 != null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P2_Replace_Operator]^if  (  ( sampleStats1 == null )  || ( sampleStats2 != null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P2_Replace_Operator]^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  <= 2 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P3_Replace_Literal]^if  (  ( sampleStats1 == null )  || ( sampleStats-7 == null || Math.min ( sampleStats1.getN (  ) , sampleStats-7.getN (  )  )  < -7 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P4_Replace_Constructor]^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) .getN (  )  )  < 2 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^if  (  ( sampleStats2 == null )  || ( sampleStats1 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  (  ( sampleStats1 == null )  ) {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  (  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  ( sampleStats1 == null )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  ( (sampleStats2 == null || getN(), sampleStats2.getN())) < 2) )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  ( sampleStats2 == null )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  ( min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1 .getMean (  )  , sampleStats2^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P8_Replace_Mix]^if  (  ( sampleStats1 == false )  || ( sampleStats2 == false || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P9_Replace_Statement]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^323^324^325^^^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("insufficient data for t statistic");^323^324^325^326^327^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P16_Remove_Block]^^323^324^325^326^327^320^331^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^323^^^^^320^331^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^323^^^^^320^331^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^323^^^^^320^331^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^323^^^^^320^331^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data" ) ; }^323^^^^^320^331^[Delete]^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "insufficient data" )   ;^326^^^^^320^331^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P8_Replace_Mix]^return ;^326^^^^^320^331^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^Math.min ( sampleStats1.getN (  ) .getN (  )  )  < 2 )  )  {^325^^^^^320^331^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^Math.min ( sampleStats2.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^325^^^^^320^331^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^Math.min ( sampleStats1 .getMean (  )  , sampleStats2^325^^^^^320^331^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P14_Delete_Statement]^^325^326^^^^320^331^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^Math.min ( sampleStats2.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^325^^^^^320^331^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P8_Replace_Mix]^Math.min ( sampleStats1.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^325^^^^^320^331^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) .getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^328^329^330^^^320^331^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return t ( sampleStats1.getMean (  ) .getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^328^329^330^^^320^331^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return t ( sampleStats2.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^328^329^330^^^320^331^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^retTesturn t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^328^329^330^^^320^331^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1 .getMean (  )  , sampleStats2^328^329^330^^^320^331^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^return t ( sampleStats1 .getN (  )  , sampleStats2^328^329^330^^^320^331^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1 .getMean (  )  ,  ( double )  sampleStats2^328^329^330^^^320^331^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P14_Delete_Statement]^^328^329^330^^^320^331^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return t ( sampleStats2.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^328^329^330^^^320^331^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return t ( sampleStats1.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^328^329^330^^^320^331^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats2.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^329^330^^^^320^331^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P14_Delete_Statement]^^329^330^^^^320^331^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^sampleStats1.getVariance (  ) , sampleStats1.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^329^330^^^^320^331^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P8_Replace_Mix]^sampleStats1 .getMean (  )  , sampleStats1^329^330^^^^320^331^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P1_Replace_Type]^( int )  sampleStats1.getN (  ) ,  ( int )  sampleStats2.getN (  )  ) ;^330^^^^^320^331^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^( double )  sampleStats2.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^330^^^^^320^331^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^( double )  sampleStats1 .getMean (  )  ,  ( double )  sampleStats2^330^^^^^320^331^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P14_Delete_Statement]^^330^^^^^320^331^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P11_Insert_Donor_Statement]^return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^330^^^^^320^331^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P11_Insert_Donor_Statement]^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^330^^^^^320^331^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P11_Insert_Donor_Statement]^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^330^^^^^320^331^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P11_Insert_Donor_Statement]^return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^330^^^^^320^331^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P11_Insert_Donor_Statement]^( double )  sampleStats2.getN (  )  ) ;( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^330^^^^^320^331^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats1.getN (  )  ) ;^330^^^^^320^331^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P2_Replace_Operator]^if  (  ( sampleStats1 == null )  && ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P2_Replace_Operator]^if  (  ( sampleStats1 != null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P2_Replace_Operator]^if  (  ( sampleStats1 == null )  || ( sampleStats2 != null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P2_Replace_Operator]^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  <= 2 )  )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P3_Replace_Literal]^if  (  ( sampleStats1 == null )  || ( sampleStats10 == null || Math.min ( sampleStats1.getN (  ) , sampleStats10.getN (  )  )  < 10 )  )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P4_Replace_Constructor]^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) .getN (  )  )  < 2 )  )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^if  (  ( sampleStats2 == null )  || ( sampleStats1 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  (  ( sampleStats1 == null )  ) {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  (  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  ( sampleStats1 == null )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  ( (sampleStats2 == null || getN(), sampleStats2.getN())) < 2) )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  ( sampleStats2 == null )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  ( min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P8_Replace_Mix]^if  (  ( sampleStats1 == this )  ) {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P9_Replace_Statement]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^371^372^373^^^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("insufficient data for t statistic");^371^372^373^374^375^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P16_Remove_Block]^^371^372^373^374^375^368^379^if  (  ( sampleStats1 == null )  || ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^371^^^^^368^379^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^371^^^^^368^379^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^371^^^^^368^379^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^371^^^^^368^379^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data" ) ; }^371^^^^^368^379^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "insufficient data" )   ;^374^^^^^368^379^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P8_Replace_Mix]^return ;^374^^^^^368^379^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^Math.min ( sampleStats1.getN (  ) .getN (  )  )  < 2 )  )  {^373^^^^^368^379^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^Math.min ( sampleStats2.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^373^^^^^368^379^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^Math.min ( sampleStats1 .getMean (  )  , sampleStats2^373^^^^^368^379^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P14_Delete_Statement]^^373^374^^^^368^379^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^Math.min ( sampleStats2.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^373^^^^^368^379^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^Math.min ( sampleStats1.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^373^^^^^368^379^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) .getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^376^377^378^^^368^379^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return homoscedasticT ( sampleStats1.getMean (  ) .getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^376^377^378^^^368^379^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return homoscedasticT ( sampleStats2.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^376^377^378^^^368^379^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^376^377^378^^^368^379^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^return homoscedasticT ( sampleStats1 .getN (  )  , sampleStats2^376^377^378^^^368^379^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1 .getMean (  )  , sampleStats2^376^377^378^^^368^379^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1 .getMean (  )  ,  ( double )  sampleStats2^376^377^378^^^368^379^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P14_Delete_Statement]^^376^377^378^^^368^379^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return homoscedasticT ( sampleStats2.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^376^377^378^^^368^379^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats2.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^377^378^^^^368^379^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P14_Delete_Statement]^^377^378^^^^368^379^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^sampleStats1.getVariance (  ) , sampleStats1.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^377^378^^^^368^379^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P1_Replace_Type]^( int )  sampleStats1.getN (  ) ,  ( int )  sampleStats2.getN (  )  ) ;^378^^^^^368^379^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^( double )  sampleStats2.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^378^^^^^368^379^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^( double )  sampleStats1 .getMean (  )  ,  ( double )  sampleStats2^378^^^^^368^379^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P14_Delete_Statement]^^378^^^^^368^379^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P11_Insert_Donor_Statement]^return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^378^^^^^368^379^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P11_Insert_Donor_Statement]^sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) , ( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^378^^^^^368^379^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P11_Insert_Donor_Statement]^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^378^^^^^368^379^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P11_Insert_Donor_Statement]^return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^378^^^^^368^379^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P11_Insert_Donor_Statement]^( double )  sampleStats2.getN (  )  ) ;( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^378^^^^^368^379^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P1_Replace_Type]^( float )  sampleStats1.getN (  ) ,  ( float )  sampleStats2.getN (  )  ) ;^378^^^^^368^379^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats1.getN (  )  ) ;^378^^^^^368^379^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P2_Replace_Operator]^if  (  ( sample == null )  &&  ( sample.length < 2 )  )  {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P2_Replace_Operator]^if  (  ( sample != null )  ||  ( sample.length < 2 )  )  {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P2_Replace_Operator]^if  (  ( sample == null )  ||  ( sample.length <= 2 )  )  {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P3_Replace_Literal]^if  (  ( sample == null )  ||  ( sample.length < 4 )  )  {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P5_Replace_Variable]^if  (  ( sample.length == null )  ||  ( sample < 2 )  )  {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P6_Replace_Expression]^if  (  ( sample == null )  ) {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P6_Replace_Expression]^if  (   ( sample.length < 2 )  )  {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P6_Replace_Expression]^if  ( sample == null )  {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P6_Replace_Expression]^if  ( sample.length < 2 )  {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P9_Replace_Statement]^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P9_Replace_Statement]^if  (  ( observed == null )  ||  ( observed.length < 2 )  )  {^409^^^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("insufficient data for t statistic");^409^410^411^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P16_Remove_Block]^^409^410^411^^^407^414^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^409^^^^^407^414^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P13_Insert_Block]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {     throw new IllegalArgumentException (  ( "bad significance level: " + alpha )  ) ; }^409^^^^^407^414^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^409^^^^^407^414^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^409^^^^^407^414^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data" ) ; }^409^^^^^407^414^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P13_Insert_Block]^if  (  ( sampleStats1 == null )  ||  (  ( sampleStats2 == null )  ||  (  ( min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^409^^^^^407^414^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "insufficient data" )   ;^410^^^^^407^414^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^410^^^^^407^414^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^410^^^^^407^414^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^410^^^^^407^414^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P5_Replace_Variable]^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) .length ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P5_Replace_Variable]^return tTest (  StatUtils.mean ( sample ) ,  StatUtils.variance ( sample ) , sample.length ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P5_Replace_Variable]^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample )  ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P5_Replace_Variable]^return tTest (  StatUtils.mean ( sample.length ) , mu, StatUtils.variance ( sample ) , sample ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P5_Replace_Variable]^return tTest (  StatUtils.mean ( mu ) , sample, StatUtils.variance ( sample ) , sample.length ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P7_Replace_Invocation]^return t (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P7_Replace_Invocation]^return tTest (  StatUtils.variance ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P7_Replace_Invocation]^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.mean ( sample ) , sample.length ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P7_Replace_Invocation]^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils .varianceDifference ( sample , sample , mu )  , sample.length ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P5_Replace_Variable]^return tTest (  StatUtils.mean ( sample ) , sample.length, StatUtils.variance ( sample ) , mu ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P7_Replace_Invocation]^return tTest (  StatUtils .meanDifference ( sample , sample )  , mu, StatUtils.variance ( sample ) , sample.length ) ;^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P14_Delete_Statement]^^412^413^^^^407^414^return tTest (  StatUtils.mean ( sample ) , mu, StatUtils.variance ( sample ) , sample.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu double[] sample [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  mu  
[P2_Replace_Operator]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P2_Replace_Operator]^if  (  ( alpha < 0 )  ||  ( alpha > 0.5 )  )  {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P2_Replace_Operator]^if  (  ( alpha <= 0 )  ||  ( alpha < 0.5 )  )  {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P3_Replace_Literal]^if  (  ( alpha <= 9 )  ||  ( alpha > 9.5 )  )  {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P3_Replace_Literal]^if  (  ( alpha <= 0 )  ||  ( alpha > 3.0 )  )  {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P5_Replace_Variable]^if  (  ( mu <= 0 )  ||  ( alpha > 0.5 )  )  {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P6_Replace_Expression]^if  (  ( alpha <= 0 )  ) {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P6_Replace_Expression]^if  (   ( alpha > 0.5 )  )  {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P6_Replace_Expression]^if  ( alpha <= 0 )  {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P6_Replace_Expression]^if  ( alpha > 0.5 )  {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P6_Replace_Expression]^if  ( "bad significance level: " + alpha )  {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P8_Replace_Mix]^if  (   ( alpha > 0 - 3.5 )  )  {^453^^^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("bad significance level: " + alpha));^453^454^455^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P16_Remove_Block]^^453^454^455^^^451^457^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^453^^^^^451^457^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^453^^^^^451^457^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^453^^^^^451^457^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P13_Insert_Block]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {     throw new IllegalArgumentException (  ( "bad significance level: " + alpha )  ) ; }^454^^^^^451^457^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P2_Replace_Operator]^return  ( tTest ( mu, sample )  <= alpha ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P5_Replace_Variable]^return  ( tTest ( alpha, sample )  < alpha ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P5_Replace_Variable]^return  ( tTest (  sample )  < alpha ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P5_Replace_Variable]^return  ( tTest ( mu )  < alpha ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P5_Replace_Variable]^return  ( tTest ( alpha, sample )  < mu ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P5_Replace_Variable]^return  ( tTest ( mu, alpha )  < sample ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P5_Replace_Variable]^return  ( tTest ( sample, mu )  < alpha ) ;^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P14_Delete_Statement]^^456^^^^^451^457^return  ( tTest ( mu, sample )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu double[] sample double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample  double  alpha  mu  
[P2_Replace_Operator]^if  (  ( sampleStats == null )  &&  ( sampleStats.getN (  )  < 2 )  )  {^489^^^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P2_Replace_Operator]^if  (  ( sampleStats != null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^489^^^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P2_Replace_Operator]^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  > 2 )  )  {^489^^^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P3_Replace_Literal]^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 10 )  )  {^489^^^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P6_Replace_Expression]^if  (  ( sampleStats == null )  ) {^489^^^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P6_Replace_Expression]^if  (   ( sampleStats.getN (  )  < 2 )  )  {^489^^^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P6_Replace_Expression]^if  ( sampleStats == null )  {^489^^^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P6_Replace_Expression]^if  ( sampleStats.getN (  )  < 2 )  {^489^^^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P8_Replace_Mix]^if  (  ( sampleStats == true )  ||  ( sampleStats.getN (  )  < 2 )  )  {^489^^^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P9_Replace_Statement]^if  (  ( sample == null )  ||  ( sample.length < 2 )  )  {^489^^^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("insufficient data for t statistic");^489^490^491^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P16_Remove_Block]^^489^490^491^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^489^^^^^487^494^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {     throw new IllegalArgumentException (  ( "bad significance level: " + alpha )  ) ; }^489^^^^^487^494^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^489^^^^^487^494^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^489^^^^^487^494^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data" ) ; }^489^^^^^487^494^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( sampleStats1 == null )  ||  (  ( sampleStats2 == null )  ||  (  ( min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^489^^^^^487^494^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "insufficient data" )   ;^490^^^^^487^494^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^490^^^^^487^494^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^490^^^^^487^494^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^490^^^^^487^494^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P8_Replace_Mix]^if  (  ( sampleStats == null )  ||  ( sampleStats .getMean (  )   < 2 )  )  {^489^^^^^487^494^if  (  ( sampleStats == null )  ||  ( sampleStats.getN (  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P5_Replace_Variable]^return tTest ( sampleStats.getMean (  ) , mu.getVariance (  ) , sampleStats.getN (  )  ) ;^492^493^^^^487^494^return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P5_Replace_Variable]^return tTest ( sampleStats.getMean (  ) ,  sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^492^493^^^^487^494^return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P5_Replace_Variable]^return tTest ( mu.getMean (  ) , sampleStats, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^492^493^^^^487^494^return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P7_Replace_Invocation]^return t ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^492^493^^^^487^494^return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P7_Replace_Invocation]^return tTest ( sampleStats .getN (  )  , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^492^493^^^^487^494^return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P7_Replace_Invocation]^return tTest ( sampleStats.getMean (  ) , mu, sampleStats .getMean (  )  , sampleStats.getN (  )  ) ;^492^493^^^^487^494^return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P7_Replace_Invocation]^return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats .getMean (  )   ) ;^492^493^^^^487^494^return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P14_Delete_Statement]^^492^493^^^^487^494^return tTest ( sampleStats.getMean (  ) , mu, sampleStats.getVariance (  ) , sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P7_Replace_Invocation]^sampleStats .getMean (  )   ) ;^493^^^^^487^494^sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P14_Delete_Statement]^^493^^^^^487^494^sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P11_Insert_Donor_Statement]^( double )  sampleStats2.getN (  )  ) ;sampleStats.getN (  )  ) ;^493^^^^^487^494^sampleStats.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double mu StatisticalSummary sampleStats [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  mu  
[P2_Replace_Operator]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^535^^^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P2_Replace_Operator]^if  (  ( alpha < 0 )  ||  ( alpha > 0.5 )  )  {^535^^^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P2_Replace_Operator]^if  (  ( alpha <= 0 )  ||  ( alpha >= 0.5 )  )  {^535^^^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P3_Replace_Literal]^if  (  ( alpha <= 0 )  ||  ( alpha > 4.5 )  )  {^535^^^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P5_Replace_Variable]^if  (  ( mu <= 0 )  ||  ( alpha > 0.5 )  )  {^535^^^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P6_Replace_Expression]^if  (  ( alpha <= 0 )  ) {^535^^^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P6_Replace_Expression]^if  (   ( alpha > 0.5 )  )  {^535^^^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P6_Replace_Expression]^if  ( alpha <= 0 )  {^535^^^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P6_Replace_Expression]^if  ( alpha > 0.5 )  {^535^^^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P6_Replace_Expression]^if  ( "bad significance level: " + alpha )  {^535^^^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P8_Replace_Mix]^if  (  ( alpha <= 0 + 2 )  ||  ( alpha > 0 + 2.5 )  )  {^535^^^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("bad significance level: " + alpha));^535^536^537^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P16_Remove_Block]^^535^536^537^^^532^539^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^535^^^^^532^539^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^535^^^^^532^539^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^535^^^^^532^539^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P13_Insert_Block]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {     throw new IllegalArgumentException (  ( "bad significance level: " + alpha )  ) ; }^536^^^^^532^539^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P2_Replace_Operator]^return  ( tTest ( mu, sampleStats )  > alpha ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P5_Replace_Variable]^return  ( tTest ( mu, sampleStats )  < mu ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P5_Replace_Variable]^return  ( tTest (  sampleStats )  < alpha ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P5_Replace_Variable]^return  ( tTest ( mu )  < alpha ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P5_Replace_Variable]^return  ( tTest ( alpha, sampleStats )  < mu ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P5_Replace_Variable]^return  ( tTest ( mu, alpha )  < sampleStats ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P5_Replace_Variable]^return  ( tTest ( alpha, sampleStats )  < alpha ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P5_Replace_Variable]^return  ( tTest ( sampleStats, mu )  < alpha ) ;^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P14_Delete_Statement]^^538^^^^^532^539^return  ( tTest ( mu, sampleStats )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double mu StatisticalSummary sampleStats double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats  boolean  double  alpha  mu  
[P2_Replace_Operator]^if  (  ( sample1 == null )  &&  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P2_Replace_Operator]^if  (  ( sample1 != null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P2_Replace_Operator]^if  (  ( sample1 == null )  ||  ( sample2 != null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P2_Replace_Operator]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  <= 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P3_Replace_Literal]^if  (  ( sample1 == null )  ||  ( sample-4 == null || Math.min ( sample1.length, sample-4.length )  < -4 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P4_Replace_Constructor]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min (  sample2.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample2 == null )  ||  ( sample1 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2.length == null || Math.min ( sample1.length, sample2 )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample2.length, sample1.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  (  ( sample1 == null )  ) {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  (   ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  ( sample1 == null )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  ( (sample2 == null || length, sample2.length)) < 2) )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  ( sample2 == null )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  ( min ( sample1.length, sample2.length )  < 2 )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^if  (  ( sample1 == this )  ) {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P9_Replace_Statement]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^579^580^^^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("insufficient data");^579^580^581^582^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P16_Remove_Block]^^579^580^581^582^^577^586^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^579^^^^^577^586^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^579^^^^^577^586^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^579^^^^^577^586^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^579^^^^^577^586^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( sampleStats1 == null )  ||  (  ( sampleStats2 == null )  ||  (  ( min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^579^^^^^577^586^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "insufficient data for t statistic" )   ;^581^^^^^577^586^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^return ;^581^^^^^577^586^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample1.length, sample1.length )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample1.length.length )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min (  sample2.length )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample1.length )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample2.length, sample1.length )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^Math.min ( null, sample2.length )  < 2 )  )  {^580^^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P14_Delete_Statement]^^580^581^^^^577^586^Math.min ( sample1.length, sample2.length )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^return tTest ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^583^584^585^^^577^586^return tTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^return t ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^583^584^585^^^577^586^return tTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^return tTest ( StatUtils.variance ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^583^584^585^^^577^586^return tTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^return tTest ( StatUtils .meanDifference ( sample1 , sample2 )  , StatUtils^583^584^585^^^577^586^return tTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^return tTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^583^584^585^^^577^586^return tTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P14_Delete_Statement]^^583^584^585^^^577^586^return tTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^return tTest ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^583^584^585^^^577^586^return tTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^return tTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^583^584^585^^^577^586^return tTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^StatUtils.variance ( sample2 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^584^585^^^^577^586^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^StatUtils.mean ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^584^585^^^^577^586^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^StatUtils.mean ( sample2 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^584^585^^^^577^586^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P14_Delete_Statement]^^584^585^^^^577^586^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample1 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^584^585^^^^577^586^StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) , ( double )  sample1.length,  ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P2_Replace_Operator]^if  (  ( sample1 == null )  &&  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P2_Replace_Operator]^if  (  ( sample1 != null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P2_Replace_Operator]^if  (  ( sample1 == null )  ||  ( sample2 != null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P2_Replace_Operator]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  <= 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P3_Replace_Literal]^if  (  ( sample1 == null )  ||  ( sample6 == null || Math.min ( sample1.length, sample6.length )  < 6 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P4_Replace_Constructor]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min (  sample2.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample1.length == null )  ||  ( sample2 == null || Math.min ( sample1, sample2.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample2 == null )  ||  ( sample1 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample2.length, sample1.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  (  ( sample1 == null )  ) {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  (   ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  ( sample1 == null )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  ( (sample2 == null || length, sample2.length)) < 2) )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  ( sample2 == null )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P6_Replace_Expression]^if  ( min ( sample1.length, sample2.length )  < 2 )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^if  (   ( sample2 == this || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P9_Replace_Statement]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^623^624^^^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("insufficient data");^623^624^625^626^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P16_Remove_Block]^^623^624^625^626^^621^631^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^623^^^^^621^631^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^623^^^^^621^631^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^623^^^^^621^631^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^623^^^^^621^631^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P13_Insert_Block]^if  (  ( sampleStats1 == null )  ||  (  ( sampleStats2 == null )  ||  (  ( min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^623^^^^^621^631^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "insufficient data for t statistic" )   ;^625^^^^^621^631^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^return ;^625^^^^^621^631^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample2.length, sample2.length )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample1.length.length )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min (  sample2.length )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample1.length )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample2.length, sample1.length )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample2, sample1.length.length )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^Math.min ( sample2.length.length, sample1 )  < 2 )  )  {^624^^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P14_Delete_Statement]^^624^625^^^^621^631^Math.min ( sample1.length, sample2.length )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^return homoscedasticTTest ( StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^627^628^629^630^^621^631^return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^627^628^629^630^^621^631^return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^return homoscedasticTTest ( StatUtils.variance ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^627^628^629^630^^621^631^return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^return homoscedasticTTest ( StatUtils .meanDifference ( sample2 , sample2 )  , StatUtils^627^628^629^630^^621^631^return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^627^628^629^630^^621^631^return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^627^628^629^630^^621^631^return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^return homoscedasticTTest ( StatUtils .meanDifference ( sample2 , sample1 )  , StatUtils^627^628^629^630^^621^631^return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^return homoscedasticT ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^627^628^629^630^^621^631^return homoscedasticTTest ( StatUtils.mean ( sample1 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^StatUtils.mean ( sample1 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^628^629^630^^^621^631^StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^StatUtils.variance ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^628^629^630^^^621^631^StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P14_Delete_Statement]^^628^629^630^^^621^631^StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^StatUtils.mean ( sample2 ) , StatUtils.variance ( sample2 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^628^629^630^^^621^631^StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^StatUtils.mean ( sample2 ) , StatUtils.mean ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^628^629^630^^^621^631^StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P8_Replace_Mix]^StatUtils.mean ( sample2 ) , StatUtils.mean ( sample2 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^628^629^630^^^621^631^StatUtils.mean ( sample2 ) , StatUtils.variance ( sample1 ) , StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P5_Replace_Variable]^StatUtils.variance ( sample1 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^629^630^^^^621^631^StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P7_Replace_Invocation]^StatUtils.mean ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^629^630^^^^621^631^StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P14_Delete_Statement]^^629^630^^^^621^631^StatUtils.variance ( sample2 ) ,  ( double )  sample1.length, ( double )  sample2.length ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double[] sample1 double[] sample2 [VARIABLES] DistributionFactory  distributionFactory  double[]  sample1  sample2  boolean  
[P2_Replace_Operator]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^688^^^^^685^692^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P2_Replace_Operator]^if  (  ( alpha < 0 )  ||  ( alpha > 0.5 )  )  {^688^^^^^685^692^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P2_Replace_Operator]^if  (  ( alpha <= 0 )  ||  ( alpha >= 0.5 )  )  {^688^^^^^685^692^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P3_Replace_Literal]^if  (  ( alpha <= -9 )  ||  ( alpha > -9.5 )  )  {^688^^^^^685^692^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P3_Replace_Literal]^if  (  ( alpha <= 0 )  ||  ( alpha > 1.5 )  )  {^688^^^^^685^692^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P6_Replace_Expression]^if  (  ( alpha <= 0 )  ) {^688^^^^^685^692^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P6_Replace_Expression]^if  (   ( alpha > 0.5 )  )  {^688^^^^^685^692^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P6_Replace_Expression]^if  ( alpha <= 0 )  {^688^^^^^685^692^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P6_Replace_Expression]^if  ( alpha > 0.5 )  {^688^^^^^685^692^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P6_Replace_Expression]^if  ( "bad significance level: " + alpha )  {^688^^^^^685^692^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P8_Replace_Mix]^if  (  ( alpha <= 4 )  ) {^688^^^^^685^692^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("bad significance level: " + alpha));^688^689^690^^^685^692^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P16_Remove_Block]^^688^689^690^^^685^692^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^688^^^^^685^692^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^688^^^^^685^692^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^688^^^^^685^692^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P13_Insert_Block]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {     throw new IllegalArgumentException (  ( "bad significance level: " + alpha )  ) ; }^689^^^^^685^692^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P8_Replace_Mix]^return ;^689^^^^^685^692^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P2_Replace_Operator]^return  ( tTest ( sample1, sample2 )  <= alpha ) ;^691^^^^^685^692^return  ( tTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P5_Replace_Variable]^return  ( tTest (  sample2 )  < alpha ) ;^691^^^^^685^692^return  ( tTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P5_Replace_Variable]^return  ( tTest ( sample1 )  < alpha ) ;^691^^^^^685^692^return  ( tTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P5_Replace_Variable]^return  ( tTest ( sample2, sample1 )  < alpha ) ;^691^^^^^685^692^return  ( tTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P5_Replace_Variable]^return  ( tTest ( alpha, sample2 )  < sample1 ) ;^691^^^^^685^692^return  ( tTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P14_Delete_Statement]^^691^^^^^685^692^return  ( tTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P2_Replace_Operator]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^748^^^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P2_Replace_Operator]^if  (  ( alpha > 0 )  ||  ( alpha > 0.5 )  )  {^748^^^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P2_Replace_Operator]^if  (  ( alpha <= 0 )  ||  ( alpha == 0.5 )  )  {^748^^^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P3_Replace_Literal]^if  (  ( alpha <= 2 )  ||  ( alpha > 2.5 )  )  {^748^^^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P3_Replace_Literal]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.1 )  )  {^748^^^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P6_Replace_Expression]^if  (  ( alpha <= 0 )  ) {^748^^^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P6_Replace_Expression]^if  (   ( alpha > 0.5 )  )  {^748^^^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P6_Replace_Expression]^if  ( alpha <= 0 )  {^748^^^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P6_Replace_Expression]^if  ( alpha > 0.5 )  {^748^^^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P6_Replace_Expression]^if  ( "bad significance level: " + alpha )  {^748^^^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P8_Replace_Mix]^if  (  ( alpha <= 1 )  ) {^748^^^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("bad significance level: " + alpha));^748^749^750^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P16_Remove_Block]^^748^749^750^^^745^752^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^748^^^^^745^752^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^748^^^^^745^752^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^748^^^^^745^752^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P13_Insert_Block]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {     throw new IllegalArgumentException (  ( "bad significance level: " + alpha )  ) ; }^749^^^^^745^752^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P8_Replace_Mix]^return ;^749^^^^^745^752^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P2_Replace_Operator]^return  ( homoscedasticTTest ( sample1, sample2 )  == alpha ) ;^751^^^^^745^752^return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P5_Replace_Variable]^return  ( homoscedasticTTest (  sample2 )  < alpha ) ;^751^^^^^745^752^return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P5_Replace_Variable]^return  ( homoscedasticTTest ( sample1 )  < alpha ) ;^751^^^^^745^752^return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P5_Replace_Variable]^return  ( homoscedasticTTest ( sample2, sample1 )  < alpha ) ;^751^^^^^745^752^return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P5_Replace_Variable]^return  ( homoscedasticTTest ( alpha, sample2 )  < sample1 ) ;^751^^^^^745^752^return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P7_Replace_Invocation]^return  ( homoscedasticT ( sample1, sample2 )  < alpha ) ;^751^^^^^745^752^return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P14_Delete_Statement]^^751^^^^^745^752^return  ( homoscedasticTTest ( sample1, sample2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] boolean   double[] sample1 double[] sample2 double alpha [VARIABLES] DistributionFactory  distributionFactory  boolean  double[]  sample1  sample2  double  alpha  
[P2_Replace_Operator]^if  (  ( sampleStats1 == null )  &&  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P2_Replace_Operator]^if  (  ( sampleStats1 != null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P2_Replace_Operator]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 != null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P2_Replace_Operator]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  > 2 )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P3_Replace_Literal]^if  (  ( sampleStats1 == null )  ||  ( sampleStats == null || Math.min ( sampleStats1.getN (  ) , sampleStats.getN (  )  )  <  )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P4_Replace_Constructor]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) .getN (  )  )  < 2 )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^if  (  ( sampleStats2 == null )  ||  ( sampleStats1 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  (  ( sampleStats1 == null )  ) {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  (   ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  ( sampleStats1 == null )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  ( (sampleStats2 == null || getN(), sampleStats2.getN())) < 2) )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  ( sampleStats2 == null )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  ( min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1 .getMean (  )  , sampleStats2^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P8_Replace_Mix]^if  (  ( sampleStats1 == false )  ) {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P9_Replace_Statement]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^790^791^^^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("insufficient data for t statistic");^790^791^792^793^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P16_Remove_Block]^^790^791^792^793^^788^797^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^790^^^^^788^797^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^790^^^^^788^797^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^790^^^^^788^797^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^790^^^^^788^797^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data" ) ; }^790^^^^^788^797^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "insufficient data" )   ;^792^^^^^788^797^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^Math.min ( sampleStats1.getN (  ) .getN (  )  )  < 2 )  )  {^791^^^^^788^797^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^Math.min ( sampleStats2.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^791^^^^^788^797^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P14_Delete_Statement]^^791^792^^^^788^797^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^Math.min ( sampleStats2.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^791^^^^^788^797^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^Math.min ( sampleStats1.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^791^^^^^788^797^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) .getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^794^795^796^^^788^797^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return tTest ( sampleStats1.getMean (  ) .getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^794^795^796^^^788^797^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return tTest ( sampleStats2.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^794^795^796^^^788^797^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^return t ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^794^795^796^^^788^797^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1 .getMean (  )  , sampleStats2^794^795^796^^^788^797^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1 .getMean (  )  , ( double )  sampleStats2^794^795^796^^^788^797^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^return tTest ( sampleStats1 .getN (  )  , sampleStats2^794^795^796^^^788^797^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P14_Delete_Statement]^^794^795^796^^^788^797^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return tTest ( sampleStats2.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^794^795^796^^^788^797^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return tTest ( sampleStats1.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^794^795^796^^^788^797^return tTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats1.getN (  )  ) ;^795^796^^^^788^797^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^sampleStats2 .getMean (  )  ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^795^796^^^^788^797^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P8_Replace_Mix]^sampleStats2 .getMean (  )  ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats1.getN (  )  ) ;^795^796^^^^788^797^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P14_Delete_Statement]^^795^796^^^^788^797^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P1_Replace_Type]^sampleStats2.getVariance (  ) ,  ( int )  sampleStats1.getN (  ) , ( int )  sampleStats2.getN (  )  ) ;^795^796^^^^788^797^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^sampleStats2.getVariance (  ) ,  ( double )  sampleStats2.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^795^796^^^^788^797^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P1_Replace_Type]^( int )  sampleStats2.getN (  )  ) ;^796^^^^^788^797^( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^( double )  sampleStats1.getN (  )  ) ;^796^^^^^788^797^( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P14_Delete_Statement]^^796^^^^^788^797^( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P11_Insert_Donor_Statement]^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;( double )  sampleStats2.getN (  )  ) ;^796^^^^^788^797^( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P11_Insert_Donor_Statement]^sampleStats.getN (  )  ) ;( double )  sampleStats2.getN (  )  ) ;^796^^^^^788^797^( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P2_Replace_Operator]^if  (  ( sampleStats1 == null )  &&  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P2_Replace_Operator]^if  (  ( sampleStats1 != null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P2_Replace_Operator]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 != null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P2_Replace_Operator]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  <= 2 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P3_Replace_Literal]^if  (  ( sampleStats1 == null )  ||  ( sampleStats7 == null || Math.min ( sampleStats1.getN (  ) , sampleStats7.getN (  )  )  < 7 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P4_Replace_Constructor]^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) .getN (  )  )  < 2 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^if  (  ( sampleStats2 == null )  ||  ( sampleStats1 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  (  ( sampleStats1 == null )  ) {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  (   ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  ( sampleStats1 == null )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  ( (sampleStats2 == null || getN(), sampleStats2.getN())) < 2) )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  ( sampleStats2 == null )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P6_Replace_Expression]^if  ( min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P8_Replace_Mix]^if  (  ( sampleStats1 == this )  ) {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P9_Replace_Statement]^if  (  ( sample1 == null )  ||  ( sample2 == null || Math.min ( sample1.length, sample2.length )  < 2 )  )  {^835^836^^^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("insufficient data for t statistic");^835^836^837^838^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P16_Remove_Block]^^835^836^837^838^^832^843^if  (  ( sampleStats1 == null )  ||  ( sampleStats2 == null || Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^835^^^^^832^843^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^835^^^^^832^843^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^835^^^^^832^843^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^835^^^^^832^843^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P13_Insert_Block]^if  (  ( sample1 == null )  ||  (  ( sample2 == null )  ||  (  ( min ( sample1.length, sample2.length )  )  < 2 )  )  )  {     throw new IllegalArgumentException ( "insufficient data" ) ; }^835^^^^^832^843^[Delete]^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "insufficient data" )   ;^837^^^^^832^843^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^Math.min ( sampleStats1.getN (  ) .getN (  )  )  < 2 )  )  {^836^^^^^832^843^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^Math.min ( sampleStats2.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^836^^^^^832^843^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^Math.min ( sampleStats1 .getMean (  )  , sampleStats2^836^^^^^832^843^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P14_Delete_Statement]^^836^837^^^^832^843^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  { throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^Math.min ( sampleStats2.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^836^^^^^832^843^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^Math.min ( sampleStats1.getN (  ) , sampleStats1.getN (  )  )  < 2 )  )  {^836^^^^^832^843^Math.min ( sampleStats1.getN (  ) , sampleStats2.getN (  )  )  < 2 )  )  {^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) .getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^839^840^841^842^^832^843^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return homoscedasticTTest ( sampleStats1.getMean (  ) .getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^839^840^841^842^^832^843^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^return homoscedasticTTest ( sampleStats2.getMean (  ) , sampleStats1.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^839^840^841^842^^832^843^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^return homoscedasticT ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^839^840^841^842^^832^843^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^return homoscedasticTTest ( sampleStats1 .getN (  )  , sampleStats2^839^840^841^842^^832^843^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1 .getMean (  )  , ( double )  sampleStats2^839^840^841^842^^832^843^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P7_Replace_Invocation]^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1 .getMean (  )  , sampleStats2^839^840^841^842^^832^843^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P8_Replace_Mix]^return homoscedasticTTest ( sampleStats2.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^839^840^841^842^^832^843^return homoscedasticTTest ( sampleStats1.getMean (  ) , sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats1.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^840^841^842^^^832^843^sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P14_Delete_Statement]^^840^841^842^^^832^843^sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^sampleStats2.getMean (  ) , sampleStats2.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^840^841^842^^^832^843^sampleStats2.getMean (  ) , sampleStats1.getVariance (  ) , sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P8_Replace_Mix]^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats1.getN (  )  ) ;^841^842^^^^832^843^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P14_Delete_Statement]^^841^842^^^^832^843^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P1_Replace_Type]^sampleStats2.getVariance (  ) ,  ( float )  sampleStats1.getN (  ) , ( float )  sampleStats2.getN (  )  ) ;^841^842^^^^832^843^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^sampleStats2.getVariance (  ) ,  ( double )  sampleStats2.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^841^842^^^^832^843^sampleStats2.getVariance (  ) ,  ( double )  sampleStats1.getN (  ) , ( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P1_Replace_Type]^( int )  sampleStats2.getN (  )  ) ;^842^^^^^832^843^( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P5_Replace_Variable]^( double )  sampleStats1.getN (  )  ) ;^842^^^^^832^843^( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P14_Delete_Statement]^^842^^^^^832^843^( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P11_Insert_Donor_Statement]^( double )  sampleStats1.getN (  ) ,  ( double )  sampleStats2.getN (  )  ) ;( double )  sampleStats2.getN (  )  ) ;^842^^^^^832^843^( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P11_Insert_Donor_Statement]^sampleStats.getN (  )  ) ;( double )  sampleStats2.getN (  )  ) ;^842^^^^^832^843^( double )  sampleStats2.getN (  )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  
[P2_Replace_Operator]^if  (  ( alpha <= 0 )  &&  ( alpha > 0.5 )  )  {^901^^^^^898^905^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P2_Replace_Operator]^if  (  ( alpha == 0 )  ||  ( alpha > 0.5 )  )  {^901^^^^^898^905^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P2_Replace_Operator]^if  (  ( alpha <= 0 )  ||  ( alpha >= 0.5 )  )  {^901^^^^^898^905^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P3_Replace_Literal]^if  (  ( alpha <= -5 )  ||  ( alpha > -5.5 )  )  {^901^^^^^898^905^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P3_Replace_Literal]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.1 )  )  {^901^^^^^898^905^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P6_Replace_Expression]^if  (  ( alpha <= 0 )  ) {^901^^^^^898^905^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P6_Replace_Expression]^if  (   ( alpha > 0.5 )  )  {^901^^^^^898^905^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P6_Replace_Expression]^if  ( alpha <= 0 )  {^901^^^^^898^905^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P6_Replace_Expression]^if  ( alpha > 0.5 )  {^901^^^^^898^905^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P6_Replace_Expression]^if  ( "bad significance level: " + alpha )  {^901^^^^^898^905^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P8_Replace_Mix]^if  (   ( alpha > 2.5 )  )  {^901^^^^^898^905^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("bad significance level: " + alpha));^901^902^903^^^898^905^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P16_Remove_Block]^^901^902^903^^^898^905^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P13_Insert_Block]^if  (  ( sampleStats == null )  ||  (  ( sampleStats.getN (  )  )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^901^^^^^898^905^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P13_Insert_Block]^if  (  ( sample == null )  ||  (  ( sample.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^901^^^^^898^905^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P13_Insert_Block]^if  (  ( observed == null )  ||  (  ( observed.length )  < 2 )  )  {     throw new IllegalArgumentException ( "insufficient data for t statistic" ) ; }^901^^^^^898^905^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P13_Insert_Block]^if  (  ( alpha <= 0 )  ||  ( alpha > 0.5 )  )  {     throw new IllegalArgumentException (  ( "bad significance level: " + alpha )  ) ; }^902^^^^^898^905^[Delete]^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P8_Replace_Mix]^return ;^902^^^^^898^905^throw new IllegalArgumentException  (" ")  ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P2_Replace_Operator]^return  ( tTest ( sampleStats1, sampleStats2 )  == alpha ) ;^904^^^^^898^905^return  ( tTest ( sampleStats1, sampleStats2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P5_Replace_Variable]^return  ( tTest (  sampleStats2 )  < alpha ) ;^904^^^^^898^905^return  ( tTest ( sampleStats1, sampleStats2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P5_Replace_Variable]^return  ( tTest ( sampleStats1 )  < alpha ) ;^904^^^^^898^905^return  ( tTest ( sampleStats1, sampleStats2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P5_Replace_Variable]^return  ( tTest ( sampleStats2, sampleStats1 )  < alpha ) ;^904^^^^^898^905^return  ( tTest ( sampleStats1, sampleStats2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P5_Replace_Variable]^return  ( tTest ( sampleStats1, alpha )  < sampleStats2 ) ;^904^^^^^898^905^return  ( tTest ( sampleStats1, sampleStats2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P5_Replace_Variable]^return  ( tTest ( alpha, sampleStats2 )  < sampleStats1 ) ;^904^^^^^898^905^return  ( tTest ( sampleStats1, sampleStats2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P8_Replace_Mix]^return  ( tTest ( sampleStats2, sampleStats2 )  < alpha ) ;^904^^^^^898^905^return  ( tTest ( sampleStats1, sampleStats2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P14_Delete_Statement]^^904^^^^^898^905^return  ( tTest ( sampleStats1, sampleStats2 )  < alpha ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] boolean   StatisticalSummary sampleStats1 StatisticalSummary sampleStats2 double alpha [VARIABLES] DistributionFactory  distributionFactory  StatisticalSummary  sampleStats1  sampleStats2  boolean  double  alpha  
[P2_Replace_Operator]^if  ( distributionFactory != null )  {^914^^^^^913^918^if  ( distributionFactory == null )  {^[CLASS] TTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P8_Replace_Mix]^if  ( distributionFactory == false )  {^914^^^^^913^918^if  ( distributionFactory == null )  {^[CLASS] TTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P15_Unwrap_Block]^distributionFactory = org.apache.commons.math.distribution.DistributionFactory.newInstance();^914^915^916^^^913^918^if  ( distributionFactory == null )  { distributionFactory = DistributionFactory.newInstance (  ) ; }^[CLASS] TTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P16_Remove_Block]^^914^915^916^^^913^918^if  ( distributionFactory == null )  { distributionFactory = DistributionFactory.newInstance (  ) ; }^[CLASS] TTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P8_Replace_Mix]^distributionFactory  =  distributionFactory ;^915^^^^^913^918^distributionFactory = DistributionFactory.newInstance (  ) ;^[CLASS] TTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P13_Insert_Block]^if  (  ( distributionFactory )  == null )  {     distributionFactory = newInstance (  ) ; }^915^^^^^913^918^[Delete]^[CLASS] TTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P14_Delete_Statement]^^915^^^^^913^918^distributionFactory = DistributionFactory.newInstance (  ) ;^[CLASS] TTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P11_Insert_Donor_Statement]^getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;distributionFactory = DistributionFactory.newInstance (  ) ;^915^^^^^913^918^distributionFactory = DistributionFactory.newInstance (  ) ;^[CLASS] TTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P8_Replace_Mix]^distributionFactory  = null ;^915^^^^^913^918^distributionFactory = DistributionFactory.newInstance (  ) ;^[CLASS] TTestImpl  [METHOD] getDistributionFactory [RETURN_TYPE] DistributionFactory   [VARIABLES] DistributionFactory  distributionFactory  boolean  
[P2_Replace_Operator]^return  (  (  ( v1 * n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return - (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  ^  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  (  (  ( v1 - n1 )  +  ( v2 / n2 )  )  *  (  ( v1 - n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  (  (  ( v1 / n1 )  +  ( v2 + n2 )  )  *  (  ( v1 / n1 )  +  ( v2 + n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  &  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  (  (  ( v1 / n1 )  +  ( v2 - n2 )  )  *  (  ( v1 / n1 )  +  ( v2 - n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  (  (  ( v1 + n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 + v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return / (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 + n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1  <  1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  (  (  ( v1 - n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 - v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 - n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1  ||  1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  (  (  ( n2 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  (  (  ( v1 / v2 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  (  (  ( v1 / n1 )  +  ( n2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  (  (  ( v1 / n1 )  +  ( v2 / v2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  (  (  ( v2 / n1 )  +  ( v1 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  (  (  ( n1 / v1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  (  (  ( n2 / n1 )  +  ( v2 / v1 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P8_Replace_Mix]^return  (  (  ( v1 - n1 )  +  ( v2 - n2 )  )  *  (  ( v1 - n1 )  +  ( v2 - n2 )  )  )  - (  ( v1 * v1 )  -  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  - ( n2 * n2 *  ( n2 - 1d )  )  ) ;^930^931^932^^^929^933^return  (  (  ( v1 / n1 )  +  ( v2 / n2 )  )  *  (  ( v1 / n1 )  +  ( v2 / n2 )  )  )  / (  ( v1 * v1 )  /  ( n1 * n1 *  ( n1 - 1d )  )  +  ( v2 * v2 )  / ( n2 * n2 *  ( n2 - 1d )  )  ) ;^[CLASS] TTestImpl  [METHOD] df [RETURN_TYPE] double   double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  ( m - mu )  - Math.sqrt ( v / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[P2_Replace_Operator]^return  ( m  >>  mu )  / Math.sqrt ( v / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[P2_Replace_Operator]^return  ( m - mu )  / Math.sqrt ( v * n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[P5_Replace_Variable]^return  ( v - mu )  / Math.sqrt ( v / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[P5_Replace_Variable]^return  ( m - n )  / Math.sqrt ( v / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[P5_Replace_Variable]^return  ( m - mu )  / Math.sqrt ( n / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[P5_Replace_Variable]^return  ( m - mu )  / Math.sqrt ( v / v ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[P5_Replace_Variable]^return  ( mu - m )  / Math.sqrt ( v / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[P5_Replace_Variable]^return  ( m - mu )  / Math.sqrt ( n / v ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[P7_Replace_Invocation]^return  ( m - mu )  / Math.min ( v / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[P8_Replace_Mix]^returv  ( m - mu )   ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[P2_Replace_Operator]^return  ( m - mu )  / Math.sqrt ( v - n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[P5_Replace_Variable]^return  ( m - mu )  / Math.sqrt ( mu / n ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[P5_Replace_Variable]^return  ( m - mu )  / Math.sqrt ( v / mu ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[P8_Replace_Mix]^return  ( m - mu )  / Math.min ( v / mu ) ;^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[P14_Delete_Statement]^^945^^^^^944^946^return  ( m - mu )  / Math.sqrt ( v / n ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  double  m  mu  n  v  boolean  
[P2_Replace_Operator]^return  ( m1 - m2 )  - Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  ( m1  |  m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  &&  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 - n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 * n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  ( v2 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - v1 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - m2 )  / Math.sqrt (  ( v2 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / v1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v1 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / v2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  ( v2 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( m1 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - n2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / m2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  ( v1 - m2 )  / Math.sqrt (  ( m1 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n2 )  +  ( v2 / n1 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P8_Replace_Mix]^return  ( m1 - v2 )   ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  >  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P2_Replace_Operator]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 + n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / v1 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - m2 )  / Math.sqrt (  ( v2 / n1 )  +  ( v1 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - m2 )  / Math.sqrt (  ( n1 / v1 )  +  ( v2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P8_Replace_Mix]^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( n2 / n2 )  ) ;^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P14_Delete_Statement]^^963^^^^^961^964^return  ( m1 - m2 )  / Math.sqrt (  ( v1 / n1 )  +  ( v2 / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] t [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  v1  v2  boolean  
[P1_Replace_Type]^int pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P2_Replace_Operator]^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  -  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P2_Replace_Operator]^double pooledVariance =  ||  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P2_Replace_Operator]^double + pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P2_Replace_Operator]^double pooledVariance =  (  ( n1   ==  1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P2_Replace_Operator]^double pooledVariance =  (  ( n1    instanceof   1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P2_Replace_Operator]^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2  >=  2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P2_Replace_Operator]^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1  |  n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P3_Replace_Literal]^double pooledVariance =  (  ( n1   )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P3_Replace_Literal]^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2  ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^double pooledVariance =  (  ( v1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^double pooledVariance =  (  ( n1  - 1 )  * v2 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( v1 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v1  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^double pooledVariance =  (  ( v2  - 1 )  * v1 +  ( n2 -1 )  * n1  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^double pooledVariance =  (  ( n1  - 1 )  * v2 +  ( n2 -1 )  * v1  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( v2 -1 )  * n2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P8_Replace_Mix]^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( v2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^980^^^^^978^982^double pooledVariance =  (  ( n1  - 1 )  * v1 +  ( n2 -1 )  * v2  )  /  ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P2_Replace_Operator]^return  ( m1 - m2 )  + Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P2_Replace_Operator]^return  ( m1  >>  m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P2_Replace_Operator]^return + ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P2_Replace_Operator]^return  <=  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^return  ( v2 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - v2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - m2 )  / Math.sqrt ( v2 *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / v2 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / v2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^return  ( n1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / m1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - pooledVariance )  / Math.sqrt ( m2 *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n2 + 1d / n1 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P8_Replace_Mix]^return  ( m1 - m2 )   ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P2_Replace_Operator]^return / ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P2_Replace_Operator]^return  >>  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P2_Replace_Operator]^return  ( m1 - m2 )  - Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / v1 + 1d / n2 )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P5_Replace_Variable]^return  ( m1 - m2 )  / Math.sqrt ( n2 *  ( 1d / n1 + 1d / pooledVariance )  ) ;^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P14_Delete_Statement]^^981^^^^^978^982^return  ( m1 - m2 )  / Math.sqrt ( pooledVariance *  ( 1d / n1 + 1d / n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticT [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  double  m1  m2  n1  n2  pooledVariance  v1  v2  boolean  
[P1_Replace_Type]^int t = Math.abs ( t ( m, mu, v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^double t = Math.abs ( t ( m, v, v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^double t = Math.abs ( t ( m, mu, n, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^double t = Math.abs ( t ( m, mu, v, v )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^double t = Math.abs ( t (  mu, v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^double t = Math.abs ( t ( m,  v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^double t = Math.abs ( t ( m, mu,  n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^double t = Math.abs ( t ( m, mu, v )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^double t = Math.abs ( t ( v, mu, m, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^double t = Math.abs ( t ( m, n, v, mu )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^double t = Math.abs ( t ( m, mu, n, v )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P7_Replace_Invocation]^double df = Math.abs ( t ( m, mu, v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P11_Insert_Donor_Statement]^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;double t = Math.abs ( t ( m, mu, v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P11_Insert_Donor_Statement]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;double t = Math.abs ( t ( m, mu, v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^double t = Math.abs ( t ( v, mu, v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^double t = Math.abs ( t ( m, mu, t, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^double t = Math.abs ( t ( n, mu, v, m )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^double t = Math.abs ( t ( mu, m, v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P8_Replace_Mix]^double df = Math.abs ( t ( t, mu, v, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P14_Delete_Statement]^^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^double t = Math.abs ( t ( m, v, mu, n )  ) ;^996^^^^^994^1000^double t = Math.abs ( t ( m, mu, v, n )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P2_Replace_Operator]^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n  ^  1 ) ;^997^998^^^^994^1000^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P3_Replace_Literal]^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n - null ) ;^997^998^^^^994^1000^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P7_Replace_Invocation]^TDistribution tDistribution = getDistributionFactory (  )  .newInstance (  )  ;^997^998^^^^994^1000^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P11_Insert_Donor_Statement]^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^997^998^^^^994^1000^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P2_Replace_Operator]^getDistributionFactory (  ) .createTDistribution ( n  <  1 ) ;^998^^^^^994^1000^getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P3_Replace_Literal]^getDistributionFactory (  ) .createTDistribution ( n  ) ;^998^^^^^994^1000^getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^getDistributionFactory (  ) .createTDistribution ( v - 1 ) ;^998^^^^^994^1000^getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P7_Replace_Invocation]^getDistributionFactory (  )  .newInstance (  )  ;^998^^^^^994^1000^getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P14_Delete_Statement]^^998^999^^^^994^1000^getDistributionFactory (  ) .createTDistribution ( n - 1 ) ; return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P11_Insert_Donor_Statement]^getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^998^^^^^994^1000^getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P2_Replace_Operator]^return 1.0  |  tDistribution.cumulativeProbability ( -t, t ) ;^999^^^^^994^1000^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^return 1.0 - nDistribution.cumulativeProbability ( -t, t ) ;^999^^^^^994^1000^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^return 1.0 - tDistribution.cumulativeProbability ( - t ) ;^999^^^^^994^1000^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^return 1.0 - t.cumulativeProbability ( -t, tDistribution ) ;^999^^^^^994^1000^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^return 1.0 - tDistributionDistribution.cumulativeProbability ( -t, t ) ;^999^^^^^994^1000^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P8_Replace_Mix]^returnn - nDistribution.cumulativeProbability ( -t, t ) ;^999^^^^^994^1000^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P5_Replace_Variable]^return 1.0 - vDistribution.cumulativeProbability ( -t, t ) ;^999^^^^^994^1000^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P14_Delete_Statement]^^999^^^^^994^1000^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m double mu double v double n [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  m  mu  n  t  v  
[P1_Replace_Type]^int t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( v1, m2, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, v1, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, m2, v2, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, m2, v1, v1, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, m2, v1, v2, v2, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, m2, v1, v2, n1, v2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t (  m2, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1,  v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, m2,  v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, m2, v1,  n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, m2, v1, v2,  n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, m2, v1, v2, n1 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( n2, m2, v1, v2, n1, m1 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, v1, m2, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, m2, v2, v1, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( v2, m2, v1, m1, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, m2, v1, n1, v2, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P7_Replace_Invocation]^double tTest = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P11_Insert_Donor_Statement]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P11_Insert_Donor_Statement]^double t = Math.abs ( t ( m, mu, v, n )  ) ;double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( v2, m2, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, v2, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, m2, t, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, m2, v1, v2, n1, v1 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m2, m1, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, m2, n1, v2, v1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, n2, v1, v2, n1, m2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P8_Replace_Mix]^double tTest = Math.abs ( t ( v2, m2, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P14_Delete_Statement]^^1020^1021^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ; double degreesOfFreedom = 0;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, m2, n2, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, v2, v1, m2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( t ( m1, m2, v1, v2, n2, n1 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P8_Replace_Mix]^double tTest = Math.abs ( t ( m1, v2, v1, v2, n1, n2 )  ) ;^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P14_Delete_Statement]^^1020^^^^^1017^1026^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P1_Replace_Type]^float degreesOfFreedom = 0;^1021^^^^^1017^1026^double degreesOfFreedom = 0;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P3_Replace_Literal]^double degreesOfFreedom = -7;^1021^^^^^1017^1026^double degreesOfFreedom = 0;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom= df ( v2, v2, n1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom= df ( v1, t, n1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom= df ( v1, v2, v2, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom= df (  v2, n1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom= df ( v1,  n1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom= df ( v1, v2,  n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom= df ( v1, v2, n1 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom= df ( n2, v2, n1, v1 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom= df ( v1, n1, v2, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom= df ( v1, v2, n2, n1 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P7_Replace_Invocation]^degreesOfFreedom= t ( v1, v2, n1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P11_Insert_Donor_Statement]^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom= df ( t, v2, n1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom= df ( v1, n2, n1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom= df ( v1, v2, t, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom= df ( v1, v2, n1, v2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom= df ( v2, v1, n1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom= df ( n1, v2, v1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P8_Replace_Mix]^degreesOfFreedom= t ( v2, v2, n1, n2 ) ;^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P14_Delete_Statement]^^1022^^^^^1017^1026^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( v1 ) ;^1023^1024^^^^1017^1026^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P7_Replace_Invocation]^TDistribution tDistribution = getDistributionFactory (  )  .newInstance (  )  ;^1023^1024^^^^1017^1026^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P8_Replace_Mix]^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( v2 ) ;^1023^1024^^^^1017^1026^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P11_Insert_Donor_Statement]^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^1023^1024^^^^1017^1026^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^getDistributionFactory (  ) .createTDistribution ( v2 ) ;^1024^^^^^1017^1026^getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P14_Delete_Statement]^^1024^1025^^^^1017^1026^getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ; return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P11_Insert_Donor_Statement]^getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^1024^^^^^1017^1026^getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P11_Insert_Donor_Statement]^distributionFactory = DistributionFactory.newInstance (  ) ;getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^1024^^^^^1017^1026^getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P14_Delete_Statement]^^1024^^^^^1017^1026^getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P2_Replace_Operator]^return 1.0  |  tDistribution.cumulativeProbability ( -t, t ) ;^1025^^^^^1017^1026^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P3_Replace_Literal]^return 0.5 - tDistribution.cumulativeProbability ( -t, t ) ;^1025^^^^^1017^1026^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^return 1.0 - v1Distribution.cumulativeProbability ( -t, t ) ;^1025^^^^^1017^1026^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^return 1.0 - tDistribution.cumulativeProbability ( - t ) ;^1025^^^^^1017^1026^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^return 1.0 - t.cumulativeProbability ( -t, tDistribution ) ;^1025^^^^^1017^1026^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^return 1.0 - tDistributionDistribution.cumulativeProbability ( -t, t ) ;^1025^^^^^1017^1026^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P8_Replace_Mix]^returnt - tDistribution.cumulativeProbability ( -t, t ) ;^1025^^^^^1017^1026^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P14_Delete_Statement]^^1025^^^^^1017^1026^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] tTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P1_Replace_Type]^int t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( v2, m2, v1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, v2, v1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, m2, n2, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v1, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, v2, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT (  m2, v1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1,  v1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, m2,  v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, m2, v1,  n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2,  n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( n2, m2, v1, v2, n1, m1 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, n2, v1, v2, n1, m2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, m2, n1, v2, v1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, n2, n1, v2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n2, n1 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P7_Replace_Invocation]^double t = Math.abs ( homoscedasticTTest ( m1, m2, v1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P8_Replace_Mix]^double t = Math.abs ( homoscedasticTTest ( v1, m2, v1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P11_Insert_Donor_Statement]^double t = Math.abs ( t ( m1, m2, v1, v2, n1, n2 )  ) ;double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P11_Insert_Donor_Statement]^double t = Math.abs ( t ( m, mu, v, n )  ) ;double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, m2, v2, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, v1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, v2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( n1, m2, v1, v2, m1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, v1, m2, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, m2, v2, v1, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, m2, v1, n1, v2, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P14_Delete_Statement]^^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, v1, v1, v2, n1, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^double t = Math.abs ( homoscedasticT ( m1, n1, v1, v2, m2, n2 )  ) ;^1046^^^^^1043^1052^double t = Math.abs ( homoscedasticT ( m1, m2, v1, v2, n1, n2 )  ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P1_Replace_Type]^int degreesOfFreedom = 0;^1047^^^^^1043^1052^double degreesOfFreedom = 0;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P3_Replace_Literal]^double degreesOfFreedom = this;^1047^^^^^1043^1052^double degreesOfFreedom = 0;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P1_Replace_Type]^degreesOfFreedom =  ( int )   ( n1 + n2 - 2 ) ;^1048^^^^^1043^1052^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P2_Replace_Operator]^degreesOfFreedom =  ( double )   ( n1 + n2  <<  2 ) ;^1048^^^^^1043^1052^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P2_Replace_Operator]^degreesOfFreedom =  ( double )   ( n1  &&  n2 - 2 ) ;^1048^^^^^1043^1052^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P3_Replace_Literal]^degreesOfFreedom =  ( double )   ( n1 + n2  ) ;^1048^^^^^1043^1052^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom =  ( double )   ( v1 + n2 - 2 ) ;^1048^^^^^1043^1052^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom =  ( double )   ( n1 + v1 - 2 ) ;^1048^^^^^1043^1052^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^degreesOfFreedom =  ( double )   ( n2 + n1 - 2 ) ;^1048^^^^^1043^1052^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P8_Replace_Mix]^degreesOfFreedom =  ( double )   ( n1 + n2 << 0 - 2 << 0 ) ;^1048^^^^^1043^1052^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P11_Insert_Donor_Statement]^degreesOfFreedom= df ( v1, v2, n1, n2 ) ;degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^1048^^^^^1043^1052^degreesOfFreedom =  ( double )   ( n1 + n2 - 2 ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( v1 ) ;^1049^1050^^^^1043^1052^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P8_Replace_Mix]^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( v2 ) ;^1049^1050^^^^1043^1052^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P11_Insert_Donor_Statement]^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^1049^1050^^^^1043^1052^TDistribution tDistribution = getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^getDistributionFactory (  ) .createTDistribution ( v2 ) ;^1050^^^^^1043^1052^getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P7_Replace_Invocation]^getDistributionFactory (  )  .newInstance (  )  ;^1050^^^^^1043^1052^getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P8_Replace_Mix]^getDistributionFactory (  ) .createTDistribution ( v1 ) ;^1050^^^^^1043^1052^getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P14_Delete_Statement]^^1050^^^^^1043^1052^getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P11_Insert_Donor_Statement]^getDistributionFactory (  ) .createTDistribution ( n - 1 ) ;getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^1050^^^^^1043^1052^getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P11_Insert_Donor_Statement]^distributionFactory = DistributionFactory.newInstance (  ) ;getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^1050^^^^^1043^1052^getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P14_Delete_Statement]^^1050^1051^^^^1043^1052^getDistributionFactory (  ) .createTDistribution ( degreesOfFreedom ) ; return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P2_Replace_Operator]^return 1.0  <  tDistribution.cumulativeProbability ( -t, t ) ;^1051^^^^^1043^1052^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P3_Replace_Literal]^return 0.2 - tDistribution.cumulativeProbability ( -t, t ) ;^1051^^^^^1043^1052^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^return 1.0 - v2Distribution.cumulativeProbability ( -t, t ) ;^1051^^^^^1043^1052^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^return 1.0 - tDistribution.cumulativeProbability ( - t ) ;^1051^^^^^1043^1052^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^return 1.0 - t.cumulativeProbability ( -t, tDistribution ) ;^1051^^^^^1043^1052^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^return 1.0 - tDistributionDistribution.cumulativeProbability ( -t, t ) ;^1051^^^^^1043^1052^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P8_Replace_Mix]^return 1.0  &&  tDistribution.cumulativeProbability (  && t, t ) ;^1051^^^^^1043^1052^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P5_Replace_Variable]^return 1.0 - n2Distribution.cumulativeProbability ( -t, t ) ;^1051^^^^^1043^1052^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
[P14_Delete_Statement]^^1051^^^^^1043^1052^return 1.0 - tDistribution.cumulativeProbability ( -t, t ) ;^[CLASS] TTestImpl  [METHOD] homoscedasticTTest [RETURN_TYPE] double   double m1 double m2 double v1 double v2 double n1 double n2 [VARIABLES] DistributionFactory  distributionFactory  TDistribution  tDistribution  boolean  double  degreesOfFreedom  m1  m2  n1  n2  t  v1  v2  
