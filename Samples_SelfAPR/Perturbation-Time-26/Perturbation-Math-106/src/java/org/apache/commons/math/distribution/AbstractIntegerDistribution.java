[P1_Replace_Type]^private static final  short  serialVersionUID = -1146319659338487221L;^34^^^^^29^39^private static final long serialVersionUID = -1146319659338487221L;^[CLASS] AbstractIntegerDistribution   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = -1146319659338487221;^34^^^^^29^39^private static final long serialVersionUID = -1146319659338487221L;^[CLASS] AbstractIntegerDistribution   [VARIABLES] 
[P14_Delete_Statement]^^40^^^^^39^41^super (  ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] <init> [RETURN_TYPE] AbstractIntegerDistribution()   [VARIABLES] long  serialVersionUID  boolean  
[P14_Delete_Statement]^^59^^^^^58^60^return cumulativeProbability (  ( int )  Math.floor ( x )  ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  x  boolean  
[P1_Replace_Type]^return cumulativeProbability (  (  long  )  Math.floor ( x )  ) ;^59^^^^^58^60^return cumulativeProbability (  ( int )  Math.floor ( x )  ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  x  boolean  
[P1_Replace_Type]^int fl = Math.floor ( x ) ;^86^^^^^85^92^double fl = Math.floor ( x ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P5_Replace_Variable]^double fl = Math.floor ( fl ) ;^86^^^^^85^92^double fl = Math.floor ( x ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P14_Delete_Statement]^^86^^^^^85^92^double fl = Math.floor ( x ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P2_Replace_Operator]^if  ( fl != x )  {^87^^^^^85^92^if  ( fl == x )  {^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P5_Replace_Variable]^if  ( x == fl )  {^87^^^^^85^92^if  ( fl == x )  {^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P9_Replace_Statement]^if  ( x0 > x1 )  {^87^^^^^85^92^if  ( fl == x )  {^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P9_Replace_Statement]^if  ( pm > p )  {^87^^^^^85^92^if  ( fl == x )  {^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P9_Replace_Statement]^if  ( xm == x1 )  {^87^^^^^85^92^if  ( fl == x )  {^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P9_Replace_Statement]^if  ( xm == x0 )  {^87^^^^^85^92^if  ( fl == x )  {^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P15_Unwrap_Block]^return this.probability(((int) (x)));^87^88^89^90^91^85^92^if  ( fl == x )  { return this.probability (  ( int )  x ) ; } else { return 0; }^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P16_Remove_Block]^^87^88^89^90^91^85^92^if  ( fl == x )  { return this.probability (  ( int )  x ) ; } else { return 0; }^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P3_Replace_Literal]^return 6;^90^^^^^85^92^return 0;^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P8_Replace_Mix]^return 3;^90^^^^^85^92^return 0;^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P7_Replace_Invocation]^return this.cumulativeProbability (  ( int )  x ) ;^88^^^^^85^92^return this.probability (  ( int )  x ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P14_Delete_Statement]^^88^^^^^85^92^return this.probability (  ( int )  x ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P3_Replace_Literal]^return 5;^90^^^^^85^92^return 0;^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P8_Replace_Mix]^return 0L;^90^^^^^85^92^return 0;^[CLASS] AbstractIntegerDistribution  [METHOD] probability [RETURN_TYPE] double   double x [VARIABLES] long  serialVersionUID  double  fl  x  boolean  
[P2_Replace_Operator]^if  ( x0 < x1 )  {^106^^^^^105^111^if  ( x0 > x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P5_Replace_Variable]^if  ( x1 > x0 )  {^106^^^^^105^111^if  ( x0 > x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P9_Replace_Statement]^if  ( fl == x )  {^106^^^^^105^111^if  ( x0 > x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P9_Replace_Statement]^if  ( pm > p )  {^106^^^^^105^111^if  ( x0 > x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P9_Replace_Statement]^if  ( xm == x1 )  {^106^^^^^105^111^if  ( x0 > x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P9_Replace_Statement]^if  ( xm == x0 )  {^106^^^^^105^111^if  ( x0 > x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("lower endpoint must be less than or equal to upper endpoint");^106^107^108^109^^105^111^if  ( x0 > x1 )  { throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ; }^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P16_Remove_Block]^^106^107^108^109^^105^111^if  ( x0 > x1 )  { throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ; }^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P13_Insert_Block]^if  (  ( p < 0.0 )  ||  ( p > 1.0 )  )  {     throw new IllegalArgumentException ( "p must be between 0 and 1.0  ( inclusive ) " ) ; }^106^^^^^105^111^[Delete]^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " endpoint must be l" ) ;^107^108^^^^105^111^throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P13_Insert_Block]^if  ( x0 > x1 )  {     throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ; }^107^^^^^105^111^[Delete]^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "er endpoint must be ower endpoint must be less than or equal to upper endpoint" ) ;^107^108^^^^105^111^throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "p must be between 0 and 1.0  ( inclusive ) " ) ;throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ;^107^108^^^^105^111^throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpointndpoint must be le" ) ;^107^108^^^^105^111^throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P2_Replace_Operator]^return cumulativeProbability ( x1 )   ||  cumulativeProbability ( x0 - 1 ) ;^110^^^^^105^111^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0 - 1 ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P2_Replace_Operator]^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0  &  1 ) ;^110^^^^^105^111^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0 - 1 ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P3_Replace_Literal]^return cumulativeProbability ( xx0 )  - cumulativeProbability ( x0 - x0 ) ;^110^^^^^105^111^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0 - 1 ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P5_Replace_Variable]^return cumulativeProbability ( x0 )  - cumulativeProbability ( x1 - 1 ) ;^110^^^^^105^111^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0 - 1 ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P8_Replace_Mix]^return cumulativeProbability ( x1 % 1 )   ;^110^^^^^105^111^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0 - 1 ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P5_Replace_Variable]^return cumulativeProbability ( x0 )  - cumulativeProbability ( x0 - 1 ) ;^110^^^^^105^111^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0 - 1 ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P14_Delete_Statement]^^110^^^^^105^111^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0 - 1 ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P2_Replace_Operator]^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0  !=  1 ) ;^110^^^^^105^111^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0 - 1 ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P3_Replace_Literal]^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0  ) ;^110^^^^^105^111^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0 - 1 ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P5_Replace_Variable]^return cumulativeProbability ( x1 )  - cumulativeProbability ( x1 - 1 ) ;^110^^^^^105^111^return cumulativeProbability ( x1 )  - cumulativeProbability ( x0 - 1 ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x0 int x1 [VARIABLES] long  serialVersionUID  int  x0  x1  boolean  
[P2_Replace_Operator]^if  ( p < 0.0 && p > 1.0 )  {^125^^^^^110^140^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^if  ( p <= 0.0 || p > 1.0 )  {^125^^^^^110^140^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^if  ( p < 0.0 || p >= 1.0 )  {^125^^^^^110^140^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P3_Replace_Literal]^if  ( p < 0.0 || p > 3.0 )  {^125^^^^^110^140^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^if  ( pm < 0.0 || p > 1.0 )  {^125^^^^^110^140^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P6_Replace_Expression]^if  ( p < 0.0 ) {^125^^^^^110^140^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P6_Replace_Expression]^if  (  p > 1.0 )  {^125^^^^^110^140^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P8_Replace_Mix]^if  ( p < 1.0d ) {^125^^^^^110^140^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("p must be between 0 and 1.0 (inclusive)");^125^126^127^128^^110^140^if  ( p < 0.0 || p > 1.0 )  { throw new IllegalArgumentException ( "p must be between 0 and 1.0  ( inclusive ) " ) ; }^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P16_Remove_Block]^^125^126^127^128^^110^140^if  ( p < 0.0 || p > 1.0 )  { throw new IllegalArgumentException ( "p must be between 0 and 1.0  ( inclusive ) " ) ; }^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P13_Insert_Block]^if  ( x0 > x1 )  {     throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ; }^125^^^^^110^140^[Delete]^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P13_Insert_Block]^if  (  ( p < 0.0 )  ||  ( p > 1.0 )  )  {     throw new IllegalArgumentException ( "p must be between 0 and 1.0  ( inclusive ) " ) ; }^126^^^^^111^141^[Delete]^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ;throw new IllegalArgumentException ( "p must be between 0 and 1.0  ( inclusive ) " ) ;^126^127^^^^111^141^throw new IllegalArgumentException ( "p must be between 0 and 1.0  ( inclusive ) " ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "lower endpoint must be less than or equal to upper endpoint" ) ; ;^126^127^^^^111^141^throw new IllegalArgumentException ( "p must be between 0 and 1.0  ( inclusive ) " ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P1_Replace_Type]^short  x0 = getDomainLowerBound ( p ) ;^132^^^^^117^147^int x0 = getDomainLowerBound ( p ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^int x0 = getDomainLowerBound ( pm ) ;^132^^^^^117^147^int x0 = getDomainLowerBound ( p ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P7_Replace_Invocation]^int x0 = getDomainUpperBound ( p ) ;^132^^^^^117^147^int x0 = getDomainLowerBound ( p ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P11_Insert_Donor_Statement]^int x1 = getDomainUpperBound ( p ) ;int x0 = getDomainLowerBound ( p ) ;^132^^^^^117^147^int x0 = getDomainLowerBound ( p ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P14_Delete_Statement]^^132^^^^^117^147^int x0 = getDomainLowerBound ( p ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P1_Replace_Type]^short  x1 = getDomainUpperBound ( p ) ;^133^^^^^118^148^int x1 = getDomainUpperBound ( p ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^int x1 = getDomainUpperBound ( pm ) ;^133^^^^^118^148^int x1 = getDomainUpperBound ( p ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P7_Replace_Invocation]^int x1 = getDomainLowerBound ( p ) ;^133^^^^^118^148^int x1 = getDomainUpperBound ( p ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P11_Insert_Donor_Statement]^int x0 = getDomainLowerBound ( p ) ;int x1 = getDomainUpperBound ( p ) ;^133^^^^^118^148^int x1 = getDomainUpperBound ( p ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P14_Delete_Statement]^^133^134^^^^118^148^int x1 = getDomainUpperBound ( p ) ; double pm;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P1_Replace_Type]^int pm;^134^^^^^119^149^double pm;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^while  ( x0 == x1 )  {^135^^^^^120^150^while  ( x0 < x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^while  ( x1 < x1 )  {^135^^^^^120^150^while  ( x0 < x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^while  ( x0 < x0 )  {^135^^^^^120^150^while  ( x0 < x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^if  ( pm >= p )  {^138^^^^^123^153^if  ( pm > p )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^if  ( p > p )  {^138^^^^^123^153^if  ( pm > p )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^if  ( pmm > p )  {^138^^^^^123^153^if  ( pm > p )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P6_Replace_Expression]^if  ( xm == x1 )  {^138^^^^^123^153^if  ( pm > p )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P6_Replace_Expression]^if  ( xm == x0 )  {^138^^^^^123^153^if  ( pm > p )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P9_Replace_Statement]^if  ( fl == x )  {^138^^^^^123^153^if  ( pm > p )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P9_Replace_Statement]^if  ( x0 > x1 )  {^138^^^^^123^153^if  ( pm > p )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^if  ( xm != x0 )  {^150^^^^^138^158^if  ( xm == x0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^if  ( x1 == x0 )  {^150^^^^^138^158^if  ( xm == x0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^if  ( xm == x1 )  {^150^^^^^138^158^if  ( xm == x0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^if  ( x0 == xm )  {^150^^^^^138^158^if  ( xm == x0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P9_Replace_Statement]^if  ( fl == x )  {^150^^^^^138^158^if  ( xm == x0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P9_Replace_Statement]^if  ( x0 > x1 )  {^150^^^^^138^158^if  ( xm == x0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P9_Replace_Statement]^if  ( pm > p )  {^150^^^^^138^158^if  ( xm == x0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P13_Insert_Block]^if  ( xm == x1 )  {     --x1; }else {     x1 = xm; }^150^^^^^138^158^[Delete]^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^x0 = x1;^156^^^^^138^158^x0 = xm;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P11_Insert_Donor_Statement]^x1 = xm;x0 = xm;^156^^^^^138^158^x0 = xm;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^if  ( xm <= x1 )  {^140^^^^^125^155^if  ( xm == x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^if  ( x0 == x1 )  {^140^^^^^125^155^if  ( xm == x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^if  ( xm == x0 )  {^140^^^^^125^155^if  ( xm == x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^if  ( x1 == xm )  {^140^^^^^125^155^if  ( xm == x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P9_Replace_Statement]^if  ( fl == x )  {^140^^^^^125^155^if  ( xm == x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P9_Replace_Statement]^if  ( x0 > x1 )  {^140^^^^^125^155^if  ( xm == x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P9_Replace_Statement]^if  ( pm > p )  {^140^^^^^125^155^if  ( xm == x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P13_Insert_Block]^if  ( xm == x0 )  {     ++x0; }else {     x0 = xm; }^140^^^^^125^155^[Delete]^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P8_Replace_Mix]^x1 =  x0;^146^^^^^140^147^x1 = xm;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P11_Insert_Donor_Statement]^x0 = xm;x1 = xm;^146^^^^^140^147^x1 = xm;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P8_Replace_Mix]^x1 =  x0;^146^^^^^131^161^x1 = xm;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P11_Insert_Donor_Statement]^x0 = xm;x1 = xm;^146^^^^^131^161^x1 = xm;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^if  ( xm > x1 )  {^140^^^^^125^155^if  ( xm == x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^x1 = x1;^146^^^^^140^147^x1 = xm;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^if  ( xm <= x0 )  {^150^^^^^135^165^if  ( xm == x0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^if  ( x1 == x0 )  {^150^^^^^135^165^if  ( xm == x0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^if  ( xm == x1 )  {^150^^^^^135^165^if  ( xm == x0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^if  ( x0 == xm )  {^150^^^^^135^165^if  ( xm == x0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P9_Replace_Statement]^if  ( fl == x )  {^150^^^^^135^165^if  ( xm == x0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P9_Replace_Statement]^if  ( x0 > x1 )  {^150^^^^^135^165^if  ( xm == x0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P9_Replace_Statement]^if  ( pm > p )  {^150^^^^^135^165^if  ( xm == x0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P13_Insert_Block]^if  ( xm == x1 )  {     --x1; }else {     x1 = xm; }^150^^^^^135^165^[Delete]^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^x0 = x1;^156^^^^^150^157^x0 = xm;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P11_Insert_Donor_Statement]^x1 = xm;x0 = xm;^156^^^^^150^157^x0 = xm;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^pm = cumulativeProbability ( x1 ) ;^137^^^^^122^152^pm = cumulativeProbability ( xm ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P11_Insert_Donor_Statement]^pm = cumulativeProbability ( x0 ) ;pm = cumulativeProbability ( xm ) ;^137^^^^^122^152^pm = cumulativeProbability ( xm ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^x1 = x1;^146^^^^^131^161^x1 = xm;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^x0 = x1;^156^^^^^141^171^x0 = xm;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P11_Insert_Donor_Statement]^x1 = xm;x0 = xm;^156^^^^^141^171^x0 = xm;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P1_Replace_Type]^short  xm = x0 +  ( x1 - x0 )  / 2;^136^^^^^121^151^int xm = x0 +  ( x1 - x0 )  / 2;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^int xm = x0 +  |  ( x1 - x0 )  / 2;^136^^^^^121^151^int xm = x0 +  ( x1 - x0 )  / 2;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^int xm = x0 +  ( x1 - x0 )  + 2;^136^^^^^121^151^int xm = x0 +  ( x1 - x0 )  / 2;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^int xm = x0 +  ( x1  ||  x0 )  / 2;^136^^^^^121^151^int xm = x0 +  ( x1 - x0 )  / 2;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P3_Replace_Literal]^int xm = x0 +  ( x1 - x0 )  / x0;^136^^^^^121^151^int xm = x0 +  ( x1 - x0 )  / 2;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^int xm = x1 +  ( x1 - x0 )  / 2;^136^^^^^121^151^int xm = x0 +  ( x1 - x0 )  / 2;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^int xm = x0 +  ( x0 - x0 )  / 2;^136^^^^^121^151^int xm = x0 +  ( x1 - x0 )  / 2;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^int xm = x1 +  ( x0 - x0 )  / 2;^136^^^^^121^151^int xm = x0 +  ( x1 - x0 )  / 2;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P14_Delete_Statement]^^137^^^^^122^152^pm = cumulativeProbability ( xm ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^if  ( pm == p )  {^138^^^^^123^153^if  ( pm > p )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^if  ( xm >= x0 )  {^150^^^^^138^158^if  ( xm == x0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^if  ( xm >= x1 )  {^140^^^^^125^155^if  ( xm == x1 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^if  ( xm != x0 )  {^150^^^^^135^165^if  ( xm == x0 )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^int xm = x0 +   instanceof   ( x1 - x0 )  / 2;^136^^^^^121^151^int xm = x0 +  ( x1 - x0 )  / 2;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^int xm = x0 +  ( x1 - x0 )  - 2;^136^^^^^121^151^int xm = x0 +  ( x1 - x0 )  / 2;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^int xm = x0 +  ( x1  <  x0 )  / 2;^136^^^^^121^151^int xm = x0 +  ( x1 - x0 )  / 2;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P3_Replace_Literal]^int xm = x0 +  ( x1 - x0 )  / ;^136^^^^^121^151^int xm = x0 +  ( x1 - x0 )  / 2;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^pm = cumulativeProbability ( xm ) ;^162^^^^^147^177^pm = cumulativeProbability ( x0 ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P11_Insert_Donor_Statement]^pm = cumulativeProbability ( xm ) ;pm = cumulativeProbability ( x0 ) ;^162^^^^^147^177^pm = cumulativeProbability ( x0 ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P14_Delete_Statement]^^162^^^^^147^177^pm = cumulativeProbability ( x0 ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P2_Replace_Operator]^while  ( pm < p )  {^163^^^^^148^178^while  ( pm > p )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^while  ( p > pm )  {^163^^^^^148^178^while  ( pm > p )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P8_Replace_Mix]^while  ( pmm > p )  {^163^^^^^148^178^while  ( pm > p )  {^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^pm = cumulativeProbability ( xm ) ;^165^^^^^150^180^pm = cumulativeProbability ( x0 ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P11_Insert_Donor_Statement]^pm = cumulativeProbability ( xm ) ;pm = cumulativeProbability ( x0 ) ;^165^^^^^150^180^pm = cumulativeProbability ( x0 ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P14_Delete_Statement]^^165^^^^^150^180^pm = cumulativeProbability ( x0 ) ;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
[P5_Replace_Variable]^return xm;^168^^^^^153^183^return x0;^[CLASS] AbstractIntegerDistribution  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  long  serialVersionUID  double  p  pm  int  x0  x1  xm  
