[P1_Replace_Type]^private static final  int  serialVersionUID = 6751309484392813623L;^34^^^^^29^39^private static final long serialVersionUID = 6751309484392813623L;^[CLASS] PascalDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = 6751309484392813623;^34^^^^^29^39^private static final long serialVersionUID = 6751309484392813623L;^[CLASS] PascalDistributionImpl   [VARIABLES] 
[P1_Replace_Type]^private  long  numberOfSuccesses;^37^^^^^32^42^private int numberOfSuccesses;^[CLASS] PascalDistributionImpl   [VARIABLES] 
[P1_Replace_Type]^private float probabilityOfSuccess;^40^^^^^35^45^private double probabilityOfSuccess;^[CLASS] PascalDistributionImpl   [VARIABLES] 
[P14_Delete_Statement]^^50^51^^^^49^53^super (  ) ; setNumberOfSuccesses ( r ) ;^[CLASS] PascalDistributionImpl  [METHOD] <init> [RETURN_TYPE] PascalDistributionImpl(int,double)   int r double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[P5_Replace_Variable]^setNumberOfSuccesses ( numberOfSuccesses ) ;^51^^^^^49^53^setNumberOfSuccesses ( r ) ;^[CLASS] PascalDistributionImpl  [METHOD] <init> [RETURN_TYPE] PascalDistributionImpl(int,double)   int r double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[P7_Replace_Invocation]^setProbabilityOfSuccess ( r ) ;^51^^^^^49^53^setNumberOfSuccesses ( r ) ;^[CLASS] PascalDistributionImpl  [METHOD] <init> [RETURN_TYPE] PascalDistributionImpl(int,double)   int r double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[P14_Delete_Statement]^^51^52^^^^49^53^setNumberOfSuccesses ( r ) ; setProbabilityOfSuccess ( p ) ;^[CLASS] PascalDistributionImpl  [METHOD] <init> [RETURN_TYPE] PascalDistributionImpl(int,double)   int r double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[P11_Insert_Donor_Statement]^getNumberOfSuccesses (  ) , x + 1 ) ;setNumberOfSuccesses ( r ) ;^51^^^^^49^53^setNumberOfSuccesses ( r ) ;^[CLASS] PascalDistributionImpl  [METHOD] <init> [RETURN_TYPE] PascalDistributionImpl(int,double)   int r double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[P11_Insert_Donor_Statement]^setProbabilityOfSuccess ( p ) ;setNumberOfSuccesses ( r ) ;^51^^^^^49^53^setNumberOfSuccesses ( r ) ;^[CLASS] PascalDistributionImpl  [METHOD] <init> [RETURN_TYPE] PascalDistributionImpl(int,double)   int r double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[P5_Replace_Variable]^setProbabilityOfSuccess ( probabilityOfSuccess ) ;^52^^^^^49^53^setProbabilityOfSuccess ( p ) ;^[CLASS] PascalDistributionImpl  [METHOD] <init> [RETURN_TYPE] PascalDistributionImpl(int,double)   int r double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[P7_Replace_Invocation]^setNumberOfSuccesses ( p ) ;^52^^^^^49^53^setProbabilityOfSuccess ( p ) ;^[CLASS] PascalDistributionImpl  [METHOD] <init> [RETURN_TYPE] PascalDistributionImpl(int,double)   int r double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[P14_Delete_Statement]^^52^^^^^49^53^setProbabilityOfSuccess ( p ) ;^[CLASS] PascalDistributionImpl  [METHOD] <init> [RETURN_TYPE] PascalDistributionImpl(int,double)   int r double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[P11_Insert_Donor_Statement]^Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;setProbabilityOfSuccess ( p ) ;^52^^^^^49^53^setProbabilityOfSuccess ( p ) ;^[CLASS] PascalDistributionImpl  [METHOD] <init> [RETURN_TYPE] PascalDistributionImpl(int,double)   int r double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[P11_Insert_Donor_Statement]^setNumberOfSuccesses ( r ) ;setProbabilityOfSuccess ( p ) ;^52^^^^^49^53^setProbabilityOfSuccess ( p ) ;^[CLASS] PascalDistributionImpl  [METHOD] <init> [RETURN_TYPE] PascalDistributionImpl(int,double)   int r double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[P5_Replace_Variable]^return r;^61^^^^^60^62^return numberOfSuccesses;^[CLASS] PascalDistributionImpl  [METHOD] getNumberOfSuccesses [RETURN_TYPE] int   [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[P5_Replace_Variable]^return p;^70^^^^^69^71^return probabilityOfSuccess;^[CLASS] PascalDistributionImpl  [METHOD] getProbabilityOfSuccess [RETURN_TYPE] double   [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  
[P2_Replace_Operator]^if  ( successes <= 0 )  {^80^^^^^79^84^if  ( successes < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int successes [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P3_Replace_Literal]^if  ( successes < r )  {^80^^^^^79^84^if  ( successes < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int successes [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P8_Replace_Mix]^if  ( successes < 4 )  {^80^^^^^79^84^if  ( successes < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int successes [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("number of trials must be non-negative.");^80^81^82^^^79^84^if  ( successes < 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] PascalDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int successes [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P16_Remove_Block]^^80^81^82^^^79^84^if  ( successes < 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] PascalDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int successes [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P13_Insert_Block]^if  (  ( p < 0.0 )  ||  ( p > 1.0 )  )  {     throw new IllegalArgumentException ( "probability of success must be between 0.0 and 1.0, inclusive." ) ; }^80^^^^^79^84^[Delete]^[CLASS] PascalDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int successes [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P13_Insert_Block]^if  ( successes < 0 )  {     throw new IllegalArgumentException ( "number of trials must be non-negative." ) ; }^81^^^^^79^84^[Delete]^[CLASS] PascalDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int successes [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P8_Replace_Mix]^return ;^81^^^^^79^84^throw new IllegalArgumentException  (" ")  ;^[CLASS] PascalDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int successes [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P5_Replace_Variable]^numberOfSuccesses = r;^83^^^^^79^84^numberOfSuccesses = successes;^[CLASS] PascalDistributionImpl  [METHOD] setNumberOfSuccesses [RETURN_TYPE] void   int successes [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P2_Replace_Operator]^if  ( p < 0.0 && p > 1.0 )  {^94^^^^^93^98^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P2_Replace_Operator]^if  ( p <= 0.0 || p > 1.0 )  {^94^^^^^93^98^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P2_Replace_Operator]^if  ( p < 0.0 || p == 1.0 )  {^94^^^^^93^98^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P3_Replace_Literal]^if  ( p < 0.0 || p > 0.2 )  {^94^^^^^93^98^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P5_Replace_Variable]^if  ( probabilityOfSuccess < 0.0 || p > 1.0 )  {^94^^^^^93^98^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P6_Replace_Expression]^if  ( p < 0.0 ) {^94^^^^^93^98^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P6_Replace_Expression]^if  (  p > 1.0 )  {^94^^^^^93^98^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P8_Replace_Mix]^if  ( p < 0.0d ) {^94^^^^^93^98^if  ( p < 0.0 || p > 1.0 )  {^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("probability of success must be between 0.0 and 1.0, inclusive.");^94^95^96^^^93^98^if  ( p < 0.0 || p > 1.0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P16_Remove_Block]^^94^95^96^^^93^98^if  ( p < 0.0 || p > 1.0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P13_Insert_Block]^if  ( successes < 0 )  {     throw new IllegalArgumentException ( "number of trials must be non-negative." ) ; }^94^^^^^93^98^[Delete]^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P13_Insert_Block]^if  (  ( p < 0.0 )  ||  ( p > 1.0 )  )  {     throw new IllegalArgumentException ( "probability of success must be between 0.0 and 1.0, inclusive." ) ; }^95^^^^^93^98^[Delete]^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P5_Replace_Variable]^probabilityOfSuccess = probabilityOfSuccess;^97^^^^^93^98^probabilityOfSuccess = p;^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P8_Replace_Mix]^probabilityOfSuccess =  null;^97^^^^^93^98^probabilityOfSuccess = p;^[CLASS] PascalDistributionImpl  [METHOD] setProbabilityOfSuccess [RETURN_TYPE] void   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P3_Replace_Literal]^return -numberOfSuccesses;^109^^^^^108^110^return -1;^[CLASS] PascalDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] int   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P8_Replace_Mix]^return -0;^109^^^^^108^110^return -1;^[CLASS] PascalDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] int   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P2_Replace_Operator]^return Integer.MAX_VALUE   instanceof   1;^122^^^^^120^123^return Integer.MAX_VALUE - 1;^[CLASS] PascalDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] int   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P3_Replace_Literal]^return Integer.MAX_VALUE ;^122^^^^^120^123^return Integer.MAX_VALUE - 1;^[CLASS] PascalDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] int   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P5_Replace_Variable]^return Integer.successes - 1;^122^^^^^120^123^return Integer.MAX_VALUE - 1;^[CLASS] PascalDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] int   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P8_Replace_Mix]^return Integer.MAX_VALUE  |  3;^122^^^^^120^123^return Integer.MAX_VALUE - 1;^[CLASS] PascalDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] int   double p [VARIABLES] boolean  double  p  probabilityOfSuccess  long  serialVersionUID  int  numberOfSuccesses  r  successes  
[P1_Replace_Type]^int ret;^134^^^^^133^144^double ret;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^if  ( x <= 0 )  {^135^^^^^133^144^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P3_Replace_Literal]^if  ( x < -4 )  {^135^^^^^133^144^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P5_Replace_Variable]^if  ( successes < 0 )  {^135^^^^^133^144^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P6_Replace_Expression]^if  ( x + 1 )  {^135^^^^^133^144^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P8_Replace_Mix]^if  ( x < 2 )  {^135^^^^^133^144^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P9_Replace_Statement]^if  ( p == 1 )  {^135^^^^^133^144^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P9_Replace_Statement]^if  ( p == 0 )  {^135^^^^^133^144^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x  >  1 ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P3_Replace_Literal]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + r ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P5_Replace_Variable]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , successes + 1 ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P7_Replace_Invocation]^ret = Beta.regularizedBeta ( getNumberOfSuccesses (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P7_Replace_Invocation]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getProbabilityOfSuccess (  ) , x + 1 ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P8_Replace_Mix]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 0 ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P13_Insert_Block]^if  ( x < 0 )  {     ret = 0.0; }else {     ret = regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) ,  ( x + 1 )  ) ; }^138^^^^^133^144^[Delete]^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P3_Replace_Literal]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + x ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P8_Replace_Mix]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getProbabilityOfSuccess (  ) , successes + 1 ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P7_Replace_Invocation]^getNumberOfSuccesses (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^139^140^141^^^133^144^getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P14_Delete_Statement]^^139^140^141^^^133^144^getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P7_Replace_Invocation]^getProbabilityOfSuccess (  ) , x + 1 ) ;^140^141^^^^133^144^getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P14_Delete_Statement]^^140^141^^^^133^144^getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P11_Insert_Donor_Statement]^setNumberOfSuccesses ( r ) ;getNumberOfSuccesses (  ) , x + 1 ) ;^140^141^^^^133^144^getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P8_Replace_Mix]^ret = 2.0d;^136^^^^^133^144^ret = 0.0;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P8_Replace_Mix]^ret = 0.0d;^136^^^^^133^144^ret = 0.0;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x  ||  1 ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P3_Replace_Literal]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x  ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P8_Replace_Mix]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 4 ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x   instanceof   1 ) ;^138^139^140^141^^133^144^ret = Beta.regularizedBeta ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  ) , x + 1 ) ;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P5_Replace_Variable]^return probabilityOfSuccess;^143^^^^^133^144^return ret;^[CLASS] PascalDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P1_Replace_Type]^int ret;^153^^^^^152^164^double ret;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^if  ( x <= 0 )  {^154^^^^^152^164^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P3_Replace_Literal]^if  ( x < -8 )  {^154^^^^^152^164^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P5_Replace_Variable]^if  ( successes < 0 )  {^154^^^^^152^164^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P6_Replace_Expression]^if  ( binomialCoefficientDouble (  (  ( x +  ( getNumberOfSuccesses (  )  )  )  - 1 ) ,  (  ( getNumberOfSuccesses (  )  )  - 1 )  )  )  *  ( pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  )  * pow (  ( 1.0 -  ( getProbabilityOfSuccess (  )  )  ) , x )  {^154^^^^^152^164^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P6_Replace_Expression]^if  ( binomialCoefficientDouble (  (  ( x +  ( getNumberOfSuccesses (  )  )  )  - 1 ) ,  (  ( getNumberOfSuccesses (  )  )  - 1 )  )  * pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  ) )  {^154^^^^^152^164^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P6_Replace_Expression]^if  ( x +  ( getNumberOfSuccesses (  )  )  - 1 )  {^154^^^^^152^164^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P6_Replace_Expression]^if  ( x + getNumberOfSuccesses (  ) )  {^154^^^^^152^164^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P6_Replace_Expression]^if  ( getNumberOfSuccesses (  )  - 1 )  {^154^^^^^152^164^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P6_Replace_Expression]^if  ( 1.0 - getProbabilityOfSuccess (  ) )  {^154^^^^^152^164^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P8_Replace_Mix]^if  ( x < 0 + 0 )  {^154^^^^^152^164^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P9_Replace_Statement]^if  ( p == 1 )  {^154^^^^^152^164^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P9_Replace_Statement]^if  ( p == 0 )  {^154^^^^^152^164^if  ( x < 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret - = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret + = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )   <=  1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret = MathUtils.binomialCoefficientDouble ( x  >>  getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )   &  1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0  ||  getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P3_Replace_Literal]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  , getNumberOfSuccesses (  )   )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P3_Replace_Literal]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - x, getNumberOfSuccesses (  )  - x )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( x.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P3_Replace_Literal]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 5.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P5_Replace_Variable]^ret = MathUtils.binomialCoefficientDouble ( successes + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P7_Replace_Invocation]^ret = MathUtils.binomialCoefficientDouble ( x + getProbabilityOfSuccess (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P7_Replace_Invocation]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getNumberOfSuccesses (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P8_Replace_Mix]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1 + 3, getNumberOfSuccesses (  )  - 1 + 3 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1 + 3.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P13_Insert_Block]^if  ( x < 0 )  {     ret = 0.0; }else {     ret =  (  ( binomialCoefficientDouble (  (  ( x +  ( getNumberOfSuccesses (  )  )  )  - 1 ) ,  (  ( getNumberOfSuccesses (  )  )  - 1 )  )  )  *  ( pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  )  )  *  ( pow (  ( 1.0 -  ( getProbabilityOfSuccess (  )  )  ) , x )  ) ; }^157^^^^^152^164^[Delete]^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )   ==  1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret = MathUtils.binomialCoefficientDouble ( x   instanceof   getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )   >  1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P8_Replace_Mix]^ret = MathUtils.binomialCoefficientDouble ( successes + getProbabilityOfSuccess (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P7_Replace_Invocation]^getProbabilityOfSuccess (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^158^159^160^161^^152^164^getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P7_Replace_Invocation]^Math.pow ( getNumberOfSuccesses (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^159^160^161^^^152^164^Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P7_Replace_Invocation]^Math.pow ( getProbabilityOfSuccess (  ) , getProbabilityOfSuccess (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^159^160^161^^^152^164^Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P14_Delete_Statement]^^159^160^161^^^152^164^Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^Math.pow ( 1.0   instanceof   getProbabilityOfSuccess (  ) , x ) ;^160^161^^^^152^164^Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P3_Replace_Literal]^Math.pow ( 0.14285714285714285 - getProbabilityOfSuccess (  ) , x ) ;^160^161^^^^152^164^Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P5_Replace_Variable]^Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , successes ) ;^160^161^^^^152^164^Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P7_Replace_Invocation]^Math.pow ( 1.0 - getNumberOfSuccesses (  ) , x ) ;^160^161^^^^152^164^Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P14_Delete_Statement]^^160^161^^^^152^164^Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P11_Insert_Donor_Statement]^setProbabilityOfSuccess ( p ) ;Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^160^161^^^^152^164^Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P3_Replace_Literal]^ret = NaN;^155^^^^^152^164^ret = 0.0;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P8_Replace_Mix]^ret = 3.0d;^155^^^^^152^164^ret = 0.0;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P8_Replace_Mix]^ret = 0.0D;^155^^^^^152^164^ret = 0.0;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret = MathUtils.binomialCoefficientDouble ( x  ^  getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )   <  1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0  <=  getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P8_Replace_Mix]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 4, getNumberOfSuccesses (  )  - 4 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 4.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret = MathUtils.binomialCoefficientDouble ( x  ==  getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )   <<  1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P3_Replace_Literal]^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - , getNumberOfSuccesses (  )  -  )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( .0 - getProbabilityOfSuccess (  ) ,^157^158^159^160^^152^164^ret = MathUtils.binomialCoefficientDouble ( x + getNumberOfSuccesses (  )  - 1, getNumberOfSuccesses (  )  - 1 )  * Math.pow ( getProbabilityOfSuccess (  ) , getNumberOfSuccesses (  )  )  * Math.pow ( 1.0 - getProbabilityOfSuccess (  ) ,^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^Math.pow ( 1.0  |  getProbabilityOfSuccess (  ) , x ) ;^160^161^^^^152^164^Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P3_Replace_Literal]^Math.pow ( 0.0 - getProbabilityOfSuccess (  ) , x ) ;^160^161^^^^152^164^Math.pow ( 1.0 - getProbabilityOfSuccess (  ) , x ) ;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P5_Replace_Variable]^return probabilityOfSuccess;^163^^^^^152^164^return ret;^[CLASS] PascalDistributionImpl  [METHOD] probability [RETURN_TYPE] double   int x [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^if  ( p != 0 )  {^181^^^^^179^190^if  ( p == 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P3_Replace_Literal]^if  ( p == x )  {^181^^^^^179^190^if  ( p == 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P5_Replace_Variable]^if  ( ret == 0 )  {^181^^^^^179^190^if  ( p == 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P8_Replace_Mix]^if  ( ret == 0 + 3 )  {^181^^^^^179^190^if  ( p == 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P9_Replace_Statement]^if  ( p == 1 )  {^181^^^^^179^190^if  ( p == 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P9_Replace_Statement]^if  ( x < 0 )  {^181^^^^^179^190^if  ( p == 0 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P15_Unwrap_Block]^return -1;^181^182^183^^^179^190^if  ( p == 0 )  { return -1; }^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P16_Remove_Block]^^181^182^183^^^179^190^if  ( p == 0 )  { return -1; }^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P3_Replace_Literal]^return -numberOfSuccesses;^182^^^^^179^190^return -1;^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P8_Replace_Mix]^return -4;^182^^^^^179^190^return -1;^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P3_Replace_Literal]^return -;^182^^^^^179^190^return -1;^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P2_Replace_Operator]^if  ( p <= 1 )  {^184^^^^^179^190^if  ( p == 1 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P3_Replace_Literal]^if  ( p == r )  {^184^^^^^179^190^if  ( p == 1 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P5_Replace_Variable]^if  ( ret == 1 )  {^184^^^^^179^190^if  ( p == 1 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P8_Replace_Mix]^if  ( p == 0 )  {^184^^^^^179^190^if  ( p == 1 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P9_Replace_Statement]^if  ( x < 0 )  {^184^^^^^179^190^if  ( p == 1 )  {^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P15_Unwrap_Block]^return java.lang.Integer.MAX_VALUE;^184^185^186^^^179^190^if  ( p == 1 )  { return Integer.MAX_VALUE; }^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P16_Remove_Block]^^184^185^186^^^179^190^if  ( p == 1 )  { return Integer.MAX_VALUE; }^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P13_Insert_Block]^if  ( p == 1 )  {     return MAX_VALUE; }^185^^^^^179^190^[Delete]^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P7_Replace_Invocation]^return super .cumulativeProbability ( numberOfSuccesses )  ;^189^^^^^179^190^return super.inverseCumulativeProbability ( p ) ;^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
[P14_Delete_Statement]^^189^^^^^179^190^return super.inverseCumulativeProbability ( p ) ;^[CLASS] PascalDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] int   final double p [VARIABLES] boolean  double  p  probabilityOfSuccess  ret  long  serialVersionUID  int  numberOfSuccesses  r  successes  x  
