[P1_Replace_Type]^private static final  int  serialVersionUID = 1460986908574398008L;^38^^^^^33^43^private static final long serialVersionUID = 1460986908574398008L;^[CLASS] SumOfSquares   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = 1460986908574398008;^38^^^^^33^43^private static final long serialVersionUID = 1460986908574398008L;^[CLASS] SumOfSquares   [VARIABLES] 
[P1_Replace_Type]^private  short  n;^41^^^^^36^46^private long n;^[CLASS] SumOfSquares   [VARIABLES] 
[P8_Replace_Mix]^private  int  n;^41^^^^^36^46^private long n;^[CLASS] SumOfSquares   [VARIABLES] 
[P1_Replace_Type]^private int value;^46^^^^^41^51^private double value;^[CLASS] SumOfSquares   [VARIABLES] 
[P3_Replace_Literal]^n = -8;^52^^^^^51^54^n = 0;^[CLASS] SumOfSquares  [METHOD] <init> [RETURN_TYPE] SumOfSquares()   [VARIABLES] double  value  long  n  serialVersionUID  boolean  
[P8_Replace_Mix]^n = 1;^52^^^^^51^54^n = 0;^[CLASS] SumOfSquares  [METHOD] <init> [RETURN_TYPE] SumOfSquares()   [VARIABLES] double  value  long  n  serialVersionUID  boolean  
[P8_Replace_Mix]^value  =  value ;^53^^^^^51^54^value = Double.NaN;^[CLASS] SumOfSquares  [METHOD] <init> [RETURN_TYPE] SumOfSquares()   [VARIABLES] double  value  long  n  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^value = d * d;value = Double.NaN;^53^^^^^51^54^value = Double.NaN;^[CLASS] SumOfSquares  [METHOD] <init> [RETURN_TYPE] SumOfSquares()   [VARIABLES] double  value  long  n  serialVersionUID  boolean  
[P2_Replace_Operator]^if  ( n >= 0 )  {^60^^^^^59^66^if  ( n == 0 )  {^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P3_Replace_Literal]^if  ( n == 1 )  {^60^^^^^59^66^if  ( n == 0 )  {^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P5_Replace_Variable]^if  ( serialVersionUID == 0 )  {^60^^^^^59^66^if  ( n == 0 )  {^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P6_Replace_Expression]^if  ( d * d )  {^60^^^^^59^66^if  ( n == 0 )  {^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P8_Replace_Mix]^if  ( n == 0 % 1 )  {^60^^^^^59^66^if  ( n == 0 )  {^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P15_Unwrap_Block]^value = d * d;^60^61^62^63^64^59^66^if  ( n == 0 )  { value = d * d; } else { value += d * d; }^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P16_Remove_Block]^^60^61^62^63^64^59^66^if  ( n == 0 )  { value = d * d; } else { value += d * d; }^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P2_Replace_Operator]^value / += d * d;^63^^^^^59^66^value += d * d;^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P8_Replace_Mix]^value +=  null * null;^63^^^^^59^66^value += d * d;^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^value = d * d;value += d * d;^63^^^^^59^66^value += d * d;^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P2_Replace_Operator]^value + = d * d;^61^^^^^59^66^value = d * d;^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P5_Replace_Variable]^value = value * d;^61^^^^^59^66^value = d * d;^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P8_Replace_Mix]^value =  null * null;^61^^^^^59^66^value = d * d;^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^value += d * d;value = d * d;^61^^^^^59^66^value = d * d;^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^value = Double.NaN;value = d * d;^61^^^^^59^66^value = d * d;^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P2_Replace_Operator]^value / = d * d;^61^^^^^59^66^value = d * d;^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P5_Replace_Variable]^value += value * d;^63^^^^^59^66^value += d * d;^[CLASS] SumOfSquares  [METHOD] increment [RETURN_TYPE] void   final double d [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P5_Replace_Variable]^return d;^72^^^^^71^73^return value;^[CLASS] SumOfSquares  [METHOD] getResult [RETURN_TYPE] double   [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P8_Replace_Mix]^return serialVersionUID;^79^^^^^78^80^return n;^[CLASS] SumOfSquares  [METHOD] getN [RETURN_TYPE] long   [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P8_Replace_Mix]^value ;^86^^^^^85^88^value = Double.NaN;^[CLASS] SumOfSquares  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P11_Insert_Donor_Statement]^value = d * d;value = Double.NaN;^86^^^^^85^88^value = Double.NaN;^[CLASS] SumOfSquares  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P3_Replace_Literal]^n = -3;^87^^^^^85^88^n = 0;^[CLASS] SumOfSquares  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P8_Replace_Mix]^n = 3;^87^^^^^85^88^n = 0;^[CLASS] SumOfSquares  [METHOD] clear [RETURN_TYPE] void   [VARIABLES] double  d  value  long  n  serialVersionUID  boolean  
[P1_Replace_Type]^int sumSq = Double.NaN;^105^^^^^104^113^double sumSq = Double.NaN;^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test ( values, length, length )  )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test ( values, begin, begin )  )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test (  begin, length )  )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test ( values,  length )  )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test ( values, begin )  )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test ( values, length, begin )  )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P6_Replace_Expression]^if  ( begin + length )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P6_Replace_Expression]^if  ( values[i] * values[i] )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P15_Unwrap_Block]^sumSq = 0.0; for (int i = begin; i < (begin + length); i++) {    sumSq += (values[i]) * (values[i]);};^106^107^108^109^110^104^113^if  ( test ( values, begin, length )  )  { sumSq = 0.0; for  ( int i = begin; i < begin + length; i++ )  { sumSq += values[i] * values[i]; }^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P16_Remove_Block]^^106^107^108^109^110^104^113^if  ( test ( values, begin, length )  )  { sumSq = 0.0; for  ( int i = begin; i < begin + length; i++ )  { sumSq += values[i] * values[i]; }^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P1_Replace_Type]^for  (  long  i = begin; i < begin + length; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P2_Replace_Operator]^for  ( int i = begin; i <= begin + length; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P2_Replace_Operator]^for  >>  ( int i = begin; i < begin + length; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P2_Replace_Operator]^for  <=  ( int i = begin; i < begin + length; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^for  ( int i = length; i < begin + length; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^for  ( lengthnt i = begin; i < begin + length; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^for  ( int i = begin; i < begin + begin; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^for  ( int i = length; i < begin + begin; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^for  ( beginnt i = i; i < begin + length; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P2_Replace_Operator]^sumSq - += values[i] * values[i];^109^^^^^104^113^sumSq += values[i] * values[i];^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P8_Replace_Mix]^sumSq +=  null[i] * null[i];^109^^^^^104^113^sumSq += values[i] * values[i];^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P8_Replace_Mix]^sumSq = 0.0D;^107^^^^^104^113^sumSq = 0.0;^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P2_Replace_Operator]^sumSq + += values[i] * values[i];^109^^^^^104^113^sumSq += values[i] * values[i];^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P1_Replace_Type]^for  (  short  i = begin; i < begin + length; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P2_Replace_Operator]^for  ^  ( int i = begin; i < begin + length; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P2_Replace_Operator]^for  <  ( int i = begin; i < begin + length; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^for  ( lengthnt i = begin; i < begin + i; i++ )  {^108^^^^^104^113^for  ( int i = begin; i < begin + length; i++ )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P2_Replace_Operator]^sumSq / += values[i] * values[i];^109^^^^^104^113^sumSq += values[i] * values[i];^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P8_Replace_Mix]^sumSq = 1.0d;^107^^^^^104^113^sumSq = 0.0;^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test ( values, i, length )  )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^if  ( test ( length, begin, values )  )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P8_Replace_Mix]^if  ( test ( values, begin, i )  )  {^106^^^^^104^113^if  ( test ( values, begin, length )  )  {^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
[P5_Replace_Variable]^return value;^112^^^^^104^113^return sumSq;^[CLASS] SumOfSquares  [METHOD] evaluate [RETURN_TYPE] double   final double[] values final int begin final int length [VARIABLES] boolean  double[]  values  double  d  sumSq  value  long  n  serialVersionUID  int  begin  i  length  
