[P1_Replace_Type]^static final  int  serialVersionUID = -3353896576191389897L;^37^^^^^32^42^static final long serialVersionUID = -3353896576191389897L;^[CLASS] PolynomialFunctionNewtonForm   [VARIABLES] 
[P8_Replace_Mix]^static final long serialVersionUID ;^37^^^^^32^42^static final long serialVersionUID = -3353896576191389897L;^[CLASS] PolynomialFunctionNewtonForm   [VARIABLES] 
[P5_Replace_Variable]^verifyInputArray ( coefficients, c ) ;^72^^^^^69^78^verifyInputArray ( a, c ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^verifyInputArray ( a, coefficients ) ;^72^^^^^69^78^verifyInputArray ( a, c ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^verifyInputArray (  c ) ;^72^^^^^69^78^verifyInputArray ( a, c ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^verifyInputArray ( a ) ;^72^^^^^69^78^verifyInputArray ( a, c ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^verifyInputArray ( c, a ) ;^72^^^^^69^78^verifyInputArray ( a, c ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P7_Replace_Invocation]^PolynomialFunctionNewtonForm ( a, c ) ;^72^^^^^69^78^verifyInputArray ( a, c ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P8_Replace_Mix]^PolynomialFunctionNewtonForm ( coefficients, c ) ;^72^^^^^69^78^verifyInputArray ( a, c ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^this.coefficients = new double[a.length];^73^^^^^69^78^this.a = new double[a.length];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P8_Replace_Mix]^this.a =  new double[coefficients.length];^73^^^^^69^78^this.a = new double[a.length];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P11_Insert_Donor_Statement]^this.c = new double[c.length];this.a = new double[a.length];^73^^^^^69^78^this.a = new double[a.length];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^this.coefficients = new double[c.length];^74^^^^^69^78^this.c = new double[c.length];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P8_Replace_Mix]^this.c =  new double[coefficients.length];^74^^^^^69^78^this.c = new double[c.length];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P11_Insert_Donor_Statement]^this.a = new double[a.length];this.c = new double[c.length];^74^^^^^69^78^this.c = new double[c.length];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( a, -6, this.a, -6, a.length ) ;^75^^^^^69^78^System.arraycopy ( a, 0, this.a, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( a, -5, this.a, -5, a.length ) ;^75^^^^^69^78^System.arraycopy ( a, 0, this.a, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( coefficients, 0, this.a, 0, a.length ) ;^75^^^^^69^78^System.arraycopy ( a, 0, this.a, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( a, 0, coefficients, 0, a.length ) ;^75^^^^^69^78^System.arraycopy ( a, 0, this.a, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy (  0, this.a, 0, a.length ) ;^75^^^^^69^78^System.arraycopy ( a, 0, this.a, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( a, 0,  0, a.length ) ;^75^^^^^69^78^System.arraycopy ( a, 0, this.a, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( a, 0, this.a, 0 ) ;^75^^^^^69^78^System.arraycopy ( a, 0, this.a, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( a.length, 0, this.a, 0, a ) ;^75^^^^^69^78^System.arraycopy ( a, 0, this.a, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( this.a, 0, a, 0, a.length ) ;^75^^^^^69^78^System.arraycopy ( a, 0, this.a, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P14_Delete_Statement]^^75^^^^^69^78^System.arraycopy ( a, 0, this.a, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( c, 0, this.c, 0, c.length ) ;System.arraycopy ( a, 0, this.a, 0, a.length ) ;^75^^^^^69^78^System.arraycopy ( a, 0, this.a, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( a, 0, out, 0, a.length ) ;System.arraycopy ( a, 0, this.a, 0, a.length ) ;^75^^^^^69^78^System.arraycopy ( a, 0, this.a, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( c, 0, out, 0, c.length ) ;System.arraycopy ( a, 0, this.a, 0, a.length ) ;^75^^^^^69^78^System.arraycopy ( a, 0, this.a, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;System.arraycopy ( a, 0, this.a, 0, a.length ) ;^75^^^^^69^78^System.arraycopy ( a, 0, this.a, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( c, -8, this.c, -8, c.length ) ;^76^^^^^69^78^System.arraycopy ( c, 0, this.c, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( c, -1, this.c, -1, c.length ) ;^76^^^^^69^78^System.arraycopy ( c, 0, this.c, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( coefficients, 0, this.c, 0, c.length ) ;^76^^^^^69^78^System.arraycopy ( c, 0, this.c, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( c, 0, coefficients, 0, c.length ) ;^76^^^^^69^78^System.arraycopy ( c, 0, this.c, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy (  0, this.c, 0, c.length ) ;^76^^^^^69^78^System.arraycopy ( c, 0, this.c, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( c, 0,  0, c.length ) ;^76^^^^^69^78^System.arraycopy ( c, 0, this.c, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( c, 0, this.c, 0 ) ;^76^^^^^69^78^System.arraycopy ( c, 0, this.c, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( this.c, 0, c, 0, c.length ) ;^76^^^^^69^78^System.arraycopy ( c, 0, this.c, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( c.length, 0, this.c, 0, c ) ;^76^^^^^69^78^System.arraycopy ( c, 0, this.c, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P14_Delete_Statement]^^76^^^^^69^78^System.arraycopy ( c, 0, this.c, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( a, 0, out, 0, a.length ) ;System.arraycopy ( c, 0, this.c, 0, c.length ) ;^76^^^^^69^78^System.arraycopy ( c, 0, this.c, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( a, 0, this.a, 0, a.length ) ;System.arraycopy ( c, 0, this.c, 0, c.length ) ;^76^^^^^69^78^System.arraycopy ( c, 0, this.c, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( c, 0, out, 0, c.length ) ;System.arraycopy ( c, 0, this.c, 0, c.length ) ;^76^^^^^69^78^System.arraycopy ( c, 0, this.c, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;System.arraycopy ( c, 0, this.c, 0, c.length ) ;^76^^^^^69^78^System.arraycopy ( c, 0, this.c, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P3_Replace_Literal]^coefficientsComputed = true;^77^^^^^69^78^coefficientsComputed = false;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P11_Insert_Donor_Statement]^coefficients[0] = a[n];coefficientsComputed = false;^77^^^^^69^78^coefficientsComputed = false;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P11_Insert_Donor_Statement]^coefficientsComputed = true;coefficientsComputed = false;^77^^^^^69^78^coefficientsComputed = false;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P11_Insert_Donor_Statement]^coefficients[i] = 0.0;coefficientsComputed = false;^77^^^^^69^78^coefficientsComputed = false;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P12_Insert_Condition]^if  ( !coefficientsComputed )  { coefficientsComputed = false; }^77^^^^^69^78^coefficientsComputed = false;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] <init> [RETURN_TYPE] PolynomialFunctionNewtonForm(double[],double[])   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^return evaluate ( coefficients, c, z ) ;^89^^^^^88^90^return evaluate ( a, c, z ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  double  z  
[P5_Replace_Variable]^return evaluate ( a, coefficients, z ) ;^89^^^^^88^90^return evaluate ( a, c, z ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  double  z  
[P5_Replace_Variable]^return evaluate ( a, c ) ;^89^^^^^88^90^return evaluate ( a, c, z ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  double  z  
[P5_Replace_Variable]^return evaluate (  c, z ) ;^89^^^^^88^90^return evaluate ( a, c, z ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  double  z  
[P5_Replace_Variable]^return evaluate ( a,  z ) ;^89^^^^^88^90^return evaluate ( a, c, z ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  double  z  
[P5_Replace_Variable]^return evaluate ( a, z, c ) ;^89^^^^^88^90^return evaluate ( a, c, z ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  double  z  
[P5_Replace_Variable]^return evaluate ( c, a, z ) ;^89^^^^^88^90^return evaluate ( a, c, z ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  double  z  
[P5_Replace_Variable]^return evaluate ( z, c, a ) ;^89^^^^^88^90^return evaluate ( a, c, z ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  double  z  
[P14_Delete_Statement]^^89^^^^^88^90^return evaluate ( a, c, z ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] value [RETURN_TYPE] double   double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  double  z  
[P5_Replace_Variable]^return 0;^98^^^^^97^99^return c.length;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^return coefficients.length;^98^^^^^97^99^return c.length;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^return c;^98^^^^^97^99^return c.length;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P5_Replace_Variable]^return c.length.length;^98^^^^^97^99^return c.length;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] degree [RETURN_TYPE] int   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  long  serialVersionUID  
[P11_Insert_Donor_Statement]^double[] out = new double[coefficients.length];double[] out = new double[a.length];^109^^^^^108^112^double[] out = new double[a.length];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^double[] out = new double[c.length];double[] out = new double[a.length];^109^^^^^108^112^double[] out = new double[a.length];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( a, -9, out, -9, a.length ) ;^110^^^^^108^112^System.arraycopy ( a, 0, out, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( a, 2, out, 2, a.length ) ;^110^^^^^108^112^System.arraycopy ( a, 0, out, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( a, 0, coefficients, 0, a.length ) ;^110^^^^^108^112^System.arraycopy ( a, 0, out, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( out, 0, out, 0, a.length ) ;^110^^^^^108^112^System.arraycopy ( a, 0, out, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( a, 0,  0, a.length ) ;^110^^^^^108^112^System.arraycopy ( a, 0, out, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy (  0, out, 0, a.length ) ;^110^^^^^108^112^System.arraycopy ( a, 0, out, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( a, 0, out, 0 ) ;^110^^^^^108^112^System.arraycopy ( a, 0, out, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( out, 0, a, 0, a.length ) ;^110^^^^^108^112^System.arraycopy ( a, 0, out, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( a.length, 0, out, 0, a ) ;^110^^^^^108^112^System.arraycopy ( a, 0, out, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P8_Replace_Mix]^System.arraycopy ( coefficients, 0, out, 0, a.length ) ;^110^^^^^108^112^System.arraycopy ( a, 0, out, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P14_Delete_Statement]^^110^111^^^^108^112^System.arraycopy ( a, 0, out, 0, a.length ) ; return out;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( c, 0, this.c, 0, c.length ) ;System.arraycopy ( a, 0, out, 0, a.length ) ;^110^^^^^108^112^System.arraycopy ( a, 0, out, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( a, 0, this.a, 0, a.length ) ;System.arraycopy ( a, 0, out, 0, a.length ) ;^110^^^^^108^112^System.arraycopy ( a, 0, out, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( c, 0, out, 0, c.length ) ;System.arraycopy ( a, 0, out, 0, a.length ) ;^110^^^^^108^112^System.arraycopy ( a, 0, out, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;System.arraycopy ( a, 0, out, 0, a.length ) ;^110^^^^^108^112^System.arraycopy ( a, 0, out, 0, a.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^return coefficients;^111^^^^^108^112^return out;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getNewtonCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^double[] out = new double[coefficients.length];double[] out = new double[c.length];^122^^^^^121^125^double[] out = new double[c.length];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^double[] out = new double[a.length];double[] out = new double[c.length];^122^^^^^121^125^double[] out = new double[c.length];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( c, 7, out, 7, c.length ) ;^123^^^^^121^125^System.arraycopy ( c, 0, out, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( c, 2, out, 2, c.length ) ;^123^^^^^121^125^System.arraycopy ( c, 0, out, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( c, 0, coefficients, 0, c.length ) ;^123^^^^^121^125^System.arraycopy ( c, 0, out, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( coefficients, 0, out, 0, c.length ) ;^123^^^^^121^125^System.arraycopy ( c, 0, out, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( c, 0,  0, c.length ) ;^123^^^^^121^125^System.arraycopy ( c, 0, out, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy (  0, out, 0, c.length ) ;^123^^^^^121^125^System.arraycopy ( c, 0, out, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( c, 0, out, 0 ) ;^123^^^^^121^125^System.arraycopy ( c, 0, out, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( out, 0, c, 0, c.length ) ;^123^^^^^121^125^System.arraycopy ( c, 0, out, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( c.length, 0, out, 0, c ) ;^123^^^^^121^125^System.arraycopy ( c, 0, out, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( c, 0, c.length, 0, out ) ;^123^^^^^121^125^System.arraycopy ( c, 0, out, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P14_Delete_Statement]^^123^^^^^121^125^System.arraycopy ( c, 0, out, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( c, 0, this.c, 0, c.length ) ;System.arraycopy ( c, 0, out, 0, c.length ) ;^123^^^^^121^125^System.arraycopy ( c, 0, out, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( a, 0, out, 0, a.length ) ;System.arraycopy ( c, 0, out, 0, c.length ) ;^123^^^^^121^125^System.arraycopy ( c, 0, out, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( a, 0, this.a, 0, a.length ) ;System.arraycopy ( c, 0, out, 0, c.length ) ;^123^^^^^121^125^System.arraycopy ( c, 0, out, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;System.arraycopy ( c, 0, out, 0, c.length ) ;^123^^^^^121^125^System.arraycopy ( c, 0, out, 0, c.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^return coefficients;^124^^^^^121^125^return out;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCenters [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P15_Unwrap_Block]^computeCoefficients();^135^136^137^^^134^141^if  ( !coefficientsComputed )  { computeCoefficients (  ) ; }^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P16_Remove_Block]^^135^136^137^^^134^141^if  ( !coefficientsComputed )  { computeCoefficients (  ) ; }^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P7_Replace_Invocation]^degree (  ) ;^136^^^^^134^141^computeCoefficients (  ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P14_Delete_Statement]^^136^^^^^134^141^computeCoefficients (  ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^double[] out = new double[c.length];double[] out = new double[coefficients.length];^138^^^^^134^141^double[] out = new double[coefficients.length];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^double[] out = new double[a.length];double[] out = new double[coefficients.length];^138^^^^^134^141^double[] out = new double[coefficients.length];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( coefficients, -8, out, -8, coefficients.length ) ;^139^^^^^134^141^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^System.arraycopy ( coefficients, -7, out, -7, coefficients.length ) ;^139^^^^^134^141^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( coefficients, 0, c, 0, coefficients.length ) ;^139^^^^^134^141^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( c, 0, out, 0, coefficients.length ) ;^139^^^^^134^141^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( coefficients, 0,  0, coefficients.length ) ;^139^^^^^134^141^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy (  0, out, 0, coefficients.length ) ;^139^^^^^134^141^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( coefficients, 0, out, 0 ) ;^139^^^^^134^141^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( out, 0, coefficients, 0, coefficients.length ) ;^139^^^^^134^141^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^System.arraycopy ( coefficients.length, 0, out, 0, coefficients ) ;^139^^^^^134^141^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P14_Delete_Statement]^^139^140^^^^134^141^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ; return out;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( c, 0, this.c, 0, c.length ) ;System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^139^^^^^134^141^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( a, 0, out, 0, a.length ) ;System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^139^^^^^134^141^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( a, 0, this.a, 0, a.length ) ;System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^139^^^^^134^141^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^System.arraycopy ( c, 0, out, 0, c.length ) ;System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^139^^^^^134^141^System.arraycopy ( coefficients, 0, out, 0, coefficients.length ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^return coefficients;^140^^^^^134^141^return out;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] getCoefficients [RETURN_TYPE] double[]   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^verifyInputArray ( out, c ) ;^158^^^^^155^167^verifyInputArray ( a, c ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^verifyInputArray ( a, out ) ;^158^^^^^155^167^verifyInputArray ( a, c ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^verifyInputArray (  c ) ;^158^^^^^155^167^verifyInputArray ( a, c ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^verifyInputArray ( a ) ;^158^^^^^155^167^verifyInputArray ( a, c ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^verifyInputArray ( c, a ) ;^158^^^^^155^167^verifyInputArray ( a, c ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P7_Replace_Invocation]^PolynomialFunctionNewtonForm ( a, c ) ;^158^^^^^155^167^verifyInputArray ( a, c ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P8_Replace_Mix]^PolynomialFunctionNewtonForm ( out, c ) ;^158^^^^^155^167^verifyInputArray ( a, c ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P1_Replace_Type]^short  n = c.length;^160^^^^^155^167^int n = c.length;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^int n = out.length;^160^^^^^155^167^int n = c.length;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^int n = c.length.length;^160^^^^^155^167^int n = c.length;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^int n = c;^160^^^^^155^167^int n = c.length;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P8_Replace_Mix]^int n = i;^160^^^^^155^167^int n = c.length;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P1_Replace_Type]^int value = a[n];^161^^^^^155^167^double value = a[n];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^double value = out[n];^161^^^^^155^167^double value = a[n];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P1_Replace_Type]^for  (  short  i = n-1; i >= 0; i-- )  {^162^^^^^155^167^for  ( int i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P2_Replace_Operator]^for  ( int i = n-1; i == 0; i-- )  {^162^^^^^155^167^for  ( int i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P3_Replace_Literal]^for  ( int i = n-7; i >= 0; i-- )  {^162^^^^^155^167^for  ( int i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P3_Replace_Literal]^for  ( int i = n-1; i >= 2; i-- )  {^162^^^^^155^167^for  ( int i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^for  ( nnt i = n-1; i >= 0; i-- )  {^162^^^^^155^167^for  ( int i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^for  ( nnt i = i-1; i >= 0; i-- )  {^162^^^^^155^167^for  ( int i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P2_Replace_Operator]^value = a[i] +  >=  ( z - c[i] )  * value;^163^^^^^155^167^value = a[i] +  ( z - c[i] )  * value;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P2_Replace_Operator]^value / = a[i] +  ( z - c[i] )  * value;^163^^^^^155^167^value = a[i] +  ( z - c[i] )  * value;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P2_Replace_Operator]^value = a[i] +  ( z  >=  c[i] )  * value;^163^^^^^155^167^value = a[i] +  ( z - c[i] )  * value;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^value = out[i] +  ( z - c[i] )  * value;^163^^^^^155^167^value = a[i] +  ( z - c[i] )  * value;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^value = a[i] +  ( value - c[i] )  * value;^163^^^^^155^167^value = a[i] +  ( z - c[i] )  * value;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^value = a[i] +  ( z - out[i] )  * value;^163^^^^^155^167^value = a[i] +  ( z - c[i] )  * value;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^value = c[i] +  ( z - a[i] )  * value;^163^^^^^155^167^value = a[i] +  ( z - c[i] )  * value;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^value = a[i] +  ( value - c[i] )  * z;^163^^^^^155^167^value = a[i] +  ( z - c[i] )  * value;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P8_Replace_Mix]^value =  out[i] +  ( z - c[i] )  * voutlue;^163^^^^^155^167^value = a[i] +  ( z - c[i] )  * value;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P2_Replace_Operator]^value = a[i] +  ==  ( z - c[i] )  * value;^163^^^^^155^167^value = a[i] +  ( z - c[i] )  * value;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P2_Replace_Operator]^value = a[i] +  ( z  !=  c[i] )  * value;^163^^^^^155^167^value = a[i] +  ( z - c[i] )  * value;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^value = a[i] +  ( z - c[i] )  * z;^163^^^^^155^167^value = a[i] +  ( z - c[i] )  * value;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P8_Replace_Mix]^value =  null[i] +  ( z - c[i] )  * vnulllue;^163^^^^^155^167^value = a[i] +  ( z - c[i] )  * value;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P3_Replace_Literal]^for  ( int i = n--6; i >= 0; i-- )  {^162^^^^^155^167^for  ( int i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P5_Replace_Variable]^return z;^166^^^^^155^167^return value;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] evaluate [RETURN_TYPE] double   double[] a double[] c double z [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  double  value  z  int  i  n  
[P1_Replace_Type]^short  i, j, n = degree (  ) ;^174^^^^^173^190^int i, j, n = degree (  ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P1_Replace_Type]^long  i, j, n = degree (  ) ;^174^^^^^173^190^int i, j, n = degree (  ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P7_Replace_Invocation]^int i, j, n = computeCoefficients (  ) ;^174^^^^^173^190^int i, j, n = degree (  ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P14_Delete_Statement]^^174^^^^^173^190^int i, j, n = degree (  ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^coefficients = new double[n+-1];^176^^^^^173^190^coefficients = new double[n+1];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^coefficients = jew double[n+1];^176^^^^^173^190^coefficients = new double[n+1];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P8_Replace_Mix]^coefficients = new double[n+1L];^176^^^^^173^190^coefficients = new double[n+1];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P11_Insert_Donor_Statement]^coefficients[0] = a[n];coefficients = new double[n+1];^176^^^^^173^190^coefficients = new double[n+1];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^for  ( i = 0; i < n; i++ )  {^177^^^^^173^190^for  ( i = 0; i <= n; i++ )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^for  ( i = 3; i <= n; i++ )  {^177^^^^^173^190^for  ( i = 0; i <= n; i++ )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^for  ( j = 0; i <= n; i++ )  {^177^^^^^173^190^for  ( i = 0; i <= n; i++ )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^for  ( i = 0; i <= j; i++ )  {^177^^^^^173^190^for  ( i = 0; i <= n; i++ )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^for  ( n = 0; i <= i; i++ )  {^177^^^^^173^190^for  ( i = 0; i <= n; i++ )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P8_Replace_Mix]^coefficients[i] = 2.0d;^178^^^^^173^190^coefficients[i] = 0.0;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P11_Insert_Donor_Statement]^coefficients[0] = a[n];coefficients[i] = 0.0;^178^^^^^173^190^coefficients[i] = 0.0;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P11_Insert_Donor_Statement]^coefficientsComputed = true;coefficients[i] = 0.0;^178^^^^^173^190^coefficients[i] = 0.0;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P11_Insert_Donor_Statement]^coefficientsComputed = false;coefficients[i] = 0.0;^178^^^^^173^190^coefficients[i] = 0.0;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^for  ( i = i; i <= n; i++ )  {^177^^^^^173^190^for  ( i = 0; i <= n; i++ )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P8_Replace_Mix]^for  ( i = 2; i <= n; i++ )  {^177^^^^^173^190^for  ( i = 0; i <= n; i++ )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P8_Replace_Mix]^coefficients[i] = 0.0D;^178^^^^^173^190^coefficients[i] = 0.0;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^coefficients[j] = a[n];^181^^^^^173^190^coefficients[0] = a[n];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^coefficients[0] = out[n];^181^^^^^173^190^coefficients[0] = a[n];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P8_Replace_Mix]^coefficients[2] = a[n];^181^^^^^173^190^coefficients[0] = a[n];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P11_Insert_Donor_Statement]^coefficientsComputed = true;coefficients[0] = a[n];^181^^^^^173^190^coefficients[0] = a[n];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P11_Insert_Donor_Statement]^coefficientsComputed = false;coefficients[0] = a[n];^181^^^^^173^190^coefficients[0] = a[n];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P11_Insert_Donor_Statement]^coefficients = new double[n+1];coefficients[0] = a[n];^181^^^^^173^190^coefficients[0] = a[n];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P11_Insert_Donor_Statement]^coefficients[i] = 0.0;coefficients[0] = a[n];^181^^^^^173^190^coefficients[0] = a[n];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^for  ( i = n-1; i > 0; i-- )  {^182^^^^^173^190^for  ( i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^for  ( i = n-n; i >= 0; i-- )  {^182^^^^^173^190^for  ( i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^for  ( i = n-1; i >= i; i-- )  {^182^^^^^173^190^for  ( i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^for  ( i = n-1; i >= j; i-- )  {^182^^^^^173^190^for  ( i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^for  ( i = n-7; i >= 0; i-- )  {^182^^^^^173^190^for  ( i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^for  ( i = n-1; i >= n; i-- )  {^182^^^^^173^190^for  ( i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^for  ( i = n-1; i >= -6; i-- )  {^182^^^^^173^190^for  ( i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^for  ( i = i-1; i >= 0; i-- )  {^182^^^^^173^190^for  ( i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^for  ( j = n-1; i >= 0; i-- )  {^182^^^^^173^190^for  ( i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P8_Replace_Mix]^for  ( n = n-1; i >= 0; i-- )  {^182^^^^^173^190^for  ( i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^for  ( j = n-i; j >= 0; j-- )  {^183^^^^^173^190^for  ( j = n-i; j > 0; j-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^for  ( j = n-i; j > -5; j-- )  {^183^^^^^173^190^for  ( j = n-i; j > 0; j-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^for  ( j = i-i; j > 0; j-- )  {^183^^^^^173^190^for  ( j = n-i; j > 0; j-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^for  ( i = n-i; j > 0; j-- )  {^183^^^^^173^190^for  ( j = n-i; j > 0; j-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^coefficients[j] = coefficients[j-1]  &  c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^coefficients[j] = coefficients[j-1]  >=  c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^coefficients[j] + = coefficients[j-1] - c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^coefficients[j] = coefficients[j-n] - c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^coefficients[j] = out[j-1] - c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^coefficients[j] = outoefficients[j-1] - c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^coefficients[j] = c[j-1] - coefficients[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^coefficients[j] = coefficientsoefficients[j-1] - c[i] * c[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P8_Replace_Mix]^coefficients[j] = coefficients[j-2] - c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^for  ( j = j-i; j > 0; j-- )  {^183^^^^^173^190^for  ( j = n-i; j > 0; j-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P8_Replace_Mix]^for  ( j =  null-i; j > 0; j-- )  {^183^^^^^173^190^for  ( j = n-i; j > 0; j-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^coefficients[j] = coefficients[j-1]  >  c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^coefficients[j] - = coefficients[j-1] - c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^coefficients[j] = coefficients[j--6] - c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P8_Replace_Mix]^coefficients[j] = coefficients[j-3] - c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^coefficients[0] = a[i]  ||  c[i] * coefficients[0];^186^^^^^173^190^coefficients[0] = a[i] - c[i] * coefficients[0];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^coefficients[0] / = a[i] - c[i] * coefficients[0];^186^^^^^173^190^coefficients[0] = a[i] - c[i] * coefficients[0];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^coefficients[n] = a[i] - c[i] * coefficients[n];^186^^^^^173^190^coefficients[0] = a[i] - c[i] * coefficients[0];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^coefficients[0] = a[i] - c[i] * out[0];^186^^^^^173^190^coefficients[0] = a[i] - c[i] * coefficients[0];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^coefficients[0] = out[i] - c[i] * coefficients[0];^186^^^^^173^190^coefficients[0] = a[i] - c[i] * coefficients[0];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^coefficients[0] = a[i] - out[i] * coefficients[0];^186^^^^^173^190^coefficients[0] = a[i] - c[i] * coefficients[0];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^coefficients[0] = coefficients[i] - c[i] * a[0];^186^^^^^173^190^coefficients[0] = a[i] - c[i] * coefficients[0];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^coefficients[0] = c[i] - a[i] * coefficients[0];^186^^^^^173^190^coefficients[0] = a[i] - c[i] * coefficients[0];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^coefficients[0] = a[i] - coefficients[i] * c[0];^186^^^^^173^190^coefficients[0] = a[i] - c[i] * coefficients[0];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P8_Replace_Mix]^coefficients[3] = a[i] - c[i] * coefficients[3];^186^^^^^173^190^coefficients[0] = a[i] - c[i] * coefficients[0];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P11_Insert_Donor_Statement]^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];coefficients[0] = a[i] - c[i] * coefficients[0];^186^^^^^173^190^coefficients[0] = a[i] - c[i] * coefficients[0];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^for  ( j = n-i; j < 0; j-- )  {^183^^^^^173^190^for  ( j = n-i; j > 0; j-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^for  ( j = n-i; j > i; j-- )  {^183^^^^^173^190^for  ( j = n-i; j > 0; j-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^for  ( n = n-i; j > 0; j-- )  {^183^^^^^173^190^for  ( j = n-i; j > 0; j-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^for  ( n = j-i; j > 0; j-- )  {^183^^^^^173^190^for  ( j = n-i; j > 0; j-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^coefficients[j] = coefficients[j-1]  ^  c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^coefficients[j] = coefficients[j-1]  <=  c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^coefficients[j] / = coefficients[j-1] - c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^coefficients[j] = coefficients[j-i] - c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P8_Replace_Mix]^coefficients[j] = coefficients[j-1L] - c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^for  ( i = n-3; i >= 0; i-- )  {^182^^^^^173^190^for  ( i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P5_Replace_Variable]^for  ( i = j-1; i >= 0; i-- )  {^182^^^^^173^190^for  ( i = n-1; i >= 0; i-- )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^coefficients[j] = coefficients[j-1]  >>  c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^coefficients[j] = coefficients[j-1]  ||  c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^coefficients[j] = coefficients[j-] - c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P8_Replace_Mix]^coefficients[j] = coefficients[j-1 * 0] - c[i] * coefficients[j];^184^^^^^173^190^coefficients[j] = coefficients[j-1] - c[i] * coefficients[j];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^coefficients[0] = a[i]  ==  c[i] * coefficients[0];^186^^^^^173^190^coefficients[0] = a[i] - c[i] * coefficients[0];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^coefficients[0] + = a[i] - c[i] * coefficients[0];^186^^^^^173^190^coefficients[0] = a[i] - c[i] * coefficients[0];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^coefficients[5] = a[i] - c[i] * coefficients[5];^186^^^^^173^190^coefficients[0] = a[i] - c[i] * coefficients[0];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^coefficients[j] = a[i] - c[i] * coefficients[j];^186^^^^^173^190^coefficients[0] = a[i] - c[i] * coefficients[0];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P8_Replace_Mix]^coefficients[0 << 4] = a[i] - c[i] * coefficients[0 << 4];^186^^^^^173^190^coefficients[0] = a[i] - c[i] * coefficients[0];^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P3_Replace_Literal]^coefficientsComputed = false;^189^^^^^173^190^coefficientsComputed = true;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P11_Insert_Donor_Statement]^coefficients[0] = a[n];coefficientsComputed = true;^189^^^^^173^190^coefficientsComputed = true;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P11_Insert_Donor_Statement]^coefficientsComputed = false;coefficientsComputed = true;^189^^^^^173^190^coefficientsComputed = true;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P11_Insert_Donor_Statement]^coefficients[i] = 0.0;coefficientsComputed = true;^189^^^^^173^190^coefficientsComputed = true;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P12_Insert_Condition]^if  ( !coefficientsComputed )  { coefficientsComputed = true; }^189^^^^^173^190^coefficientsComputed = true;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] computeCoefficients [RETURN_TYPE] void   [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  int  i  j  n  
[P2_Replace_Operator]^if  ( a.length < 1 && c.length < 1 )  {^205^^^^^202^213^if  ( a.length < 1 || c.length < 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P2_Replace_Operator]^if  ( a.length <= 1 || c.length < 1 )  {^205^^^^^202^213^if  ( a.length < 1 || c.length < 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P2_Replace_Operator]^if  ( a.length < 1 || c.length <= 1 )  {^205^^^^^202^213^if  ( a.length < 1 || c.length < 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^if  ( a.length < 0 || c.length < 0 )  {^205^^^^^202^213^if  ( a.length < 1 || c.length < 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^if  ( a.length < -1 || c.length < -1 )  {^205^^^^^202^213^if  ( a.length < 1 || c.length < 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^if  ( out.length < 1 || c.length < 1 )  {^205^^^^^202^213^if  ( a.length < 1 || c.length < 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^if  ( a.length < 1 || out.length < 1 )  {^205^^^^^202^213^if  ( a.length < 1 || c.length < 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^if  ( 2 < 1 || c.length < 1 )  {^205^^^^^202^213^if  ( a.length < 1 || c.length < 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^if  ( c.length < 1 || a.length < 1 )  {^205^^^^^202^213^if  ( a.length < 1 || c.length < 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^if  ( c.length.length < 1 || a < 1 )  {^205^^^^^202^213^if  ( a.length < 1 || c.length < 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P6_Replace_Expression]^if  ( a.length < 1 ) {^205^^^^^202^213^if  ( a.length < 1 || c.length < 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P6_Replace_Expression]^if  (  c.length < 1 )  {^205^^^^^202^213^if  ( a.length < 1 || c.length < 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P8_Replace_Mix]^if  (  c.length < 0  )  {^205^^^^^202^213^if  ( a.length < 1 || c.length < 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P9_Replace_Statement]^if  ( a.length != c.length + 1 )  {^205^^^^^202^213^if  ( a.length < 1 || c.length < 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Input arrays must not be empty.");^205^206^207^208^^202^213^if  ( a.length < 1 || c.length < 1 )  { throw new IllegalArgumentException ( "Input arrays must not be empty." ) ; }^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P16_Remove_Block]^^205^206^207^208^^202^213^if  ( a.length < 1 || c.length < 1 )  { throw new IllegalArgumentException ( "Input arrays must not be empty." ) ; }^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P13_Insert_Block]^if  (  ( a.length )  !=  (  ( c.length )  + 1 )  )  {     throw new IllegalArgumentException ( "Bad input array sizes, should have difference 1." ) ; }^205^^^^^202^213^[Delete]^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Input arrays must not be empty.nput" ) ;^206^207^^^^202^213^throw new IllegalArgumentException ( "Input arrays must not be empty." ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P13_Insert_Block]^if  (  (  ( a.length )  < 1 )  ||  (  ( c.length )  < 1 )  )  {     throw new IllegalArgumentException ( "Input arrays must not be empty." ) ; }^206^^^^^202^213^[Delete]^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Input arrays must not be empty.ut arrays must n" ) ;^206^207^^^^202^213^throw new IllegalArgumentException ( "Input arrays must not be empty." ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "musnput arrays must not be empty." ) ;^206^207^^^^202^213^throw new IllegalArgumentException ( "Input arrays must not be empty." ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "not benput arrays must not be empty." ) ;^206^207^^^^202^213^throw new IllegalArgumentException ( "Input arrays must not be empty." ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P8_Replace_Mix]^return false;^206^207^^^^202^213^throw new IllegalArgumentException ( "Input arrays must not be empty." ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Bad input array sizes, should have difference 1." ) ;throw new IllegalArgumentException ( "Input arrays must not be empty." ) ;^206^207^^^^202^213^throw new IllegalArgumentException ( "Input arrays must not be empty." ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P2_Replace_Operator]^if  ( a.length < c.length + 1 )  {^209^^^^^202^213^if  ( a.length != c.length + 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P2_Replace_Operator]^if  ( a.length != c.length  ^  1 )  {^209^^^^^202^213^if  ( a.length != c.length + 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^if  ( a.length != c.length  )  {^209^^^^^202^213^if  ( a.length != c.length + 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^if  ( out.length != c.length + 1 )  {^209^^^^^202^213^if  ( a.length != c.length + 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^if  ( a.length != out.length + 1 )  {^209^^^^^202^213^if  ( a.length != c.length + 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^if  ( c.length != a.length + 1 )  {^209^^^^^202^213^if  ( a.length != c.length + 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P5_Replace_Variable]^if  ( c != a.length.length + 1 )  {^209^^^^^202^213^if  ( a.length != c.length + 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P6_Replace_Expression]^if  ( c.length + 1 )  {^209^^^^^202^213^if  ( a.length != c.length + 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P8_Replace_Mix]^if  ( out.length != c.length + 0  )  {^209^^^^^202^213^if  ( a.length != c.length + 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P9_Replace_Statement]^if  ( a.length < 1 || c.length < 1 )  {^209^^^^^202^213^if  ( a.length != c.length + 1 )  {^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Bad input array sizes, should have difference 1.");^209^210^211^212^^202^213^if  ( a.length != c.length + 1 )  { throw new IllegalArgumentException ( "Bad input array sizes, should have difference 1." ) ; }^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P16_Remove_Block]^^209^210^211^212^^202^213^if  ( a.length != c.length + 1 )  { throw new IllegalArgumentException ( "Bad input array sizes, should have difference 1." ) ; }^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P13_Insert_Block]^if  (  (  ( a.length )  < 1 )  ||  (  ( c.length )  < 1 )  )  {     throw new IllegalArgumentException ( "Input arrays must not be empty." ) ; }^209^^^^^202^213^[Delete]^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ay sizes, should have diffad input array sizes, should have difference 1." ) ;^210^211^^^^202^213^throw new IllegalArgumentException ( "Bad input array sizes, should have difference 1." ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P13_Insert_Block]^if  (  ( a.length )  !=  (  ( c.length )  + 1 )  )  {     throw new IllegalArgumentException ( "Bad input array sizes, should have difference 1." ) ; }^210^^^^^202^213^[Delete]^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Bad input array sizes, should have difference 1. input array" ) ;^210^211^^^^202^213^throw new IllegalArgumentException ( "Bad input array sizes, should have difference 1." ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Input arrays must not be empty." ) ;throw new IllegalArgumentException ( "Bad input array sizes, should have difference 1." ) ;^210^211^^^^202^213^throw new IllegalArgumentException ( "Bad input array sizes, should have difference 1." ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "array sizes, should have dad input array sizes, should have difference 1." ) ;^210^211^^^^202^213^throw new IllegalArgumentException ( "Bad input array sizes, should have difference 1." ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "y sizes, shouad input array sizes, should have difference 1." ) ;^210^211^^^^202^213^throw new IllegalArgumentException ( "Bad input array sizes, should have difference 1." ) ;^[CLASS] PolynomialFunctionNewtonForm  [METHOD] verifyInputArray [RETURN_TYPE] void   double[] a double[] c [VARIABLES] boolean  coefficientsComputed  double[]  a  c  coefficients  out  long  serialVersionUID  
