[P1_Replace_Type]^private static final  short  serialVersionUID = -8352658048349159782L;^32^^^^^27^37^private static final long serialVersionUID = -8352658048349159782L;^[CLASS] ChiSquaredDistributionImpl   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = -8352658048349159782;^32^^^^^27^37^private static final long serialVersionUID = -8352658048349159782L;^[CLASS] ChiSquaredDistributionImpl   [VARIABLES] 
[P14_Delete_Statement]^^42^^^^^41^45^super (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] <init> [RETURN_TYPE] ChiSquaredDistributionImpl(double)   double degreesOfFreedom [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  degreesOfFreedom  
[P2_Replace_Operator]^setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom + 2.0, 2.0 )  ) ;^43^44^^^^41^45^setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom / 2.0, 2.0 )  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] <init> [RETURN_TYPE] ChiSquaredDistributionImpl(double)   double degreesOfFreedom [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  degreesOfFreedom  
[P3_Replace_Literal]^setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom / 0.2857142857142857, 0.2857142857142857 )  ) ;^43^44^^^^41^45^setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom / 2.0, 2.0 )  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] <init> [RETURN_TYPE] ChiSquaredDistributionImpl(double)   double degreesOfFreedom [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  degreesOfFreedom  
[P3_Replace_Literal]^setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom / 0.5, 0.5 )  ) ;^43^44^^^^41^45^setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom / 2.0, 2.0 )  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] <init> [RETURN_TYPE] ChiSquaredDistributionImpl(double)   double degreesOfFreedom [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  degreesOfFreedom  
[P14_Delete_Statement]^^43^44^^^^41^45^setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom / 2.0, 2.0 )  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] <init> [RETURN_TYPE] ChiSquaredDistributionImpl(double)   double degreesOfFreedom [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  degreesOfFreedom  
[P2_Replace_Operator]^setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom * 2.0, 2.0 )  ) ;^43^44^^^^41^45^setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom / 2.0, 2.0 )  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] <init> [RETURN_TYPE] ChiSquaredDistributionImpl(double)   double degreesOfFreedom [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  degreesOfFreedom  
[P3_Replace_Literal]^setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom / 12.0, 12.0 )  ) ;^43^44^^^^41^45^setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom / 2.0, 2.0 )  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] <init> [RETURN_TYPE] ChiSquaredDistributionImpl(double)   double degreesOfFreedom [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  degreesOfFreedom  
[P3_Replace_Literal]^setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom / 6.0, 6.0 )  ) ;^43^44^^^^41^45^setGamma ( DistributionFactory.newInstance (  ) .createGammaDistribution ( degreesOfFreedom / 2.0, 2.0 )  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] <init> [RETURN_TYPE] ChiSquaredDistributionImpl(double)   double degreesOfFreedom [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  degreesOfFreedom  
[P2_Replace_Operator]^getGamma (  ) .setAlpha ( degreesOfFreedom * 2.0 ) ;^52^^^^^51^53^getGamma (  ) .setAlpha ( degreesOfFreedom / 2.0 ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] setDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  degreesOfFreedom  
[P3_Replace_Literal]^getGamma (  ) .setAlpha ( degreesOfFreedom / 16.0 ) ;^52^^^^^51^53^getGamma (  ) .setAlpha ( degreesOfFreedom / 2.0 ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] setDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  degreesOfFreedom  
[P7_Replace_Invocation]^getDegreesOfFreedom (  ) .setAlpha ( degreesOfFreedom / 2.0 ) ;^52^^^^^51^53^getGamma (  ) .setAlpha ( degreesOfFreedom / 2.0 ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] setDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  degreesOfFreedom  
[P14_Delete_Statement]^^52^^^^^51^53^getGamma (  ) .setAlpha ( degreesOfFreedom / 2.0 ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] setDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  degreesOfFreedom  
[P11_Insert_Donor_Statement]^ret = getDegreesOfFreedom (  ) ;getGamma (  ) .setAlpha ( degreesOfFreedom / 2.0 ) ;^52^^^^^51^53^getGamma (  ) .setAlpha ( degreesOfFreedom / 2.0 ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] setDegreesOfFreedom [RETURN_TYPE] void   double degreesOfFreedom [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  degreesOfFreedom  
[P2_Replace_Operator]^return / getGamma (  ) .getAlpha (  )  * 2.0;^60^^^^^59^61^return getGamma (  ) .getAlpha (  )  * 2.0;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDegreesOfFreedom [RETURN_TYPE] double   [VARIABLES] long  serialVersionUID  GammaDistribution  gamma  boolean  
[P3_Replace_Literal]^return getGamma (  ) .getAlpha (  )  * 6.0;^60^^^^^59^61^return getGamma (  ) .getAlpha (  )  * 2.0;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDegreesOfFreedom [RETURN_TYPE] double   [VARIABLES] long  serialVersionUID  GammaDistribution  gamma  boolean  
[P7_Replace_Invocation]^return getGamma (  ) .getBeta (  )  * 2.0;^60^^^^^59^61^return getGamma (  ) .getAlpha (  )  * 2.0;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDegreesOfFreedom [RETURN_TYPE] double   [VARIABLES] long  serialVersionUID  GammaDistribution  gamma  boolean  
[P7_Replace_Invocation]^return getDegreesOfFreedom (  ) .getAlpha (  )  * 2.0;^60^^^^^59^61^return getGamma (  ) .getAlpha (  )  * 2.0;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDegreesOfFreedom [RETURN_TYPE] double   [VARIABLES] long  serialVersionUID  GammaDistribution  gamma  boolean  
[P8_Replace_Mix]^return getDegreesOfFreedom (  ) .getAlpha (  )  * 0.0d;^60^^^^^59^61^return getGamma (  ) .getAlpha (  )  * 2.0;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDegreesOfFreedom [RETURN_TYPE] double   [VARIABLES] long  serialVersionUID  GammaDistribution  gamma  boolean  
[P14_Delete_Statement]^^60^^^^^59^61^return getGamma (  ) .getAlpha (  )  * 2.0;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDegreesOfFreedom [RETURN_TYPE] double   [VARIABLES] long  serialVersionUID  GammaDistribution  gamma  boolean  
[P7_Replace_Invocation]^return getGamma (  ) .setAlpha ( x ) ;^71^^^^^70^72^return getGamma (  ) .cumulativeProbability ( x ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  x  
[P7_Replace_Invocation]^return getDegreesOfFreedom (  ) .cumulativeProbability ( x ) ;^71^^^^^70^72^return getGamma (  ) .cumulativeProbability ( x ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  x  
[P14_Delete_Statement]^^71^^^^^70^72^return getGamma (  ) .cumulativeProbability ( x ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] cumulativeProbability [RETURN_TYPE] double   double x [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  x  
[P2_Replace_Operator]^if  ( p != 0 )  {^89^^^^^87^96^if  ( p == 0 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P3_Replace_Literal]^if  ( p == 3 )  {^89^^^^^87^96^if  ( p == 0 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P8_Replace_Mix]^if  ( p == 2 )  {^89^^^^^87^96^if  ( p == 0 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P9_Replace_Statement]^if  ( p == 1 )  {^89^^^^^87^96^if  ( p == 0 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P9_Replace_Statement]^if  ( p < .5 )  {^89^^^^^87^96^if  ( p == 0 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P15_Unwrap_Block]^return 0.0;^89^90^91^^^87^96^if  ( p == 0 )  { return 0d; }^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P16_Remove_Block]^^89^90^91^^^87^96^if  ( p == 0 )  { return 0d; }^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P2_Replace_Operator]^if  ( p != 1 )  {^92^^^^^87^96^if  ( p == 1 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P3_Replace_Literal]^if  ( p == -1 )  {^92^^^^^87^96^if  ( p == 1 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P8_Replace_Mix]^if  ( p == 1 >>> 0 )  {^92^^^^^87^96^if  ( p == 1 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P9_Replace_Statement]^if  ( p < .5 )  {^92^^^^^87^96^if  ( p == 1 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P9_Replace_Statement]^if  ( p == 0 )  {^92^^^^^87^96^if  ( p == 1 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P15_Unwrap_Block]^return java.lang.Double.POSITIVE_INFINITY;^92^93^94^^^87^96^if  ( p == 1 )  { return Double.POSITIVE_INFINITY; }^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P16_Remove_Block]^^92^93^94^^^87^96^if  ( p == 1 )  { return Double.POSITIVE_INFINITY; }^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P13_Insert_Block]^if  ( p == 1 )  {     return POSITIVE_INFINITY; }^93^^^^^87^96^[Delete]^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P7_Replace_Invocation]^return super .cumulativeProbability ( p )  ;^95^^^^^87^96^return super.inverseCumulativeProbability ( p ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P14_Delete_Statement]^^95^^^^^87^96^return super.inverseCumulativeProbability ( p ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] inverseCumulativeProbability [RETURN_TYPE] double   final double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P2_Replace_Operator]^return / Double.MIN_VALUE * getGamma (  ) .getBeta (  ) ;^108^^^^^107^109^return Double.MIN_VALUE * getGamma (  ) .getBeta (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P5_Replace_Variable]^return Double.p * getGamma (  ) .getBeta (  ) ;^108^^^^^107^109^return Double.MIN_VALUE * getGamma (  ) .getBeta (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P7_Replace_Invocation]^return Double.MIN_VALUE * getGamma (  ) .getAlpha (  ) ;^108^^^^^107^109^return Double.MIN_VALUE * getGamma (  ) .getBeta (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P7_Replace_Invocation]^return Double.MIN_VALUE * getDegreesOfFreedom (  ) .getBeta (  ) ;^108^^^^^107^109^return Double.MIN_VALUE * getGamma (  ) .getBeta (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P14_Delete_Statement]^^108^^^^^107^109^return Double.MIN_VALUE * getGamma (  ) .getBeta (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainLowerBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  
[P1_Replace_Type]^float ret;^124^^^^^120^135^double ret;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P2_Replace_Operator]^if  ( p <= .5 )  {^126^^^^^120^135^if  ( p < .5 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P5_Replace_Variable]^if  ( ret < .5 )  {^126^^^^^120^135^if  ( p < .5 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P9_Replace_Statement]^if  ( p == 1 )  {^126^^^^^120^135^if  ( p < .5 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P9_Replace_Statement]^if  ( p == 0 )  {^126^^^^^120^135^if  ( p < .5 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P8_Replace_Mix]^ret  =  ret ;^131^^^^^120^135^ret = Double.MAX_VALUE;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P7_Replace_Invocation]^ret = getGamma (  ) ;^128^^^^^120^135^ret = getDegreesOfFreedom (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P8_Replace_Mix]^ret  = null ;^128^^^^^120^135^ret = getDegreesOfFreedom (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P11_Insert_Donor_Statement]^ret = getDegreesOfFreedom (  )  * .5;ret = getDegreesOfFreedom (  ) ;^128^^^^^120^135^ret = getDegreesOfFreedom (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P14_Delete_Statement]^^128^^^^^120^135^ret = getDegreesOfFreedom (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P11_Insert_Donor_Statement]^getGamma (  ) .setAlpha ( degreesOfFreedom / 2.0 ) ;ret = getDegreesOfFreedom (  ) ;^128^^^^^120^135^ret = getDegreesOfFreedom (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P8_Replace_Mix]^ret  =  ret ;^128^^^^^120^135^ret = getDegreesOfFreedom (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P5_Replace_Variable]^return p;^134^^^^^120^135^return ret;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getDomainUpperBound [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P1_Replace_Type]^int ret;^149^^^^^145^160^double ret;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P2_Replace_Operator]^if  ( p <= .5 )  {^151^^^^^145^160^if  ( p < .5 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P5_Replace_Variable]^if  ( ret < .5 )  {^151^^^^^145^160^if  ( p < .5 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P6_Replace_Expression]^if  ( getDegreesOfFreedom() * 0.5 )  {^151^^^^^145^160^if  ( p < .5 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P9_Replace_Statement]^if  ( p == 1 )  {^151^^^^^145^160^if  ( p < .5 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P9_Replace_Statement]^if  ( p == 0 )  {^151^^^^^145^160^if  ( p < .5 )  {^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P7_Replace_Invocation]^ret = getGamma (  ) ;^156^^^^^145^160^ret = getDegreesOfFreedom (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P8_Replace_Mix]^ret  =  ret ;^156^^^^^145^160^ret = getDegreesOfFreedom (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P11_Insert_Donor_Statement]^ret = getDegreesOfFreedom (  )  * .5;ret = getDegreesOfFreedom (  ) ;^156^^^^^145^160^ret = getDegreesOfFreedom (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P14_Delete_Statement]^^156^^^^^145^160^ret = getDegreesOfFreedom (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P11_Insert_Donor_Statement]^getGamma (  ) .setAlpha ( degreesOfFreedom / 2.0 ) ;ret = getDegreesOfFreedom (  ) ;^156^^^^^145^160^ret = getDegreesOfFreedom (  ) ;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P2_Replace_Operator]^ret / = getDegreesOfFreedom (  )  * .5;^153^^^^^145^160^ret = getDegreesOfFreedom (  )  * .5;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P3_Replace_Literal]^ret = getegreesOfFreedom (  )  * .5;^153^^^^^145^160^ret = getDegreesOfFreedom (  )  * .5;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P7_Replace_Invocation]^ret = getGamma (  )  * .5;^153^^^^^145^160^ret = getDegreesOfFreedom (  )  * .5;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P8_Replace_Mix]^ret ;^153^^^^^145^160^ret = getDegreesOfFreedom (  )  * .5;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P11_Insert_Donor_Statement]^ret = getDegreesOfFreedom (  ) ;ret = getDegreesOfFreedom (  )  * .5;^153^^^^^145^160^ret = getDegreesOfFreedom (  )  * .5;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P14_Delete_Statement]^^153^^^^^145^160^ret = getDegreesOfFreedom (  )  * .5;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P2_Replace_Operator]^ret + = getDegreesOfFreedom (  )  * .5;^153^^^^^145^160^ret = getDegreesOfFreedom (  )  * .5;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P8_Replace_Mix]^ret  =  ret ;^153^^^^^145^160^ret = getDegreesOfFreedom (  )  * .5;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P5_Replace_Variable]^return p;^159^^^^^145^160^return ret;^[CLASS] ChiSquaredDistributionImpl  [METHOD] getInitialDomain [RETURN_TYPE] double   double p [VARIABLES] boolean  long  serialVersionUID  GammaDistribution  gamma  double  p  ret  
[P8_Replace_Mix]^this.gamma =  null;^167^^^^^166^168^this.gamma = gamma;^[CLASS] ChiSquaredDistributionImpl  [METHOD] setGamma [RETURN_TYPE] void   GammaDistribution gamma [VARIABLES] long  serialVersionUID  GammaDistribution  gamma  boolean  
