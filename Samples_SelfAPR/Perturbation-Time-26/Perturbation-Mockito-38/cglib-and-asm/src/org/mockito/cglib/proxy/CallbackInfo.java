[P8_Replace_Mix]^private static final CallbackInfo[] CALLBACKS ;^52^^^^^52^60^private static final CallbackInfo[] CALLBACKS = {^[CLASS] CallbackInfo   [VARIABLES] 
[P8_Replace_Mix]^this.cls =  null;^63^^^^^62^66^this.cls = cls;^[CLASS] CallbackInfo  [METHOD] <init> [RETURN_TYPE] CallbackGenerator)   Class cls CallbackGenerator generator [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  boolean  CallbackInfo[]  CALLBACKS  
[P8_Replace_Mix]^this.generator =  null;^64^^^^^62^66^this.generator = generator;^[CLASS] CallbackInfo  [METHOD] <init> [RETURN_TYPE] CallbackGenerator)   Class cls CallbackGenerator generator [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  boolean  CallbackInfo[]  CALLBACKS  
[P7_Replace_Invocation]^type = Type.equals ( cls ) ;^65^^^^^62^66^type = Type.getType ( cls ) ;^[CLASS] CallbackInfo  [METHOD] <init> [RETURN_TYPE] CallbackGenerator)   Class cls CallbackGenerator generator [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  boolean  CallbackInfo[]  CALLBACKS  
[P8_Replace_Mix]^type =  Type.getType ( null ) ;^65^^^^^62^66^type = Type.getType ( cls ) ;^[CLASS] CallbackInfo  [METHOD] <init> [RETURN_TYPE] CallbackGenerator)   Class cls CallbackGenerator generator [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  boolean  CallbackInfo[]  CALLBACKS  
[P11_Insert_Donor_Statement]^types[i] = determineType ( callbacks[i] ) ;type = Type.getType ( cls ) ;^65^^^^^62^66^type = Type.getType ( cls ) ;^[CLASS] CallbackInfo  [METHOD] <init> [RETURN_TYPE] CallbackGenerator)   Class cls CallbackGenerator generator [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  boolean  CallbackInfo[]  CALLBACKS  
[P7_Replace_Invocation]^type = Type .equals ( type )  ;^65^^^^^62^66^type = Type.getType ( cls ) ;^[CLASS] CallbackInfo  [METHOD] <init> [RETURN_TYPE] CallbackGenerator)   Class cls CallbackGenerator generator [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  boolean  CallbackInfo[]  CALLBACKS  
[P14_Delete_Statement]^^65^^^^^62^66^type = Type.getType ( cls ) ;^[CLASS] CallbackInfo  [METHOD] <init> [RETURN_TYPE] CallbackGenerator)   Class cls CallbackGenerator generator [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  boolean  CallbackInfo[]  CALLBACKS  
[P11_Insert_Donor_Statement]^return Type.getType ( cur ) ;type = Type.getType ( cls ) ;^65^^^^^62^66^type = Type.getType ( cls ) ;^[CLASS] CallbackInfo  [METHOD] <init> [RETURN_TYPE] CallbackGenerator)   Class cls CallbackGenerator generator [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  boolean  CallbackInfo[]  CALLBACKS  
[P11_Insert_Donor_Statement]^Type[] types = new Type[callbacks.length];Type[] types = new Type[callbackTypes.length];^23^^^^^22^28^Type[] types = new Type[callbackTypes.length];^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Class[] callbackTypes [VARIABLES] Type  type  Class[]  callbackTypes  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < types.length; i++ )  {^24^^^^^22^28^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Class[] callbackTypes [VARIABLES] Type  type  Class[]  callbackTypes  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i > types.length; i++ )  {^24^^^^^22^28^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Class[] callbackTypes [VARIABLES] Type  type  Class[]  callbackTypes  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < types.length; i++ )  {^24^^^^^22^28^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Class[] callbackTypes [VARIABLES] Type  type  Class[]  callbackTypes  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P7_Replace_Invocation]^types[i] = CallbackInfo ( callbackTypes[i] ) ;^25^^^^^22^28^types[i] = determineType ( callbackTypes[i] ) ;^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Class[] callbackTypes [VARIABLES] Type  type  Class[]  callbackTypes  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P8_Replace_Mix]^types[i]  = null ;^25^^^^^22^28^types[i] = determineType ( callbackTypes[i] ) ;^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Class[] callbackTypes [VARIABLES] Type  type  Class[]  callbackTypes  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P11_Insert_Donor_Statement]^generators[i] = getGenerator ( callbackTypes[i] ) ;types[i] = determineType ( callbackTypes[i] ) ;^25^^^^^22^28^types[i] = determineType ( callbackTypes[i] ) ;^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Class[] callbackTypes [VARIABLES] Type  type  Class[]  callbackTypes  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P11_Insert_Donor_Statement]^types[i] = determineType ( callbacks[i] ) ;types[i] = determineType ( callbackTypes[i] ) ;^25^^^^^22^28^types[i] = determineType ( callbackTypes[i] ) ;^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Class[] callbackTypes [VARIABLES] Type  type  Class[]  callbackTypes  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P14_Delete_Statement]^^25^^^^^22^28^types[i] = determineType ( callbackTypes[i] ) ;^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Class[] callbackTypes [VARIABLES] Type  type  Class[]  callbackTypes  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P11_Insert_Donor_Statement]^return determineType ( callback.getClass (  )  ) ;types[i] = determineType ( callbackTypes[i] ) ;^25^^^^^22^28^types[i] = determineType ( callbackTypes[i] ) ;^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Class[] callbackTypes [VARIABLES] Type  type  Class[]  callbackTypes  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P8_Replace_Mix]^types[i] ;^25^^^^^22^28^types[i] = determineType ( callbackTypes[i] ) ;^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Class[] callbackTypes [VARIABLES] Type  type  Class[]  callbackTypes  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P3_Replace_Literal]^for  ( int i = -8; i < types.length; i++ )  {^24^^^^^22^28^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Class[] callbackTypes [VARIABLES] Type  type  Class[]  callbackTypes  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P11_Insert_Donor_Statement]^Type[] types = new Type[callbackTypes.length];Type[] types = new Type[callbacks.length];^31^^^^^30^36^Type[] types = new Type[callbacks.length];^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Callback[] callbacks [VARIABLES] Callback[]  callbacks  Type  type  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < types.length; i++ )  {^32^^^^^30^36^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Callback[] callbacks [VARIABLES] Callback[]  callbacks  Type  type  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= types.length; i++ )  {^32^^^^^30^36^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Callback[] callbacks [VARIABLES] Callback[]  callbacks  Type  type  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < types.length; i++ )  {^32^^^^^30^36^for  ( int i = 0; i < types.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Callback[] callbacks [VARIABLES] Callback[]  callbacks  Type  type  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P7_Replace_Invocation]^types[i] = CallbackInfo ( callbacks[i] ) ;^33^^^^^30^36^types[i] = determineType ( callbacks[i] ) ;^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Callback[] callbacks [VARIABLES] Callback[]  callbacks  Type  type  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P8_Replace_Mix]^types[i]  =  types[i] ;^33^^^^^30^36^types[i] = determineType ( callbacks[i] ) ;^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Callback[] callbacks [VARIABLES] Callback[]  callbacks  Type  type  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P11_Insert_Donor_Statement]^generators[i] = getGenerator ( callbackTypes[i] ) ;types[i] = determineType ( callbacks[i] ) ;^33^^^^^30^36^types[i] = determineType ( callbacks[i] ) ;^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Callback[] callbacks [VARIABLES] Callback[]  callbacks  Type  type  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P11_Insert_Donor_Statement]^types[i] = determineType ( callbackTypes[i] ) ;types[i] = determineType ( callbacks[i] ) ;^33^^^^^30^36^types[i] = determineType ( callbacks[i] ) ;^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Callback[] callbacks [VARIABLES] Callback[]  callbacks  Type  type  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P11_Insert_Donor_Statement]^type = Type.getType ( cls ) ;types[i] = determineType ( callbacks[i] ) ;^33^^^^^30^36^types[i] = determineType ( callbacks[i] ) ;^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Callback[] callbacks [VARIABLES] Callback[]  callbacks  Type  type  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P14_Delete_Statement]^^33^^^^^30^36^types[i] = determineType ( callbacks[i] ) ;^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Callback[] callbacks [VARIABLES] Callback[]  callbacks  Type  type  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P11_Insert_Donor_Statement]^return determineType ( callback.getClass (  )  ) ;types[i] = determineType ( callbacks[i] ) ;^33^^^^^30^36^types[i] = determineType ( callbacks[i] ) ;^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Callback[] callbacks [VARIABLES] Callback[]  callbacks  Type  type  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P8_Replace_Mix]^types[i] ;^33^^^^^30^36^types[i] = determineType ( callbacks[i] ) ;^[CLASS] CallbackInfo  [METHOD] determineTypes [RETURN_TYPE] Type[]   Callback[] callbacks [VARIABLES] Callback[]  callbacks  Type  type  boolean  Type[]  types  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < generators.length; i++ )  {^40^^^^^38^44^for  ( int i = 0; i < generators.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] getGenerators [RETURN_TYPE] CallbackGenerator[]   Type[] callbackTypes [VARIABLES] Type  type  boolean  Type[]  callbackTypes  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  CallbackGenerator[]  generators  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= generators.length; i++ )  {^40^^^^^38^44^for  ( int i = 0; i < generators.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] getGenerators [RETURN_TYPE] CallbackGenerator[]   Type[] callbackTypes [VARIABLES] Type  type  boolean  Type[]  callbackTypes  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  CallbackGenerator[]  generators  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < generators.length; i++ )  {^40^^^^^38^44^for  ( int i = 0; i < generators.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] getGenerators [RETURN_TYPE] CallbackGenerator[]   Type[] callbackTypes [VARIABLES] Type  type  boolean  Type[]  callbackTypes  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  CallbackGenerator[]  generators  int  i  
[P7_Replace_Invocation]^generators[i] = CallbackInfo ( callbackTypes[i] ) ;^41^^^^^38^44^generators[i] = getGenerator ( callbackTypes[i] ) ;^[CLASS] CallbackInfo  [METHOD] getGenerators [RETURN_TYPE] CallbackGenerator[]   Type[] callbackTypes [VARIABLES] Type  type  boolean  Type[]  callbackTypes  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  CallbackGenerator[]  generators  int  i  
[P8_Replace_Mix]^generators[i]  =  generators[i] ;^41^^^^^38^44^generators[i] = getGenerator ( callbackTypes[i] ) ;^[CLASS] CallbackInfo  [METHOD] getGenerators [RETURN_TYPE] CallbackGenerator[]   Type[] callbackTypes [VARIABLES] Type  type  boolean  Type[]  callbackTypes  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  CallbackGenerator[]  generators  int  i  
[P11_Insert_Donor_Statement]^types[i] = determineType ( callbackTypes[i] ) ;generators[i] = getGenerator ( callbackTypes[i] ) ;^41^^^^^38^44^generators[i] = getGenerator ( callbackTypes[i] ) ;^[CLASS] CallbackInfo  [METHOD] getGenerators [RETURN_TYPE] CallbackGenerator[]   Type[] callbackTypes [VARIABLES] Type  type  boolean  Type[]  callbackTypes  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  CallbackGenerator[]  generators  int  i  
[P11_Insert_Donor_Statement]^types[i] = determineType ( callbacks[i] ) ;generators[i] = getGenerator ( callbackTypes[i] ) ;^41^^^^^38^44^generators[i] = getGenerator ( callbackTypes[i] ) ;^[CLASS] CallbackInfo  [METHOD] getGenerators [RETURN_TYPE] CallbackGenerator[]   Type[] callbackTypes [VARIABLES] Type  type  boolean  Type[]  callbackTypes  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  CallbackGenerator[]  generators  int  i  
[P14_Delete_Statement]^^41^^^^^38^44^generators[i] = getGenerator ( callbackTypes[i] ) ;^[CLASS] CallbackInfo  [METHOD] getGenerators [RETURN_TYPE] CallbackGenerator[]   Type[] callbackTypes [VARIABLES] Type  type  boolean  Type[]  callbackTypes  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  CallbackGenerator[]  generators  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < generators.length; i++ )  {^40^^^^^38^44^for  ( int i = 0; i < generators.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] getGenerators [RETURN_TYPE] CallbackGenerator[]   Type[] callbackTypes [VARIABLES] Type  type  boolean  Type[]  callbackTypes  Class  cls  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  CallbackGenerator[]  generators  int  i  
[P2_Replace_Operator]^if  ( callback != null )  {^69^^^^^68^73^if  ( callback == null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Callback callback [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  Callback  callback  boolean  CallbackInfo[]  CALLBACKS  
[P8_Replace_Mix]^if  ( callback == true )  {^69^^^^^68^73^if  ( callback == null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Callback callback [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  Callback  callback  boolean  CallbackInfo[]  CALLBACKS  
[P9_Replace_Statement]^if  ( cur == null )  {^69^^^^^68^73^if  ( callback == null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Callback callback [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  Callback  callback  boolean  CallbackInfo[]  CALLBACKS  
[P9_Replace_Statement]^if  ( cur != null )  {^69^^^^^68^73^if  ( callback == null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Callback callback [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  Callback  callback  boolean  CallbackInfo[]  CALLBACKS  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException("Callback is null");^69^70^71^^^68^73^if  ( callback == null )  { throw new IllegalStateException  (" ")  ; }^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Callback callback [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  Callback  callback  boolean  CallbackInfo[]  CALLBACKS  
[P16_Remove_Block]^^69^70^71^^^68^73^if  ( callback == null )  { throw new IllegalStateException  (" ")  ; }^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Callback callback [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  Callback  callback  boolean  CallbackInfo[]  CALLBACKS  
[P13_Insert_Block]^if  ( cur == null )  {     throw new IllegalStateException (  ( "Unknown callback type " + callbackType )  ) ; }^69^^^^^68^73^[Delete]^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Callback callback [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  Callback  callback  boolean  CallbackInfo[]  CALLBACKS  
[P13_Insert_Block]^if  ( cur != null )  {     throw new IllegalStateException (  (  (  ( "Callback implements both " + cur )  + " and " )  +  ( info.cls )  )  ) ; }^69^^^^^68^73^[Delete]^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Callback callback [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  Callback  callback  boolean  CallbackInfo[]  CALLBACKS  
[P13_Insert_Block]^if  ( callback == null )  {     throw new IllegalStateException ( "Callback is null" ) ; }^70^^^^^68^73^[Delete]^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Callback callback [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  Callback  callback  boolean  CallbackInfo[]  CALLBACKS  
[P8_Replace_Mix]^return ;^70^^^^^68^73^throw new IllegalStateException  (" ")  ;^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Callback callback [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  Callback  callback  boolean  CallbackInfo[]  CALLBACKS  
[P13_Insert_Block]^if  ( cur == null )  {     throw new IllegalStateException (  ( "Unknown callback type " + callbackType )  ) ; }^70^^^^^68^73^[Delete]^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Callback callback [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  Callback  callback  boolean  CallbackInfo[]  CALLBACKS  
[P8_Replace_Mix]^return 0;^70^^^^^68^73^throw new IllegalStateException  (" ")  ;^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Callback callback [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  Callback  callback  boolean  CallbackInfo[]  CALLBACKS  
[P7_Replace_Invocation]^return determineTypes ( callback.getClass (  )  ) ;^72^^^^^68^73^return determineType ( callback.getClass (  )  ) ;^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Callback callback [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  Callback  callback  boolean  CallbackInfo[]  CALLBACKS  
[P14_Delete_Statement]^^72^^^^^68^73^return determineType ( callback.getClass (  )  ) ;^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Callback callback [VARIABLES] Type  type  Class  cls  CallbackGenerator  generator  Callback  callback  boolean  CallbackInfo[]  CALLBACKS  
[P5_Replace_Variable]^if  ( info.cls.isAssignableFrom ( cur )  )  {^79^^^^^75^90^if  ( info.cls.isAssignableFrom ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^if  ( cur.isAssignableFrom ( callbackType )  )  {^79^^^^^75^90^if  ( info.cls.isAssignableFrom ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^if  ( callbackType.cls.isAssignableFrom ( info )  )  {^79^^^^^75^90^if  ( info.cls.isAssignableFrom ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^if  ( callbackType.isAssignableFrom ( info.cls )  )  {^79^^^^^75^90^if  ( info.cls.isAssignableFrom ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P6_Replace_Expression]^if  (  ( "Callback implements both " + cur )  + " and " + info.cls )  {^79^^^^^75^90^if  ( info.cls.isAssignableFrom ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P6_Replace_Expression]^if  ( "Callback implements both " + cur + " and " )  {^79^^^^^75^90^if  ( info.cls.isAssignableFrom ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P6_Replace_Expression]^if  ( "Callback implements both " + cur )  {^79^^^^^75^90^if  ( info.cls.isAssignableFrom ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P9_Replace_Statement]^if  ( info.type.equals ( callbackType )  )  {^79^^^^^75^90^if  ( info.cls.isAssignableFrom ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P15_Unwrap_Block]^if (cur != null) {    throw new java.lang.IllegalStateException(((("Callback implements both " + cur) + " and ") + (info.cls)));}; cur = info.cls;^79^80^81^82^^75^90^if  ( info.cls.isAssignableFrom ( callbackType )  )  { if  ( cur != null )  { throw new IllegalStateException  (" ")  ; }^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P16_Remove_Block]^^79^80^81^82^^75^90^if  ( info.cls.isAssignableFrom ( callbackType )  )  { if  ( cur != null )  { throw new IllegalStateException  (" ")  ; }^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P13_Insert_Block]^if  ( cur != null )  {     throw new IllegalStateException (  (  (  ( "Callback implements both " + cur )  + " and " )  +  ( info.cls )  )  ) ; }^79^^^^^75^90^[Delete]^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P2_Replace_Operator]^if  ( cur == null )  {^80^^^^^75^90^if  ( cur != null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^if  ( cls != null )  {^80^^^^^75^90^if  ( cur != null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P6_Replace_Expression]^if  (  ( "Callback implements both " + cur )  + " and " + info.cls )  {^80^^^^^75^90^if  ( cur != null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P6_Replace_Expression]^if  ( "Callback implements both " + cur + " and " )  {^80^^^^^75^90^if  ( cur != null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P6_Replace_Expression]^if  ( "Callback implements both " + cur )  {^80^^^^^75^90^if  ( cur != null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P8_Replace_Mix]^if  ( cur != false )  {^80^^^^^75^90^if  ( cur != null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P9_Replace_Statement]^if  ( callback == null )  {^80^^^^^75^90^if  ( cur != null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException(((("Callback implements both " + cur) + " and ") + (info.cls)));^80^81^82^^^75^90^if  ( cur != null )  { throw new IllegalStateException  (" ")  ; }^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P16_Remove_Block]^^80^81^82^^^75^90^if  ( cur != null )  { throw new IllegalStateException  (" ")  ; }^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P13_Insert_Block]^if  ( isAssignableFrom ( callbackType )  )  {     if  ( cur != null )  {         throw new IllegalStateException (  (  (  ( "Callback implements both " + cur )  + " and " )  +  ( info.cls )  )  ) ;     }     cur = info.cls; }^80^^^^^75^90^[Delete]^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P13_Insert_Block]^if  ( cur == null )  {     throw new IllegalStateException (  ( "Unknown callback type " + callbackType )  ) ; }^80^^^^^75^90^[Delete]^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P13_Insert_Block]^if  ( callback == null )  {     throw new IllegalStateException ( "Callback is null" ) ; }^80^^^^^75^90^[Delete]^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P13_Insert_Block]^if  ( cur != null )  {     throw new IllegalStateException (  (  (  ( "Callback implements both " + cur )  + " and " )  +  ( info.cls )  )  ) ; }^81^^^^^75^90^[Delete]^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P8_Replace_Mix]^return ;^81^^^^^75^90^throw new IllegalStateException  (" ")  ;^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^cur = cls;^83^^^^^75^90^cur = info.cls;^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^cur = info.cls.cls;^83^^^^^75^90^cur = info.cls;^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^cur = info;^83^^^^^75^90^cur = info.cls;^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P8_Replace_Mix]^cur =  null.cls;^83^^^^^75^90^cur = info.cls;^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P8_Replace_Mix]^if  ( cls != true )  {^80^^^^^75^90^if  ( cur != null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < CALLBACKS.length; i++ )  {^77^^^^^75^90^for  ( int i = 0; i < CALLBACKS.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i == CALLBACKS.length; i++ )  {^77^^^^^75^90^for  ( int i = 0; i < CALLBACKS.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P2_Replace_Operator]^for  <  ( int i = 0; i < CALLBACKS.length; i++ )  {^77^^^^^75^90^for  ( int i = 0; i < CALLBACKS.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P2_Replace_Operator]^for  &&  ( int i = 0; i < CALLBACKS.length; i++ )  {^77^^^^^75^90^for  ( int i = 0; i < CALLBACKS.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P2_Replace_Operator]^for  <=  ( int i = 0; i < CALLBACKS.length; i++ )  {^77^^^^^75^90^for  ( int i = 0; i < CALLBACKS.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < CALLBACKS.length; i++ )  {^77^^^^^75^90^for  ( int i = 0; i < CALLBACKS.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P8_Replace_Mix]^if  ( info.cls.isAssignableFrom ( cls )  )  {^79^^^^^75^90^if  ( info.cls.isAssignableFrom ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P8_Replace_Mix]^if  ( cur != this )  {^80^^^^^75^90^if  ( cur != null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^cur = cur;^83^^^^^75^90^cur = info.cls;^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P8_Replace_Mix]^if  ( cur != true )  {^80^^^^^75^90^if  ( cur != null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^CallbackInfo CALLBACKSnfo = i[i];^78^^^^^75^90^CallbackInfo info = CALLBACKS[i];^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^if  ( info.cls.cls.isAssignableFrom ( callbackType )  )  {^79^^^^^75^90^if  ( info.cls.isAssignableFrom ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P3_Replace_Literal]^for  ( int i = -3; i < CALLBACKS.length; i++ )  {^77^^^^^75^90^for  ( int i = 0; i < CALLBACKS.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^if  ( info.isAssignableFrom ( callbackType )  )  {^79^^^^^75^90^if  ( info.cls.isAssignableFrom ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P2_Replace_Operator]^if  ( cur != null )  {^86^^^^^75^90^if  ( cur == null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P6_Replace_Expression]^if  ( "Unknown callback type " + callbackType )  {^86^^^^^75^90^if  ( cur == null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P8_Replace_Mix]^if  ( cur == this )  {^86^^^^^75^90^if  ( cur == null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P9_Replace_Statement]^if  ( callback == null )  {^86^^^^^75^90^if  ( cur == null )  {^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException(("Unknown callback type " + callbackType));^86^87^88^^^75^90^if  ( cur == null )  { throw new IllegalStateException  (" ")  ; }^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P16_Remove_Block]^^86^87^88^^^75^90^if  ( cur == null )  { throw new IllegalStateException  (" ")  ; }^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P13_Insert_Block]^if  ( cur == null )  {     throw new IllegalStateException (  ( "Unknown callback type " + callbackType )  ) ; }^87^^^^^75^90^[Delete]^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P8_Replace_Mix]^return ;^87^^^^^75^90^throw new IllegalStateException  (" ")  ;^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^return Type.getType ( cls ) ;^89^^^^^75^90^return Type.getType ( cur ) ;^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P7_Replace_Invocation]^return Type.equals ( cur ) ;^89^^^^^75^90^return Type.getType ( cur ) ;^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P7_Replace_Invocation]^return Type .equals ( type )  ;^89^^^^^75^90^return Type.getType ( cur ) ;^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P8_Replace_Mix]^return Type.equals ( cls ) ;^89^^^^^75^90^return Type.getType ( cur ) ;^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P14_Delete_Statement]^^89^^^^^75^90^return Type.getType ( cur ) ;^[CLASS] CallbackInfo  [METHOD] determineType [RETURN_TYPE] Type   Class callbackType [VARIABLES] Type  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^if  ( info.type.equals ( type )  )  {^95^^^^^92^100^if  ( info.type.equals ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^if  ( type.equals ( callbackType )  )  {^95^^^^^92^100^if  ( info.type.equals ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^if  ( info.type.type.equals ( callbackType )  )  {^95^^^^^92^100^if  ( info.type.equals ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^if  ( callbackType.equals ( info.type )  )  {^95^^^^^92^100^if  ( info.type.equals ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^if  ( info.equals ( callbackType )  )  {^95^^^^^92^100^if  ( info.type.equals ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P9_Replace_Statement]^if  ( info.cls.isAssignableFrom ( callbackType )  )  {^95^^^^^92^100^if  ( info.type.equals ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P15_Unwrap_Block]^return info.generator;^95^96^97^^^92^100^if  ( info.type.equals ( callbackType )  )  { return info.generator; }^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P16_Remove_Block]^^95^96^97^^^92^100^if  ( info.type.equals ( callbackType )  )  { return info.generator; }^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^return generator;^96^^^^^92^100^return info.generator;^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^return info.generator.generator;^96^^^^^92^100^return info.generator;^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^return info;^96^^^^^92^100^return info.generator;^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < CALLBACKS.length; i++ )  {^93^^^^^92^100^for  ( int i = 0; i < CALLBACKS.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= CALLBACKS.length; i++ )  {^93^^^^^92^100^for  ( int i = 0; i < CALLBACKS.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < CALLBACKS.length; i++ )  {^93^^^^^92^100^for  ( int i = 0; i < CALLBACKS.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^if  ( callbackType.type.equals ( info )  )  {^95^^^^^92^100^if  ( info.type.equals ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P5_Replace_Variable]^CallbackInfo CALLBACKSnfo = i[i];^94^^^^^92^100^CallbackInfo info = CALLBACKS[i];^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P7_Replace_Invocation]^if  ( info.type .getType ( callbackType )   )  {^95^^^^^92^100^if  ( info.type.equals ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P8_Replace_Mix]^if  ( type .getType ( cls )   )  {^95^^^^^92^100^if  ( info.type.equals ( callbackType )  )  {^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < CALLBACKS.length; i++ )  {^93^^^^^92^100^for  ( int i = 0; i < CALLBACKS.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
[P3_Replace_Literal]^for  ( int i = 3; i < CALLBACKS.length; i++ )  {^93^^^^^92^100^for  ( int i = 0; i < CALLBACKS.length; i++ )  {^[CLASS] CallbackInfo  [METHOD] getGenerator [RETURN_TYPE] CallbackGenerator   Type callbackType [VARIABLES] Type  callbackType  type  boolean  CallbackInfo  info  Class  callbackType  cls  cur  CallbackGenerator  generator  CallbackInfo[]  CALLBACKS  int  i  
