[P8_Replace_Mix]^private  Map labels;^76^^^^^71^81^private final Map labels;^[CLASS] CheckMethodAdapter   [VARIABLES] 
[P8_Replace_Mix]^private static  int[] TYPE;^81^^^^^76^86^private static final int[] TYPE;^[CLASS] CheckMethodAdapter   [VARIABLES] 
[P14_Delete_Statement]^^312^^^^^311^314^super ( cv ) ;^[CLASS] CheckMethodAdapter  [METHOD] <init> [RETURN_TYPE] MethodVisitor)   MethodVisitor cv [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  Map  labels  MethodVisitor  cv  
[P8_Replace_Mix]^this.labels  = null ;^313^^^^^311^314^this.labels = new HashMap (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] <init> [RETURN_TYPE] MethodVisitor)   MethodVisitor cv [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  Map  labels  MethodVisitor  cv  
[P7_Replace_Invocation]^checkEndCode (  ) ;^320^^^^^316^323^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P14_Delete_Statement]^^320^^^^^316^323^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndMethod (  ) ;^320^^^^^316^323^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndMethod (  ) ;^320^^^^^316^323^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndMethod (  ) ;^320^^^^^316^323^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkEndMethod (  ) ;^320^^^^^316^323^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P12_Insert_Condition]^if  ( endMethod )  { checkEndMethod (  ) ; }^320^^^^^316^323^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P3_Replace_Literal]^checkDesc ( desc, true ) ;^321^^^^^316^323^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P7_Replace_Invocation]^visitAnnotation ( desc, false ) ;^321^^^^^316^323^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P14_Delete_Statement]^^321^322^^^^316^323^checkDesc ( desc, false ) ; return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P11_Insert_Donor_Statement]^start = checkDesc ( desc, start + 1, true ) ;checkDesc ( desc, false ) ;^321^^^^^316^323^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkDesc ( desc, false ) ;^321^^^^^316^323^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P11_Insert_Donor_Statement]^checkDesc ( name, false ) ;checkDesc ( desc, false ) ;^321^^^^^316^323^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P11_Insert_Donor_Statement]^return checkDesc ( desc, index, false ) ;checkDesc ( desc, false ) ;^321^^^^^316^323^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P11_Insert_Donor_Statement]^start = checkDesc ( desc, start, false ) ;checkDesc ( desc, false ) ;^321^^^^^316^323^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P11_Insert_Donor_Statement]^int end = checkDesc ( desc, 0, canBeVoid ) ;checkDesc ( desc, false ) ;^321^^^^^316^323^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P4_Replace_Constructor]^return new CheckAnnotationAdapter ( mv.visitAnnotation (  visible )  ) ;^322^^^^^316^323^return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P4_Replace_Constructor]^return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc )  ) ;^322^^^^^316^323^return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P5_Replace_Variable]^return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, startCode )  ) ;^322^^^^^316^323^return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P5_Replace_Variable]^return new CheckAnnotationAdapter ( mv.visitAnnotation ( visible, desc )  ) ;^322^^^^^316^323^return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P5_Replace_Variable]^return new CheckAnnotationAdapter ( visible.visitAnnotation ( desc, mv )  ) ;^322^^^^^316^323^return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P7_Replace_Invocation]^return new CheckAnnotationAdapter ( mv.visitMultiANewArrayInsn ( desc, visible )  ) ;^322^^^^^316^323^return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P5_Replace_Variable]^return new CheckAnnotationAdapter ( desc.visitAnnotation ( mv, visible )  ) ;^322^^^^^316^323^return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P14_Delete_Statement]^^322^^^^^316^323^return new CheckAnnotationAdapter ( mv.visitAnnotation ( desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotation [RETURN_TYPE] AnnotationVisitor   String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  
[P7_Replace_Invocation]^checkEndCode (  ) ;^326^^^^^325^328^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotationDefault [RETURN_TYPE] AnnotationVisitor   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P14_Delete_Statement]^^326^^^^^325^328^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotationDefault [RETURN_TYPE] AnnotationVisitor   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndMethod (  ) ;^326^^^^^325^328^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotationDefault [RETURN_TYPE] AnnotationVisitor   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndMethod (  ) ;^326^^^^^325^328^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotationDefault [RETURN_TYPE] AnnotationVisitor   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndMethod (  ) ;^326^^^^^325^328^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotationDefault [RETURN_TYPE] AnnotationVisitor   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkEndMethod (  ) ;^326^^^^^325^328^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotationDefault [RETURN_TYPE] AnnotationVisitor   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P3_Replace_Literal]^return new CheckAnnotationAdapter ( mv.visitAnnotationDefault (  ) , true ) ;^327^^^^^325^328^return new CheckAnnotationAdapter ( mv.visitAnnotationDefault (  ) , false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotationDefault [RETURN_TYPE] AnnotationVisitor   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P7_Replace_Invocation]^return new CheckAnnotationAdapter ( mv.visitCode (  ) , false ) ;^327^^^^^325^328^return new CheckAnnotationAdapter ( mv.visitAnnotationDefault (  ) , false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotationDefault [RETURN_TYPE] AnnotationVisitor   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P14_Delete_Statement]^^327^^^^^325^328^return new CheckAnnotationAdapter ( mv.visitAnnotationDefault (  ) , false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAnnotationDefault [RETURN_TYPE] AnnotationVisitor   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P7_Replace_Invocation]^checkEndCode (  ) ;^335^^^^^330^340^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P14_Delete_Statement]^^335^^^^^330^340^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndMethod (  ) ;^335^^^^^330^340^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndMethod (  ) ;^335^^^^^330^340^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndMethod (  ) ;^335^^^^^330^340^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkEndMethod (  ) ;^335^^^^^330^340^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P12_Insert_Condition]^if  ( endMethod )  { checkEndMethod (  ) ; }^335^^^^^330^340^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P3_Replace_Literal]^checkDesc ( desc, true ) ;^336^^^^^330^340^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P7_Replace_Invocation]^visitAnnotation ( desc, false ) ;^336^^^^^330^340^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P14_Delete_Statement]^^336^^^^^330^340^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P11_Insert_Donor_Statement]^start = checkDesc ( desc, start + 1, true ) ;checkDesc ( desc, false ) ;^336^^^^^330^340^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkDesc ( desc, false ) ;^336^^^^^330^340^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P11_Insert_Donor_Statement]^checkDesc ( name, false ) ;checkDesc ( desc, false ) ;^336^^^^^330^340^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P11_Insert_Donor_Statement]^return checkDesc ( desc, index, false ) ;checkDesc ( desc, false ) ;^336^^^^^330^340^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P11_Insert_Donor_Statement]^start = checkDesc ( desc, start, false ) ;checkDesc ( desc, false ) ;^336^^^^^330^340^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P11_Insert_Donor_Statement]^int end = checkDesc ( desc, 0, canBeVoid ) ;checkDesc ( desc, false ) ;^336^^^^^330^340^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P4_Replace_Constructor]^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation (  desc, visible )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P4_Replace_Constructor]^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter,  visible )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P4_Replace_Constructor]^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P5_Replace_Variable]^return new CheckAnnotationAdapter ( parameter.visitParameterAnnotation ( mv, desc, visible )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P5_Replace_Variable]^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, visible, desc )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P5_Replace_Variable]^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( visible, desc, parameter )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P5_Replace_Variable]^return new CheckAnnotationAdapter ( desc.visitParameterAnnotation ( parameter, mv, visible )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P7_Replace_Invocation]^return new CheckAnnotationAdapter ( mv.visitLookupSwitchInsn ( parameter, desc, visible )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P8_Replace_Mix]^return new CheckAnnotationAdapter ( mv.visitLookupSwitchInsn ( parameter, desc, startCode )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P5_Replace_Variable]^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, startCode )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P5_Replace_Variable]^return new CheckAnnotationAdapter ( visible.visitParameterAnnotation ( parameter, desc, mv )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P7_Replace_Invocation]^return new CheckAnnotationAdapter ( mv .visitAnnotation ( desc , visible )   ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P5_Replace_Variable]^return new CheckAnnotationAdapter ( 1.visitParameterAnnotation ( parameter, desc, visible )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P5_Replace_Variable]^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( desc, parameter, visible )  ) ;^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P14_Delete_Statement]^^337^338^339^^^330^340^return new CheckAnnotationAdapter ( mv.visitParameterAnnotation ( parameter, desc, visible )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitParameterAnnotation [RETURN_TYPE] AnnotationVisitor   final int parameter String desc final boolean visible [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  parameter  
[P7_Replace_Invocation]^checkEndCode (  ) ;^343^^^^^342^348^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P14_Delete_Statement]^^343^^^^^342^348^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndMethod (  ) ;^343^^^^^342^348^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndMethod (  ) ;^343^^^^^342^348^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndMethod (  ) ;^343^^^^^342^348^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkEndMethod (  ) ;^343^^^^^342^348^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P12_Insert_Condition]^if  ( endMethod )  { checkEndMethod (  ) ; }^343^^^^^342^348^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P2_Replace_Operator]^if  ( attr != null )  {^344^^^^^342^348^if  ( attr == null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P8_Replace_Mix]^if  ( attr == false )  {^344^^^^^342^348^if  ( attr == null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P9_Replace_Statement]^if  ( c == '*' )  {^344^^^^^342^348^if  ( attr == null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P9_Replace_Statement]^if  ( label == null )  {^344^^^^^342^348^if  ( attr == null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P9_Replace_Statement]^if  ( type != null )  {^344^^^^^342^348^if  ( attr == null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Invalid attribute (must not be null)");^344^345^346^^^342^348^if  ( attr == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P16_Remove_Block]^^344^345^346^^^342^348^if  ( attr == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( endMethod )  {     throw new IllegalStateException ( "Cannot visit elements after visitEnd has been called." ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( endCode )  {     throw new IllegalStateException ( "Cannot visit instructions after visitMaxs has been called." ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( ! ( startCode )  )  {     throw new IllegalStateException ( "Cannot visit instructions before visitCode has been called." ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^344^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " )   ;^345^^^^^342^348^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^345^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^345^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P8_Replace_Mix]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^345^^^^^342^348^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^345^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^345^^^^^342^348^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P7_Replace_Invocation]^mv.visitLabel ( attr ) ;^347^^^^^342^348^mv.visitAttribute ( attr ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P14_Delete_Statement]^^347^^^^^342^348^mv.visitAttribute ( attr ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P11_Insert_Donor_Statement]^mv.visitEnd (  ) ;mv.visitAttribute ( attr ) ;^347^^^^^342^348^mv.visitAttribute ( attr ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;mv.visitAttribute ( attr ) ;^347^^^^^342^348^mv.visitAttribute ( attr ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P11_Insert_Donor_Statement]^mv.visitLabel ( label ) ;mv.visitAttribute ( attr ) ;^347^^^^^342^348^mv.visitAttribute ( attr ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P11_Insert_Donor_Statement]^mv.visitLdcInsn ( cst ) ;mv.visitAttribute ( attr ) ;^347^^^^^342^348^mv.visitAttribute ( attr ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitAttribute [RETURN_TYPE] void   Attribute attr [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  Attribute  attr  
[P3_Replace_Literal]^startCode = false;^351^^^^^350^353^startCode = true;^[CLASS] CheckMethodAdapter  [METHOD] visitCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^endMethod = true;startCode = true;^351^^^^^350^353^startCode = true;^[CLASS] CheckMethodAdapter  [METHOD] visitCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^endCode = true;startCode = true;^351^^^^^350^353^startCode = true;^[CLASS] CheckMethodAdapter  [METHOD] visitCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P7_Replace_Invocation]^mv.visitEnd (  ) ;^352^^^^^350^353^mv.visitCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P14_Delete_Statement]^^352^^^^^350^353^mv.visitCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitEnd (  ) ;mv.visitCode (  ) ;^352^^^^^350^353^mv.visitCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;mv.visitCode (  ) ;^352^^^^^350^353^mv.visitCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitVarInsn ( opcode, var ) ;mv.visitCode (  ) ;^352^^^^^350^353^mv.visitCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitLabel ( label ) ;mv.visitCode (  ) ;^352^^^^^350^353^mv.visitCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitLdcInsn ( cst ) ;mv.visitCode (  ) ;^352^^^^^350^353^mv.visitCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitAttribute ( attr ) ;mv.visitCode (  ) ;^352^^^^^350^353^mv.visitCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitInsn ( opcode ) ;mv.visitCode (  ) ;^352^^^^^350^353^mv.visitCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;mv.visitCode (  ) ;^352^^^^^350^353^mv.visitCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P1_Replace_Type]^short  mLocal;^362^^^^^347^377^int mLocal;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^int mStack;int mLocal;^362^^^^^347^377^int mLocal;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^int slash;int mLocal;^362^^^^^347^377^int mLocal;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P1_Replace_Type]^long  mStack;^363^^^^^348^378^int mStack;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^int mLocal;int mStack;^363^^^^^348^378^int mStack;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^int slash;int mStack;^363^^^^^348^378^int mStack;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P8_Replace_Mix]^mLocal  =  mLocal ;^367^^^^^352^382^mLocal = Integer.MAX_VALUE;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^mStack = Integer.MAX_VALUE;mLocal = Integer.MAX_VALUE;^367^^^^^352^382^mLocal = Integer.MAX_VALUE;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P8_Replace_Mix]^mStack ;^368^^^^^353^383^mStack = Integer.MAX_VALUE;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^mLocal = Integer.MAX_VALUE;mStack = Integer.MAX_VALUE;^368^^^^^353^383^mStack = Integer.MAX_VALUE;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^mLocal = ;^372^^^^^357^387^mLocal = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P8_Replace_Mix]^mLocal = 4;^372^^^^^357^387^mLocal = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^mStack = 0;mLocal = 0;^372^^^^^357^387^mLocal = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^mLocal = 3;mLocal = 0;^372^^^^^357^387^mLocal = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P8_Replace_Mix]^mStack = 2;^373^^^^^358^388^mStack = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^mStack = 1;mStack = 0;^373^^^^^358^388^mStack = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^mLocal = 0;mStack = 0;^373^^^^^358^388^mStack = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^mLocal = -4;^377^^^^^362^392^mLocal = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P8_Replace_Mix]^mLocal = 1;^377^^^^^362^392^mLocal = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^mStack = 0;mLocal = 0;^377^^^^^362^392^mLocal = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^mLocal = 3;mLocal = 0;^377^^^^^362^392^mLocal = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^mStack = mStack;^378^^^^^363^393^mStack = 1;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P8_Replace_Mix]^mStack = 2;^378^^^^^363^393^mStack = 1;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^mStack = 0;mStack = 1;^378^^^^^363^393^mStack = 1;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^mLocal = 0;^383^^^^^368^398^mLocal = 3;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^mLocal = 0;mLocal = 3;^383^^^^^368^398^mLocal = 3;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^mStack = nStack;^384^^^^^369^399^mStack = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P8_Replace_Mix]^mStack = 3;^384^^^^^369^399^mStack = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^mStack = 1;mStack = 0;^384^^^^^369^399^mStack = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^mLocal = 0;mStack = 0;^384^^^^^369^399^mStack = 0;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  )   ;^388^^^^^373^403^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^if  ( nLocal == mLocal )  {^391^^^^^376^406^if  ( nLocal > mLocal )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( nStack > mLocal )  {^391^^^^^376^406^if  ( nLocal > mLocal )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " + type )  {^391^^^^^376^406^if  ( nLocal > mLocal )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( "Invalid nLocal=" + nLocal + " for frame type " )  {^391^^^^^376^406^if  ( nLocal > mLocal )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( "Invalid nLocal=" + nLocal )  {^391^^^^^376^406^if  ( nLocal > mLocal )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P8_Replace_Mix]^if  ( nLocal > nStack )  {^391^^^^^376^406^if  ( nLocal > mLocal )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(((("Invalid nLocal=" + nLocal) + " for frame type ") + type));^391^392^393^394^^376^406^if  ( nLocal > mLocal )  { throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P16_Remove_Block]^^391^392^393^394^^376^406^if  ( nLocal > mLocal )  { throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid nLocal="  <  nLocal  <  " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid nLocal="  &&  nLocal + " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalnvalid nLocal=" + nLocal + " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type  for" + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  )  ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Invalid nStack=" + nLocal + " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame nStack " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Invalid type=" + nLocal + " for frame nLocal " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^392^^^^^377^407^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^392^^^^^377^407^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid nLocal="   instanceof   nLocal   instanceof   " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid nLocal="  ^  nLocal + " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "al" + nLocal + " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " f" + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^392^^^^^377^407^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid nLocal="  ==  nLocal  ==  " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid nLocal="  <<  nLocal + " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid nLocal=I" + nLocal + " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " fr" + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid nLocal="  >>  nLocal  >>  " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid nLocal="  >=  nLocal + " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "In" + nLocal + " for frame type " + type ) ;^392^393^^^^377^407^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^if  ( nStack >= mStack )  {^395^^^^^380^410^if  ( nStack > mStack )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( nLocal > mStack )  {^395^^^^^380^410^if  ( nStack > mStack )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( nStack > type )  {^395^^^^^380^410^if  ( nStack > mStack )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( mStack > nStack )  {^395^^^^^380^410^if  ( nStack > mStack )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  (  ( "Invalid nStack=" + nStack )  + " for frame type " + type )  {^395^^^^^380^410^if  ( nStack > mStack )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( "Invalid nStack=" + nStack + " for frame type " )  {^395^^^^^380^410^if  ( nStack > mStack )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( "Invalid nStack=" + nStack )  {^395^^^^^380^410^if  ( nStack > mStack )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P8_Replace_Mix]^if  ( type > mStack )  {^395^^^^^380^410^if  ( nStack > mStack )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(((("Invalid nStack=" + nStack) + " for frame type ") + type));^395^396^397^398^^380^410^if  ( nStack > mStack )  { throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P16_Remove_Block]^^395^396^397^398^^380^410^if  ( nStack > mStack )  { throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid nStack="  <<  nStack  <<  " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid nStack="  ||  nStack + " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid nStack=k" + nStack + " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  )  ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Invalid nLocal=" + nStack + " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame nLocal " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Invalid type=" + nStack + " for frame nStack " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^396^^^^^381^411^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^396^^^^^381^411^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid nStack="   instanceof   nStack   instanceof   " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid nStack="   instanceof   nStack + " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid nStack=I" + nStack + " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type ame type" + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^396^^^^^381^411^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^396^^^^^381^411^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid nStack="  <=  nStack  <=  " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid nStack="  <  nStack + " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid nStack=al" + nStack + " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type for " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid nStack="  >=  nStack  >=  " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "nnvalid nStack=" + nStack + " for frame type " + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + "ame type" + type ) ;^396^397^^^^381^411^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^if  ( type <= Opcodes.F_CHOP )  {^400^^^^^385^415^if  ( type != Opcodes.F_CHOP )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( nStack != Opcodes.F_CHOP )  {^400^^^^^385^415^if  ( type != Opcodes.F_CHOP )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( type != Opcodes.2 )  {^400^^^^^385^415^if  ( type != Opcodes.F_CHOP )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( nLocal > 0 && (local == null) || (local.length < nLocal) )  {^400^^^^^385^415^if  ( type != Opcodes.F_CHOP )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( nLocal > 0 )  {^400^^^^^385^415^if  ( type != Opcodes.F_CHOP )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( (local == null || local.length < nLocal) )  {^400^^^^^385^415^if  ( type != Opcodes.F_CHOP )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( local == null )  {^400^^^^^385^415^if  ( type != Opcodes.F_CHOP )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( local.length < nLocal )  {^400^^^^^385^415^if  ( type != Opcodes.F_CHOP )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( i < nLocal )  {^400^^^^^385^415^if  ( type != Opcodes.F_CHOP )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P15_Unwrap_Block]^if ((nLocal > 0) && ((local == null) || ((local.length) < nLocal))) {    throw new java.lang.IllegalArgumentException("Array local[] is shorter than nLocal");}; for (int i = 0; i < nLocal; ++i) {    org.mockito.asm.util.CheckMethodAdapter.checkFrameValue(local[i]);};^400^401^402^403^^385^415^if  ( type != Opcodes.F_CHOP )  { if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P16_Remove_Block]^^400^401^402^403^^385^415^if  ( type != Opcodes.F_CHOP )  { if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^if  ( nLocal > 0 ||  ( local == null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^if  ( nLocal >= 0 &&  ( local == null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^if  ( nLocal > 0 &&  ( local == null && local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^if  ( nLocal > 0 &&  ( local != null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^if  ( nLocal > 0 &&  ( local == null || local.length <= nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^if  ( nLocal > type &&  ( local == null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( nStack > 0 &&  ( local == null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( nLocal > 0 &&  ( stack == null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( nLocal > 0 &&  ( local == null || nStack < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( local > 0 &&  ( nLocal == null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( nLocal > 0 &&  ( local.length == null || local < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( nLocal > 0 &&  ( local == null ) {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  (  local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( nLocal > 0 )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( (local == null || local.length < nLocal) )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( local == null )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( local.length < nLocal )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P8_Replace_Mix]^if  ( nLocal > 0  &&  ( local == null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P9_Replace_Statement]^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Array local[] is shorter than nLocal");^401^402^403^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P16_Remove_Block]^^401^402^403^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^401^^^^^386^416^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^401^^^^^386^416^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  (  ( keys == null )  ||  ( labels == null )  )  ||  (  ( keys.length )  !=  ( labels.length )  )  )  {     throw new IllegalArgumentException ( "There must be the same number of keys and labels" ) ; }^401^^^^^386^416^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  ( nStack > 0 )  &&  (  ( stack == null )  ||  (  ( stack.length )  < nStack )  )  )  {     throw new IllegalArgumentException ( "Array stack[] is shorter than nStack" ) ; }^401^^^^^386^416^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^401^^^^^386^416^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^401^^^^^386^416^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^401^^^^^386^416^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^401^^^^^386^416^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^401^^^^^386^416^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^401^^^^^386^416^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^401^^^^^386^416^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Array stack[] is shorter than nStack" )   ;^402^^^^^387^417^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^402^^^^^387^417^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  ( nLocal > 0 )  &&  (  ( local == null )  ||  (  ( local.length )  < nLocal )  )  )  {     throw new IllegalArgumentException ( "Array local[] is shorter than nLocal" ) ; }^402^^^^^387^417^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P1_Replace_Type]^for  (  long  i = 0; i < nLocal; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^for  ( int i = 0; i == nLocal; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^for  ( int i = nLocal; i < nLocal; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^for  ( typent i = 0; i < nLocal; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^for  ( int i = 0; i < type; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^for  ( nLocalnt i = 0; i < i; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^checkFrameValue ( stack[i] ) ;^405^^^^^390^420^checkFrameValue ( local[i] ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P7_Replace_Invocation]^checkSignedByte ( local[i] ) ;^405^^^^^390^420^checkFrameValue ( local[i] ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P8_Replace_Mix]^checkSignedByte ( stack[i] ) ;^405^^^^^390^420^checkFrameValue ( local[i] ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P14_Delete_Statement]^^405^^^^^390^420^checkFrameValue ( local[i] ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^checkFrameValue ( stack[i] ) ;checkFrameValue ( local[i] ) ;^405^^^^^390^420^checkFrameValue ( local[i] ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P1_Replace_Type]^for  (  short  i = 0; i < nLocal; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^for  ( int i = 5; i < nLocal; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^if  ( nLocal > 0 &&  ( local == null || local.length == nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^if  ( nLocal >  &&  ( local == null || local.length < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( nLocal > 0 &&  ( local == null || type < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( local.length > 0 &&  ( local == null || nLocal < nLocal )  )  {^401^^^^^386^416^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^for  ( int i = 0; i <= nLocal; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^for  ( int i = mStack; i < nLocal; ++i )  {^404^^^^^389^419^for  ( int i = 0; i < nLocal; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P8_Replace_Mix]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^402^^^^^387^417^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^if  ( nStack > 0 ||  ( stack == null || stack.length < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^if  ( nStack >= 0 &&  ( stack == null || stack.length < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^if  ( nStack > 0 &&  ( stack == null && stack.length < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^if  ( nStack > 0 &&  ( stack != null || stack.length < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^if  ( nStack > 0 &&  ( stack == null || stack.length == nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^if  ( nStack > 8 &&  ( stack == null || stack.length < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( type > 0 &&  ( stack == null || stack.length < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( nStack > 0 &&  ( local == null || stack.length < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( nStack > 0 &&  ( stack == null || nLocal < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( stack.length > 0 &&  ( stack == null || nStack < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^if  ( nStack > 0 &&  ( stack.length == null || stack < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( nStack > 0 &&  ( stack == null ) {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  (  stack.length < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( nStack > 0 )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( (stack == null || stack.length < nStack) )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( stack == null )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P6_Replace_Expression]^if  ( stack.length < nStack )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P8_Replace_Mix]^if  ( nStack > 0  &&  ( stack == null || stack.length < nStack )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P9_Replace_Statement]^if  ( nLocal > 0 &&  ( local == null || local.length < nLocal )  )  {^408^^^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Array stack[] is shorter than nStack");^408^409^410^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P16_Remove_Block]^^408^409^410^^^393^423^if  ( nStack > 0 &&  ( stack == null || stack.length < nStack )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^408^^^^^393^423^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^408^^^^^393^423^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^408^^^^^393^423^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  (  ( keys == null )  ||  ( labels == null )  )  ||  (  ( keys.length )  !=  ( labels.length )  )  )  {     throw new IllegalArgumentException ( "There must be the same number of keys and labels" ) ; }^408^^^^^393^423^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  ( nLocal > 0 )  &&  (  ( local == null )  ||  (  ( local.length )  < nLocal )  )  )  {     throw new IllegalArgumentException ( "Array local[] is shorter than nLocal" ) ; }^408^^^^^393^423^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^408^^^^^393^423^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^408^^^^^393^423^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^408^^^^^393^423^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^408^^^^^393^423^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^408^^^^^393^423^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^408^^^^^393^423^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^408^^^^^393^423^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Array local[] is shorter than nLocal" )   ;^409^^^^^394^424^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  (  ( nStack > 0 )  &&  (  ( stack == null )  ||  (  ( stack.length )  < nStack )  )  )  {     throw new IllegalArgumentException ( "Array stack[] is shorter than nStack" ) ; }^409^^^^^394^424^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^409^^^^^394^424^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P1_Replace_Type]^for  (  short  i = 0; i < nStack; ++i )  {^411^^^^^396^426^for  ( int i = 0; i < nStack; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P2_Replace_Operator]^for  ( int i = 0; i <= nStack; ++i )  {^411^^^^^396^426^for  ( int i = 0; i < nStack; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^for  ( int i = nStack; i < nStack; ++i )  {^411^^^^^396^426^for  ( int i = 0; i < nStack; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^for  ( nStacknt i = 0; i < nStack; ++i )  {^411^^^^^396^426^for  ( int i = 0; i < nStack; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^for  ( nStacknt i = 0; i < i; ++i )  {^411^^^^^396^426^for  ( int i = 0; i < nStack; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P8_Replace_Mix]^for  ( typent i = 0; i < nStack; ++i )  {^411^^^^^396^426^for  ( int i = 0; i < nStack; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^checkFrameValue ( local[i] ) ;^412^^^^^397^427^checkFrameValue ( stack[i] ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P7_Replace_Invocation]^checkSignedByte ( stack[i] ) ;^412^^^^^397^427^checkFrameValue ( stack[i] ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P8_Replace_Mix]^checkSignedByte ( local[i] ) ;^412^^^^^397^427^checkFrameValue ( stack[i] ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P14_Delete_Statement]^^412^^^^^397^427^checkFrameValue ( stack[i] ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P11_Insert_Donor_Statement]^checkFrameValue ( local[i] ) ;checkFrameValue ( stack[i] ) ;^412^^^^^397^427^checkFrameValue ( stack[i] ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P3_Replace_Literal]^for  ( int i = -8; i < nStack; ++i )  {^411^^^^^396^426^for  ( int i = 0; i < nStack; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^mv.visitFrame ( nLocal, nLocal, local, nStack, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^mv.visitFrame ( type, nStack, local, nStack, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^mv.visitFrame ( type, nLocal, local, nLocal, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^mv.visitFrame (  nLocal, local, nStack, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^mv.visitFrame ( type,  local, nStack, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^mv.visitFrame ( type, nLocal,  nStack, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^mv.visitFrame ( type, nLocal, local,  stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^mv.visitFrame ( type, nLocal, local, nStack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^mv.visitFrame ( local, nLocal, type, nStack, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^mv.visitFrame ( nLocal, type, local, nStack, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^mv.visitFrame ( type, nLocal, stack, nStack, local ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P5_Replace_Variable]^mv.visitFrame ( type, nLocal, nStack, local, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P8_Replace_Mix]^mv.visitFrame ( type, type, local, nStack, stack ) ;^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P14_Delete_Statement]^^415^^^^^400^430^mv.visitFrame ( type, nLocal, local, nStack, stack ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFrame [RETURN_TYPE] void   final int type final int nLocal Object[] local final int nStack Object[] stack [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  mLocal  mStack  nLocal  nStack  type  Object[]  local  stack  
[P7_Replace_Invocation]^checkEndCode (  ) ;^419^^^^^418^423^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P14_Delete_Statement]^^419^420^^^^418^423^checkStartCode (  ) ; checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^419^^^^^418^423^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^419^^^^^418^423^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^419^^^^^418^423^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^419^^^^^418^423^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^419^^^^^418^423^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^420^^^^^418^423^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P14_Delete_Statement]^^420^421^^^^418^423^checkEndCode (  ) ; checkOpcode ( opcode, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^420^^^^^418^423^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^420^^^^^418^423^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^420^^^^^418^423^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^420^^^^^418^423^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^420^^^^^418^423^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^420^^^^^418^423^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^420^^^^^418^423^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^420^^^^^418^423^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^420^^^^^418^423^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^420^^^^^418^423^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^420^^^^^418^423^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^420^^^^^418^423^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P3_Replace_Literal]^checkOpcode ( opcode, 7 ) ;^421^^^^^418^423^checkOpcode ( opcode, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P7_Replace_Invocation]^visitMaxs ( opcode, 0 ) ;^421^^^^^418^423^checkOpcode ( opcode, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P14_Delete_Statement]^^421^422^^^^418^423^checkOpcode ( opcode, 0 ) ; mv.visitInsn ( opcode ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkOpcode ( opcode, 0 ) ;^421^^^^^418^423^checkOpcode ( opcode, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkOpcode ( opcode, 0 ) ;^421^^^^^418^423^checkOpcode ( opcode, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkOpcode ( opcode, 0 ) ;^421^^^^^418^423^checkOpcode ( opcode, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkOpcode ( opcode, 0 ) ;^421^^^^^418^423^checkOpcode ( opcode, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkOpcode ( opcode, 0 ) ;^421^^^^^418^423^checkOpcode ( opcode, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkOpcode ( opcode, 0 ) ;^421^^^^^418^423^checkOpcode ( opcode, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkOpcode ( opcode, 0 ) ;^421^^^^^418^423^checkOpcode ( opcode, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P7_Replace_Invocation]^mv.visitLdcInsn ( opcode ) ;^422^^^^^418^423^mv.visitInsn ( opcode ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P8_Replace_Mix]^mv .visitIntInsn ( opcode , opcode )  ;^422^^^^^418^423^mv.visitInsn ( opcode ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P14_Delete_Statement]^^422^^^^^418^423^mv.visitInsn ( opcode ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitEnd (  ) ;mv.visitInsn ( opcode ) ;^422^^^^^418^423^mv.visitInsn ( opcode ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;mv.visitInsn ( opcode ) ;^422^^^^^418^423^mv.visitInsn ( opcode ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitTypeInsn ( opcode, type ) ;mv.visitInsn ( opcode ) ;^422^^^^^418^423^mv.visitInsn ( opcode ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitVarInsn ( opcode, var ) ;mv.visitInsn ( opcode ) ;^422^^^^^418^423^mv.visitInsn ( opcode ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitLabel ( label ) ;mv.visitInsn ( opcode ) ;^422^^^^^418^423^mv.visitInsn ( opcode ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitIincInsn ( var, increment ) ;mv.visitInsn ( opcode ) ;^422^^^^^418^423^mv.visitInsn ( opcode ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitFieldInsn ( opcode, owner, name, desc ) ;mv.visitInsn ( opcode ) ;^422^^^^^418^423^mv.visitInsn ( opcode ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitLdcInsn ( cst ) ;mv.visitInsn ( opcode ) ;^422^^^^^418^423^mv.visitInsn ( opcode ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitIntInsn ( opcode, operand ) ;mv.visitInsn ( opcode ) ;^422^^^^^418^423^mv.visitInsn ( opcode ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitJumpInsn ( opcode, label ) ;mv.visitInsn ( opcode ) ;^422^^^^^418^423^mv.visitInsn ( opcode ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitInsn [RETURN_TYPE] void   final int opcode [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkEndCode (  ) ;^426^^^^^425^444^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P14_Delete_Statement]^^426^427^^^^425^444^checkStartCode (  ) ; checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^426^^^^^425^444^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^426^^^^^425^444^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^426^^^^^425^444^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^426^^^^^425^444^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^426^^^^^425^444^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^427^^^^^425^444^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P14_Delete_Statement]^^427^^^^^425^444^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^427^^^^^425^444^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^427^^^^^425^444^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^427^^^^^425^444^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^427^^^^^425^444^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^427^^^^^425^444^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^427^^^^^425^444^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^427^^^^^425^444^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^427^^^^^425^444^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^427^^^^^425^444^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^427^^^^^425^444^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^427^^^^^425^444^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^427^^^^^425^444^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P3_Replace_Literal]^checkOpcode ( opcode, operand ) ;^428^^^^^425^444^checkOpcode ( opcode, 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P5_Replace_Variable]^checkOpcode ( operand, 1 ) ;^428^^^^^425^444^checkOpcode ( opcode, 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P7_Replace_Invocation]^visitMaxs ( opcode, 1 ) ;^428^^^^^425^444^checkOpcode ( opcode, 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P14_Delete_Statement]^^428^^^^^425^444^checkOpcode ( opcode, 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkOpcode ( opcode, 1 ) ;^428^^^^^425^444^checkOpcode ( opcode, 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkOpcode ( opcode, 1 ) ;^428^^^^^425^444^checkOpcode ( opcode, 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkOpcode ( opcode, 1 ) ;^428^^^^^425^444^checkOpcode ( opcode, 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkOpcode ( opcode, 1 ) ;^428^^^^^425^444^checkOpcode ( opcode, 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkOpcode ( opcode, 1 ) ;^428^^^^^425^444^checkOpcode ( opcode, 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkOpcode ( opcode, 1 ) ;^428^^^^^425^444^checkOpcode ( opcode, 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkOpcode ( opcode, 1 ) ;^428^^^^^425^444^checkOpcode ( opcode, 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P2_Replace_Operator]^if  ( operand < Opcodes.T_BOOLEAN && operand > Opcodes.T_LONG )  {^438^^^^^425^444^if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P2_Replace_Operator]^if  ( operand <= Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^438^^^^^425^444^if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P2_Replace_Operator]^if  ( operand < Opcodes.T_BOOLEAN || operand >= Opcodes.T_LONG )  {^438^^^^^425^444^if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P5_Replace_Variable]^if  ( opcode < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^438^^^^^425^444^if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P6_Replace_Expression]^if  ( operand < Opcodes.T_BOOLEAN ) {^438^^^^^425^444^if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P6_Replace_Expression]^if  (  operand > Opcodes.T_LONG )  {^438^^^^^425^444^if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P6_Replace_Expression]^if  ( operand < T_BOOLEAN )  {^438^^^^^425^444^if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P6_Replace_Expression]^if  ( operand > T_LONG )  {^438^^^^^425^444^if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P6_Replace_Expression]^if  ( "Invalid operand  ( must be an array type code T_... ) : " + operand )  {^438^^^^^425^444^if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  {^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("Invalid operand (must be an array type code T_...): " + operand));^438^439^440^441^^425^444^if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  { throw new IllegalArgumentException  (" ")  : " + operand ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P16_Remove_Block]^^438^439^440^441^^425^444^if  ( operand < Opcodes.T_BOOLEAN || operand > Opcodes.T_LONG )  { throw new IllegalArgumentException  (" ")  : " + operand ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^438^^^^^425^444^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P13_Insert_Block]^if  (  ( value <  ( MIN_VALUE )  )  ||  ( value >  ( MAX_VALUE )  )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be a signed short ) : " )  + value )  ) ; }^438^^^^^425^444^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^438^^^^^425^444^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P13_Insert_Block]^if  (  ( opcode ==  ( NEW )  )  &&  (  ( type.charAt ( 0 )  )  == '[' )  )  {     throw new IllegalArgumentException (  ( "NEW cannot be used to create arrays: " + type )  ) ; }^438^^^^^425^444^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P2_Replace_Operator]^throw new IllegalArgumentException  &&  (" ")  : " + operand ) ;^439^440^^^^425^444^throw new IllegalArgumentException  (" ")  : " + operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  )   : " + operand ) ;^439^440^^^^425^444^throw new IllegalArgumentException  (" ")  : " + operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P5_Replace_Variable]^throw new IllegalArgumentException  (" ")  : " + opcode ) ;^439^440^^^^425^444^throw new IllegalArgumentException  (" ")  : " + operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^439^^^^^425^444^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^439^^^^^425^444^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P2_Replace_Operator]^throw new IllegalArgumentException  ^  (" ")  : " + operand ) ;^439^440^^^^425^444^throw new IllegalArgumentException  (" ")  : " + operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P13_Insert_Block]^if  (  ( operand <  ( T_BOOLEAN )  )  ||  ( operand >  ( T_LONG )  )  )  {     throw new IllegalArgumentException (  ( "Invalid operand  ( must be an array type code T_... ) : " + operand )  ) ; }^439^^^^^425^444^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^439^^^^^425^444^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P2_Replace_Operator]^throw new IllegalArgumentException  >>  (" ")  : " + operand ) ;^439^440^^^^425^444^throw new IllegalArgumentException  (" ")  : " + operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P2_Replace_Operator]^throw new IllegalArgumentException  >=  (" ")  : " + operand ) ;^439^440^^^^425^444^throw new IllegalArgumentException  (" ")  : " + operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P3_Replace_Literal]^checkSignedByte ( operand, "era" ) ;^431^^^^^425^444^checkSignedByte ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P5_Replace_Variable]^checkSignedByte ( opcode, "Invalid operand" ) ;^431^^^^^425^444^checkSignedByte ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P7_Replace_Invocation]^checkSignedShort ( operand, "Invalid operand" ) ;^431^^^^^425^444^checkSignedByte ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P14_Delete_Statement]^^431^^^^^425^444^checkSignedByte ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( line, "Invalid line number" ) ;checkSignedByte ( operand, "Invalid operand" ) ;^431^^^^^425^444^checkSignedByte ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkSignedShort ( increment, "Invalid increment" ) ;checkSignedByte ( operand, "Invalid operand" ) ;^431^^^^^425^444^checkSignedByte ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkSignedShort ( operand, "Invalid operand" ) ;checkSignedByte ( operand, "Invalid operand" ) ;^431^^^^^425^444^checkSignedByte ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( var, "Invalid variable index" ) ;checkSignedByte ( operand, "Invalid operand" ) ;^431^^^^^425^444^checkSignedByte ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;checkSignedByte ( operand, "Invalid operand" ) ;^431^^^^^425^444^checkSignedByte ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( index, "Invalid variable index" ) ;checkSignedByte ( operand, "Invalid operand" ) ;^431^^^^^425^444^checkSignedByte ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;checkSignedByte ( operand, "Invalid operand" ) ;^431^^^^^425^444^checkSignedByte ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P3_Replace_Literal]^checkSignedShort ( operand, "lid operanvalid operand" ) ;^434^^^^^425^444^checkSignedShort ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P5_Replace_Variable]^checkSignedShort ( opcode, "Invalid operand" ) ;^434^^^^^425^444^checkSignedShort ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P7_Replace_Invocation]^checkUnsignedShort ( operand, "Invalid operand" ) ;^434^^^^^425^444^checkSignedShort ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P8_Replace_Mix]^checkUnsignedShort ( opcode, "Invalid operand" ) ;^434^^^^^425^444^checkSignedShort ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P14_Delete_Statement]^^434^435^^^^425^444^checkSignedShort ( operand, "Invalid operand" ) ; break;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( line, "Invalid line number" ) ;checkSignedShort ( operand, "Invalid operand" ) ;^434^^^^^425^444^checkSignedShort ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkSignedByte ( operand, "Invalid operand" ) ;checkSignedShort ( operand, "Invalid operand" ) ;^434^^^^^425^444^checkSignedShort ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkSignedShort ( increment, "Invalid increment" ) ;checkSignedShort ( operand, "Invalid operand" ) ;^434^^^^^425^444^checkSignedShort ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( var, "Invalid variable index" ) ;checkSignedShort ( operand, "Invalid operand" ) ;^434^^^^^425^444^checkSignedShort ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;checkSignedShort ( operand, "Invalid operand" ) ;^434^^^^^425^444^checkSignedShort ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( index, "Invalid variable index" ) ;checkSignedShort ( operand, "Invalid operand" ) ;^434^^^^^425^444^checkSignedShort ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;checkSignedShort ( operand, "Invalid operand" ) ;^434^^^^^425^444^checkSignedShort ( operand, "Invalid operand" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P5_Replace_Variable]^mv.visitIntInsn ( opcode, opcode ) ;^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P5_Replace_Variable]^mv.visitIntInsn (  operand ) ;^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P5_Replace_Variable]^mv.visitIntInsn ( opcode ) ;^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P5_Replace_Variable]^mv.visitIntInsn ( operand, opcode ) ;^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P7_Replace_Invocation]^mv.visitIincInsn ( opcode, operand ) ;^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P8_Replace_Mix]^mv.visitIntInsn ( operand, operand ) ;^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P14_Delete_Statement]^^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^mv.visitTypeInsn ( opcode, type ) ;mv.visitIntInsn ( opcode, operand ) ;^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^mv.visitVarInsn ( opcode, var ) ;mv.visitIntInsn ( opcode, operand ) ;^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^mv.visitIincInsn ( var, increment ) ;mv.visitIntInsn ( opcode, operand ) ;^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^mv.visitFieldInsn ( opcode, owner, name, desc ) ;mv.visitIntInsn ( opcode, operand ) ;^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^mv.visitLdcInsn ( cst ) ;mv.visitIntInsn ( opcode, operand ) ;^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^mv.visitJumpInsn ( opcode, label ) ;mv.visitIntInsn ( opcode, operand ) ;^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^mv.visitMethodInsn ( opcode, owner, name, desc ) ;mv.visitIntInsn ( opcode, operand ) ;^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P11_Insert_Donor_Statement]^mv.visitInsn ( opcode ) ;mv.visitIntInsn ( opcode, operand ) ;^443^^^^^425^444^mv.visitIntInsn ( opcode, operand ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIntInsn [RETURN_TYPE] void   final int opcode final int operand [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  operand  
[P7_Replace_Invocation]^checkEndCode (  ) ;^447^^^^^446^452^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P14_Delete_Statement]^^447^448^^^^446^452^checkStartCode (  ) ; checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^447^^^^^446^452^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^447^^^^^446^452^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^447^^^^^446^452^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^447^^^^^446^452^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^447^^^^^446^452^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^448^^^^^446^452^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P14_Delete_Statement]^^448^^^^^446^452^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^448^^^^^446^452^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^448^^^^^446^452^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^448^^^^^446^452^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^448^^^^^446^452^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^448^^^^^446^452^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^448^^^^^446^452^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^448^^^^^446^452^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^448^^^^^446^452^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^448^^^^^446^452^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^448^^^^^446^452^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^448^^^^^446^452^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^448^^^^^446^452^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P3_Replace_Literal]^checkOpcode ( opcode, var ) ;^449^^^^^446^452^checkOpcode ( opcode, 2 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P5_Replace_Variable]^checkOpcode ( var, 2 ) ;^449^^^^^446^452^checkOpcode ( opcode, 2 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P7_Replace_Invocation]^visitMaxs ( opcode, 2 ) ;^449^^^^^446^452^checkOpcode ( opcode, 2 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P14_Delete_Statement]^^449^^^^^446^452^checkOpcode ( opcode, 2 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkOpcode ( opcode, 2 ) ;^449^^^^^446^452^checkOpcode ( opcode, 2 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkOpcode ( opcode, 2 ) ;^449^^^^^446^452^checkOpcode ( opcode, 2 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkOpcode ( opcode, 2 ) ;^449^^^^^446^452^checkOpcode ( opcode, 2 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkOpcode ( opcode, 2 ) ;^449^^^^^446^452^checkOpcode ( opcode, 2 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkOpcode ( opcode, 2 ) ;^449^^^^^446^452^checkOpcode ( opcode, 2 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkOpcode ( opcode, 2 ) ;^449^^^^^446^452^checkOpcode ( opcode, 2 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkOpcode ( opcode, 2 ) ;^449^^^^^446^452^checkOpcode ( opcode, 2 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P3_Replace_Literal]^checkUnsignedShort ( var, "Invalidnvalid variable index" ) ;^450^^^^^446^452^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P5_Replace_Variable]^checkUnsignedShort ( opcode, "Invalid variable index" ) ;^450^^^^^446^452^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P7_Replace_Invocation]^checkSignedShort ( var, "Invalid variable index" ) ;^450^^^^^446^452^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P8_Replace_Mix]^checkSignedShort ( opcode, "Invalid variable index" ) ;^450^^^^^446^452^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P14_Delete_Statement]^^450^451^^^^446^452^checkUnsignedShort ( var, "Invalid variable index" ) ; mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( line, "Invalid line number" ) ;checkUnsignedShort ( var, "Invalid variable index" ) ;^450^^^^^446^452^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkSignedByte ( operand, "Invalid operand" ) ;checkUnsignedShort ( var, "Invalid variable index" ) ;^450^^^^^446^452^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkSignedShort ( increment, "Invalid increment" ) ;checkUnsignedShort ( var, "Invalid variable index" ) ;^450^^^^^446^452^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkSignedShort ( operand, "Invalid operand" ) ;checkUnsignedShort ( var, "Invalid variable index" ) ;^450^^^^^446^452^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;checkUnsignedShort ( var, "Invalid variable index" ) ;^450^^^^^446^452^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( index, "Invalid variable index" ) ;checkUnsignedShort ( var, "Invalid variable index" ) ;^450^^^^^446^452^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;checkUnsignedShort ( var, "Invalid variable index" ) ;^450^^^^^446^452^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P5_Replace_Variable]^mv.visitVarInsn ( var, var ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P5_Replace_Variable]^mv.visitVarInsn (  var ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P5_Replace_Variable]^mv.visitVarInsn ( opcode ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P5_Replace_Variable]^mv.visitVarInsn ( var, opcode ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P7_Replace_Invocation]^mv.visitIntInsn ( opcode, var ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P7_Replace_Invocation]^mv .visitInsn ( var )  ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P8_Replace_Mix]^mv.visitIntInsn ( var, var ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P14_Delete_Statement]^^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;mv.visitVarInsn ( opcode, var ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^mv.visitTypeInsn ( opcode, type ) ;mv.visitVarInsn ( opcode, var ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^mv.visitLineNumber ( line, start ) ;mv.visitVarInsn ( opcode, var ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^mv.visitLabel ( label ) ;mv.visitVarInsn ( opcode, var ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^mv.visitIincInsn ( var, increment ) ;mv.visitVarInsn ( opcode, var ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^mv.visitFieldInsn ( opcode, owner, name, desc ) ;mv.visitVarInsn ( opcode, var ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^mv.visitLdcInsn ( cst ) ;mv.visitVarInsn ( opcode, var ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^mv.visitIntInsn ( opcode, operand ) ;mv.visitVarInsn ( opcode, var ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^mv.visitJumpInsn ( opcode, label ) ;mv.visitVarInsn ( opcode, var ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^mv.visitMethodInsn ( opcode, owner, name, desc ) ;mv.visitVarInsn ( opcode, var ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P11_Insert_Donor_Statement]^mv.visitInsn ( opcode ) ;mv.visitVarInsn ( opcode, var ) ;^451^^^^^446^452^mv.visitVarInsn ( opcode, var ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitVarInsn [RETURN_TYPE] void   final int opcode final int var [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  var  
[P7_Replace_Invocation]^checkEndCode (  ) ;^455^^^^^454^464^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P14_Delete_Statement]^^455^456^^^^454^464^checkStartCode (  ) ; checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^455^^^^^454^464^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^455^^^^^454^464^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^455^^^^^454^464^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^455^^^^^454^464^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^455^^^^^454^464^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^456^^^^^454^464^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P14_Delete_Statement]^^456^^^^^454^464^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^456^^^^^454^464^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^456^^^^^454^464^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^456^^^^^454^464^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^456^^^^^454^464^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^456^^^^^454^464^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^456^^^^^454^464^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^456^^^^^454^464^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^456^^^^^454^464^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^456^^^^^454^464^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^456^^^^^454^464^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^456^^^^^454^464^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^456^^^^^454^464^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P7_Replace_Invocation]^visitMaxs ( opcode, 3 ) ;^457^^^^^454^464^checkOpcode ( opcode, 3 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P14_Delete_Statement]^^457^^^^^454^464^checkOpcode ( opcode, 3 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkOpcode ( opcode, 3 ) ;^457^^^^^454^464^checkOpcode ( opcode, 3 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkOpcode ( opcode, 3 ) ;^457^^^^^454^464^checkOpcode ( opcode, 3 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkOpcode ( opcode, 3 ) ;^457^^^^^454^464^checkOpcode ( opcode, 3 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkOpcode ( opcode, 3 ) ;^457^^^^^454^464^checkOpcode ( opcode, 3 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkOpcode ( opcode, 3 ) ;^457^^^^^454^464^checkOpcode ( opcode, 3 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkOpcode ( opcode, 3 ) ;^457^^^^^454^464^checkOpcode ( opcode, 3 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkOpcode ( opcode, 3 ) ;^457^^^^^454^464^checkOpcode ( opcode, 3 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P3_Replace_Literal]^checkInternalName ( type, "typet" ) ;^458^^^^^454^464^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkIdentifier ( type, "type" ) ;^458^^^^^454^464^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P14_Delete_Statement]^^458^^^^^454^464^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkIdentifier ( name, "name" ) ;checkInternalName ( type, "type" ) ;^458^^^^^454^464^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkInternalName ( name, 0, -1, msg ) ;checkInternalName ( type, "type" ) ;^458^^^^^454^464^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkInternalName ( owner, "owner" ) ;checkInternalName ( type, "type" ) ;^458^^^^^454^464^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkInternalName ( desc, start + 1, index, null ) ;checkInternalName ( type, "type" ) ;^458^^^^^454^464^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkMethodIdentifier ( name, "name" ) ;checkInternalName ( type, "type" ) ;^458^^^^^454^464^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P2_Replace_Operator]^if  ( opcode == Opcodes.NEW || type.charAt ( 0 )  == '[' )  {^459^^^^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P2_Replace_Operator]^if  ( opcode >= Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^459^^^^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P2_Replace_Operator]^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  != '[' )  {^459^^^^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P3_Replace_Literal]^if  ( opcode == Opcodes.NEW && type.charAt ( opcode )  == '[' )  {^459^^^^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P5_Replace_Variable]^if  ( type == Opcodes.NEW && opcode.charAt ( 0 )  == '[' )  {^459^^^^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P6_Replace_Expression]^if  ( opcode == Opcodes.NEW ) {^459^^^^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P6_Replace_Expression]^if  (  type.charAt ( 0 )  == '[' )  {^459^^^^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P6_Replace_Expression]^if  ( opcode == NEW )  {^459^^^^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P6_Replace_Expression]^if  ( "NEW cannot be used to create arrays: " + type )  {^459^^^^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P7_Replace_Invocation]^if  ( opcode == Opcodes.NEW && type.indexOf ( 0 )  == '[' )  {^459^^^^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P8_Replace_Mix]^if  ( opcode == Opcodes.NEW && type.indexOf ( 1 )  == '[' )  {^459^^^^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("NEW cannot be used to create arrays: " + type));^459^460^461^462^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  { throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P16_Remove_Block]^^459^460^461^462^^454^464^if  ( opcode == Opcodes.NEW && type.charAt ( 0 )  == '[' )  { throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^459^^^^^454^464^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^459^^^^^454^464^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P13_Insert_Block]^if  (  ( operand <  ( T_BOOLEAN )  )  ||  ( operand >  ( T_LONG )  )  )  {     throw new IllegalArgumentException (  ( "Invalid operand  ( must be an array type code T_... ) : " + operand )  ) ; }^459^^^^^454^464^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^459^^^^^454^464^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^459^^^^^454^464^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^459^^^^^454^464^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^459^^^^^454^464^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^459^^^^^454^464^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^459^^^^^454^464^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: "  ||  type ) ;^460^461^^^^454^464^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ot be used to c" + type ) ;^460^461^^^^454^464^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: "   instanceof   type ) ;^460^461^^^^454^464^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " beEW cannot be used to create arrays: " + type ) ;^460^461^^^^454^464^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P13_Insert_Block]^if  (  ( opcode ==  ( NEW )  )  &&  (  ( type.charAt ( 0 )  )  == '[' )  )  {     throw new IllegalArgumentException (  ( "NEW cannot be used to create arrays: " + type )  ) ; }^460^^^^^454^464^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^460^^^^^454^464^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: "  ==  type ) ;^460^461^^^^454^464^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "NEW ca" + type ) ;^460^461^^^^454^464^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: "  >>  type ) ;^460^461^^^^454^464^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: d to crea" + type ) ;^460^461^^^^454^464^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^460^461^^^^454^464^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitTypeInsn (  type ) ;^463^^^^^454^464^mv.visitTypeInsn ( opcode, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitTypeInsn ( opcode ) ;^463^^^^^454^464^mv.visitTypeInsn ( opcode, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitTypeInsn ( type, opcode ) ;^463^^^^^454^464^mv.visitTypeInsn ( opcode, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P7_Replace_Invocation]^mv.visitMultiANewArrayInsn ( opcode, type ) ;^463^^^^^454^464^mv.visitTypeInsn ( opcode, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P8_Replace_Mix]^mv .visitInsn ( opcode )  ;^463^^^^^454^464^mv.visitTypeInsn ( opcode, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P14_Delete_Statement]^^463^^^^^454^464^mv.visitTypeInsn ( opcode, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitVarInsn ( opcode, var ) ;mv.visitTypeInsn ( opcode, type ) ;^463^^^^^454^464^mv.visitTypeInsn ( opcode, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitIincInsn ( var, increment ) ;mv.visitTypeInsn ( opcode, type ) ;^463^^^^^454^464^mv.visitTypeInsn ( opcode, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitFieldInsn ( opcode, owner, name, desc ) ;mv.visitTypeInsn ( opcode, type ) ;^463^^^^^454^464^mv.visitTypeInsn ( opcode, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitLdcInsn ( cst ) ;mv.visitTypeInsn ( opcode, type ) ;^463^^^^^454^464^mv.visitTypeInsn ( opcode, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitIntInsn ( opcode, operand ) ;mv.visitTypeInsn ( opcode, type ) ;^463^^^^^454^464^mv.visitTypeInsn ( opcode, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitJumpInsn ( opcode, label ) ;mv.visitTypeInsn ( opcode, type ) ;^463^^^^^454^464^mv.visitTypeInsn ( opcode, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitMethodInsn ( opcode, owner, name, desc ) ;mv.visitTypeInsn ( opcode, type ) ;^463^^^^^454^464^mv.visitTypeInsn ( opcode, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitInsn ( opcode ) ;mv.visitTypeInsn ( opcode, type ) ;^463^^^^^454^464^mv.visitTypeInsn ( opcode, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTypeInsn [RETURN_TYPE] void   final int opcode String type [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkEndCode (  ) ;^472^^^^^466^479^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P14_Delete_Statement]^^472^^^^^466^479^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^472^^^^^466^479^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^472^^^^^466^479^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^472^^^^^466^479^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^472^^^^^466^479^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^472^^^^^466^479^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^473^^^^^466^479^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P14_Delete_Statement]^^473^^^^^466^479^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^473^^^^^466^479^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^473^^^^^466^479^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^473^^^^^466^479^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^473^^^^^466^479^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^473^^^^^466^479^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^473^^^^^466^479^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^473^^^^^466^479^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^473^^^^^466^479^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^473^^^^^466^479^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^473^^^^^466^479^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^473^^^^^466^479^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^473^^^^^466^479^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P3_Replace_Literal]^checkOpcode ( opcode, 13 ) ;^474^^^^^466^479^checkOpcode ( opcode, 4 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P7_Replace_Invocation]^visitMaxs ( opcode, 4 ) ;^474^^^^^466^479^checkOpcode ( opcode, 4 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P14_Delete_Statement]^^474^^^^^466^479^checkOpcode ( opcode, 4 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkOpcode ( opcode, 4 ) ;^474^^^^^466^479^checkOpcode ( opcode, 4 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkOpcode ( opcode, 4 ) ;^474^^^^^466^479^checkOpcode ( opcode, 4 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkOpcode ( opcode, 4 ) ;^474^^^^^466^479^checkOpcode ( opcode, 4 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkOpcode ( opcode, 4 ) ;^474^^^^^466^479^checkOpcode ( opcode, 4 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkOpcode ( opcode, 4 ) ;^474^^^^^466^479^checkOpcode ( opcode, 4 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkOpcode ( opcode, 4 ) ;^474^^^^^466^479^checkOpcode ( opcode, 4 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkOpcode ( opcode, 4 ) ;^474^^^^^466^479^checkOpcode ( opcode, 4 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P3_Replace_Literal]^checkInternalName ( owner, "wner" ) ;^475^^^^^466^479^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^checkInternalName ( name, "owner" ) ;^475^^^^^466^479^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkIdentifier ( owner, "owner" ) ;^475^^^^^466^479^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P8_Replace_Mix]^checkIdentifier ( name, "owner" ) ;^475^^^^^466^479^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P14_Delete_Statement]^^475^^^^^466^479^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkIdentifier ( name, "name" ) ;checkInternalName ( owner, "owner" ) ;^475^^^^^466^479^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkInternalName ( name, 0, -1, msg ) ;checkInternalName ( owner, "owner" ) ;^475^^^^^466^479^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkInternalName ( desc, start + 1, index, null ) ;checkInternalName ( owner, "owner" ) ;^475^^^^^466^479^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkInternalName ( type, "type" ) ;checkInternalName ( owner, "owner" ) ;^475^^^^^466^479^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P3_Replace_Literal]^checkIdentifier ( name, "na" ) ;^476^^^^^466^479^checkIdentifier ( name, "name" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^checkIdentifier ( owner, "name" ) ;^476^^^^^466^479^checkIdentifier ( name, "name" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkMethodIdentifier ( name, "name" ) ;^476^^^^^466^479^checkIdentifier ( name, "name" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P14_Delete_Statement]^^476^477^478^479^^466^479^checkIdentifier ( name, "name" ) ; checkDesc ( desc, false ) ; mv.visitFieldInsn ( opcode, owner, name, desc ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^476^^^^^466^479^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P3_Replace_Literal]^checkDesc ( desc, true ) ;^477^^^^^466^479^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P7_Replace_Invocation]^visitAnnotation ( desc, false ) ;^477^^^^^466^479^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P8_Replace_Mix]^checkDesc ( owner, false ) ;^477^^^^^466^479^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P14_Delete_Statement]^^477^478^^^^466^479^checkDesc ( desc, false ) ; mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^start = checkDesc ( desc, start + 1, true ) ;checkDesc ( desc, false ) ;^477^^^^^466^479^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkDesc ( desc, false ) ;^477^^^^^466^479^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkDesc ( name, false ) ;checkDesc ( desc, false ) ;^477^^^^^466^479^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^return checkDesc ( desc, index, false ) ;checkDesc ( desc, false ) ;^477^^^^^466^479^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^start = checkDesc ( desc, start, false ) ;checkDesc ( desc, false ) ;^477^^^^^466^479^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^int end = checkDesc ( desc, 0, canBeVoid ) ;checkDesc ( desc, false ) ;^477^^^^^466^479^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^477^^^^^466^479^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitFieldInsn ( opcode, name, name, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitFieldInsn ( opcode, owner, desc, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitFieldInsn ( opcode, owner, name, owner ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitFieldInsn (  owner, name, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitFieldInsn ( opcode,  name, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitFieldInsn ( opcode, owner,  desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitFieldInsn ( opcode, owner, name ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitFieldInsn ( name, owner, opcode, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitFieldInsn ( opcode, name, owner, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitFieldInsn ( opcode, desc, name, owner ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P7_Replace_Invocation]^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P8_Replace_Mix]^mv.visitFieldInsn ( opcode, owner, name, name ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P14_Delete_Statement]^^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitTypeInsn ( opcode, type ) ;mv.visitFieldInsn ( opcode, owner, name, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitVarInsn ( opcode, var ) ;mv.visitFieldInsn ( opcode, owner, name, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitIincInsn ( var, increment ) ;mv.visitFieldInsn ( opcode, owner, name, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitIntInsn ( opcode, operand ) ;mv.visitFieldInsn ( opcode, owner, name, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitJumpInsn ( opcode, label ) ;mv.visitFieldInsn ( opcode, owner, name, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitMethodInsn ( opcode, owner, name, desc ) ;mv.visitFieldInsn ( opcode, owner, name, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitInsn ( opcode ) ;mv.visitFieldInsn ( opcode, owner, name, desc ) ;^478^^^^^466^479^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitFieldInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkEndCode (  ) ;^487^^^^^481^494^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P14_Delete_Statement]^^487^488^^^^481^494^checkStartCode (  ) ; checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^487^^^^^481^494^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^487^^^^^481^494^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^487^^^^^481^494^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^487^^^^^481^494^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^487^^^^^481^494^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^488^^^^^481^494^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P14_Delete_Statement]^^488^489^^^^481^494^checkEndCode (  ) ; checkOpcode ( opcode, 5 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^488^^^^^481^494^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^488^^^^^481^494^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^488^^^^^481^494^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^488^^^^^481^494^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^488^^^^^481^494^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^488^^^^^481^494^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^488^^^^^481^494^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^488^^^^^481^494^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^488^^^^^481^494^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^488^^^^^481^494^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^488^^^^^481^494^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^488^^^^^481^494^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P3_Replace_Literal]^checkOpcode ( opcode, opcode ) ;^489^^^^^481^494^checkOpcode ( opcode, 5 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P7_Replace_Invocation]^visitMaxs ( opcode, 5 ) ;^489^^^^^481^494^checkOpcode ( opcode, 5 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P14_Delete_Statement]^^489^490^^^^481^494^checkOpcode ( opcode, 5 ) ; checkMethodIdentifier ( name, "name" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkOpcode ( opcode, 5 ) ;^489^^^^^481^494^checkOpcode ( opcode, 5 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkOpcode ( opcode, 5 ) ;^489^^^^^481^494^checkOpcode ( opcode, 5 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkOpcode ( opcode, 5 ) ;^489^^^^^481^494^checkOpcode ( opcode, 5 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkOpcode ( opcode, 5 ) ;^489^^^^^481^494^checkOpcode ( opcode, 5 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkOpcode ( opcode, 5 ) ;^489^^^^^481^494^checkOpcode ( opcode, 5 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkOpcode ( opcode, 5 ) ;^489^^^^^481^494^checkOpcode ( opcode, 5 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkOpcode ( opcode, 5 ) ;^489^^^^^481^494^checkOpcode ( opcode, 5 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P3_Replace_Literal]^checkMethodIdentifier ( name, "na" ) ;^490^^^^^481^494^checkMethodIdentifier ( name, "name" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^checkMethodIdentifier ( owner, "name" ) ;^490^^^^^481^494^checkMethodIdentifier ( name, "name" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkIdentifier ( name, "name" ) ;^490^^^^^481^494^checkMethodIdentifier ( name, "name" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P8_Replace_Mix]^checkIdentifier ( owner, "name" ) ;^490^^^^^481^494^checkMethodIdentifier ( name, "name" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P14_Delete_Statement]^^490^491^492^493^494^481^494^checkMethodIdentifier ( name, "name" ) ; checkInternalName ( owner, "owner" ) ; checkMethodDesc ( desc ) ; mv.visitMethodInsn ( opcode, owner, name, desc ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^490^^^^^481^494^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P3_Replace_Literal]^checkInternalName ( owner, "ow" ) ;^491^^^^^481^494^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^checkInternalName ( name, "owner" ) ;^491^^^^^481^494^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkIdentifier ( owner, "owner" ) ;^491^^^^^481^494^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P14_Delete_Statement]^^491^492^^^^481^494^checkInternalName ( owner, "owner" ) ; checkMethodDesc ( desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkIdentifier ( name, "name" ) ;checkInternalName ( owner, "owner" ) ;^491^^^^^481^494^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkInternalName ( name, 0, -1, msg ) ;checkInternalName ( owner, "owner" ) ;^491^^^^^481^494^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkInternalName ( desc, start + 1, index, null ) ;checkInternalName ( owner, "owner" ) ;^491^^^^^481^494^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkInternalName ( type, "type" ) ;checkInternalName ( owner, "owner" ) ;^491^^^^^481^494^checkInternalName ( owner, "owner" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^491^^^^^481^494^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^491^^^^^481^494^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^checkMethodDesc ( owner ) ;^492^^^^^481^494^checkMethodDesc ( desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkMethodSignature ( desc ) ;^492^^^^^481^494^checkMethodDesc ( desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P14_Delete_Statement]^^492^^^^^481^494^checkMethodDesc ( desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkDesc ( desc, false ) ;checkMethodDesc ( desc ) ;^492^^^^^481^494^checkMethodDesc ( desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkMethodDesc ( desc ) ;^492^^^^^481^494^checkMethodDesc ( desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkMethodDesc ( desc ) ;^492^^^^^481^494^checkMethodDesc ( desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkMethodDesc ( desc ) ;^492^^^^^481^494^checkMethodDesc ( desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkMethodIdentifier ( name, "name" ) ;checkMethodDesc ( desc ) ;^492^^^^^481^494^checkMethodDesc ( desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitMethodInsn ( opcode, name, name, desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitMethodInsn ( opcode, owner, desc, desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitMethodInsn ( opcode, owner, name, owner ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitMethodInsn (  owner, name, desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitMethodInsn ( opcode,  name, desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitMethodInsn ( opcode, owner,  desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitMethodInsn ( opcode, owner, name ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitMethodInsn ( opcode, name, owner, desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitMethodInsn ( opcode, owner, desc, name ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P7_Replace_Invocation]^mv.visitFieldInsn ( opcode, owner, name, desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P8_Replace_Mix]^mv.visitMethodInsn ( opcode, owner, owner, desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P14_Delete_Statement]^^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitTypeInsn ( opcode, type ) ;mv.visitMethodInsn ( opcode, owner, name, desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitVarInsn ( opcode, var ) ;mv.visitMethodInsn ( opcode, owner, name, desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitFieldInsn ( opcode, owner, name, desc ) ;mv.visitMethodInsn ( opcode, owner, name, desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitIntInsn ( opcode, operand ) ;mv.visitMethodInsn ( opcode, owner, name, desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitJumpInsn ( opcode, label ) ;mv.visitMethodInsn ( opcode, owner, name, desc ) ;^493^^^^^481^494^mv.visitMethodInsn ( opcode, owner, name, desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMethodInsn [RETURN_TYPE] void   final int opcode String owner String name String desc [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  String  desc  name  owner  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkEndCode (  ) ;^497^^^^^496^502^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P14_Delete_Statement]^^497^498^^^^496^502^checkStartCode (  ) ; checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^497^^^^^496^502^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^497^^^^^496^502^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^497^^^^^496^502^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^497^^^^^496^502^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^497^^^^^496^502^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^498^^^^^496^502^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P14_Delete_Statement]^^498^^^^^496^502^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^498^^^^^496^502^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^498^^^^^496^502^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^498^^^^^496^502^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^498^^^^^496^502^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^498^^^^^496^502^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^498^^^^^496^502^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^498^^^^^496^502^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^498^^^^^496^502^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^498^^^^^496^502^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^498^^^^^496^502^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^498^^^^^496^502^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^498^^^^^496^502^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P3_Replace_Literal]^checkOpcode ( opcode, 11 ) ;^499^^^^^496^502^checkOpcode ( opcode, 6 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P7_Replace_Invocation]^visitMaxs ( opcode, 6 ) ;^499^^^^^496^502^checkOpcode ( opcode, 6 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P14_Delete_Statement]^^499^500^^^^496^502^checkOpcode ( opcode, 6 ) ; checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkOpcode ( opcode, 6 ) ;^499^^^^^496^502^checkOpcode ( opcode, 6 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkOpcode ( opcode, 6 ) ;^499^^^^^496^502^checkOpcode ( opcode, 6 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkOpcode ( opcode, 6 ) ;^499^^^^^496^502^checkOpcode ( opcode, 6 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkOpcode ( opcode, 6 ) ;^499^^^^^496^502^checkOpcode ( opcode, 6 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkOpcode ( opcode, 6 ) ;^499^^^^^496^502^checkOpcode ( opcode, 6 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkOpcode ( opcode, 6 ) ;^499^^^^^496^502^checkOpcode ( opcode, 6 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkOpcode ( opcode, 6 ) ;^499^^^^^496^502^checkOpcode ( opcode, 6 ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P3_Replace_Literal]^checkLabel ( label, true, "label" ) ;^500^^^^^496^502^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P3_Replace_Literal]^checkLabel ( label, false, "aabel" ) ;^500^^^^^496^502^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkChar ( label, false, "label" ) ;^500^^^^^496^502^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P14_Delete_Statement]^^500^^^^^496^502^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkLabel ( labels[i], false, "label at index " + i ) ;checkLabel ( label, false, "label" ) ;^500^^^^^496^502^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkLabel ( dflt, false, "default label" ) ;checkLabel ( label, false, "label" ) ;^500^^^^^496^502^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkDesc ( name, false ) ;checkLabel ( label, false, "label" ) ;^500^^^^^496^502^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkLabel ( start, true, "start label" ) ;checkLabel ( label, false, "label" ) ;^500^^^^^496^502^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^checkLabel ( end, true, "end label" ) ;checkLabel ( label, false, "label" ) ;^500^^^^^496^502^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitJumpInsn (  label ) ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitJumpInsn ( opcode ) ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P5_Replace_Variable]^mv.visitJumpInsn ( label, opcode ) ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P7_Replace_Invocation]^mv.visitLineNumber ( opcode, label ) ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P7_Replace_Invocation]^mv .visitInsn ( opcode )  ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P14_Delete_Statement]^^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;mv.visitJumpInsn ( opcode, label ) ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitTypeInsn ( opcode, type ) ;mv.visitJumpInsn ( opcode, label ) ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;mv.visitJumpInsn ( opcode, label ) ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitVarInsn ( opcode, var ) ;mv.visitJumpInsn ( opcode, label ) ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitLabel ( label ) ;mv.visitJumpInsn ( opcode, label ) ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitIincInsn ( var, increment ) ;mv.visitJumpInsn ( opcode, label ) ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitFieldInsn ( opcode, owner, name, desc ) ;mv.visitJumpInsn ( opcode, label ) ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitLdcInsn ( cst ) ;mv.visitJumpInsn ( opcode, label ) ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitIntInsn ( opcode, operand ) ;mv.visitJumpInsn ( opcode, label ) ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitMethodInsn ( opcode, owner, name, desc ) ;mv.visitJumpInsn ( opcode, label ) ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P11_Insert_Donor_Statement]^mv.visitInsn ( opcode ) ;mv.visitJumpInsn ( opcode, label ) ;^501^^^^^496^502^mv.visitJumpInsn ( opcode, label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitJumpInsn [RETURN_TYPE] void   final int opcode Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  
[P7_Replace_Invocation]^checkEndCode (  ) ;^505^^^^^504^513^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P14_Delete_Statement]^^505^506^^^^504^513^checkStartCode (  ) ; checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^505^^^^^504^513^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^505^^^^^504^513^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^505^^^^^504^513^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^505^^^^^504^513^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^505^^^^^504^513^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^506^^^^^504^513^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P14_Delete_Statement]^^506^507^^^^504^513^checkEndCode (  ) ; checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^506^^^^^504^513^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^506^^^^^504^513^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^506^^^^^504^513^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^506^^^^^504^513^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^506^^^^^504^513^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^506^^^^^504^513^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^506^^^^^504^513^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^506^^^^^504^513^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^506^^^^^504^513^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^506^^^^^504^513^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^506^^^^^504^513^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^506^^^^^504^513^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P3_Replace_Literal]^checkLabel ( label, true, "label" ) ;^507^^^^^504^513^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P3_Replace_Literal]^checkLabel ( label, false, "labelb" ) ;^507^^^^^504^513^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P7_Replace_Invocation]^checkChar ( label, false, "label" ) ;^507^^^^^504^513^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P14_Delete_Statement]^^507^^^^^504^513^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkLabel ( labels[i], false, "label at index " + i ) ;checkLabel ( label, false, "label" ) ;^507^^^^^504^513^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkLabel ( dflt, false, "default label" ) ;checkLabel ( label, false, "label" ) ;^507^^^^^504^513^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkDesc ( name, false ) ;checkLabel ( label, false, "label" ) ;^507^^^^^504^513^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkLabel ( start, true, "start label" ) ;checkLabel ( label, false, "label" ) ;^507^^^^^504^513^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkLabel ( end, true, "end label" ) ;checkLabel ( label, false, "label" ) ;^507^^^^^504^513^checkLabel ( label, false, "label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^if  ( labels.get ( label )  == null )  {^508^^^^^504^513^if  ( labels.get ( label )  != null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P5_Replace_Variable]^if  ( labelss.get ( label )  != null )  {^508^^^^^504^513^if  ( labels.get ( label )  != null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P5_Replace_Variable]^if  ( label.get ( labels )  != null )  {^508^^^^^504^513^if  ( labels.get ( label )  != null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P8_Replace_Mix]^if  ( labels.get ( label )  != this )  {^508^^^^^504^513^if  ( labels.get ( label )  != null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P9_Replace_Statement]^if  ( checkVisited && labels.get ( label )  == null )  {^508^^^^^504^513^if  ( labels.get ( label )  != null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Already visited label");^508^509^510^^^504^513^if  ( labels.get ( label )  != null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P16_Remove_Block]^^508^509^510^^^504^513^if  ( labels.get ( label )  != null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( nLocal > 0 )  &&  (  ( local == null )  ||  (  ( local.length )  < nLocal )  )  )  {     throw new IllegalArgumentException ( "Array local[] is shorter than nLocal" ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( nStack > 0 )  &&  (  ( stack == null )  ||  (  ( stack.length )  < nStack )  )  )  {     throw new IllegalArgumentException ( "Array stack[] is shorter than nStack" ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^508^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^509^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^509^^^^^504^513^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P3_Replace_Literal]^labels.put ( label, new Integer ( labels.size() - 6  )  ) ;^511^^^^^504^513^labels.put ( label, new Integer ( labels.size (  )  )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P3_Replace_Literal]^labels.put ( label, new Integer ( labels.size() + 7  )  ) ;^511^^^^^504^513^labels.put ( label, new Integer ( labels.size (  )  )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P5_Replace_Variable]^labels.put (  new Integer ( labels.size (  )  )  ) ;^511^^^^^504^513^labels.put ( label, new Integer ( labels.size (  )  )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P5_Replace_Variable]^labels.put ( labels, new Integer ( label.size (  )  )  ) ;^511^^^^^504^513^labels.put ( label, new Integer ( labels.size (  )  )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P7_Replace_Invocation]^labels.get ( label, new Integer ( labels.size (  )  )  ) ;^511^^^^^504^513^labels.put ( label, new Integer ( labels.size (  )  )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P14_Delete_Statement]^^511^512^^^^504^513^labels.put ( label, new Integer ( labels.size (  )  )  ) ; mv.visitLabel ( label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P3_Replace_Literal]^labels.put ( label, new Integer ( labels.size() - 9  )  ) ;^511^^^^^504^513^labels.put ( label, new Integer ( labels.size (  )  )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P14_Delete_Statement]^^511^^^^^504^513^labels.put ( label, new Integer ( labels.size (  )  )  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P7_Replace_Invocation]^mv.visitAttribute ( label ) ;^512^^^^^504^513^mv.visitLabel ( label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P14_Delete_Statement]^^512^^^^^504^513^mv.visitLabel ( label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitEnd (  ) ;mv.visitLabel ( label ) ;^512^^^^^504^513^mv.visitLabel ( label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;mv.visitLabel ( label ) ;^512^^^^^504^513^mv.visitLabel ( label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitLineNumber ( line, start ) ;mv.visitLabel ( label ) ;^512^^^^^504^513^mv.visitLabel ( label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitVarInsn ( opcode, var ) ;mv.visitLabel ( label ) ;^512^^^^^504^513^mv.visitLabel ( label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitLdcInsn ( cst ) ;mv.visitLabel ( label ) ;^512^^^^^504^513^mv.visitLabel ( label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitAttribute ( attr ) ;mv.visitLabel ( label ) ;^512^^^^^504^513^mv.visitLabel ( label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitJumpInsn ( opcode, label ) ;mv.visitLabel ( label ) ;^512^^^^^504^513^mv.visitLabel ( label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitInsn ( opcode ) ;mv.visitLabel ( label ) ;^512^^^^^504^513^mv.visitLabel ( label ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLabel [RETURN_TYPE] void   Label label [VARIABLES] Label  label  int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P7_Replace_Invocation]^checkEndCode (  ) ;^516^^^^^515^522^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P14_Delete_Statement]^^516^^^^^515^522^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^516^^^^^515^522^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^516^^^^^515^522^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^516^^^^^515^522^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^516^^^^^515^522^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^516^^^^^515^522^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^517^^^^^515^522^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P14_Delete_Statement]^^517^^^^^515^522^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^517^^^^^515^522^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^517^^^^^515^522^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^517^^^^^515^522^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^517^^^^^515^522^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^517^^^^^515^522^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^517^^^^^515^522^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^517^^^^^515^522^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^517^^^^^515^522^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^517^^^^^515^522^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^517^^^^^515^522^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^517^^^^^515^522^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^517^^^^^515^522^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^if  ( ! ( cst  >=  Type )  )  {^518^^^^^515^522^if  ( ! ( cst instanceof Type )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P9_Replace_Statement]^if  ( ! ( value instanceof Label )  )  {^518^^^^^515^522^if  ( ! ( cst instanceof Type )  )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P15_Unwrap_Block]^org.mockito.asm.util.CheckMethodAdapter.checkConstant(cst);^518^519^520^^^515^522^if  ( ! ( cst instanceof Type )  )  { checkConstant ( cst ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P16_Remove_Block]^^518^519^520^^^515^522^if  ( ! ( cst instanceof Type )  )  { checkConstant ( cst ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P7_Replace_Invocation]^checkFrameValue ( cst ) ;^519^^^^^515^522^checkConstant ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P14_Delete_Statement]^^519^^^^^515^522^checkConstant ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkConstant ( cst ) ;^519^^^^^515^522^checkConstant ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkConstant ( cst ) ;^519^^^^^515^522^checkConstant ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkConstant ( cst ) ;^519^^^^^515^522^checkConstant ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^519^^^^^515^522^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( ! ( cst instanceof Type )  )  {     checkConstant ( cst ) ; }^519^^^^^515^522^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P7_Replace_Invocation]^mv.visitInsn ( cst ) ;^521^^^^^515^522^mv.visitLdcInsn ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P14_Delete_Statement]^^521^^^^^515^522^mv.visitLdcInsn ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitEnd (  ) ;mv.visitLdcInsn ( cst ) ;^521^^^^^515^522^mv.visitLdcInsn ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;mv.visitLdcInsn ( cst ) ;^521^^^^^515^522^mv.visitLdcInsn ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitTypeInsn ( opcode, type ) ;mv.visitLdcInsn ( cst ) ;^521^^^^^515^522^mv.visitLdcInsn ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitLineNumber ( line, start ) ;mv.visitLdcInsn ( cst ) ;^521^^^^^515^522^mv.visitLdcInsn ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitVarInsn ( opcode, var ) ;mv.visitLdcInsn ( cst ) ;^521^^^^^515^522^mv.visitLdcInsn ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitLabel ( label ) ;mv.visitLdcInsn ( cst ) ;^521^^^^^515^522^mv.visitLdcInsn ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitIincInsn ( var, increment ) ;mv.visitLdcInsn ( cst ) ;^521^^^^^515^522^mv.visitLdcInsn ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitAttribute ( attr ) ;mv.visitLdcInsn ( cst ) ;^521^^^^^515^522^mv.visitLdcInsn ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitIntInsn ( opcode, operand ) ;mv.visitLdcInsn ( cst ) ;^521^^^^^515^522^mv.visitLdcInsn ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitJumpInsn ( opcode, label ) ;mv.visitLdcInsn ( cst ) ;^521^^^^^515^522^mv.visitLdcInsn ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitInsn ( opcode ) ;mv.visitLdcInsn ( cst ) ;^521^^^^^515^522^mv.visitLdcInsn ( cst ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLdcInsn [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P7_Replace_Invocation]^checkEndCode (  ) ;^525^^^^^524^530^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P14_Delete_Statement]^^525^526^^^^524^530^checkStartCode (  ) ; checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^525^^^^^524^530^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^525^^^^^524^530^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^525^^^^^524^530^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^525^^^^^524^530^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^525^^^^^524^530^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^526^^^^^524^530^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P14_Delete_Statement]^^526^527^^^^524^530^checkEndCode (  ) ; checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^526^^^^^524^530^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^526^^^^^524^530^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^526^^^^^524^530^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^526^^^^^524^530^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^526^^^^^524^530^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^526^^^^^524^530^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^526^^^^^524^530^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^526^^^^^524^530^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^526^^^^^524^530^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^526^^^^^524^530^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^526^^^^^524^530^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^526^^^^^524^530^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P3_Replace_Literal]^checkUnsignedShort ( var, "validnvalid variable index" ) ;^527^^^^^524^530^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P5_Replace_Variable]^checkUnsignedShort ( increment, "Invalid variable index" ) ;^527^^^^^524^530^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P7_Replace_Invocation]^checkSignedShort ( var, "Invalid variable index" ) ;^527^^^^^524^530^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P14_Delete_Statement]^^527^^^^^524^530^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( line, "Invalid line number" ) ;checkUnsignedShort ( var, "Invalid variable index" ) ;^527^^^^^524^530^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkSignedByte ( operand, "Invalid operand" ) ;checkUnsignedShort ( var, "Invalid variable index" ) ;^527^^^^^524^530^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkSignedShort ( increment, "Invalid increment" ) ;checkUnsignedShort ( var, "Invalid variable index" ) ;^527^^^^^524^530^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkSignedShort ( operand, "Invalid operand" ) ;checkUnsignedShort ( var, "Invalid variable index" ) ;^527^^^^^524^530^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;checkUnsignedShort ( var, "Invalid variable index" ) ;^527^^^^^524^530^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( index, "Invalid variable index" ) ;checkUnsignedShort ( var, "Invalid variable index" ) ;^527^^^^^524^530^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;checkUnsignedShort ( var, "Invalid variable index" ) ;^527^^^^^524^530^checkUnsignedShort ( var, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P3_Replace_Literal]^checkSignedShort ( increment, "Invalid incrementn" ) ;^528^^^^^524^530^checkSignedShort ( increment, "Invalid increment" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P5_Replace_Variable]^checkSignedShort ( var, "Invalid increment" ) ;^528^^^^^524^530^checkSignedShort ( increment, "Invalid increment" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P7_Replace_Invocation]^checkUnsignedShort ( increment, "Invalid increment" ) ;^528^^^^^524^530^checkSignedShort ( increment, "Invalid increment" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P14_Delete_Statement]^^528^529^^^^524^530^checkSignedShort ( increment, "Invalid increment" ) ; mv.visitIincInsn ( var, increment ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( line, "Invalid line number" ) ;checkSignedShort ( increment, "Invalid increment" ) ;^528^^^^^524^530^checkSignedShort ( increment, "Invalid increment" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkSignedByte ( operand, "Invalid operand" ) ;checkSignedShort ( increment, "Invalid increment" ) ;^528^^^^^524^530^checkSignedShort ( increment, "Invalid increment" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkSignedShort ( operand, "Invalid operand" ) ;checkSignedShort ( increment, "Invalid increment" ) ;^528^^^^^524^530^checkSignedShort ( increment, "Invalid increment" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( var, "Invalid variable index" ) ;checkSignedShort ( increment, "Invalid increment" ) ;^528^^^^^524^530^checkSignedShort ( increment, "Invalid increment" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;checkSignedShort ( increment, "Invalid increment" ) ;^528^^^^^524^530^checkSignedShort ( increment, "Invalid increment" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( index, "Invalid variable index" ) ;checkSignedShort ( increment, "Invalid increment" ) ;^528^^^^^524^530^checkSignedShort ( increment, "Invalid increment" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;checkSignedShort ( increment, "Invalid increment" ) ;^528^^^^^524^530^checkSignedShort ( increment, "Invalid increment" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P5_Replace_Variable]^mv.visitIincInsn ( increment, increment ) ;^529^^^^^524^530^mv.visitIincInsn ( var, increment ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P5_Replace_Variable]^mv.visitIincInsn (  increment ) ;^529^^^^^524^530^mv.visitIincInsn ( var, increment ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P5_Replace_Variable]^mv.visitIincInsn ( var ) ;^529^^^^^524^530^mv.visitIincInsn ( var, increment ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P5_Replace_Variable]^mv.visitIincInsn ( increment, var ) ;^529^^^^^524^530^mv.visitIincInsn ( var, increment ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P7_Replace_Invocation]^mv.visitIntInsn ( var, increment ) ;^529^^^^^524^530^mv.visitIincInsn ( var, increment ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P7_Replace_Invocation]^mv .visitIntInsn ( increment , var )  ;^529^^^^^524^530^mv.visitIincInsn ( var, increment ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P14_Delete_Statement]^^529^^^^^524^530^mv.visitIincInsn ( var, increment ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^mv.visitTypeInsn ( opcode, type ) ;mv.visitIincInsn ( var, increment ) ;^529^^^^^524^530^mv.visitIincInsn ( var, increment ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^mv.visitVarInsn ( opcode, var ) ;mv.visitIincInsn ( var, increment ) ;^529^^^^^524^530^mv.visitIincInsn ( var, increment ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^mv.visitFieldInsn ( opcode, owner, name, desc ) ;mv.visitIincInsn ( var, increment ) ;^529^^^^^524^530^mv.visitIincInsn ( var, increment ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^mv.visitLdcInsn ( cst ) ;mv.visitIincInsn ( var, increment ) ;^529^^^^^524^530^mv.visitIincInsn ( var, increment ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^mv.visitIntInsn ( opcode, operand ) ;mv.visitIincInsn ( var, increment ) ;^529^^^^^524^530^mv.visitIincInsn ( var, increment ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^mv.visitJumpInsn ( opcode, label ) ;mv.visitIincInsn ( var, increment ) ;^529^^^^^524^530^mv.visitIincInsn ( var, increment ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P11_Insert_Donor_Statement]^mv.visitInsn ( opcode ) ;mv.visitIincInsn ( var, increment ) ;^529^^^^^524^530^mv.visitIincInsn ( var, increment ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitIincInsn [RETURN_TYPE] void   final int var final int increment [VARIABLES] int[]  TYPE  boolean  endCode  endMethod  startCode  visible  Map  labels  int  increment  var  
[P7_Replace_Invocation]^checkEndCode (  ) ;^538^^^^^532^552^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P14_Delete_Statement]^^538^^^^^532^552^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^538^^^^^532^552^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^538^^^^^532^552^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^538^^^^^532^552^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^538^^^^^532^552^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^538^^^^^532^552^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^539^^^^^532^552^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P14_Delete_Statement]^^539^^^^^532^552^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^539^^^^^532^552^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^539^^^^^532^552^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^539^^^^^532^552^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^539^^^^^532^552^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^539^^^^^532^552^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^539^^^^^532^552^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^539^^^^^532^552^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^539^^^^^532^552^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^539^^^^^532^552^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^539^^^^^532^552^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^539^^^^^532^552^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^539^^^^^532^552^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P2_Replace_Operator]^if  ( max <= min )  {^540^^^^^532^552^if  ( max < min )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P5_Replace_Variable]^if  ( i < min )  {^540^^^^^532^552^if  ( max < min )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P5_Replace_Variable]^if  ( max < i )  {^540^^^^^532^552^if  ( max < min )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P5_Replace_Variable]^if  ( min < max )  {^540^^^^^532^552^if  ( max < min )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P6_Replace_Expression]^if  (  ( "Max = " + max )  + " must be greater than or equal to min = " + min )  {^540^^^^^532^552^if  ( max < min )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P6_Replace_Expression]^if  ( "Max = " + max + " must be greater than or equal to min = " )  {^540^^^^^532^552^if  ( max < min )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P6_Replace_Expression]^if  ( "Max = " + max )  {^540^^^^^532^552^if  ( max < min )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P9_Replace_Statement]^if  ( e < s )  {^540^^^^^532^552^if  ( max < min )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(((("Max = " + max) + " must be greater than or equal to min = ") + min));^540^541^542^543^^532^552^if  ( max < min )  { throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P16_Remove_Block]^^540^541^542^543^^532^552^if  ( max < min )  { throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Max = "  &&  max  &&  " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Max = "  <<  max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Max = " + max + "must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Max = " + i + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to i = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Max = " + min + " must be greater than or equal to max = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^541^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Max = "  >>  max  >>  " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Max = "  &&  max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "" + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min =  must be greater than " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ;throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Max = "  &  max  &  " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Max = "   instanceof   max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Max = M" + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Max = " + max + "emust be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Max = "  <=  max  <=  " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "=ax = " + max + " must be greater than or equal to min = " + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Max = " + max + "be great" + min ) ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P8_Replace_Mix]^return ;^541^542^^^^532^552^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P3_Replace_Literal]^checkLabel ( dflt, true, "default label" ) ;^544^^^^^532^552^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P3_Replace_Literal]^checkLabel ( dflt, false, "default labele" ) ;^544^^^^^532^552^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P7_Replace_Invocation]^checkChar ( dflt, false, "default label" ) ;^544^^^^^532^552^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P14_Delete_Statement]^^544^^^^^532^552^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkLabel ( labels[i], false, "label at index " + i ) ;checkLabel ( dflt, false, "default label" ) ;^544^^^^^532^552^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkLabel ( label, false, "label" ) ;checkLabel ( dflt, false, "default label" ) ;^544^^^^^532^552^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkLabel ( start, true, "start label" ) ;checkLabel ( dflt, false, "default label" ) ;^544^^^^^532^552^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkLabel ( end, true, "end label" ) ;checkLabel ( dflt, false, "default label" ) ;^544^^^^^532^552^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P2_Replace_Operator]^if  ( labels == null && labels.length != max - min + 1 )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P2_Replace_Operator]^if  ( labels != null || labels.length != max - min + 1 )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P2_Replace_Operator]^if  ( labels == null || labels.length == max - min + 1 )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P2_Replace_Operator]^if  ( labels == null || labels.length != max - min  |  1 )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P2_Replace_Operator]^if  ( labels == null || labels.length != max  >>  min + 1 )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P3_Replace_Literal]^if  ( labels == null || labels.length != max - min +  )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P6_Replace_Expression]^if  ( labels == null ) {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P6_Replace_Expression]^if  (  labels.length != max - min + 1 )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P6_Replace_Expression]^if  ( labels.length !=  ( max - min )  + 1 )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P6_Replace_Expression]^if  ( max - min + 1 )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P6_Replace_Expression]^if  ( max - min )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P8_Replace_Mix]^if  ( labels == this || labels.length != max - min + 1 )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P9_Replace_Statement]^if  ( name == null || name.length (  )  == 0 )  {^545^^^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("There must be max - min + 1 labels");^545^546^547^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P16_Remove_Block]^^545^546^547^^^532^552^if  ( labels == null || labels.length != max - min + 1 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^545^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  (  ( nLocal > 0 )  &&  (  ( local == null )  ||  (  ( local.length )  < nLocal )  )  )  {     throw new IllegalArgumentException ( "Array local[] is shorter than nLocal" ) ; }^545^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^545^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^545^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^545^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^545^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^545^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^545^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^545^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  (  (  ( keys == null )  ||  ( labels == null )  )  ||  (  ( keys.length )  !=  ( labels.length )  )  )  {     throw new IllegalArgumentException ( "There must be the same number of keys and labels" ) ; }^545^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  (  ( nStack > 0 )  &&  (  ( stack == null )  ||  (  ( stack.length )  < nStack )  )  )  {     throw new IllegalArgumentException ( "Array stack[] is shorter than nStack" ) ; }^545^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^545^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^545^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^545^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "There must be the same number of keys and labels" )   ;^546^^^^^532^552^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^546^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^546^^^^^532^552^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P1_Replace_Type]^for  (  short  i = 0; i < labels.length; ++i )  {^548^^^^^532^552^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P2_Replace_Operator]^for  ( int i = 0; i <= labels.length; ++i )  {^548^^^^^532^552^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P2_Replace_Operator]^for  &&  ( int i = 0; i < labels.length; ++i )  {^548^^^^^532^552^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P3_Replace_Literal]^for  ( int i = -7; i < labels.length; ++i )  {^548^^^^^532^552^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P2_Replace_Operator]^checkLabel ( labels[i], false, "label at index "  &&  i ) ;^549^^^^^532^552^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P3_Replace_Literal]^checkLabel ( labels[i], true, "label at index " + i ) ;^549^^^^^532^552^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P3_Replace_Literal]^checkLabel ( labels[i], false, "" + i ) ;^549^^^^^532^552^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P5_Replace_Variable]^checkLabel ( labels[i], false, "label at minndex " + i ) ;^549^^^^^532^552^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P5_Replace_Variable]^checkLabel ( i[i], false, "label at labelsndex " + i ) ;^549^^^^^532^552^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P7_Replace_Invocation]^visitFrame ( labels[i], false, "label at index " + i ) ;^549^^^^^532^552^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P14_Delete_Statement]^^549^^^^^532^552^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkLabel ( label, false, "label" ) ;checkLabel ( labels[i], false, "label at index " + i ) ;^549^^^^^532^552^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^checkLabel ( dflt, false, "default label" ) ;checkLabel ( labels[i], false, "label at index " + i ) ;^549^^^^^532^552^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P1_Replace_Type]^for  (  long  i = 0; i < labels.length; ++i )  {^548^^^^^532^552^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P3_Replace_Literal]^for  ( int i = -3; i < labels.length; ++i )  {^548^^^^^532^552^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P5_Replace_Variable]^mv.visitTableSwitchInsn ( max, max, dflt, labels ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P5_Replace_Variable]^mv.visitTableSwitchInsn ( min, i, dflt, labels ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P5_Replace_Variable]^mv.visitTableSwitchInsn (  max, dflt, labels ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P5_Replace_Variable]^mv.visitTableSwitchInsn ( min,  dflt, labels ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P5_Replace_Variable]^mv.visitTableSwitchInsn ( min, max,  labels ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P5_Replace_Variable]^mv.visitTableSwitchInsn ( min, max, dflt ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P5_Replace_Variable]^mv.visitTableSwitchInsn ( max, min, dflt, labels ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P5_Replace_Variable]^mv.visitTableSwitchInsn ( min, max, labels, dflt ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P7_Replace_Invocation]^mv.visitTryCatchBlock ( min, max, dflt, labels ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P8_Replace_Mix]^mv.visitTableSwitchInsn ( i, max, dflt, labels ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P14_Delete_Statement]^^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P11_Insert_Donor_Statement]^mv.visitJumpInsn ( opcode, label ) ;mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^551^^^^^532^552^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTableSwitchInsn [RETURN_TYPE] void   final int min final int max Label dflt Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  max  min  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^559^^^^^554^569^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P14_Delete_Statement]^^559^560^^^^554^569^checkEndCode (  ) ; checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^559^^^^^554^569^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^559^^^^^554^569^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^559^^^^^554^569^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^559^^^^^554^569^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^559^^^^^554^569^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^559^^^^^554^569^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^559^^^^^554^569^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^559^^^^^554^569^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^559^^^^^554^569^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^559^^^^^554^569^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^559^^^^^554^569^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^559^^^^^554^569^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P7_Replace_Invocation]^checkEndCode (  ) ;^560^^^^^554^569^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P14_Delete_Statement]^^560^^^^^554^569^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^560^^^^^554^569^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^560^^^^^554^569^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^560^^^^^554^569^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^560^^^^^554^569^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^560^^^^^554^569^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P3_Replace_Literal]^checkLabel ( dflt, true, "default label" ) ;^561^^^^^554^569^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P3_Replace_Literal]^checkLabel ( dflt, false, "defauefault label" ) ;^561^^^^^554^569^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P7_Replace_Invocation]^checkChar ( dflt, false, "default label" ) ;^561^^^^^554^569^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P14_Delete_Statement]^^561^^^^^554^569^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkLabel ( labels[i], false, "label at index " + i ) ;checkLabel ( dflt, false, "default label" ) ;^561^^^^^554^569^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkLabel ( label, false, "label" ) ;checkLabel ( dflt, false, "default label" ) ;^561^^^^^554^569^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkLabel ( start, true, "start label" ) ;checkLabel ( dflt, false, "default label" ) ;^561^^^^^554^569^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkLabel ( end, true, "end label" ) ;checkLabel ( dflt, false, "default label" ) ;^561^^^^^554^569^checkLabel ( dflt, false, "default label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P2_Replace_Operator]^if  ( keys == null && labels == null || keys.length != labels.length )  {^562^^^^^554^569^if  ( keys == null || labels == null || keys.length != labels.length )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P2_Replace_Operator]^if  ( keys != null || labels == null || keys.length != labels.length )  {^562^^^^^554^569^if  ( keys == null || labels == null || keys.length != labels.length )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P2_Replace_Operator]^if  ( keys == null || labels != null || keys.length != labels.length )  {^562^^^^^554^569^if  ( keys == null || labels == null || keys.length != labels.length )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P2_Replace_Operator]^if  ( keys == null || labels == null || keys.length == labels.length )  {^562^^^^^554^569^if  ( keys == null || labels == null || keys.length != labels.length )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P6_Replace_Expression]^if  ( keys == null ) {^562^^^^^554^569^if  ( keys == null || labels == null || keys.length != labels.length )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P6_Replace_Expression]^if  (  labels == null || keys.length != labels.length )  {^562^^^^^554^569^if  ( keys == null || labels == null || keys.length != labels.length )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P6_Replace_Expression]^if  ( (keys == null || labels == null) )  {^562^^^^^554^569^if  ( keys == null || labels == null || keys.length != labels.length )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P6_Replace_Expression]^if  ( labels == null )  {^562^^^^^554^569^if  ( keys == null || labels == null || keys.length != labels.length )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P6_Replace_Expression]^if  ( keys.length != labels.length )  {^562^^^^^554^569^if  ( keys == null || labels == null || keys.length != labels.length )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P8_Replace_Mix]^if  ( keys == false ) {^562^^^^^554^569^if  ( keys == null || labels == null || keys.length != labels.length )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("There must be the same number of keys and labels");^562^563^564^^^554^569^if  ( keys == null || labels == null || keys.length != labels.length )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P16_Remove_Block]^^562^563^564^^^554^569^if  ( keys == null || labels == null || keys.length != labels.length )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^562^^^^^554^569^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^562^^^^^554^569^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( nStack > 0 )  &&  (  ( stack == null )  ||  (  ( stack.length )  < nStack )  )  )  {     throw new IllegalArgumentException ( "Array stack[] is shorter than nStack" ) ; }^562^^^^^554^569^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( nLocal > 0 )  &&  (  ( local == null )  ||  (  ( local.length )  < nLocal )  )  )  {     throw new IllegalArgumentException ( "Array local[] is shorter than nLocal" ) ; }^562^^^^^554^569^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^562^^^^^554^569^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^562^^^^^554^569^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^562^^^^^554^569^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^562^^^^^554^569^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "There must be max - min + 1 labels" )   ;^563^^^^^554^569^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P13_Insert_Block]^if  (  (  ( keys == null )  ||  ( labels == null )  )  ||  (  ( keys.length )  !=  ( labels.length )  )  )  {     throw new IllegalArgumentException ( "There must be the same number of keys and labels" ) ; }^563^^^^^554^569^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < labels.length; ++i )  {^565^^^^^554^569^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= labels.length; ++i )  {^565^^^^^554^569^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P2_Replace_Operator]^for  &  ( int i = 0; i < labels.length; ++i )  {^565^^^^^554^569^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P3_Replace_Literal]^for  ( int i = -1; i < labels.length; ++i )  {^565^^^^^554^569^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P2_Replace_Operator]^checkLabel ( labels[i], false, "label at index "  <  i ) ;^566^^^^^554^569^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P3_Replace_Literal]^checkLabel ( labels[i], true, "label at index " + i ) ;^566^^^^^554^569^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P3_Replace_Literal]^checkLabel ( labels[i], false, "ind" + i ) ;^566^^^^^554^569^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P5_Replace_Variable]^checkLabel ( i[i], false, "label at labelsndex " + i ) ;^566^^^^^554^569^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P7_Replace_Invocation]^visitFrame ( labels[i], false, "label at index " + i ) ;^566^^^^^554^569^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P14_Delete_Statement]^^566^^^^^554^569^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkLabel ( label, false, "label" ) ;checkLabel ( labels[i], false, "label at index " + i ) ;^566^^^^^554^569^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^checkLabel ( dflt, false, "default label" ) ;checkLabel ( labels[i], false, "label at index " + i ) ;^566^^^^^554^569^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < labels.length; ++i )  {^565^^^^^554^569^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P3_Replace_Literal]^for  ( int i = -8; i < labels.length; ++i )  {^565^^^^^554^569^for  ( int i = 0; i < labels.length; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P2_Replace_Operator]^checkLabel ( labels[i], false, "label at index "  &&  i ) ;^566^^^^^554^569^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P3_Replace_Literal]^checkLabel ( labels[i], false, "abeabel at index " + i ) ;^566^^^^^554^569^checkLabel ( labels[i], false, "label at index " + i ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P5_Replace_Variable]^mv.visitLookupSwitchInsn ( dflt, TYPE, labels ) ;^568^^^^^554^569^mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P5_Replace_Variable]^mv.visitLookupSwitchInsn (  keys, labels ) ;^568^^^^^554^569^mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P5_Replace_Variable]^mv.visitLookupSwitchInsn ( dflt,  labels ) ;^568^^^^^554^569^mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P5_Replace_Variable]^mv.visitLookupSwitchInsn ( dflt, keys ) ;^568^^^^^554^569^mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P5_Replace_Variable]^mv.visitLookupSwitchInsn ( labels, keys, dflt ) ;^568^^^^^554^569^mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P7_Replace_Invocation]^mv.visitParameterAnnotation ( dflt, keys, labels ) ;^568^^^^^554^569^mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P8_Replace_Mix]^mv.visitParameterAnnotation ( dflt, TYPE, labels ) ;^568^^^^^554^569^mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P14_Delete_Statement]^^568^^^^^554^569^mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^mv.visitTableSwitchInsn ( min, max, dflt, labels ) ;mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;^568^^^^^554^569^mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P11_Insert_Donor_Statement]^mv.visitJumpInsn ( opcode, label ) ;mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;^568^^^^^554^569^mv.visitLookupSwitchInsn ( dflt, keys, labels ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLookupSwitchInsn [RETURN_TYPE] void   Label dflt final int[] keys Label[] labels [VARIABLES] Label  dflt  int[]  TYPE  keys  Label[]  labels  boolean  endCode  endMethod  startCode  visible  Map  labels  int  i  
[P7_Replace_Invocation]^checkEndCode (  ) ;^572^^^^^571^588^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P14_Delete_Statement]^^572^573^^^^571^588^checkStartCode (  ) ; checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^572^^^^^571^588^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^572^^^^^571^588^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^572^^^^^571^588^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^572^^^^^571^588^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^572^^^^^571^588^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^573^^^^^571^588^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P14_Delete_Statement]^^573^574^^^^571^588^checkEndCode (  ) ; checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^573^^^^^571^588^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^573^^^^^571^588^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^573^^^^^571^588^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^573^^^^^571^588^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^573^^^^^571^588^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^573^^^^^571^588^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^573^^^^^571^588^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^573^^^^^571^588^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^573^^^^^571^588^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^573^^^^^571^588^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^573^^^^^571^588^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^573^^^^^571^588^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P3_Replace_Literal]^checkDesc ( desc, true ) ;^574^^^^^571^588^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P7_Replace_Invocation]^visitAnnotation ( desc, false ) ;^574^^^^^571^588^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P14_Delete_Statement]^^574^^^^^571^588^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^start = checkDesc ( desc, start + 1, true ) ;checkDesc ( desc, false ) ;^574^^^^^571^588^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkDesc ( desc, false ) ;^574^^^^^571^588^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^checkDesc ( name, false ) ;checkDesc ( desc, false ) ;^574^^^^^571^588^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^return checkDesc ( desc, index, false ) ;checkDesc ( desc, false ) ;^574^^^^^571^588^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^start = checkDesc ( desc, start, false ) ;checkDesc ( desc, false ) ;^574^^^^^571^588^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P11_Insert_Donor_Statement]^int end = checkDesc ( desc, 0, canBeVoid ) ;checkDesc ( desc, false ) ;^574^^^^^571^588^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P2_Replace_Operator]^if  ( desc.charAt ( 0 )  < '[' )  {^575^^^^^571^588^if  ( desc.charAt ( 0 )  != '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P3_Replace_Literal]^if  ( desc.charAt ( -4 )  != '[' )  {^575^^^^^571^588^if  ( desc.charAt ( 0 )  != '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P6_Replace_Expression]^if  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  {^575^^^^^571^588^if  ( desc.charAt ( 0 )  != '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P7_Replace_Invocation]^if  ( desc.indexOf ( 0 )  != '[' )  {^575^^^^^571^588^if  ( desc.charAt ( 0 )  != '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P8_Replace_Mix]^if  ( desc.charAt ( 0L )  != '[' )  {^575^^^^^571^588^if  ( desc.charAt ( 0 )  != '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P9_Replace_Statement]^if  ( desc.charAt ( start )  == 'V' )  {^575^^^^^571^588^if  ( desc.charAt ( 0 )  != '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P9_Replace_Statement]^if  ( desc.charAt ( start )  != ' ) ' )  {^575^^^^^571^588^if  ( desc.charAt ( 0 )  != '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P9_Replace_Statement]^if  ( name.charAt ( 0 )  == '[' )  {^575^^^^^571^588^if  ( desc.charAt ( 0 )  != '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("Invalid descriptor (must be an array type descriptor): " + desc));^575^576^577^578^^571^588^if  ( desc.charAt ( 0 )  != '[' )  { throw new IllegalArgumentException  (" ")  : " + desc ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P16_Remove_Block]^^575^576^577^578^^571^588^if  ( desc.charAt ( 0 )  != '[' )  { throw new IllegalArgumentException  (" ")  : " + desc ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( operand <  ( T_BOOLEAN )  )  ||  ( operand >  ( T_LONG )  )  )  {     throw new IllegalArgumentException (  ( "Invalid operand  ( must be an array type code T_... ) : " + operand )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( start )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^575^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P2_Replace_Operator]^throw new IllegalArgumentException  <=  (" ")  : " + desc ) ;^576^577^^^^571^588^throw new IllegalArgumentException  (" ")  : " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid operand  ( must be an array type code T_... ) : " + operand )  )   : " + desc ) ;^576^577^^^^571^588^throw new IllegalArgumentException  (" ")  : " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^576^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^576^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P2_Replace_Operator]^throw new IllegalArgumentException  <<  (" ")  : " + desc ) ;^576^577^^^^571^588^throw new IllegalArgumentException  (" ")  : " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^576^577^^^^571^588^throw new IllegalArgumentException  (" ")  : " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P2_Replace_Operator]^throw new IllegalArgumentException  >=  (" ")  : " + desc ) ;^576^577^^^^571^588^throw new IllegalArgumentException  (" ")  : " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P2_Replace_Operator]^throw new IllegalArgumentException  >  (" ")  : " + desc ) ;^576^577^^^^571^588^throw new IllegalArgumentException  (" ")  : " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P3_Replace_Literal]^if  ( desc.charAt ( dims )  != '[' )  {^575^^^^^571^588^if  ( desc.charAt ( 0 )  != '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P2_Replace_Operator]^if  ( dims <= 1 )  {^579^^^^^571^588^if  ( dims < 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P3_Replace_Literal]^if  ( dims <  )  {^579^^^^^571^588^if  ( dims < 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P6_Replace_Expression]^if  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  {^579^^^^^571^588^if  ( dims < 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P8_Replace_Mix]^if  ( dims < 1L )  {^579^^^^^571^588^if  ( dims < 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P9_Replace_Statement]^if  ( e < s )  {^579^^^^^571^588^if  ( dims < 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("Invalid dimensions (must be greater than 0): " + dims));^579^580^581^582^^571^588^if  ( dims < 1 )  { throw new IllegalArgumentException  (" ")  : " + dims ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P16_Remove_Block]^^579^580^581^582^^571^588^if  ( dims < 1 )  { throw new IllegalArgumentException  (" ")  : " + dims ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P2_Replace_Operator]^throw new IllegalArgumentException  >>  (" ")  : " + dims ) ;^580^581^^^^571^588^throw new IllegalArgumentException  (" ")  : " + dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  )   : " + dims ) ;^580^581^^^^571^588^throw new IllegalArgumentException  (" ")  : " + dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^580^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^580^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^580^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^580^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P2_Replace_Operator]^throw new IllegalArgumentException  <  (" ")  : " + dims ) ;^580^581^^^^571^588^throw new IllegalArgumentException  (" ")  : " + dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^580^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P2_Replace_Operator]^throw new IllegalArgumentException  |  (" ")  : " + dims ) ;^580^581^^^^571^588^throw new IllegalArgumentException  (" ")  : " + dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P2_Replace_Operator]^throw new IllegalArgumentException  ||  (" ")  : " + dims ) ;^580^581^^^^571^588^throw new IllegalArgumentException  (" ")  : " + dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P2_Replace_Operator]^if  ( dims >= desc.lastIndexOf ( '[' )  + 1 )  {^583^^^^^571^588^if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P2_Replace_Operator]^if  ( dims > desc.lastIndexOf ( '[' )   <=  1 )  {^583^^^^^571^588^if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P2_Replace_Operator]^if  &&  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^583^^^^^571^588^if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P3_Replace_Literal]^if  ( dims > desc.lastIndexOf ( '[' )   )  {^583^^^^^571^588^if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P5_Replace_Variable]^if  ( desc > dims.lastIndexOf ( '[' )  + 1 )  {^583^^^^^571^588^if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P6_Replace_Expression]^if  ( desc.lastIndexOf ( '[' )  + 1 )  {^583^^^^^571^588^if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P6_Replace_Expression]^if  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  {^583^^^^^571^588^if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P7_Replace_Invocation]^if  ( dims > desc.indexOf ( '[' )  + 1 )  {^583^^^^^571^588^if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  {^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("Invalid dimensions (must not be greater than dims(desc)): " + dims));^583^584^585^586^^571^588^if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  { throw new IllegalArgumentException  (" ")  : " + dims ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P16_Remove_Block]^^583^584^585^586^^571^588^if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  { throw new IllegalArgumentException  (" ")  : " + dims ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( start )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^583^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P2_Replace_Operator]^throw new IllegalArgumentException  !=  (" ")  : " + dims ) ;^584^585^^^^571^588^throw new IllegalArgumentException  (" ")  : " + dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  )   : " + dims ) ;^584^585^^^^571^588^throw new IllegalArgumentException  (" ")  : " + dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^584^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^584^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^584^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^584^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^584^^^^^571^588^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P2_Replace_Operator]^throw new IllegalArgumentException  <=  (" ")  : " + dims ) ;^584^585^^^^571^588^throw new IllegalArgumentException  (" ")  : " + dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P5_Replace_Variable]^mv.visitMultiANewArrayInsn (  dims ) ;^587^^^^^571^588^mv.visitMultiANewArrayInsn ( desc, dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P5_Replace_Variable]^mv.visitMultiANewArrayInsn ( desc ) ;^587^^^^^571^588^mv.visitMultiANewArrayInsn ( desc, dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P5_Replace_Variable]^mv.visitMultiANewArrayInsn ( dims, desc ) ;^587^^^^^571^588^mv.visitMultiANewArrayInsn ( desc, dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P7_Replace_Invocation]^mv.visitAnnotation ( desc, dims ) ;^587^^^^^571^588^mv.visitMultiANewArrayInsn ( desc, dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P14_Delete_Statement]^^587^^^^^571^588^mv.visitMultiANewArrayInsn ( desc, dims ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMultiANewArrayInsn [RETURN_TYPE] void   String desc final int dims [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  dims  
[P7_Replace_Invocation]^checkEndCode (  ) ;^596^^^^^590^602^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P14_Delete_Statement]^^596^597^^^^590^602^checkStartCode (  ) ; checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^596^^^^^590^602^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^596^^^^^590^602^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^596^^^^^590^602^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^596^^^^^590^602^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^596^^^^^590^602^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^597^^^^^590^602^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P14_Delete_Statement]^^597^^^^^590^602^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^597^^^^^590^602^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^597^^^^^590^602^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^597^^^^^590^602^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^597^^^^^590^602^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^597^^^^^590^602^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^597^^^^^590^602^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^597^^^^^590^602^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^597^^^^^590^602^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^597^^^^^590^602^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^597^^^^^590^602^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^597^^^^^590^602^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^597^^^^^590^602^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P2_Replace_Operator]^if  ( type == null )  {^598^^^^^590^602^if  ( type != null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P8_Replace_Mix]^if  ( type != this )  {^598^^^^^590^602^if  ( type != null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P9_Replace_Statement]^if  ( label == null )  {^598^^^^^590^602^if  ( type != null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P9_Replace_Statement]^if  ( attr == null )  {^598^^^^^590^602^if  ( type != null )  {^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P15_Unwrap_Block]^org.mockito.asm.util.CheckMethodAdapter.checkInternalName(type, "type");^598^599^600^^^590^602^if  ( type != null )  { checkInternalName ( type, "type" ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P16_Remove_Block]^^598^599^600^^^590^602^if  ( type != null )  { checkInternalName ( type, "type" ) ; }^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P3_Replace_Literal]^checkInternalName ( type, "pype" ) ;^599^^^^^590^602^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P7_Replace_Invocation]^checkIdentifier ( type, "type" ) ;^599^^^^^590^602^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P14_Delete_Statement]^^599^^^^^590^602^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkIdentifier ( name, "name" ) ;checkInternalName ( type, "type" ) ;^599^^^^^590^602^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkInternalName ( name, 0, -1, msg ) ;checkInternalName ( type, "type" ) ;^599^^^^^590^602^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkInternalName ( owner, "owner" ) ;checkInternalName ( type, "type" ) ;^599^^^^^590^602^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkInternalName ( desc, start + 1, index, null ) ;checkInternalName ( type, "type" ) ;^599^^^^^590^602^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P11_Insert_Donor_Statement]^checkMethodIdentifier ( name, "name" ) ;checkInternalName ( type, "type" ) ;^599^^^^^590^602^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^599^^^^^590^602^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P3_Replace_Literal]^checkInternalName ( type, "typet" ) ;^599^^^^^590^602^checkInternalName ( type, "type" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P5_Replace_Variable]^mv.visitTryCatchBlock ( end, end, handler, type ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P5_Replace_Variable]^mv.visitTryCatchBlock ( start, start, handler, type ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P5_Replace_Variable]^mv.visitTryCatchBlock ( start, end, start, type ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P5_Replace_Variable]^mv.visitTryCatchBlock (  end, handler, type ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P5_Replace_Variable]^mv.visitTryCatchBlock ( start,  handler, type ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P5_Replace_Variable]^mv.visitTryCatchBlock ( start, end,  type ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P5_Replace_Variable]^mv.visitTryCatchBlock ( start, end, handler ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P5_Replace_Variable]^mv.visitTryCatchBlock ( handler, end, start, type ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P5_Replace_Variable]^mv.visitTryCatchBlock ( start, handler, end, type ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P5_Replace_Variable]^mv.visitTryCatchBlock ( type, end, handler, start ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P7_Replace_Invocation]^mv.visitTableSwitchInsn ( start, end, handler, type ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P8_Replace_Mix]^mv.visitTryCatchBlock ( start, end, end, type ) ;^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P14_Delete_Statement]^^601^^^^^590^602^mv.visitTryCatchBlock ( start, end, handler, type ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitTryCatchBlock [RETURN_TYPE] void   Label start Label end Label handler String type [VARIABLES] Label  end  handler  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  type  Map  labels  
[P7_Replace_Invocation]^checkEndCode (  ) ;^612^^^^^604^625^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P14_Delete_Statement]^^612^^^^^604^625^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^612^^^^^604^625^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^612^^^^^604^625^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^612^^^^^604^625^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^612^^^^^604^625^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^612^^^^^604^625^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^613^^^^^604^625^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P14_Delete_Statement]^^613^^^^^604^625^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^613^^^^^604^625^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^613^^^^^604^625^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^613^^^^^604^625^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^613^^^^^604^625^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^613^^^^^604^625^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^613^^^^^604^625^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^613^^^^^604^625^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^613^^^^^604^625^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^613^^^^^604^625^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^613^^^^^604^625^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^613^^^^^604^625^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^613^^^^^604^625^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P3_Replace_Literal]^checkIdentifier ( name, "" ) ;^614^^^^^604^625^checkIdentifier ( name, "name" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^checkIdentifier ( signature, "name" ) ;^614^^^^^604^625^checkIdentifier ( name, "name" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P7_Replace_Invocation]^checkMethodIdentifier ( name, "name" ) ;^614^^^^^604^625^checkIdentifier ( name, "name" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^614^^^^^604^625^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P3_Replace_Literal]^checkDesc ( desc, true ) ;^615^^^^^604^625^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P7_Replace_Invocation]^visitAnnotation ( desc, false ) ;^615^^^^^604^625^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P8_Replace_Mix]^checkDesc ( signature, false ) ;^615^^^^^604^625^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P14_Delete_Statement]^^615^^^^^604^625^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^start = checkDesc ( desc, start + 1, true ) ;checkDesc ( desc, false ) ;^615^^^^^604^625^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkDesc ( desc, false ) ;^615^^^^^604^625^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkDesc ( name, false ) ;checkDesc ( desc, false ) ;^615^^^^^604^625^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^return checkDesc ( desc, index, false ) ;checkDesc ( desc, false ) ;^615^^^^^604^625^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^start = checkDesc ( desc, start, false ) ;checkDesc ( desc, false ) ;^615^^^^^604^625^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^int end = checkDesc ( desc, 0, canBeVoid ) ;checkDesc ( desc, false ) ;^615^^^^^604^625^checkDesc ( desc, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^615^^^^^604^625^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P3_Replace_Literal]^checkLabel ( start, false, "start label" ) ;^616^^^^^604^625^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P3_Replace_Literal]^checkLabel ( start, true, "b" ) ;^616^^^^^604^625^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^checkLabel ( end, true, "start label" ) ;^616^^^^^604^625^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P7_Replace_Invocation]^checkChar ( start, true, "start label" ) ;^616^^^^^604^625^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P8_Replace_Mix]^checkChar ( end, true, "start label" ) ;^616^^^^^604^625^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P14_Delete_Statement]^^616^617^^^^604^625^checkLabel ( start, true, "start label" ) ; checkLabel ( end, true, "end label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkLabel ( label, false, "label" ) ;checkLabel ( start, true, "start label" ) ;^616^^^^^604^625^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkLabel ( dflt, false, "default label" ) ;checkLabel ( start, true, "start label" ) ;^616^^^^^604^625^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkLabel ( end, true, "end label" ) ;checkLabel ( start, true, "start label" ) ;^616^^^^^604^625^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P3_Replace_Literal]^checkLabel ( end, false, "end label" ) ;^617^^^^^604^625^checkLabel ( end, true, "end label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P3_Replace_Literal]^checkLabel ( end, true, "end lnd label" ) ;^617^^^^^604^625^checkLabel ( end, true, "end label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P7_Replace_Invocation]^checkChar ( end, true, "end label" ) ;^617^^^^^604^625^checkLabel ( end, true, "end label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P8_Replace_Mix]^checkLabel ( start, true, "end label" ) ;^617^^^^^604^625^checkLabel ( end, true, "end label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P14_Delete_Statement]^^617^618^^^^604^625^checkLabel ( end, true, "end label" ) ; checkUnsignedShort ( index, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkLabel ( label, false, "label" ) ;checkLabel ( end, true, "end label" ) ;^617^^^^^604^625^checkLabel ( end, true, "end label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkLabel ( dflt, false, "default label" ) ;checkLabel ( end, true, "end label" ) ;^617^^^^^604^625^checkLabel ( end, true, "end label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkLabel ( start, true, "start label" ) ;checkLabel ( end, true, "end label" ) ;^617^^^^^604^625^checkLabel ( end, true, "end label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P3_Replace_Literal]^checkUnsignedShort ( index, "alid variablenvalid variable index" ) ;^618^^^^^604^625^checkUnsignedShort ( index, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^checkUnsignedShort ( s, "Invalid variable index" ) ;^618^^^^^604^625^checkUnsignedShort ( index, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P7_Replace_Invocation]^checkSignedShort ( index, "Invalid variable index" ) ;^618^^^^^604^625^checkUnsignedShort ( index, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P14_Delete_Statement]^^618^619^^^^604^625^checkUnsignedShort ( index, "Invalid variable index" ) ; int s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( line, "Invalid line number" ) ;checkUnsignedShort ( index, "Invalid variable index" ) ;^618^^^^^604^625^checkUnsignedShort ( index, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkSignedByte ( operand, "Invalid operand" ) ;checkUnsignedShort ( index, "Invalid variable index" ) ;^618^^^^^604^625^checkUnsignedShort ( index, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkSignedShort ( increment, "Invalid increment" ) ;checkUnsignedShort ( index, "Invalid variable index" ) ;^618^^^^^604^625^checkUnsignedShort ( index, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkSignedShort ( operand, "Invalid operand" ) ;checkUnsignedShort ( index, "Invalid variable index" ) ;^618^^^^^604^625^checkUnsignedShort ( index, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( var, "Invalid variable index" ) ;checkUnsignedShort ( index, "Invalid variable index" ) ;^618^^^^^604^625^checkUnsignedShort ( index, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;checkUnsignedShort ( index, "Invalid variable index" ) ;^618^^^^^604^625^checkUnsignedShort ( index, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;checkUnsignedShort ( index, "Invalid variable index" ) ;^618^^^^^604^625^checkUnsignedShort ( index, "Invalid variable index" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P1_Replace_Type]^long  s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^619^^^^^604^625^int s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^int s =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^619^^^^^604^625^int s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^int s =  (  ( Integer )  start.get ( labels )  ) .intValue (  ) ;^619^^^^^604^625^int s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P7_Replace_Invocation]^int s =  (  ( Integer )  labels.get ( start )  ) .Integer (  ) ;^619^^^^^604^625^int s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P7_Replace_Invocation]^int s =  (  ( Integer )  labels.get ( start )  )  .Integer ( index )  ;^619^^^^^604^625^int s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^int e =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;int s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^619^^^^^604^625^int s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P14_Delete_Statement]^^619^620^^^^604^625^int s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ; int e =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P14_Delete_Statement]^^619^^^^^604^625^int s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P1_Replace_Type]^long  e =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^620^^^^^604^625^int e =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^int e =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;^620^^^^^604^625^int e =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^int e =  (  ( Integer )  end.get ( labels )  ) .intValue (  ) ;^620^^^^^604^625^int e =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P7_Replace_Invocation]^int e =  (  ( Integer )  labels.get ( end )  ) .Integer (  ) ;^620^^^^^604^625^int e =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P7_Replace_Invocation]^int e =  (  ( Integer )  labels.get ( end )  )  .Integer ( s )  ;^620^^^^^604^625^int e =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P11_Insert_Donor_Statement]^int s =  (  ( Integer )  labels.get ( start )  ) .intValue (  ) ;int e =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^620^^^^^604^625^int e =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P14_Delete_Statement]^^620^^^^^604^625^int e =  (  ( Integer )  labels.get ( end )  ) .intValue (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P2_Replace_Operator]^if  ( e <= s )  {^621^^^^^604^625^if  ( e < s )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^if  ( index < s )  {^621^^^^^604^625^if  ( e < s )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^if  ( s < e )  {^621^^^^^604^625^if  ( e < s )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P8_Replace_Mix]^if  ( e < index )  {^621^^^^^604^625^if  ( e < s )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P9_Replace_Statement]^if  ( dims < 1 )  {^621^^^^^604^625^if  ( e < s )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P9_Replace_Statement]^if  ( c == '*' )  {^621^^^^^604^625^if  ( e < s )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P9_Replace_Statement]^if  ( max < min )  {^621^^^^^604^625^if  ( e < s )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P9_Replace_Statement]^if  ( endCode )  {^621^^^^^604^625^if  ( e < s )  {^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Invalid start and end labels (end must be greater than start)");^621^622^623^^^604^625^if  ( e < s )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P16_Remove_Block]^^621^622^623^^^604^625^if  ( e < s )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^621^^^^^604^625^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P13_Insert_Block]^if  ( endCode )  {     throw new IllegalStateException ( "Cannot visit instructions after visitMaxs has been called." ) ; }^621^^^^^604^625^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^621^^^^^604^625^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^621^^^^^604^625^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P13_Insert_Block]^if  ( endMethod )  {     throw new IllegalStateException ( "Cannot visit elements after visitEnd has been called." ) ; }^621^^^^^604^625^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^621^^^^^604^625^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^621^^^^^604^625^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^621^^^^^604^625^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^621^^^^^604^625^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^621^^^^^604^625^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^621^^^^^604^625^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^621^^^^^604^625^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^622^^^^^604^625^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^622^^^^^604^625^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^mv.visitLocalVariable ( signature, desc, signature, start, end, index ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^mv.visitLocalVariable ( name, desc, signature, start, end, s ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^mv.visitLocalVariable (  desc, signature, start, end, index ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^mv.visitLocalVariable ( name,  signature, start, end, index ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^mv.visitLocalVariable ( name, desc,  start, end, index ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^mv.visitLocalVariable ( name, desc, signature,  end, index ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^mv.visitLocalVariable ( name, desc, signature, start,  index ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^mv.visitLocalVariable ( name, desc, signature, start, end ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^mv.visitLocalVariable ( signature, desc, name, start, end, index ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^mv.visitLocalVariable ( desc, name, signature, start, end, index ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^mv.visitLocalVariable ( name, desc, signature, index, end, start ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^mv.visitLocalVariable ( name, desc, signature, end, start, index ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P5_Replace_Variable]^mv.visitLocalVariable ( index, desc, signature, start, end, name ) ;^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P14_Delete_Statement]^^624^^^^^604^625^mv.visitLocalVariable ( name, desc, signature, start, end, index ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLocalVariable [RETURN_TYPE] void   String name String desc String signature Label start Label end final int index [VARIABLES] Label  end  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  desc  name  signature  Map  labels  int  e  index  s  
[P7_Replace_Invocation]^checkEndCode (  ) ;^628^^^^^627^633^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P14_Delete_Statement]^^628^629^^^^627^633^checkStartCode (  ) ; checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^628^^^^^627^633^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^628^^^^^627^633^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^628^^^^^627^633^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^628^^^^^627^633^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^628^^^^^627^633^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^629^^^^^627^633^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P14_Delete_Statement]^^629^^^^^627^633^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^629^^^^^627^633^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^629^^^^^627^633^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^629^^^^^627^633^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^629^^^^^627^633^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^629^^^^^627^633^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^629^^^^^627^633^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^629^^^^^627^633^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^629^^^^^627^633^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^629^^^^^627^633^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^629^^^^^627^633^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^629^^^^^627^633^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^629^^^^^627^633^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P3_Replace_Literal]^checkUnsignedShort ( line, "valid line" ) ;^630^^^^^627^633^checkUnsignedShort ( line, "Invalid line number" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P7_Replace_Invocation]^checkSignedShort ( line, "Invalid line number" ) ;^630^^^^^627^633^checkUnsignedShort ( line, "Invalid line number" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P14_Delete_Statement]^^630^631^^^^627^633^checkUnsignedShort ( line, "Invalid line number" ) ; checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkSignedByte ( operand, "Invalid operand" ) ;checkUnsignedShort ( line, "Invalid line number" ) ;^630^^^^^627^633^checkUnsignedShort ( line, "Invalid line number" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkSignedShort ( increment, "Invalid increment" ) ;checkUnsignedShort ( line, "Invalid line number" ) ;^630^^^^^627^633^checkUnsignedShort ( line, "Invalid line number" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkSignedShort ( operand, "Invalid operand" ) ;checkUnsignedShort ( line, "Invalid line number" ) ;^630^^^^^627^633^checkUnsignedShort ( line, "Invalid line number" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( var, "Invalid variable index" ) ;checkUnsignedShort ( line, "Invalid line number" ) ;^630^^^^^627^633^checkUnsignedShort ( line, "Invalid line number" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;checkUnsignedShort ( line, "Invalid line number" ) ;^630^^^^^627^633^checkUnsignedShort ( line, "Invalid line number" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( index, "Invalid variable index" ) ;checkUnsignedShort ( line, "Invalid line number" ) ;^630^^^^^627^633^checkUnsignedShort ( line, "Invalid line number" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;checkUnsignedShort ( line, "Invalid line number" ) ;^630^^^^^627^633^checkUnsignedShort ( line, "Invalid line number" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P3_Replace_Literal]^checkLabel ( start, false, "start label" ) ;^631^^^^^627^633^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P3_Replace_Literal]^checkLabel ( start, true, "start" ) ;^631^^^^^627^633^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P7_Replace_Invocation]^checkChar ( start, true, "start label" ) ;^631^^^^^627^633^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P14_Delete_Statement]^^631^^^^^627^633^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkLabel ( label, false, "label" ) ;checkLabel ( start, true, "start label" ) ;^631^^^^^627^633^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkLabel ( dflt, false, "default label" ) ;checkLabel ( start, true, "start label" ) ;^631^^^^^627^633^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^checkLabel ( end, true, "end label" ) ;checkLabel ( start, true, "start label" ) ;^631^^^^^627^633^checkLabel ( start, true, "start label" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P5_Replace_Variable]^mv.visitLineNumber (  start ) ;^632^^^^^627^633^mv.visitLineNumber ( line, start ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P5_Replace_Variable]^mv.visitLineNumber ( line ) ;^632^^^^^627^633^mv.visitLineNumber ( line, start ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P7_Replace_Invocation]^mv.visitJumpInsn ( line, start ) ;^632^^^^^627^633^mv.visitLineNumber ( line, start ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P7_Replace_Invocation]^mv .visitInsn ( line )  ;^632^^^^^627^633^mv.visitLineNumber ( line, start ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P14_Delete_Statement]^^632^^^^^627^633^mv.visitLineNumber ( line, start ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^mv.visitVarInsn ( opcode, var ) ;mv.visitLineNumber ( line, start ) ;^632^^^^^627^633^mv.visitLineNumber ( line, start ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^mv.visitLabel ( label ) ;mv.visitLineNumber ( line, start ) ;^632^^^^^627^633^mv.visitLineNumber ( line, start ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P11_Insert_Donor_Statement]^mv.visitLdcInsn ( cst ) ;mv.visitLineNumber ( line, start ) ;^632^^^^^627^633^mv.visitLineNumber ( line, start ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitLineNumber [RETURN_TYPE] void   final int line Label start [VARIABLES] Label  start  int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  line  
[P7_Replace_Invocation]^checkEndCode (  ) ;^636^^^^^635^642^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P14_Delete_Statement]^^636^^^^^635^642^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkStartCode (  ) ;^636^^^^^635^642^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkStartCode (  ) ;^636^^^^^635^642^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkStartCode (  ) ;^636^^^^^635^642^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkStartCode (  ) ;^636^^^^^635^642^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkStartCode (  ) ;^636^^^^^635^642^checkStartCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P7_Replace_Invocation]^checkEndMethod (  ) ;^637^^^^^635^642^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P14_Delete_Statement]^^637^^^^^635^642^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;checkEndCode (  ) ;^637^^^^^635^642^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 6 ) ;checkEndCode (  ) ;^637^^^^^635^642^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndCode (  ) ;^637^^^^^635^642^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 5 ) ;checkEndCode (  ) ;^637^^^^^635^642^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndCode (  ) ;^637^^^^^635^642^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 3 ) ;checkEndCode (  ) ;^637^^^^^635^642^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 4 ) ;checkEndCode (  ) ;^637^^^^^635^642^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 2 ) ;checkEndCode (  ) ;^637^^^^^635^642^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndCode (  ) ;^637^^^^^635^642^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkEndMethod (  ) ;checkEndCode (  ) ;^637^^^^^635^642^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 0 ) ;checkEndCode (  ) ;^637^^^^^635^642^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkOpcode ( opcode, 1 ) ;checkEndCode (  ) ;^637^^^^^635^642^checkEndCode (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P3_Replace_Literal]^endCode = false;^638^^^^^635^642^endCode = true;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^startCode = true;endCode = true;^638^^^^^635^642^endCode = true;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^endMethod = true;endCode = true;^638^^^^^635^642^endCode = true;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P3_Replace_Literal]^checkUnsignedShort ( maxStack, "Invalid nvalid max stack" ) ;^639^^^^^635^642^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P5_Replace_Variable]^checkUnsignedShort ( maxLocals, "Invalid max stack" ) ;^639^^^^^635^642^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P7_Replace_Invocation]^checkSignedShort ( maxStack, "Invalid max stack" ) ;^639^^^^^635^642^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P14_Delete_Statement]^^639^^^^^635^642^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( line, "Invalid line number" ) ;checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^639^^^^^635^642^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkSignedByte ( operand, "Invalid operand" ) ;checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^639^^^^^635^642^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkSignedShort ( increment, "Invalid increment" ) ;checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^639^^^^^635^642^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkSignedShort ( operand, "Invalid operand" ) ;checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^639^^^^^635^642^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( var, "Invalid variable index" ) ;checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^639^^^^^635^642^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( index, "Invalid variable index" ) ;checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^639^^^^^635^642^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^639^^^^^635^642^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P3_Replace_Literal]^checkUnsignedShort ( maxLocals, "Invalid max locals " ) ;^640^^^^^635^642^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P5_Replace_Variable]^checkUnsignedShort ( maxStack, "Invalid max locals" ) ;^640^^^^^635^642^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P7_Replace_Invocation]^checkSignedShort ( maxLocals, "Invalid max locals" ) ;^640^^^^^635^642^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P14_Delete_Statement]^^640^641^^^^635^642^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ; mv.visitMaxs ( maxStack, maxLocals ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( line, "Invalid line number" ) ;checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^640^^^^^635^642^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkSignedByte ( operand, "Invalid operand" ) ;checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^640^^^^^635^642^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkSignedShort ( increment, "Invalid increment" ) ;checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^640^^^^^635^642^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkSignedShort ( operand, "Invalid operand" ) ;checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^640^^^^^635^642^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( var, "Invalid variable index" ) ;checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^640^^^^^635^642^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( maxStack, "Invalid max stack" ) ;checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^640^^^^^635^642^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P11_Insert_Donor_Statement]^checkUnsignedShort ( index, "Invalid variable index" ) ;checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^640^^^^^635^642^checkUnsignedShort ( maxLocals, "Invalid max locals" ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P5_Replace_Variable]^mv.visitMaxs ( maxLocals, maxLocals ) ;^641^^^^^635^642^mv.visitMaxs ( maxStack, maxLocals ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P5_Replace_Variable]^mv.visitMaxs (  maxLocals ) ;^641^^^^^635^642^mv.visitMaxs ( maxStack, maxLocals ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P5_Replace_Variable]^mv.visitMaxs ( maxStack ) ;^641^^^^^635^642^mv.visitMaxs ( maxStack, maxLocals ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P5_Replace_Variable]^mv.visitMaxs ( maxLocals, maxStack ) ;^641^^^^^635^642^mv.visitMaxs ( maxStack, maxLocals ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P7_Replace_Invocation]^mv.visitVarInsn ( maxStack, maxLocals ) ;^641^^^^^635^642^mv.visitMaxs ( maxStack, maxLocals ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P14_Delete_Statement]^^641^^^^^635^642^mv.visitMaxs ( maxStack, maxLocals ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitMaxs [RETURN_TYPE] void   final int maxStack final int maxLocals [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  maxLocals  maxStack  
[P7_Replace_Invocation]^checkEndCode (  ) ;^645^^^^^644^648^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P14_Delete_Statement]^^645^^^^^644^648^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkMethodDesc ( desc ) ;checkEndMethod (  ) ;^645^^^^^644^648^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkStartCode (  ) ;checkEndMethod (  ) ;^645^^^^^644^648^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkConstant ( cst ) ;checkEndMethod (  ) ;^645^^^^^644^648^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^checkEndCode (  ) ;checkEndMethod (  ) ;^645^^^^^644^648^checkEndMethod (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P3_Replace_Literal]^endMethod = false;^646^^^^^644^648^endMethod = true;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^startCode = true;endMethod = true;^646^^^^^644^648^endMethod = true;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^endCode = true;endMethod = true;^646^^^^^644^648^endMethod = true;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P7_Replace_Invocation]^mv.visitCode (  ) ;^647^^^^^644^648^mv.visitEnd (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P14_Delete_Statement]^^647^^^^^644^648^mv.visitEnd (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitCode (  ) ;mv.visitEnd (  ) ;^647^^^^^644^648^mv.visitEnd (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitLabel ( label ) ;mv.visitEnd (  ) ;^647^^^^^644^648^mv.visitEnd (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitLdcInsn ( cst ) ;mv.visitEnd (  ) ;^647^^^^^644^648^mv.visitEnd (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitAttribute ( attr ) ;mv.visitEnd (  ) ;^647^^^^^644^648^mv.visitEnd (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P11_Insert_Donor_Statement]^mv.visitInsn ( opcode ) ;mv.visitEnd (  ) ;^647^^^^^644^648^mv.visitEnd (  ) ;^[CLASS] CheckMethodAdapter  [METHOD] visitEnd [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P5_Replace_Variable]^if  ( !visible )  {^656^^^^^655^659^if  ( !startCode )  {^[CLASS] CheckMethodAdapter  [METHOD] checkStartCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P9_Replace_Statement]^if  ( endCode )  {^656^^^^^655^659^if  ( !startCode )  {^[CLASS] CheckMethodAdapter  [METHOD] checkStartCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P9_Replace_Statement]^if  ( endMethod )  {^656^^^^^655^659^if  ( !startCode )  {^[CLASS] CheckMethodAdapter  [METHOD] checkStartCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException("Cannot visit instructions before visitCode has been called.");^656^657^658^^^655^659^if  ( !startCode )  { throw new IllegalStateException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkStartCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P16_Remove_Block]^^656^657^658^^^655^659^if  ( !startCode )  { throw new IllegalStateException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkStartCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( endCode )  {     throw new IllegalStateException ( "Cannot visit instructions after visitMaxs has been called." ) ; }^656^^^^^655^659^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkStartCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( endMethod )  {     throw new IllegalStateException ( "Cannot visit elements after visitEnd has been called." ) ; }^656^^^^^655^659^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkStartCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^656^^^^^655^659^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkStartCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P4_Replace_Constructor]^throw throw  new IllegalStateException ( "Cannot visit instructions after visitMaxs has been called." )   ;^657^^^^^655^659^throw new IllegalStateException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkStartCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( endCode )  {     throw new IllegalStateException ( "Cannot visit instructions after visitMaxs has been called." ) ; }^657^^^^^655^659^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkStartCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( ! ( startCode )  )  {     throw new IllegalStateException ( "Cannot visit instructions before visitCode has been called." ) ; }^657^^^^^655^659^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkStartCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( endMethod )  {     throw new IllegalStateException ( "Cannot visit elements after visitEnd has been called." ) ; }^657^^^^^655^659^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkStartCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ")  : " + desc ) ; ;^657^^^^^655^659^throw new IllegalStateException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkStartCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P8_Replace_Mix]^return ;^657^^^^^655^659^throw new IllegalStateException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkStartCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P5_Replace_Variable]^if  ( visible )  {^665^^^^^664^668^if  ( endCode )  {^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P9_Replace_Statement]^if  ( !startCode )  {^665^^^^^664^668^if  ( endCode )  {^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P9_Replace_Statement]^if  ( e < s )  {^665^^^^^664^668^if  ( endCode )  {^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P9_Replace_Statement]^if  ( endMethod )  {^665^^^^^664^668^if  ( endCode )  {^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException("Cannot visit instructions after visitMaxs has been called.");^665^666^667^^^664^668^if  ( endCode )  { throw new IllegalStateException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P16_Remove_Block]^^665^666^667^^^664^668^if  ( endCode )  { throw new IllegalStateException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^665^^^^^664^668^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( ! ( startCode )  )  {     throw new IllegalStateException ( "Cannot visit instructions before visitCode has been called." ) ; }^665^^^^^664^668^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( endMethod )  {     throw new IllegalStateException ( "Cannot visit elements after visitEnd has been called." ) ; }^665^^^^^664^668^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^665^^^^^664^668^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^665^^^^^664^668^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P4_Replace_Constructor]^throw throw  new IllegalStateException ( "Cannot visit elements after visitEnd has been called." )   ;^666^^^^^664^668^throw new IllegalStateException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( endCode )  {     throw new IllegalStateException ( "Cannot visit instructions after visitMaxs has been called." ) ; }^666^^^^^664^668^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( ! ( startCode )  )  {     throw new IllegalStateException ( "Cannot visit instructions before visitCode has been called." ) ; }^666^^^^^664^668^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( endMethod )  {     throw new IllegalStateException ( "Cannot visit elements after visitEnd has been called." ) ; }^666^^^^^664^668^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ")  : " + desc ) ; ;^666^^^^^664^668^throw new IllegalStateException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkEndCode [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P5_Replace_Variable]^if  ( visible )  {^674^^^^^673^677^if  ( endMethod )  {^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P9_Replace_Statement]^if  ( endCode )  {^674^^^^^673^677^if  ( endMethod )  {^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P9_Replace_Statement]^if  ( !startCode )  {^674^^^^^673^677^if  ( endMethod )  {^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException("Cannot visit elements after visitEnd has been called.");^674^675^676^^^673^677^if  ( endMethod )  { throw new IllegalStateException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P16_Remove_Block]^^674^675^676^^^673^677^if  ( endMethod )  { throw new IllegalStateException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( endCode )  {     throw new IllegalStateException ( "Cannot visit instructions after visitMaxs has been called." ) ; }^674^^^^^673^677^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^674^^^^^673^677^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( ! ( startCode )  )  {     throw new IllegalStateException ( "Cannot visit instructions before visitCode has been called." ) ; }^674^^^^^673^677^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^674^^^^^673^677^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^674^^^^^673^677^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^674^^^^^673^677^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P4_Replace_Constructor]^throw throw  new IllegalStateException ( "Cannot visit instructions after visitMaxs has been called." )   ;^675^^^^^673^677^throw new IllegalStateException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( endCode )  {     throw new IllegalStateException ( "Cannot visit instructions after visitMaxs has been called." ) ; }^675^^^^^673^677^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( ! ( startCode )  )  {     throw new IllegalStateException ( "Cannot visit instructions before visitCode has been called." ) ; }^675^^^^^673^677^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( endMethod )  {     throw new IllegalStateException ( "Cannot visit elements after visitEnd has been called." ) ; }^675^^^^^673^677^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ")  : " + desc ) ; ;^675^^^^^673^677^throw new IllegalStateException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P8_Replace_Mix]^return ;^675^^^^^673^677^throw new IllegalStateException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkEndMethod [RETURN_TYPE] void   [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^if  ( value == Opcodes.TOP && value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^if  ( value > Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^if  ( value < Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^if  ( value >= Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^if  ( value != Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P5_Replace_Variable]^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.3 )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( (((((value == TOP) || (value == INTEGER)) || (value == FLOAT)) || (value == LONG)) || (value == DOUBLE) || value == NULL) )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( ((((value == TOP) || (value == INTEGER)) || (value == FLOAT)) || (value == LONG) || value == DOUBLE) )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( (((value == TOP) || (value == INTEGER)) || (value == FLOAT) || value == LONG) )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( ((value == TOP) || (value == INTEGER) || value == FLOAT) )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( (value == TOP || value == INTEGER) )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( value == TOP )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( value == INTEGER )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( value == FLOAT )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( value == LONG )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( value == DOUBLE )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( value == NULL )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( value == UNINITIALIZED_THIS )^685^686^687^688^^684^700^if  ( value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS )^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^if  ( value  <=  String )  {^692^^^^^684^700^if  ( value instanceof String )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P9_Replace_Statement]^if  ( ! ( value instanceof Label )  )  {^692^^^^^684^700^if  ( value instanceof String )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P15_Unwrap_Block]^org.mockito.asm.util.CheckMethodAdapter.checkInternalName(((java.lang.String) (value)), "Invalid stack frame value"); return ;^692^693^694^695^^684^700^if  ( value instanceof String )  { checkInternalName (  ( String )  value, "Invalid stack frame value" ) ; return; }^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P16_Remove_Block]^^692^693^694^695^^684^700^if  ( value instanceof String )  { checkInternalName (  ( String )  value, "Invalid stack frame value" ) ; return; }^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P3_Replace_Literal]^checkInternalName (  ( String )  value, "Invalid stack frame valueack fra" ) ;^693^^^^^684^700^checkInternalName (  ( String )  value, "Invalid stack frame value" ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P7_Replace_Invocation]^checkIdentifier (  ( String )  value, "Invalid stack frame value" ) ;^693^^^^^684^700^checkInternalName (  ( String )  value, "Invalid stack frame value" ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P14_Delete_Statement]^^693^694^^^^684^700^checkInternalName (  ( String )  value, "Invalid stack frame value" ) ; return;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( value instanceof String )  {     checkInternalName (  (  ( String )   ( value )  ) , "Invalid stack frame value" ) ;     return ; }^693^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P3_Replace_Literal]^checkInternalName (  ( String )  value, "d stacknvalid stack frame value" ) ;^693^^^^^684^700^checkInternalName (  ( String )  value, "Invalid stack frame value" ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^if  ( ! ( value  >  Label )  )  {^696^^^^^684^700^if  ( ! ( value instanceof Label )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( "Invalid stack frame value: " + value )  {^696^^^^^684^700^if  ( ! ( value instanceof Label )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P8_Replace_Mix]^if  (  ( value instanceof Label )  )  {^696^^^^^684^700^if  ( ! ( value instanceof Label )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P9_Replace_Statement]^if  ( ! ( cst instanceof Type )  )  {^696^^^^^684^700^if  ( ! ( value instanceof Label )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P9_Replace_Statement]^if  ( value instanceof String )  {^696^^^^^684^700^if  ( ! ( value instanceof Label )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("Invalid stack frame value: " + value));^696^697^698^699^^684^700^if  ( ! ( value instanceof Label )  )  { throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P16_Remove_Block]^^696^697^698^699^^684^700^if  ( ! ( value instanceof Label )  )  { throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  (  ( opcode < 0 )  ||  ( opcode > 199 )  )  ||  (  ( TYPE[opcode] )  != type )  )  {     throw new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( value <  ( MIN_VALUE )  )  ||  ( value >  ( MAX_VALUE )  )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be a signed byte ) : " )  + value )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( opcode ==  ( NEW )  )  &&  (  ( type.charAt ( 0 )  )  == '[' )  )  {     throw new IllegalArgumentException (  ( "NEW cannot be used to create arrays: " + type )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( operand <  ( T_BOOLEAN )  )  ||  ( operand >  ( T_LONG )  )  )  {     throw new IllegalArgumentException (  ( "Invalid operand  ( must be an array type code T_... ) : " + operand )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( value <  ( MIN_VALUE )  )  ||  ( value >  ( MAX_VALUE )  )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be a signed short ) : " )  + value )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( start )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( nStack > 0 )  &&  (  ( stack == null )  ||  (  ( stack.length )  < nStack )  )  )  {     throw new IllegalArgumentException ( "Array stack[] is shorter than nStack" ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^696^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid stack frame value: "  <  value ) ;^697^698^^^^684^700^throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ack fnvalid stack frame value: " + value ) ;^697^698^^^^684^700^throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  )  ;^697^698^^^^684^700^throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^697^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^697^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid stack frame value: "  >=  value ) ;^697^698^^^^684^700^throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "valinvalid stack frame value: " + value ) ;^697^698^^^^684^700^throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^697^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^697^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^697^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^697^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^697^^^^^684^700^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid stack frame value: "  &&  value ) ;^697^698^^^^684^700^throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid stack frame value: valid stack frame" + value ) ;^697^698^^^^684^700^throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid stack frame value: "  <=  value ) ;^697^698^^^^684^700^throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "k frame value:" + value ) ;^697^698^^^^684^700^throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFrameValue [RETURN_TYPE] void   Object value [VARIABLES] int[]  TYPE  keys  Object  value  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^if  ( opcode < 0 && opcode > 199 || TYPE[opcode] != type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P2_Replace_Operator]^if  ( opcode <= 0 || opcode > 199 || TYPE[opcode] != type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P2_Replace_Operator]^if  ( opcode < 0 || opcode >= 199 || TYPE[opcode] != type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P2_Replace_Operator]^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] > type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P3_Replace_Literal]^if  ( opcode < type || opcode > 199 || TYPE[opcode] != type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P3_Replace_Literal]^if  ( opcode < 0 || opcode > type || TYPE[opcode] != type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P5_Replace_Variable]^if  ( type < 0 || opcode > 199 || TYPE[opcode] != type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P5_Replace_Variable]^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != opcode )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P5_Replace_Variable]^if  ( opcode < 0 || opcode > 199 || keys[opcode] != type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P5_Replace_Variable]^if  ( type < 0 || opcode > 199 || TYPE[opcode] != opcode )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P5_Replace_Variable]^if  ( opcode < 0 || opcode > 199 || type[opcode] != TYPE )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P6_Replace_Expression]^if  ( opcode < 0 ) {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P6_Replace_Expression]^if  (  opcode > 199 || TYPE[opcode] != type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P6_Replace_Expression]^if  ( (opcode < 0 || opcode > 199) )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P6_Replace_Expression]^if  ( opcode > 199 )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P6_Replace_Expression]^if  ( TYPE[opcode] != type )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P6_Replace_Expression]^if  ( "Invalid opcode: " + opcode )  {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P8_Replace_Mix]^if  ( opcode < 3 ) {^709^^^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  {^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("Invalid opcode: " + opcode));^709^710^711^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P16_Remove_Block]^^709^710^711^^^708^712^if  ( opcode < 0 || opcode > 199 || TYPE[opcode] != type )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^709^^^^^708^712^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( getChar ( signature, pos )  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": identifier expected at index " )  + pos )  ) ; }^709^^^^^708^712^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^709^^^^^708^712^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P13_Insert_Block]^if  ( index <  ( desc.length (  )  )  )  {     return checkDesc ( desc, index, false ) ; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^709^^^^^708^712^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^709^^^^^708^712^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  )   ;^710^^^^^708^712^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^710^^^^^708^712^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^710^^^^^708^712^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^710^^^^^708^712^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^710^^^^^708^712^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^710^^^^^708^712^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^710^^^^^708^712^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkOpcode [RETURN_TYPE] void   final int opcode final int type [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  Map  labels  int  opcode  type  
[P2_Replace_Operator]^if  ( value < Byte.MIN_VALUE && value > Byte.MAX_VALUE )  {^721^^^^^720^725^if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^if  ( value <= Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^721^^^^^720^725^if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^if  ( value < Byte.MIN_VALUE || value >= Byte.MAX_VALUE )  {^721^^^^^720^725^if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P6_Replace_Expression]^if  ( value < Byte.MIN_VALUE ) {^721^^^^^720^725^if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P6_Replace_Expression]^if  (  value > Byte.MAX_VALUE )  {^721^^^^^720^725^if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P6_Replace_Expression]^if  ( value < MIN_VALUE )  {^721^^^^^720^725^if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P6_Replace_Expression]^if  ( value > MAX_VALUE )  {^721^^^^^720^725^if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P6_Replace_Expression]^if  ( msg + "  ( must be a signed byte ) : " + value )  {^721^^^^^720^725^if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P6_Replace_Expression]^if  ( msg + "  ( must be a signed byte ) : " )  {^721^^^^^720^725^if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P9_Replace_Statement]^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^721^^^^^720^725^if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(((msg + " (must be a signed byte): ") + value));^721^722^723^724^^720^725^if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  { throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P16_Remove_Block]^^721^722^723^724^^720^725^if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  { throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^721^^^^^720^725^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( start )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^721^^^^^720^725^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( value <  ( MIN_VALUE )  )  ||  ( value >  ( MAX_VALUE )  )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be a signed short ) : " )  + value )  ) ; }^721^^^^^720^725^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^721^^^^^720^725^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^721^^^^^720^725^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  <  "  ( must be a signed byte ) : "  <  value ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  <  "  ( must be a signed byte ) : " + value ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  ( msg + "  ( must be a signed short ) : " )  + value )  )  : " + value ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P5_Replace_Variable]^throw new IllegalArgumentException ( value + "  ( must be a signed byte ) : " + msg ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^722^^^^^720^725^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  !=  "  ( must be a signed byte ) : "  !=  value ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  >=  "  ( must be a signed byte ) : " + value ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( value <  ( MIN_VALUE )  )  ||  ( value >  ( MAX_VALUE )  )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be a signed byte ) : " )  + value )  ) ; }^722^^^^^720^725^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^722^^^^^720^725^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^722^^^^^720^725^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  ==  "  ( must be a signed byte ) : "  ==  value ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  ==  "  ( must be a signed byte ) : " + value ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  <=  "  ( must be a signed byte ) : "  <=  value ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  &&  "  ( must be a signed byte ) : " + value ) ;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P8_Replace_Mix]^return true;^722^723^^^^720^725^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedByte [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^if  ( value < Short.MIN_VALUE && value > Short.MAX_VALUE )  {^734^^^^^733^738^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^if  ( value <= Short.MIN_VALUE || value > Short.MAX_VALUE )  {^734^^^^^733^738^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^if  ( value < Short.MIN_VALUE || value == Short.MAX_VALUE )  {^734^^^^^733^738^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P5_Replace_Variable]^if  ( value < Short.null || value > Short.MAX_VALUE )  {^734^^^^^733^738^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P6_Replace_Expression]^if  ( value < Short.MIN_VALUE ) {^734^^^^^733^738^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P6_Replace_Expression]^if  (  value > Short.MAX_VALUE )  {^734^^^^^733^738^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P6_Replace_Expression]^if  ( value < MIN_VALUE )  {^734^^^^^733^738^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P6_Replace_Expression]^if  ( value > MAX_VALUE )  {^734^^^^^733^738^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P6_Replace_Expression]^if  ( msg + "  ( must be a signed short ) : " + value )  {^734^^^^^733^738^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P6_Replace_Expression]^if  ( msg + "  ( must be a signed short ) : " )  {^734^^^^^733^738^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P9_Replace_Statement]^if  ( value < Byte.MIN_VALUE || value > Byte.MAX_VALUE )  {^734^^^^^733^738^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(((msg + " (must be a signed short): ") + value));^734^735^736^737^^733^738^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  { throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P16_Remove_Block]^^734^735^736^737^^733^738^if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  { throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^734^^^^^733^738^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( operand <  ( T_BOOLEAN )  )  ||  ( operand >  ( T_LONG )  )  )  {     throw new IllegalArgumentException (  ( "Invalid operand  ( must be an array type code T_... ) : " + operand )  ) ; }^734^^^^^733^738^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( start )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^734^^^^^733^738^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( value <  ( MIN_VALUE )  )  ||  ( value >  ( MAX_VALUE )  )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be a signed byte ) : " )  + value )  ) ; }^734^^^^^733^738^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^734^^^^^733^738^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^734^^^^^733^738^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  >>  "  ( must be a signed short ) : "  >>  value ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg   instanceof   "  ( must be a signed short ) : " + value ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  ( msg + "  ( must be a signed byte ) : " )  + value )  )  : " + value ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P5_Replace_Variable]^throw new IllegalArgumentException ( value + "  ( must be a signed short ) : " + msg ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^735^^^^^733^738^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  ^  "  ( must be a signed short ) : "  ^  value ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  ||  "  ( must be a signed short ) : " + value ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^735^^^^^733^738^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^735^^^^^733^738^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  &  "  ( must be a signed short ) : "  &  value ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  <<  "  ( must be a signed short ) : " + value ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  >=  "  ( must be a signed short ) : "  >=  value ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  >  "  ( must be a signed short ) : " + value ) ;^735^736^^^^733^738^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkSignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^if  ( value < 0 && value > 65535 )  {^747^^^^^746^751^if  ( value < 0 || value > 65535 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^if  ( value > 0 || value > 65535 )  {^747^^^^^746^751^if  ( value < 0 || value > 65535 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^if  ( value < 0 || value == 65535 )  {^747^^^^^746^751^if  ( value < 0 || value > 65535 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P3_Replace_Literal]^if  ( value < 6 || value > 65535 )  {^747^^^^^746^751^if  ( value < 0 || value > 65535 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P3_Replace_Literal]^if  ( value < 0 || value > 65534 )  {^747^^^^^746^751^if  ( value < 0 || value > 65535 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P6_Replace_Expression]^if  ( value < 0 ) {^747^^^^^746^751^if  ( value < 0 || value > 65535 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P6_Replace_Expression]^if  (  value > 65535 )  {^747^^^^^746^751^if  ( value < 0 || value > 65535 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P6_Replace_Expression]^if  ( msg + "  ( must be an unsigned short ) : " + value )  {^747^^^^^746^751^if  ( value < 0 || value > 65535 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P6_Replace_Expression]^if  ( msg + "  ( must be an unsigned short ) : " )  {^747^^^^^746^751^if  ( value < 0 || value > 65535 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(((msg + " (must be an unsigned short): ") + value));^747^748^749^750^^746^751^if  ( value < 0 || value > 65535 )  { throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P16_Remove_Block]^^747^748^749^750^^746^751^if  ( value < 0 || value > 65535 )  { throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( value <  ( MIN_VALUE )  )  ||  ( value >  ( MAX_VALUE )  )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be a signed short ) : " )  + value )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( start )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( value <  ( MIN_VALUE )  )  ||  ( value >  ( MAX_VALUE )  )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be a signed byte ) : " )  + value )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^747^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  ==  "  ( must be an unsigned short ) : "  ==  value ) ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  &  "  ( must be an unsigned short ) : " + value ) ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  ( msg + "  ( must be a signed short ) : " )  + value )  )  : " + value ) ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P5_Replace_Variable]^throw new IllegalArgumentException ( value + "  ( must be an unsigned short ) : " + msg ) ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^748^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  >=  "  ( must be an unsigned short ) : "  >=  value ) ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg   instanceof   "  ( must be an unsigned short ) : " + value ) ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^748^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^748^^^^^746^751^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  >>  "  ( must be an unsigned short ) : "  >>  value ) ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  !=  "  ( must be an unsigned short ) : " + value ) ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^throw new IllegalArgumentException ( msg  &  "  ( must be an unsigned short ) : "  &  value ) ;^748^749^^^^746^751^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkUnsignedShort [RETURN_TYPE] void   final int value String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  Map  labels  int  value  
[P2_Replace_Operator]^if  ( ! ( cst instanceof Integer )  || ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^if  ( ! ( cst  <  Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^if  ( ! ( cst instanceof Integer )  && ! ( cst  ==  Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst  >=  Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst  ==  Double ) && ! ( cst instanceof String )  ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P2_Replace_Operator]^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst  >>  String )  ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( ! ( cst instanceof Integer )  ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  (  ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( (((!(cst instanceof Integer)) && (!(cst instanceof Float))) && (!(cst instanceof Long)) && !(cst instanceof Double)) ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( ((!(cst instanceof Integer)) && (!(cst instanceof Float)) && !(cst instanceof Long)) ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( (!(cst instanceof Integer) && !(cst instanceof Float)) ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( cst instanceof Integer ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( cst instanceof Float ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( cst instanceof Long ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( cst instanceof Double ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( cst instanceof String ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P6_Replace_Expression]^if  ( "Invalid constant: " + cst ) {^760^761^762^763^^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("Invalid constant: " + cst));^760^761^762^763^764^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P16_Remove_Block]^^760^761^762^763^764^759^766^if  ( ! ( cst instanceof Integer )  && ! ( cst instanceof Float ) && ! ( cst instanceof Long )  && ! ( cst instanceof Double ) && ! ( cst instanceof String )  ) { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  )   ;^764^^^^^759^766^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P8_Replace_Mix]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^764^^^^^759^766^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkConstant [RETURN_TYPE] void   Object cst [VARIABLES] int[]  TYPE  keys  Object  cst  boolean  endCode  endMethod  startCode  visible  Map  labels  
[P5_Replace_Variable]^checkIdentifier (  0, -1, msg ) ;^775^^^^^774^776^checkIdentifier ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P5_Replace_Variable]^checkIdentifier ( name, 0, -1 ) ;^775^^^^^774^776^checkIdentifier ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P5_Replace_Variable]^checkIdentifier ( msg, 0, -1, name ) ;^775^^^^^774^776^checkIdentifier ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P7_Replace_Invocation]^checkInternalName ( name, 0, -1, msg ) ;^775^^^^^774^776^checkIdentifier ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P14_Delete_Statement]^^775^776^^^^774^776^checkIdentifier ( name, 0, -1, msg ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^775^^^^^774^776^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P2_Replace_Operator]^if  ( name == null &&  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^if  ( name != null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^if  ( name == null ||  ( end != -1 ? name.length (  )  <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^if  ( name == null ||  ( end == -1 ? name.length (  )  > start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end > start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^if  ( name == null ||  ( end == -4 ? name.length (  )  <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^if  ( name == null ||  ( end == -1 ? name.length() + 6  <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^if  ( name == null ||  ( max == -1 ? name.length (  )  <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^if  ( name == null ||  ( end == -1 ? name.length (  )  <= max : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^if  ( name == null ||  ( start == -1 ? name.length (  )  <= end : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P6_Replace_Expression]^if  ( name == null ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P6_Replace_Expression]^if  (   ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P6_Replace_Expression]^if  ( end == -1 ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P6_Replace_Expression]^if  ( name.length() <= start ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P6_Replace_Expression]^if  ( end <= start ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P6_Replace_Expression]^if  ( "Invalid " + msg + "  ( must not be null or empty ) " ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P6_Replace_Expression]^if  ( "Invalid " + msg ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P7_Replace_Invocation]^if  ( name == null ||  ( end == -1 ? name.charAt (  )  <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P7_Replace_Invocation]^if  ( name == null ||  ( end == -1 ? name .lastIndexOf ( max )   <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P8_Replace_Mix]^if  ( name == false ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((("Invalid " + msg) + " (must not be null or empty)"));^794^795^796^797^798^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P16_Remove_Block]^^794^795^796^797^798^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^794^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( nLocal > 0 )  &&  (  ( local == null )  ||  (  ( local.length )  < nLocal )  )  )  {     throw new IllegalArgumentException ( "Array local[] is shorter than nLocal" ) ; }^794^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^794^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^794^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^794^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^794^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^794^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^794^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^794^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^794^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^794^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  (  ( keys == null )  ||  ( labels == null )  )  ||  (  ( keys.length )  !=  ( labels.length )  )  )  {     throw new IllegalArgumentException ( "There must be the same number of keys and labels" ) ; }^794^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( start )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^794^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( nStack > 0 )  &&  (  ( stack == null )  ||  (  ( stack.length )  < nStack )  )  )  {     throw new IllegalArgumentException ( "Array stack[] is shorter than nStack" ) ; }^794^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^794^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^794^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >>  msg  >>  "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ||  msg + "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "In" + msg + "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  )  " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Invalid " + name + "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  |  msg  |  "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <=  msg + "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "va" + msg + "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "   instanceof   msg + "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "valinvalid " + msg + "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  &&  msg  &&  "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >>  msg + "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "id" + msg + "  ( must not be null or empty ) " ) ;^796^797^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^if  ( name == null ||  ( end == -1 ? name.length() + 8  <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^if  ( msg == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P6_Replace_Expression]^if  ( end <= start )  ) {^794^795^^^^788^810^if  ( name == null ||  ( end == -1 ? name.length (  )  <= start : end <= start )  ) {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^if  ( !Character.isJavaIdentifierStart ( name.charAt ( max )  )  )  {^799^^^^^788^810^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^if  ( !Character.isJavaIdentifierStart ( start.charAt ( name )  )  )  {^799^^^^^788^810^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P6_Replace_Expression]^if  ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " )  {^799^^^^^788^810^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P6_Replace_Expression]^if  ( "Invalid " + msg )  {^799^^^^^788^810^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P7_Replace_Invocation]^if  ( !Character.isJavaIdentifierStart ( name.indexOf ( start )  )  )  {^799^^^^^788^810^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P8_Replace_Mix]^if  ( !Character.isJavaIdentifierStart ( msg.charAt ( start )  )  )  {^799^^^^^788^810^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P9_Replace_Statement]^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^799^^^^^788^810^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P9_Replace_Statement]^if  ( !Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  {^799^^^^^788^810^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P9_Replace_Statement]^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^799^^^^^788^810^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(((("Invalid " + msg) + " (must be a valid Java identifier): ") + name));^799^800^801^802^^788^810^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P16_Remove_Block]^^799^800^801^802^^788^810^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( getChar ( signature, pos )  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": identifier expected at index " )  + pos )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( 0 )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( value <  ( MIN_VALUE )  )  ||  ( value >  ( MAX_VALUE )  )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be a signed short ) : " )  + value )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( value <  ( MIN_VALUE )  )  ||  ( value >  ( MAX_VALUE )  )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be a signed byte ) : " )  + value )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^799^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  <<  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >  msg  >  "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <<  msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid Inva" + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a fully qualified class name in internal form ) : " )  + name )  )  : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Invalid " + name + "  ( must be a valid Java identifier ) : " + msg ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( start )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^800^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( 0 )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^800^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^800^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^800^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^800^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  >>  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  !=  msg  !=  "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  !=  msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^800^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^800^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ||  msg  ||  "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  |  msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalidnvalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "   instanceof   ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <<  msg  <<  "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <  msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid Inv" + msg + "  ( must be a valid Java identifier ) : " + name ) ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^800^801^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P1_Replace_Type]^short  max = end == -1 ? name.length (  )  : end;^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^int max = end <= -1 ? name.length (  )  : end;^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^int max = end == -1 ? name.length() - 4  : end;^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^int max = start == -1 ? name.length (  )  : end;^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^int max = name == -1 ? end.length (  )  : end;^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P6_Replace_Expression]^int max = end ( end;^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P7_Replace_Invocation]^int max = end == -1 ? name.charAt (  )  : end;^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P12_Insert_Condition]^if  ( end != desc.length (  )  )  { int max = end == -1 ? name.length (  )  : end; }^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P12_Insert_Condition]^if  ( name == null || name.length (  )  == 0 )  { int max = end == -1 ? name.length (  )  : end; }^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^int max = end == -1 ? name.length() - 0  : end;^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P8_Replace_Mix]^int max = end == -1 ? msg.length (  )  : end;^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P14_Delete_Statement]^^803^^^^^788^810^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P6_Replace_Expression]^if  ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " )  {^805^^^^^788^810^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P6_Replace_Expression]^if  ( "Invalid " + msg )  {^805^^^^^788^810^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P7_Replace_Invocation]^if  ( !Character.isJavaIdentifierPart ( name.indexOf ( i )  )  )  {^805^^^^^788^810^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P8_Replace_Mix]^if  ( !Character.isJavaIdentifierPart ( name.charAt ( start )  )  )  {^805^^^^^788^810^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P9_Replace_Statement]^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^805^^^^^788^810^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P9_Replace_Statement]^if  ( !Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  {^805^^^^^788^810^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P9_Replace_Statement]^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^805^^^^^788^810^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(((("Invalid " + msg) + " (must be a valid Java identifier): ") + name));^805^806^807^808^^788^810^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P16_Remove_Block]^^805^806^807^808^^788^810^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( getChar ( signature, pos )  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": identifier expected at index " )  + pos )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( 0 )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( value <  ( MIN_VALUE )  )  ||  ( value >  ( MAX_VALUE )  )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be a signed short ) : " )  + value )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( start )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( value <  ( MIN_VALUE )  )  ||  ( value >  ( MAX_VALUE )  )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be a signed byte ) : " )  + value )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^805^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "   instanceof   ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >  msg  >  "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  &&  msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "alinvalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a fully qualified class name in internal form ) : " )  + name )  )  : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Invalid " + name + "  ( must be a valid Java identifier ) : " + msg ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( start )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^806^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( 0 )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^806^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^806^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^806^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^806^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  >>  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <  msg  <  "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >=  msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid a" + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "NEW cannot be used to create arrays: " + type ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( msg + "  ( must be a signed short ) : " + value ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( msg + "  ( must be a signed byte ) : " + value ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid nStack=" + nStack + " for frame type " + type ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid stack frame value: " + value ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid nLocal=" + nLocal + " for frame type " + type ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( msg + "  ( must be an unsigned short ) : " + value ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^806^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^806^^^^^788^810^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P1_Replace_Type]^for  (  short  i = start + 1; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^for  >=  ( int i = start + 1; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^for  ( int i = start + 1; i <= max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^for  !=  ( int i = start + 1; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^for  >  ( int i = start + 1; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^for  <=  ( int i = start + 1; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^for  ( int i = start + i; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^for  ( int i = max + 1; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^for  ( startnt i = start + 1; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^for  ( int i = start + 1; i < start; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^for  ( startnt i = i + 1; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^for  ( int i = max + 1; i < start; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^if  ( !Character.isJavaIdentifierPart ( msg.charAt ( i )  )  )  {^805^^^^^788^810^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  <=  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >  msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "lidnvalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  >=  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >=  msg  >=  "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  |  msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid Inva" + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  ^  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  &  msg  &  "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalinvalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  <  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ==  msg  ==  "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ||  msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid lid" + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P5_Replace_Variable]^if  ( !Character.isJavaIdentifierPart ( i.charAt ( name )  )  )  {^805^^^^^788^810^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ||  msg  ||  "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ^  msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid id" + msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P3_Replace_Literal]^for  ( int i = start ; i < max; ++i )  {^804^^^^^788^810^for  ( int i = start + 1; i < max; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  ==  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  !=  msg  !=  "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "   instanceof   msg + "  ( must be a valid Java identifier ) : " + name ) ;^806^807^^^^788^810^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P7_Replace_Invocation]^if  ( !Character .isJavaIdentifierStart ( 2 )   )  {^805^^^^^788^810^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  end  i  max  start  
[P2_Replace_Operator]^if  ( name == null && name.length (  )  == 0 )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^if  ( name != null || name.length (  )  == 0 )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^if  ( name == null || name.length (  )  != 0 )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^if  ( name == null || name.length (  )  == i )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^if  ( name == null || name.length() + 9  == 0 )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P6_Replace_Expression]^if  ( name == null ) {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P6_Replace_Expression]^if  (  name.length (  )  == 0 )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P6_Replace_Expression]^if  ( "Invalid " + msg + "  ( must not be null or empty ) " )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P6_Replace_Expression]^if  ( "Invalid " + msg )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P7_Replace_Invocation]^if  ( name == null || name.charAt (  )  == 0 )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P8_Replace_Mix]^if  ( name == false ) {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P9_Replace_Statement]^if  ( desc == null || desc.length (  )  == 0 )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P9_Replace_Statement]^if  ( labels == null || labels.length != max - min + 1 )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((("Invalid " + msg) + " (must not be null or empty)"));^820^821^822^823^^819^841^if  ( name == null || name.length (  )  == 0 )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P16_Remove_Block]^^820^821^822^823^^819^841^if  ( name == null || name.length (  )  == 0 )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  (  ( keys == null )  ||  ( labels == null )  )  ||  (  ( keys.length )  !=  ( labels.length )  )  )  {     throw new IllegalArgumentException ( "There must be the same number of keys and labels" ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( opcode ==  ( NEW )  )  &&  (  ( type.charAt ( 0 )  )  == '[' )  )  {     throw new IllegalArgumentException (  ( "NEW cannot be used to create arrays: " + type )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( 0 )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( nLocal > 0 )  &&  (  ( local == null )  ||  (  ( local.length )  < nLocal )  )  )  {     throw new IllegalArgumentException ( "Array local[] is shorter than nLocal" ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( start )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( nStack > 0 )  &&  (  ( stack == null )  ||  (  ( stack.length )  < nStack )  )  )  {     throw new IllegalArgumentException ( "Array stack[] is shorter than nStack" ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^820^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >=  msg  >=  "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ==  msg + "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  )  " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Invalid " + name + "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^821^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^821^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <  msg  <  "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid" + msg + "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^821^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^821^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^821^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^821^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^821^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^821^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^821^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^821^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^821^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^821^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  &  msg  &  "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ||  msg + "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "In" + msg + "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >  msg  >  "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <  msg + "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid In" + msg + "  ( must not be null or empty ) " ) ;^821^822^^^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^if  ( name == null || name.length() + 0  == 0 )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P5_Replace_Variable]^if  ( msg == null || name.length (  )  == 0 )  {^820^^^^^819^841^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^if  ( "<init>".equals ( name )  && "<clinit>".equals ( name )  )  {^824^^^^^819^841^if  ( "<init>".equals ( name )  || "<clinit>".equals ( name )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P5_Replace_Variable]^if  ( "<init>".equals ( msg )  || "<clinit>".equals ( name )  )  {^824^^^^^819^841^if  ( "<init>".equals ( name )  || "<clinit>".equals ( name )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P6_Replace_Expression]^if  ( "<init>".equals ( name )  ) {^824^^^^^819^841^if  ( "<init>".equals ( name )  || "<clinit>".equals ( name )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P6_Replace_Expression]^if  (  "<clinit>".equals ( name )  )  {^824^^^^^819^841^if  ( "<init>".equals ( name )  || "<clinit>".equals ( name )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P7_Replace_Invocation]^if  ( "<init>".indexOf ( name )  || "<clinit>".equals ( name )  )  {^824^^^^^819^841^if  ( "<init>".equals ( name )  || "<clinit>".equals ( name )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P8_Replace_Mix]^if  ( "<init>".indexOf ( msg )  || "<clinit>".equals ( name )  )  {^824^^^^^819^841^if  ( "<init>".equals ( name )  || "<clinit>".equals ( name )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P15_Unwrap_Block]^return ;^824^825^826^^^819^841^if  ( "<init>".equals ( name )  || "<clinit>".equals ( name )  )  { return; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P16_Remove_Block]^^824^825^826^^^819^841^if  ( "<init>".equals ( name )  || "<clinit>".equals ( name )  )  { return; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^if  ( "tinit>".equals ( name )  || "<clinit>".equals ( name )  )  {^824^^^^^819^841^if  ( "<init>".equals ( name )  || "<clinit>".equals ( name )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^if  ( "<init>".equals ( name )  || "clclinit>".equals ( name )  )  {^824^^^^^819^841^if  ( "<init>".equals ( name )  || "<clinit>".equals ( name )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 6 )  )  )  {^827^^^^^819^841^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P6_Replace_Expression]^if  ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " )  {^827^^^^^819^841^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P6_Replace_Expression]^if  ( "Invalid " + msg )  {^827^^^^^819^841^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P7_Replace_Invocation]^if  ( !Character.isJavaIdentifierStart ( name.indexOf ( 0 )  )  )  {^827^^^^^819^841^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P8_Replace_Mix]^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 3 )  )  )  {^827^^^^^819^841^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P9_Replace_Statement]^if  ( !Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  {^827^^^^^819^841^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P9_Replace_Statement]^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^827^^^^^819^841^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P9_Replace_Statement]^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^827^^^^^819^841^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(((("Invalid " + msg) + " (must be a '<init>', '<clinit>' or a valid Java identifier): ") + name));^827^828^829^830^831^819^841^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P16_Remove_Block]^^827^828^829^830^831^819^841^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( start )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^827^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^827^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^827^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^827^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^827^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "   instanceof   ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "   instanceof   msg   instanceof   "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >>  msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  )  : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Invalid " + name + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + msg ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( 0 )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^828^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^828^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  <<  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  !=  msg  !=  "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <  msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "I" + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  &&  msg  &&  "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >=  msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  <=  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ==  msg  ==  "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ==  msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "nvalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^828^829^830^831^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^if  ( !Character.isJavaIdentifierStart ( name.charAt ( -6 )  )  )  {^827^^^^^819^841^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P5_Replace_Variable]^if  ( !Character.isJavaIdentifierStart ( msg.charAt ( 0 )  )  )  {^827^^^^^819^841^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^if  ( !Character.isJavaIdentifierStart ( name.charAt ( -8 )  )  )  {^827^^^^^819^841^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P5_Replace_Variable]^if  ( !Character.isJavaIdentifierPart ( i.charAt ( name )  )  )  {^834^^^^^819^841^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P6_Replace_Expression]^if  ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " )  {^834^^^^^819^841^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P6_Replace_Expression]^if  ( "Invalid " + msg )  {^834^^^^^819^841^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P7_Replace_Invocation]^if  ( !Character.isJavaIdentifierPart ( name.indexOf ( i )  )  )  {^834^^^^^819^841^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P9_Replace_Statement]^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^834^^^^^819^841^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P9_Replace_Statement]^if  ( !Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  {^834^^^^^819^841^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P9_Replace_Statement]^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^834^^^^^819^841^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(((("Invalid " + msg) + " (must be '<init>' or '<clinit>' or a valid Java identifier): ") + name));^834^835^836^837^838^819^841^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P16_Remove_Block]^^834^835^836^837^838^819^841^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( start )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^834^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( 0 )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^834^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^834^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^834^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^834^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^834^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  ==  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <=  msg  <=  "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  &  msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid I" + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  )  : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Invalid " + name + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + msg ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( 0 )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^835^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^835^^^^^819^841^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  <<  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <  msg  <  "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ||  msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P1_Replace_Type]^for  (  short  i = 1; i < name.length (  ) ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^for  ( int i = 1; i <= name.length (  ) ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^for  |  ( int i = 1; i < name.length (  ) ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^for  &&  ( int i = 1; i < name.length (  ) ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^for  >>  ( int i = 1; i < name.length (  ) ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^for  ( int i = 3; i < name.length (  ) ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^for  ( int i = 1; i < name.length() + 6 ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P5_Replace_Variable]^for  ( int i = 1; i < msg.length (  ) ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P7_Replace_Invocation]^for  ( int i = 1; i < name.charAt (  ) ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P7_Replace_Invocation]^for  ( int i = 1; i < name .lastIndexOf ( i )  ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P8_Replace_Mix]^if  ( !Character.isJavaIdentifierPart ( msg.charAt ( i )  )  )  {^834^^^^^819^841^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  ||  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <<  msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid al" + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ||  msg  ||  "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >  msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invanvalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  >=  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid v" + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  !=  msg  !=  "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "nvnvalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P8_Replace_Mix]^if  ( !Character.isJavaIdentifierPart ( msg.indexOf ( i )  )  )  {^834^^^^^819^841^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  &&  msg  &&  "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  &&  msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalinvalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^for  ( int i = 10; i < name.length (  ) ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  <=  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >=  msg  >=  "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "nvalid" + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^835^836^837^838^^819^841^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P3_Replace_Literal]^for  ( int i = 1; i < name.length() - 6 ; ++i )  {^833^^^^^819^841^for  ( int i = 1; i < name.length (  ) ; ++i )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodIdentifier [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  i  
[P2_Replace_Operator]^if  ( name == null && name.length (  )  == 0 )  {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P2_Replace_Operator]^if  ( name != null || name.length (  )  == 0 )  {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P2_Replace_Operator]^if  ( name == null || name.length (  )  != 0 )  {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P3_Replace_Literal]^if  ( name == null || name.length (  )  ==  )  {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P3_Replace_Literal]^if  ( name == null || name.length() + 4  == 0 )  {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P6_Replace_Expression]^if  ( name == null ) {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P6_Replace_Expression]^if  (  name.length (  )  == 0 )  {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P6_Replace_Expression]^if  ( "Invalid " + msg + "  ( must not be null or empty ) " )  {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P6_Replace_Expression]^if  ( "Invalid " + msg )  {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P7_Replace_Invocation]^if  ( name == null || name.charAt (  )  == 0 )  {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P9_Replace_Statement]^if  ( desc == null || desc.length (  )  == 0 )  {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P9_Replace_Statement]^if  ( labels == null || labels.length != max - min + 1 )  {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((("Invalid " + msg) + " (must not be null or empty)"));^850^851^852^853^^849^859^if  ( name == null || name.length (  )  == 0 )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P16_Remove_Block]^^850^851^852^853^^849^859^if  ( name == null || name.length (  )  == 0 )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  (  ( keys == null )  ||  ( labels == null )  )  ||  (  ( keys.length )  !=  ( labels.length )  )  )  {     throw new IllegalArgumentException ( "There must be the same number of keys and labels" ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( opcode ==  ( NEW )  )  &&  (  ( type.charAt ( 0 )  )  == '[' )  )  {     throw new IllegalArgumentException (  ( "NEW cannot be used to create arrays: " + type )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( 0 )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( nLocal > 0 )  &&  (  ( local == null )  ||  (  ( local.length )  < nLocal )  )  )  {     throw new IllegalArgumentException ( "Array local[] is shorter than nLocal" ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( start )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( nStack > 0 )  &&  (  ( stack == null )  ||  (  ( stack.length )  < nStack )  )  )  {     throw new IllegalArgumentException ( "Array stack[] is shorter than nStack" ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^850^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "   instanceof   msg   instanceof   "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <=  msg + "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Innvalid " + msg + "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  )  " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Invalid " + name + "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^851^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^851^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <<  msg  <<  "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <<  msg + "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "val" + msg + "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^851^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^851^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^851^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^851^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^851^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^851^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^851^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^851^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^851^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^851^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  &&  msg  &&  "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "   instanceof   msg + "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "valnvalid " + msg + "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <  msg  <  "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >  msg + "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "li" + msg + "  ( must not be null or empty ) " ) ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^851^852^^^^849^859^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null or empty ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P3_Replace_Literal]^if  ( name == null || name.length() + 0  == 0 )  {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P5_Replace_Variable]^if  ( msg == null || name.length (  )  == 0 )  {^850^^^^^849^859^if  ( name == null || name.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P2_Replace_Operator]^if  ( name.charAt ( 0 )  != '[' )  {^854^^^^^849^859^if  ( name.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P3_Replace_Literal]^if  ( name.charAt ( 8 )  == '[' )  {^854^^^^^849^859^if  ( name.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P3_Replace_Literal]^if  ( name.charAt ( 5 )  == '[' )  {^854^^^^^849^859^if  ( name.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P7_Replace_Invocation]^if  ( name.indexOf ( 0 )  == '[' )  {^854^^^^^849^859^if  ( name.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P8_Replace_Mix]^if  ( name.indexOf ( 2 )  == '[' )  {^854^^^^^849^859^if  ( name.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P9_Replace_Statement]^if  ( desc.charAt ( start )  == 'V' )  {^854^^^^^849^859^if  ( name.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P9_Replace_Statement]^if  ( desc.charAt ( start )  != ' ) ' )  {^854^^^^^849^859^if  ( name.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P9_Replace_Statement]^if  ( desc.charAt ( 0 )  != '[' )  {^854^^^^^849^859^if  ( name.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P15_Unwrap_Block]^org.mockito.asm.util.CheckMethodAdapter.checkDesc(name, false);^854^855^856^857^858^849^859^if  ( name.charAt ( 0 )  == '[' )  { checkDesc ( name, false ) ; } else { checkInternalName ( name, 0, -1, msg ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P16_Remove_Block]^^854^855^856^857^858^849^859^if  ( name.charAt ( 0 )  == '[' )  { checkDesc ( name, false ) ; } else { checkInternalName ( name, 0, -1, msg ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == 'L' )  {     pos = checkClassTypeSignature ( signature, pos ) ; }else {     pos = checkTypeVariableSignature ( signature, pos ) ; }^854^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( getChar ( signature, 0 )  )  == '<' )  {     pos = checkFormalTypeParameters ( signature, pos ) ; }^854^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( "L[T".indexOf ( getChar ( signature, pos )  )  )  !=  ( -1 )  )  {     pos = checkFieldTypeSignature ( signature, pos ) ; }^854^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == '<' )  {     pos = checkTypeArguments ( signature, pos ) ; }^854^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P3_Replace_Literal]^checkInternalName ( name, 9, -1, msg ) ;^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P3_Replace_Literal]^checkInternalName ( name, 0, --2, msg ) ;^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P5_Replace_Variable]^checkInternalName (  0, -1, msg ) ;^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P5_Replace_Variable]^checkInternalName ( name, 0, -1 ) ;^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P5_Replace_Variable]^checkInternalName ( msg, 0, -1, name ) ;^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P7_Replace_Invocation]^checkIdentifier ( name, 0, -1, msg ) ;^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P14_Delete_Statement]^^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P11_Insert_Donor_Statement]^checkIdentifier ( name, "name" ) ;checkInternalName ( name, 0, -1, msg ) ;^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P11_Insert_Donor_Statement]^checkIdentifier ( name, 0, -1, msg ) ;checkInternalName ( name, 0, -1, msg ) ;^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P11_Insert_Donor_Statement]^checkInternalName ( owner, "owner" ) ;checkInternalName ( name, 0, -1, msg ) ;^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P11_Insert_Donor_Statement]^checkInternalName ( desc, start + 1, index, null ) ;checkInternalName ( name, 0, -1, msg ) ;^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P11_Insert_Donor_Statement]^checkInternalName ( type, "type" ) ;checkInternalName ( name, 0, -1, msg ) ;^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^857^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^857^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P3_Replace_Literal]^checkDesc ( name, true ) ;^855^^^^^849^859^checkDesc ( name, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P5_Replace_Variable]^checkDesc ( msg, false ) ;^855^^^^^849^859^checkDesc ( name, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P7_Replace_Invocation]^visitAnnotation ( name, false ) ;^855^^^^^849^859^checkDesc ( name, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P8_Replace_Mix]^visitAnnotation ( msg, false ) ;^855^^^^^849^859^checkDesc ( name, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P14_Delete_Statement]^^855^^^^^849^859^checkDesc ( name, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P11_Insert_Donor_Statement]^checkDesc ( desc, false ) ;checkDesc ( name, false ) ;^855^^^^^849^859^checkDesc ( name, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P11_Insert_Donor_Statement]^checkIdentifier ( name, "name" ) ;checkDesc ( name, false ) ;^855^^^^^849^859^checkDesc ( name, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P11_Insert_Donor_Statement]^checkIdentifier ( name, 0, -1, msg ) ;checkDesc ( name, false ) ;^855^^^^^849^859^checkDesc ( name, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P11_Insert_Donor_Statement]^checkLabel ( label, false, "label" ) ;checkDesc ( name, false ) ;^855^^^^^849^859^checkDesc ( name, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P11_Insert_Donor_Statement]^return checkDesc ( desc, index, false ) ;checkDesc ( name, false ) ;^855^^^^^849^859^checkDesc ( name, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P11_Insert_Donor_Statement]^start = checkDesc ( desc, start, false ) ;checkDesc ( name, false ) ;^855^^^^^849^859^checkDesc ( name, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P11_Insert_Donor_Statement]^checkMethodIdentifier ( name, "name" ) ;checkDesc ( name, false ) ;^855^^^^^849^859^checkDesc ( name, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^855^^^^^849^859^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P3_Replace_Literal]^if  ( name.charAt ( 1 )  == '[' )  {^854^^^^^849^859^if  ( name.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P5_Replace_Variable]^if  ( msg.charAt ( 0 )  == '[' )  {^854^^^^^849^859^if  ( name.charAt ( 0 )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P3_Replace_Literal]^checkInternalName ( name, 8, -1, msg ) ;^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P3_Replace_Literal]^checkInternalName ( name, 0, --6, msg ) ;^857^^^^^849^859^checkInternalName ( name, 0, -1, msg ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  
[P1_Replace_Type]^short  max = end == -1 ? name.length (  )  : end;^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P2_Replace_Operator]^int max = end <= -1 ? name.length (  )  : end;^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P3_Replace_Literal]^int max = end == -slash ? name.length (  )  : end;^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P3_Replace_Literal]^int max = end == -1 ? name.length() - 6  : end;^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^int max = start == -1 ? name.length (  )  : end;^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^int max = name == -1 ? end.length (  )  : end;^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P6_Replace_Expression]^int max = end ( end;^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P7_Replace_Invocation]^int max = end == -1 ? name.charAt (  )  : end;^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P7_Replace_Invocation]^int max = end == -1 ? name .lastIndexOf ( max )   : end;^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P8_Replace_Mix]^int max = end == -1 ? msg.length (  )  : end;^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P12_Insert_Condition]^if  ( end != desc.length (  )  )  { int max = end == -1 ? name.length (  )  : end; }^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P12_Insert_Condition]^if  ( name == null || name.length (  )  == 0 )  { int max = end == -1 ? name.length (  )  : end; }^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P3_Replace_Literal]^int max = end == -1 ? name.length() + 9  : end;^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P14_Delete_Statement]^^877^^^^^871^895^int max = end == -1 ? name.length (  )  : end;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P2_Replace_Operator]^if  ( slash == -1 && slash > max )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P2_Replace_Operator]^if  ( slash <= -1 || slash > max )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P2_Replace_Operator]^if  ( slash == -1 || slash == max )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P3_Replace_Literal]^if  ( slash == -slash || slash > max )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^if  ( start == -1 || slash > max )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^if  ( slash == -1 || slash > start )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^if  ( max == -1 || slash > slash )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P6_Replace_Expression]^if  ( slash == -1 ) {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P6_Replace_Expression]^if  (  slash > max )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P8_Replace_Mix]^if  ( slash == -0 || slash > max )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P15_Unwrap_Block]^slash = max;^883^884^885^^^871^895^if  ( slash == -1 || slash > max )  { slash = max; }^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P16_Remove_Block]^^883^884^885^^^871^895^if  ( slash == -1 || slash > max )  { slash = max; }^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^slash = start;^884^^^^^871^895^slash = max;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P2_Replace_Operator]^if  ( slash != -1 || slash > max )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P2_Replace_Operator]^if  ( slash == -1 || slash >= max )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P8_Replace_Mix]^if  ( slash == -1 % 0 || slash > max )  {^883^^^^^871^895^if  ( slash == -1 || slash > max )  {^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^slash = slash;^884^^^^^871^895^slash = max;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P8_Replace_Mix]^slash =  null;^884^^^^^871^895^slash = max;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P2_Replace_Operator]^slash = name.indexOf ( '/', begin  <=  1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P3_Replace_Literal]^slash = name.indexOf ( '/', begin + slash ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^slash = msg.indexOf ( '/', begin + 1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^slash = name.indexOf ( '/', start + 1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^slash = name.indexOf ( '/' + 1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^slash = begin.indexOf ( '/', name + 1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P7_Replace_Invocation]^slash = name .indexOf ( begin , max )  ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P11_Insert_Donor_Statement]^index = desc.indexOf ( ';', start ) ;slash = name.indexOf ( '/', begin + 1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P3_Replace_Literal]^begin = slash ;^887^^^^^871^895^begin = slash + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^begin = start + 1;^887^^^^^871^895^begin = slash + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P8_Replace_Mix]^begin = slash + 4;^887^^^^^871^895^begin = slash + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P11_Insert_Donor_Statement]^index = start + 1;begin = slash + 1;^887^^^^^871^895^begin = slash + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P1_Replace_Type]^short  begin = start;^879^^^^^871^895^int begin = start;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^int begin = slash;^879^^^^^871^895^int begin = start;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P1_Replace_Type]^short  slash;^880^^^^^871^895^int slash;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P11_Insert_Donor_Statement]^int mStack;int slash;^880^^^^^871^895^int slash;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P11_Insert_Donor_Statement]^int mLocal;int slash;^880^^^^^871^895^int slash;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P2_Replace_Operator]^slash = name.indexOf ( '/', begin  ==  1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P3_Replace_Literal]^slash = name.indexOf ( '/', begin + max ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P14_Delete_Statement]^^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^checkIdentifier ( msg, begin, slash, null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^checkIdentifier ( name, start, slash, null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^checkIdentifier ( name, begin, start, null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^checkIdentifier (  begin, slash, null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^checkIdentifier ( name,  slash, null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^checkIdentifier ( name, begin,  null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^checkIdentifier ( slash, begin, name, null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^checkIdentifier ( name, slash, begin, null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P7_Replace_Invocation]^checkInternalName ( name, begin, slash, null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P2_Replace_Operator]^slash = name.indexOf ( '/', begin  !=  1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P3_Replace_Literal]^slash = name.indexOf ( '/', begin + begin ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^slash = name.indexOf ( '/', slash + 1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P8_Replace_Mix]^slash =  null.indexOf ( '/', begin + 1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P3_Replace_Literal]^begin = slash + begin;^887^^^^^871^895^begin = slash + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P8_Replace_Mix]^begin = slash + 1 - 4;^887^^^^^871^895^begin = slash + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  !=  ( must be a fully qualified class name in internal form ) : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <  msg  <  "  ( must be a fully qualified class name in internal form ) : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >=  msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Inva" + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  )  : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^throw new IllegalArgumentException ( "Invalid " + name + "  ( must be a fully qualified class msg in internal form ) : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P1_Replace_Type]^long  begin = start;^879^^^^^871^895^int begin = start;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid " + msg + "  ==  ( must be a fully qualified class name in internal form ) : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ^  msg  ^  "  ( must be a fully qualified class name in internal form ) : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ==  msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "dnvalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P8_Replace_Mix]^return true;^890^891^892^893^^871^895^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be a fully qualified class name in internal form ) : " + name ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P2_Replace_Operator]^slash = name.indexOf ( '/', begin  &  1 ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P3_Replace_Literal]^slash = name.indexOf ( '/', begin  ) ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P8_Replace_Mix]^slash = name .indexOf ( slash , slash )  ;^882^^^^^871^895^slash = name.indexOf ( '/', begin + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P5_Replace_Variable]^checkIdentifier ( begin, name, slash, null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P8_Replace_Mix]^checkInternalName ( name, start, slash, null ) ;^886^^^^^871^895^checkIdentifier ( name, begin, slash, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkInternalName [RETURN_TYPE] void   String name final int start final int end String msg [VARIABLES] int[]  TYPE  keys  boolean  endCode  endMethod  startCode  visible  String  msg  name  Map  labels  int  begin  end  max  slash  start  IllegalArgumentException  _  
[P1_Replace_Type]^short  end = checkDesc ( desc, 0, canBeVoid ) ;^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P3_Replace_Literal]^int end = checkDesc ( desc, end, canBeVoid ) ;^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P5_Replace_Variable]^int end = checkDesc ( desc, 0, startCode ) ;^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P5_Replace_Variable]^int end = checkDesc (  0, canBeVoid ) ;^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P5_Replace_Variable]^int end = checkDesc ( desc, 0 ) ;^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P5_Replace_Variable]^int end = checkDesc ( canBeVoid, 0, desc ) ;^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P7_Replace_Invocation]^int end = checkChar ( desc, 0, canBeVoid ) ;^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P5_Replace_Variable]^int end = checkDesc ( desc, 0, visible ) ;^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P14_Delete_Statement]^^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P11_Insert_Donor_Statement]^start = checkDesc ( desc, start + 1, true ) ;int end = checkDesc ( desc, 0, canBeVoid ) ;^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P11_Insert_Donor_Statement]^checkDesc ( desc, false ) ;int end = checkDesc ( desc, 0, canBeVoid ) ;^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P11_Insert_Donor_Statement]^return checkDesc ( desc, index, false ) ;int end = checkDesc ( desc, 0, canBeVoid ) ;^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P11_Insert_Donor_Statement]^start = checkDesc ( desc, start, false ) ;int end = checkDesc ( desc, 0, canBeVoid ) ;^904^^^^^903^908^int end = checkDesc ( desc, 0, canBeVoid ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P2_Replace_Operator]^if  ( end < desc.length (  )  )  {^905^^^^^903^908^if  ( end != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P3_Replace_Literal]^if  ( end != desc.length() - 4  )  {^905^^^^^903^908^if  ( end != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P5_Replace_Variable]^if  ( desc != end.length (  )  )  {^905^^^^^903^908^if  ( end != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P6_Replace_Expression]^if  ( "Invalid descriptor: " + desc )  {^905^^^^^903^908^if  ( end != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P7_Replace_Invocation]^if  ( end != desc.charAt (  )  )  {^905^^^^^903^908^if  ( end != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P7_Replace_Invocation]^if  ( end != desc .lastIndexOf ( end )   )  {^905^^^^^903^908^if  ( end != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P9_Replace_Statement]^if  ( desc == null || desc.length (  )  == 0 )  {^905^^^^^903^908^if  ( end != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P9_Replace_Statement]^if  ( pos != signature.length (  )  )  {^905^^^^^903^908^if  ( end != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P9_Replace_Statement]^if  ( index < desc.length (  )  )  {^905^^^^^903^908^if  ( end != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P9_Replace_Statement]^if  ( start != desc.length (  )  )  {^905^^^^^903^908^if  ( end != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("Invalid descriptor: " + desc));^905^906^907^^^903^908^if  ( end != desc.length (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P16_Remove_Block]^^905^906^907^^^903^908^if  ( end != desc.length (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( index <  ( desc.length (  )  )  )  {     return checkDesc ( desc, index, false ) ; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  ( opcode ==  ( NEW )  )  &&  (  ( type.charAt ( 0 )  )  == '[' )  )  {     throw new IllegalArgumentException (  ( "NEW cannot be used to create arrays: " + type )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  ( nLocal > 0 )  &&  (  ( local == null )  ||  (  ( local.length )  < nLocal )  )  )  {     throw new IllegalArgumentException ( "Array local[] is shorter than nLocal" ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  ( nStack > 0 )  &&  (  ( stack == null )  ||  (  ( stack.length )  < nStack )  )  )  {     throw new IllegalArgumentException ( "Array stack[] is shorter than nStack" ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^905^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  )   ;^906^^^^^903^908^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^906^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^906^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^906^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^906^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^906^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^906^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P8_Replace_Mix]^return false;^906^^^^^903^908^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^906^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^906^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^906^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^906^^^^^903^908^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P3_Replace_Literal]^if  ( end != desc.length() - 6  )  {^905^^^^^903^908^if  ( end != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] void   String desc final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  end  
[P2_Replace_Operator]^if  ( desc == null && start >= desc.length (  )  )  {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^if  ( desc != null || start >= desc.length (  )  )  {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^if  ( desc == null || start > desc.length (  )  )  {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^if  ( desc == null || start >= desc.length() + 1  )  {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^if  ( desc == null || index >= desc.length (  )  )  {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^if  ( start == null || desc >= desc.length (  )  )  {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P6_Replace_Expression]^if  ( desc == null ) {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P6_Replace_Expression]^if  (  start >= desc.length (  )  )  {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P7_Replace_Invocation]^if  ( desc == null || start >= desc.charAt (  )  )  {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P8_Replace_Mix]^if  ( desc == true || start >= desc .lastIndexOf ( start )   )  {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P9_Replace_Statement]^if  ( desc == null || desc.length (  )  == 0 )  {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P9_Replace_Statement]^if  ( start != desc.length (  )  )  {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Invalid type descriptor (must not be null or empty)");^923^924^925^^^908^938^if  ( desc == null || start >= desc.length (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P16_Remove_Block]^^923^924^925^^^908^938^if  ( desc == null || start >= desc.length (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  (  ( keys == null )  ||  ( labels == null )  )  ||  (  ( keys.length )  !=  ( labels.length )  )  )  {     throw new IllegalArgumentException ( "There must be the same number of keys and labels" ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^923^^^^^908^938^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " )   ;^924^^^^^909^939^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^924^^^^^909^939^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^924^^^^^909^939^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^924^^^^^909^939^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^924^^^^^909^939^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^924^^^^^909^939^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^924^^^^^909^939^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^924^^^^^909^939^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P8_Replace_Mix]^if  ( desc == null || start >= desc .lastIndexOf ( index )   )  {^923^^^^^908^938^if  ( desc == null || start >= desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P1_Replace_Type]^short  index;^926^^^^^911^941^int index;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^while  ( index < desc.length (  )  || desc.charAt ( index )  == '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^while  ( index <= desc.length (  )  && desc.charAt ( index )  == '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^while  ( index < desc.length (  )  && desc.charAt ( index )  != '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^while  ( index < desc.length() + 7  && desc.charAt ( index )  == '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^while  ( start < desc.length (  )  && desc.charAt ( index )  == '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^while  ( desc < index.length (  )  && desc.charAt ( index )  == '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P7_Replace_Invocation]^while  ( index < desc.charAt (  )  && desc.charAt ( index )  == '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P7_Replace_Invocation]^while  ( index < desc .lastIndexOf ( start )   && desc.charAt ( index )  == '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P7_Replace_Invocation]^while  ( index < desc.length (  )  && desc.indexOf ( index )  == '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P8_Replace_Mix]^while  ( start < desc.charAt (  )  && desc.charAt ( index )  == '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^if  ( visible )  {^929^^^^^914^944^if  ( canBeVoid )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P6_Replace_Expression]^if  ( "Invalid descriptor: " + desc )  {^929^^^^^914^944^if  ( canBeVoid )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P15_Unwrap_Block]^return start + 1;^929^930^931^932^933^914^944^if  ( canBeVoid )  { return start + 1; } else { throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P16_Remove_Block]^^929^930^931^932^933^914^944^if  ( canBeVoid )  { return start + 1; } else { throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  <=  desc ) ;^932^933^^^^929^934^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( " descript" + desc ) ;^932^933^^^^929^934^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  )  ;^932^933^^^^929^934^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^932^^^^^929^934^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^932^^^^^929^934^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^932^^^^^929^934^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^932^^^^^929^934^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^932^^^^^929^934^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^932^^^^^929^934^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  >  desc ) ;^932^933^^^^929^934^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid descriptor: descriptor" + desc ) ;^932^933^^^^929^934^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^932^^^^^929^934^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^932^^^^^929^934^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^932^^^^^929^934^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^932^^^^^929^934^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^return start + index;^930^^^^^915^945^return start + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P8_Replace_Mix]^return index + 1;^930^^^^^915^945^return start + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^if  ( index == desc.length (  )  )  {^949^^^^^934^964^if  ( index < desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^if  ( index < desc.length() + 9  )  {^949^^^^^934^964^if  ( index < desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^if  ( start < desc.length (  )  )  {^949^^^^^934^964^if  ( index < desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^if  ( desc < index.length (  )  )  {^949^^^^^934^964^if  ( index < desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P6_Replace_Expression]^if  ( "Invalid descriptor: " + desc )  {^949^^^^^934^964^if  ( index < desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P7_Replace_Invocation]^if  ( index < desc.charAt (  )  )  {^949^^^^^934^964^if  ( index < desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P8_Replace_Mix]^if  ( start < desc.charAt (  )  )  {^949^^^^^934^964^if  ( index < desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P9_Replace_Statement]^if  ( end != desc.length (  )  )  {^949^^^^^934^964^if  ( index < desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P9_Replace_Statement]^if  ( start != desc.length (  )  )  {^949^^^^^934^964^if  ( index < desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P15_Unwrap_Block]^return org.mockito.asm.util.CheckMethodAdapter.checkDesc(desc, index, false);^949^950^951^952^953^934^964^if  ( index < desc.length (  )  )  { return checkDesc ( desc, index, false ) ; } else { throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P16_Remove_Block]^^949^950^951^952^953^934^964^if  ( index < desc.length (  )  )  { return checkDesc ( desc, index, false ) ; } else { throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^949^^^^^934^964^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( getChar ( signature, pos )  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": identifier expected at index " )  + pos )  ) ; }^949^^^^^934^964^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^949^^^^^934^964^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  (  ( opcode < 0 )  ||  ( opcode > 199 )  )  ||  (  ( TYPE[opcode] )  != type )  )  {     throw new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  ) ; }^949^^^^^934^964^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^949^^^^^934^964^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^949^^^^^934^964^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^949^^^^^934^964^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^949^^^^^934^964^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  >  desc ) ;^952^953^^^^949^954^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "nval" + desc ) ;^952^953^^^^949^954^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  )  ;^952^953^^^^949^954^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^952^^^^^949^954^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^952^^^^^949^954^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^952^^^^^949^954^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^952^^^^^949^954^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^952^^^^^949^954^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^952^^^^^949^954^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  ^  desc ) ;^952^953^^^^949^954^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "alid descnvalid descriptor: " + desc ) ;^952^953^^^^949^954^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^952^^^^^949^954^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^952^^^^^949^954^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^952^^^^^949^954^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^952^^^^^949^954^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^return checkDesc ( desc, index, true ) ;^950^^^^^935^965^return checkDesc ( desc, index, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^return checkDesc ( desc, start, false ) ;^950^^^^^935^965^return checkDesc ( desc, index, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^return checkDesc (  index, false ) ;^950^^^^^935^965^return checkDesc ( desc, index, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^return checkDesc ( desc,  false ) ;^950^^^^^935^965^return checkDesc ( desc, index, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^return checkDesc ( index, desc, false ) ;^950^^^^^935^965^return checkDesc ( desc, index, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P7_Replace_Invocation]^return checkChar ( desc, index, false ) ;^950^^^^^935^965^return checkDesc ( desc, index, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P8_Replace_Mix]^return checkChar ( desc, index, true ) ;^950^^^^^935^965^return checkDesc ( desc, index, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^950^^^^^935^965^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P8_Replace_Mix]^return checkChar ( desc, start, false ) ;^950^^^^^935^965^return checkDesc ( desc, index, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P14_Delete_Statement]^^950^^^^^935^965^return checkDesc ( desc, index, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^if  ( index == -1 && index - start < 2 )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^if  ( index != -1 || index - start < 2 )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^if  ( index == -1 || index - start > 2 )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^if  ( index == -1 || index  ==  start < 2 )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^if  ( index == -10 || index - start < 2 )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^if  ( index == -1 || index - start < -2 )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^if  ( start == -1 || index - start < 2 )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^if  ( start == -1 || index - index < 2 )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P6_Replace_Expression]^if  ( index == -1 ) {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P6_Replace_Expression]^if  (  index - start < 2 )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P6_Replace_Expression]^if  ( index - start )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P6_Replace_Expression]^if  ( "Invalid descriptor: " + desc )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P8_Replace_Mix]^if  ( index == -2 || index - start < 2 )  {^957^^^^^942^972^if  ( index == -1 || index - start < 2 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("Invalid descriptor: " + desc));^957^958^959^960^^942^972^if  ( index == -1 || index - start < 2 )  { throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P16_Remove_Block]^^957^958^959^960^^942^972^if  ( index == -1 || index - start < 2 )  { throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( nLocal > 0 )  &&  (  ( local == null )  ||  (  ( local.length )  < nLocal )  )  )  {     throw new IllegalArgumentException ( "Array local[] is shorter than nLocal" ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  (  ( opcode < 0 )  ||  ( opcode > 199 )  )  ||  (  ( TYPE[opcode] )  != type )  )  {     throw new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( nStack > 0 )  &&  (  ( stack == null )  ||  (  ( stack.length )  < nStack )  )  )  {     throw new IllegalArgumentException ( "Array stack[] is shorter than nStack" ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( index <  ( desc.length (  )  )  )  {     return checkDesc ( desc, index, false ) ; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( opcode ==  ( NEW )  )  &&  (  ( type.charAt ( 0 )  )  == '[' )  )  {     throw new IllegalArgumentException (  ( "NEW cannot be used to create arrays: " + type )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^957^^^^^942^972^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  <  desc ) ;^958^959^^^^943^973^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid descriptor: Invalid" + desc ) ;^958^959^^^^943^973^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  )  ;^958^959^^^^943^973^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^958^^^^^943^973^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^958^^^^^943^973^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^958^^^^^943^973^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^958^^^^^943^973^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^958^^^^^943^973^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^958^^^^^943^973^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  <<  desc ) ;^958^959^^^^943^973^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "I" + desc ) ;^958^959^^^^943^973^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^958^^^^^943^973^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^958^^^^^943^973^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^958^^^^^943^973^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^958^^^^^943^973^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^checkInternalName ( desc, start , index, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^checkInternalName ( desc, start + 1, start, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^checkInternalName (  start + 1, index, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^checkInternalName ( desc + 1, index, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^checkInternalName ( desc, start + 1,  null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^checkInternalName ( start, desc + 1, index, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^checkInternalName ( desc, index + 1, start, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P7_Replace_Invocation]^visitFrame ( desc, start + 1, index, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P14_Delete_Statement]^^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P11_Insert_Donor_Statement]^checkInternalName ( name, 0, -1, msg ) ;checkInternalName ( desc, start + 1, index, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P11_Insert_Donor_Statement]^checkInternalName ( owner, "owner" ) ;checkInternalName ( desc, start + 1, index, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P11_Insert_Donor_Statement]^checkInternalName ( type, "type" ) ;checkInternalName ( desc, start + 1, index, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^index = start ;^945^^^^^930^960^index = start + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^index = index + 1;^945^^^^^930^960^index = start + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P8_Replace_Mix]^index = start + 1 / 4;^945^^^^^930^960^index = start + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P11_Insert_Donor_Statement]^begin = slash + 1;index = start + 1;^945^^^^^930^960^index = start + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^index = desc.indexOf ( ';', index ) ;^956^^^^^941^971^index = desc.indexOf ( ';', start ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^index = desc.indexOf ( ';' ) ;^956^^^^^941^971^index = desc.indexOf ( ';', start ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^index = start.indexOf ( ';', desc ) ;^956^^^^^941^971^index = desc.indexOf ( ';', start ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P8_Replace_Mix]^index =  null.indexOf ( ';', start ) ;^956^^^^^941^971^index = desc.indexOf ( ';', start ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P11_Insert_Donor_Statement]^slash = name.indexOf ( '/', begin + 1 ) ;index = desc.indexOf ( ';', start ) ;^956^^^^^941^971^index = desc.indexOf ( ';', start ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P12_Insert_Condition]^if  ( dims > desc.lastIndexOf ( '[' )  + 1 )  { index = desc.indexOf ( ';', start ) ; }^956^^^^^941^971^index = desc.indexOf ( ';', start ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^return start + start;^930^^^^^915^945^return start + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P8_Replace_Mix]^returnindex + 4;^930^^^^^915^945^return start + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^return start ;^943^^^^^928^958^return start + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P8_Replace_Mix]^returnindex + 1;^943^^^^^928^958^return start + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^return index ;^967^^^^^952^982^return index + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^return start + 1;^967^^^^^952^982^return index + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P8_Replace_Mix]^return start +start;^967^^^^^952^982^return index + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  <=  desc ) ;^932^933^^^^917^947^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid descriptor: lid descript" + desc ) ;^932^933^^^^917^947^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  )  ;^932^933^^^^917^947^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^932^^^^^917^947^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^932^^^^^917^947^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^932^^^^^917^947^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^932^^^^^917^947^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^932^^^^^917^947^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^932^^^^^917^947^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  !=  desc ) ;^952^953^^^^937^967^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid dnvalid descriptor: " + desc ) ;^952^953^^^^937^967^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  )  ;^952^953^^^^937^967^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^952^^^^^937^967^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^952^^^^^937^967^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^952^^^^^937^967^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^952^^^^^937^967^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^952^^^^^937^967^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^952^^^^^937^967^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  |  desc ) ;^958^959^^^^943^973^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid descriptor: scr" + desc ) ;^958^959^^^^943^973^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  <  desc ) ;^964^965^^^^949^979^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid descriptor: Invalid " + desc ) ;^964^965^^^^949^979^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  )  ;^964^965^^^^949^979^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  <=  desc ) ;^969^970^^^^954^984^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "nvnvalid descriptor: " + desc ) ;^969^970^^^^954^984^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  )  ;^969^970^^^^954^984^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  <<  desc ) ;^932^933^^^^917^947^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid descriptor: Inv" + desc ) ;^932^933^^^^917^947^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P8_Replace_Mix]^return ;^932^933^^^^917^947^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^932^^^^^917^947^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^932^^^^^917^947^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^932^^^^^917^947^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^932^^^^^917^947^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  <  desc ) ;^952^953^^^^937^967^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^952^953^^^^937^967^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^952^^^^^937^967^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^952^^^^^937^967^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^952^^^^^937^967^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^952^^^^^937^967^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  !=  desc ) ;^958^959^^^^943^973^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "valnvalid descriptor: " + desc ) ;^958^959^^^^943^973^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  ||  desc ) ;^964^965^^^^949^979^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "nvalid descriptor: " + desc ) ;^964^965^^^^949^979^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  >  desc ) ;^969^970^^^^954^984^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid descriptor: Invalid descrip" + desc ) ;^969^970^^^^954^984^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^switch  ( desc.charAt ( index )  )  {^927^^^^^912^942^switch  ( desc.charAt ( start )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^switch  ( start.charAt ( desc )  )  {^927^^^^^912^942^switch  ( desc.charAt ( start )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P7_Replace_Invocation]^switch  ( desc.indexOf ( start )  )  {^927^^^^^912^942^switch  ( desc.charAt ( start )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P8_Replace_Mix]^switch  ( desc.indexOf ( index )  )  {^927^^^^^912^942^switch  ( desc.charAt ( start )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^while  ( index < desc.length() - 3  && desc.charAt ( index )  == '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P14_Delete_Statement]^^946^947^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  { ++index;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^while  ( index < desc.length() - 9  && desc.charAt ( index )  == '[' )  {^946^^^^^931^961^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P3_Replace_Literal]^if  ( index < desc.length() - 5  )  {^949^^^^^934^964^if  ( index < desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P7_Replace_Invocation]^if  ( index < desc .lastIndexOf ( start )   )  {^949^^^^^934^964^if  ( index < desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P7_Replace_Invocation]^index = desc .indexOf ( index , start )  ;^956^^^^^941^971^index = desc.indexOf ( ';', start ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P14_Delete_Statement]^^956^^^^^941^971^index = desc.indexOf ( ';', start ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P5_Replace_Variable]^checkInternalName ( index, start + 1, desc, null ) ;^962^^^^^947^977^checkInternalName ( desc, start + 1, index, null ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkDesc [RETURN_TYPE] int   String desc final int start final boolean canBeVoid [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  index  start  IllegalArgumentException  _  
[P2_Replace_Operator]^if  ( desc == null && desc.length (  )  == 0 )  {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P2_Replace_Operator]^if  ( desc != null || desc.length (  )  == 0 )  {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P2_Replace_Operator]^if  ( desc == null || desc.length (  )  != 0 )  {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^if  ( desc == null || desc.length (  )  == start )  {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^if  ( desc == null || desc.length() + 2  == 0 )  {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P6_Replace_Expression]^if  ( desc == null ) {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P6_Replace_Expression]^if  (  desc.length (  )  == 0 )  {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P7_Replace_Invocation]^if  ( desc == null || desc.charAt (  )  == 0 )  {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P7_Replace_Invocation]^if  ( desc == null || desc .lastIndexOf ( start )   == 0 )  {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P8_Replace_Mix]^if  ( desc == this ) {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P9_Replace_Statement]^if  ( desc == null || start >= desc.length (  )  )  {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P9_Replace_Statement]^if  ( end != desc.length (  )  )  {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P9_Replace_Statement]^if  ( name == null || name.length (  )  == 0 )  {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Invalid method descriptor (must not be null or empty)");^980^981^982^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P16_Remove_Block]^^980^981^982^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  (  ( keys == null )  ||  ( labels == null )  )  ||  (  ( keys.length )  !=  ( labels.length )  )  )  {     throw new IllegalArgumentException ( "There must be the same number of keys and labels" ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( nLocal > 0 )  &&  (  ( local == null )  ||  (  ( local.length )  < nLocal )  )  )  {     throw new IllegalArgumentException ( "Array local[] is shorter than nLocal" ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( nStack > 0 )  &&  (  ( stack == null )  ||  (  ( stack.length )  < nStack )  )  )  {     throw new IllegalArgumentException ( "Array stack[] is shorter than nStack" ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^980^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " )   ;^981^^^^^979^1000^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^981^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^981^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^981^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^981^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^981^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^981^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^981^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^if  ( desc == null || desc.length() + 0  == 0 )  {^980^^^^^979^1000^if  ( desc == null || desc.length (  )  == 0 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P2_Replace_Operator]^if  ( desc.charAt ( 0 )  != ' ( ' && desc.length (  )  < 3 )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P2_Replace_Operator]^if  ( desc.charAt ( 0 )  <= ' ( ' || desc.length (  )  < 3 )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P2_Replace_Operator]^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  <= 3 )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < start )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length() - 6  < 3 )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P6_Replace_Expression]^if  ( desc.charAt ( 0 )  != ' ( ' ) {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P6_Replace_Expression]^if  (  desc.length (  )  < 3 )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P6_Replace_Expression]^if  ( "Invalid descriptor: " + desc )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P7_Replace_Invocation]^if  ( desc.indexOf ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P7_Replace_Invocation]^if  ( desc.charAt ( 0 )  != ' ( ' || desc.charAt (  )  < 3 )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("Invalid descriptor: " + desc));^983^984^985^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P16_Remove_Block]^^983^984^985^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( nLocal > 0 )  &&  (  ( local == null )  ||  (  ( local.length )  < nLocal )  )  )  {     throw new IllegalArgumentException ( "Array local[] is shorter than nLocal" ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  (  ( opcode < 0 )  ||  ( opcode > 199 )  )  ||  (  ( TYPE[opcode] )  != type )  )  {     throw new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  (  ( keys == null )  ||  ( labels == null )  )  ||  (  ( keys.length )  !=  ( labels.length )  )  )  {     throw new IllegalArgumentException ( "There must be the same number of keys and labels" ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( nStack > 0 )  &&  (  ( stack == null )  ||  (  ( stack.length )  < nStack )  )  )  {     throw new IllegalArgumentException ( "Array stack[] is shorter than nStack" ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( index <  ( desc.length (  )  )  )  {     return checkDesc ( desc, index, false ) ; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( opcode ==  ( NEW )  )  &&  (  ( type.charAt ( 0 )  )  == '[' )  )  {     throw new IllegalArgumentException (  ( "NEW cannot be used to create arrays: " + type )  ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^983^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  )   ;^984^^^^^979^1000^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^984^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^984^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^984^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^984^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^984^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^984^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^984^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^984^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^984^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^984^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^if  ( desc.charAt ( 5 )  != ' ( ' || desc.length (  )  < 3 )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length() - 7  < 3 )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length() + 5  < 3 )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P7_Replace_Invocation]^if  ( desc.charAt ( 0 )  != ' ( ' || desc .lastIndexOf ( start )   < 3 )  {^983^^^^^979^1000^if  ( desc.charAt ( 0 )  != ' ( ' || desc.length (  )  < 3 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P1_Replace_Type]^short  start = 1;^986^^^^^979^1000^int start = 1;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^int start = 0;^986^^^^^979^1000^int start = 1;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P11_Insert_Donor_Statement]^int pos = 0;int start = 1;^986^^^^^979^1000^int start = 1;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P2_Replace_Operator]^if  ( desc.charAt ( start )  == ' ) ' )  {^987^^^^^979^1000^if  ( desc.charAt ( start )  != ' ) ' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P5_Replace_Variable]^if  ( start.charAt ( desc )  != ' ) ' )  {^987^^^^^979^1000^if  ( desc.charAt ( start )  != ' ) ' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P6_Replace_Expression]^if  ( start < desc.length() && desc.charAt(start) != ')' )  {^987^^^^^979^1000^if  ( desc.charAt ( start )  != ' ) ' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P6_Replace_Expression]^if  ( start < desc.length (  ) )  {^987^^^^^979^1000^if  ( desc.charAt ( start )  != ' ) ' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P6_Replace_Expression]^if  ( desc.charAt(start) == 'V' )  {^987^^^^^979^1000^if  ( desc.charAt ( start )  != ' ) ' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P6_Replace_Expression]^if  ( "Invalid descriptor: " + desc )  {^987^^^^^979^1000^if  ( desc.charAt ( start )  != ' ) ' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P7_Replace_Invocation]^if  ( desc.indexOf ( start )  != ' ) ' )  {^987^^^^^979^1000^if  ( desc.charAt ( start )  != ' ) ' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P9_Replace_Statement]^if  ( desc.charAt ( 0 )  != '[' )  {^987^^^^^979^1000^if  ( desc.charAt ( start )  != ' ) ' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P9_Replace_Statement]^if  ( name.charAt ( 0 )  == '[' )  {^987^^^^^979^1000^if  ( desc.charAt ( start )  != ' ) ' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P15_Unwrap_Block]^do {    if ((desc.charAt(start)) == 'V') {        throw new java.lang.IllegalArgumentException(("Invalid descriptor: " + desc));    }    start = org.mockito.asm.util.CheckMethodAdapter.checkDesc(desc, start, false);} while ((start < (desc.length())) && ((desc.charAt(start)) != ')') );^987^988^989^990^991^979^1000^if  ( desc.charAt ( start )  != ' ) ' )  { do { if  ( desc.charAt ( start )  == 'V' )  { throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P16_Remove_Block]^^987^988^989^990^991^979^1000^if  ( desc.charAt ( start )  != ' ) ' )  { do { if  ( desc.charAt ( start )  == 'V' )  { throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P2_Replace_Operator]^if  ( desc.charAt ( start )  >= 'V' )  {^989^^^^^979^1000^if  ( desc.charAt ( start )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P5_Replace_Variable]^if  ( start.charAt ( desc )  == 'V' )  {^989^^^^^979^1000^if  ( desc.charAt ( start )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P6_Replace_Expression]^if  ( "Invalid descriptor: " + desc )  {^989^^^^^979^1000^if  ( desc.charAt ( start )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P7_Replace_Invocation]^if  ( desc.indexOf ( start )  == 'V' )  {^989^^^^^979^1000^if  ( desc.charAt ( start )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P9_Replace_Statement]^if  ( desc.charAt ( start )  != ' ) ' )  {^989^^^^^979^1000^if  ( desc.charAt ( start )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P9_Replace_Statement]^if  ( desc.charAt ( 0 )  != '[' )  {^989^^^^^979^1000^if  ( desc.charAt ( start )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P9_Replace_Statement]^if  ( name.charAt ( 0 )  == '[' )  {^989^^^^^979^1000^if  ( desc.charAt ( start )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("Invalid descriptor: " + desc));^989^990^991^992^^979^1000^if  ( desc.charAt ( start )  == 'V' )  { throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P16_Remove_Block]^^989^990^991^992^^979^1000^if  ( desc.charAt ( start )  == 'V' )  { throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( index <  ( desc.length (  )  )  )  {     return checkDesc ( desc, index, false ) ; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( opcode ==  ( NEW )  )  &&  (  ( type.charAt ( 0 )  )  == '[' )  )  {     throw new IllegalArgumentException (  ( "NEW cannot be used to create arrays: " + type )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^989^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  <=  desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid descriptor: lid descri" + desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  )  ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^990^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^990^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^990^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^990^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^990^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^990^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  |  desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "lid descriptnvalid descriptor: " + desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^990^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^990^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^990^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^990^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^start = checkDesc ( desc, start, true ) ;^993^^^^^979^1000^start = checkDesc ( desc, start, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P5_Replace_Variable]^start = checkDesc (  start, false ) ;^993^^^^^979^1000^start = checkDesc ( desc, start, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P5_Replace_Variable]^start = checkDesc ( desc,  false ) ;^993^^^^^979^1000^start = checkDesc ( desc, start, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P5_Replace_Variable]^start = checkDesc ( start, desc, false ) ;^993^^^^^979^1000^start = checkDesc ( desc, start, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P7_Replace_Invocation]^start = checkChar ( desc, start, false ) ;^993^^^^^979^1000^start = checkDesc ( desc, start, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P11_Insert_Donor_Statement]^start = checkDesc ( desc, start + 1, true ) ;start = checkDesc ( desc, start, false ) ;^993^^^^^979^1000^start = checkDesc ( desc, start, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  >>  desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid descriptor: ript" + desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^} while  ( start < desc.length() - 1  && desc.charAt ( start )  != ' ) ' ) ;^994^^^^^979^1000^} while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P7_Replace_Invocation]^} while  ( start < desc.charAt (  )  && desc.charAt ( start )  != ' ) ' ) ;^994^^^^^979^1000^} while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P7_Replace_Invocation]^} while  ( start < desc .lastIndexOf ( start )   && desc.charAt ( start )  != ' ) ' ) ;^994^^^^^979^1000^} while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P14_Delete_Statement]^^994^^^^^979^1000^} while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P11_Insert_Donor_Statement]^while  ( index < desc.length (  )  && desc.charAt ( index )  == '[' )  { ++index;} while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^994^^^^^979^1000^} while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P12_Insert_Condition]^if  ( desc.charAt ( start )  != ' ) ' )  { } while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ; }^994^^^^^979^1000^} while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^} while  ( start < desc.length() - 5  && desc.charAt ( start )  != ' ) ' ) ;^994^^^^^979^1000^} while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P5_Replace_Variable]^} while  ( desc < start.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^994^^^^^979^1000^} while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P7_Replace_Invocation]^} while  ( start < desc.length (  )  && desc.indexOf ( start )  != ' ) ' ) ;^994^^^^^979^1000^} while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P14_Delete_Statement]^^993^994^^^^979^1000^start = checkDesc ( desc, start, false ) ; } while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P11_Insert_Donor_Statement]^checkDesc ( desc, false ) ;start = checkDesc ( desc, start, false ) ;^993^^^^^979^1000^start = checkDesc ( desc, start, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P11_Insert_Donor_Statement]^checkDesc ( name, false ) ;start = checkDesc ( desc, start, false ) ;^993^^^^^979^1000^start = checkDesc ( desc, start, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P11_Insert_Donor_Statement]^return checkDesc ( desc, index, false ) ;start = checkDesc ( desc, start, false ) ;^993^^^^^979^1000^start = checkDesc ( desc, start, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P11_Insert_Donor_Statement]^int end = checkDesc ( desc, 0, canBeVoid ) ;start = checkDesc ( desc, start, false ) ;^993^^^^^979^1000^start = checkDesc ( desc, start, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P2_Replace_Operator]^if  ( desc.charAt ( start )  != 'V' )  {^989^^^^^979^1000^if  ( desc.charAt ( start )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "ripto" + desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "  ||  desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "id descri" + desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Inva" + desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid descriptor: "   instanceof   desc ) ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^990^991^^^^979^1000^throw new IllegalArgumentException ( "Invalid descriptor: " + desc ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^} while  ( start < desc.length() - 2  && desc.charAt ( start )  != ' ) ' ) ;^994^^^^^979^1000^} while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^} while  ( start < desc.length() + 7  && desc.charAt ( start )  != ' ) ' ) ;^994^^^^^979^1000^} while  ( start < desc.length (  )  && desc.charAt ( start )  != ' ) ' ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P14_Delete_Statement]^^993^^^^^979^1000^start = checkDesc ( desc, start, false ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^start = checkDesc ( desc, start + start, true ) ;^996^^^^^979^1000^start = checkDesc ( desc, start + 1, true ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^start = checkDesc ( desc, start + 1, false ) ;^996^^^^^979^1000^start = checkDesc ( desc, start + 1, true ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P5_Replace_Variable]^start = checkDesc (  start + 1, true ) ;^996^^^^^979^1000^start = checkDesc ( desc, start + 1, true ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P5_Replace_Variable]^start = checkDesc ( desc + 1, true ) ;^996^^^^^979^1000^start = checkDesc ( desc, start + 1, true ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P5_Replace_Variable]^start = checkDesc ( start, desc + 1, true ) ;^996^^^^^979^1000^start = checkDesc ( desc, start + 1, true ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P7_Replace_Invocation]^start = checkIdentifier ( desc, start + 1, true ) ;^996^^^^^979^1000^start = checkDesc ( desc, start + 1, true ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P8_Replace_Mix]^start = checkDesc ( desc, start + 0, true ) ;^996^^^^^979^1000^start = checkDesc ( desc, start + 1, true ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P11_Insert_Donor_Statement]^start = checkDesc ( desc, start, false ) ;start = checkDesc ( desc, start + 1, true ) ;^996^^^^^979^1000^start = checkDesc ( desc, start + 1, true ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P14_Delete_Statement]^^996^^^^^979^1000^start = checkDesc ( desc, start + 1, true ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P11_Insert_Donor_Statement]^checkDesc ( desc, false ) ;start = checkDesc ( desc, start + 1, true ) ;^996^^^^^979^1000^start = checkDesc ( desc, start + 1, true ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P11_Insert_Donor_Statement]^return checkDesc ( desc, index, false ) ;start = checkDesc ( desc, start + 1, true ) ;^996^^^^^979^1000^start = checkDesc ( desc, start + 1, true ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P11_Insert_Donor_Statement]^int end = checkDesc ( desc, 0, canBeVoid ) ;start = checkDesc ( desc, start + 1, true ) ;^996^^^^^979^1000^start = checkDesc ( desc, start + 1, true ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P2_Replace_Operator]^if  ( start == desc.length (  )  )  {^997^^^^^979^1000^if  ( start != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^if  ( start != desc.length() - 4  )  {^997^^^^^979^1000^if  ( start != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P5_Replace_Variable]^if  ( desc != start.length (  )  )  {^997^^^^^979^1000^if  ( start != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P6_Replace_Expression]^if  ( "Invalid descriptor: " + desc )  {^997^^^^^979^1000^if  ( start != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P7_Replace_Invocation]^if  ( start != desc.charAt (  )  )  {^997^^^^^979^1000^if  ( start != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P7_Replace_Invocation]^if  ( start != desc .lastIndexOf ( start )   )  {^997^^^^^979^1000^if  ( start != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P9_Replace_Statement]^if  ( desc == null || start >= desc.length (  )  )  {^997^^^^^979^1000^if  ( start != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P9_Replace_Statement]^if  ( end != desc.length (  )  )  {^997^^^^^979^1000^if  ( start != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P9_Replace_Statement]^if  ( index < desc.length (  )  )  {^997^^^^^979^1000^if  ( start != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(("Invalid descriptor: " + desc));^997^998^999^^^979^1000^if  ( start != desc.length (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P16_Remove_Block]^^997^998^999^^^979^1000^if  ( start != desc.length (  )  )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( index <  ( desc.length (  )  )  )  {     return checkDesc ( desc, index, false ) ; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( opcode ==  ( NEW )  )  &&  (  ( type.charAt ( 0 )  )  == '[' )  )  {     throw new IllegalArgumentException (  ( "NEW cannot be used to create arrays: " + type )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( nLocal > 0 )  &&  (  ( local == null )  ||  (  ( local.length )  < nLocal )  )  )  {     throw new IllegalArgumentException ( "Array local[] is shorter than nLocal" ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( nStack > 0 )  &&  (  ( stack == null )  ||  (  ( stack.length )  < nStack )  )  )  {     throw new IllegalArgumentException ( "Array stack[] is shorter than nStack" ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^997^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  )   ;^998^^^^^979^1000^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^998^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^998^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^998^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^998^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^998^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^998^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^998^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^998^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^998^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^998^^^^^979^1000^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P8_Replace_Mix]^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; ;^998^^^^^979^1000^throw new IllegalArgumentException  (" ")  ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P3_Replace_Literal]^if  ( start != desc.length() + 2  )  {^997^^^^^979^1000^if  ( start != desc.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodDesc [RETURN_TYPE] void   String desc [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  desc  Map  labels  int  start  
[P1_Replace_Type]^long  pos = 0;^1011^^^^^1007^1023^int pos = 0;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^int pos = pos;^1011^^^^^1007^1023^int pos = 0;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^int start = 1;int pos = 0;^1011^^^^^1007^1023^int pos = 0;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^if  ( getChar ( signature, 0 )  != '<' )  {^1012^^^^^1007^1023^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^if  ( getChar ( signature, 9 )  == '<' )  {^1012^^^^^1007^1023^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar (  0 )  == '<' )  {^1012^^^^^1007^1023^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^if  ( checkIdentifier ( signature, 0 )  == '<' )  {^1012^^^^^1007^1023^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^if  ( checkIdentifier ( signature, 1 )  == '<' )  {^1012^^^^^1007^1023^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == '<' )  {^1012^^^^^1007^1023^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == c )  {^1012^^^^^1007^1023^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == 'V' )  {^1012^^^^^1007^1023^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == 'L' )  {^1012^^^^^1007^1023^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P15_Unwrap_Block]^pos = org.mockito.asm.util.CheckMethodAdapter.checkFormalTypeParameters(signature, pos);^1012^1013^1014^^^1007^1023^if  ( getChar ( signature, 0 )  == '<' )  { pos = checkFormalTypeParameters ( signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P16_Remove_Block]^^1012^1013^1014^^^1007^1023^if  ( getChar ( signature, 0 )  == '<' )  { pos = checkFormalTypeParameters ( signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == 'V' )  {     ++pos; }else {     pos = checkTypeSignature ( signature, pos ) ; }^1012^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == 'L' )  {     pos = checkClassTypeSignature ( signature, pos ) ; }else {     pos = checkTypeVariableSignature ( signature, pos ) ; }^1012^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( "L[T".indexOf ( getChar ( signature, pos )  )  )  !=  ( -1 )  )  {     pos = checkFieldTypeSignature ( signature, pos ) ; }^1012^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == '<' )  {     pos = checkTypeArguments ( signature, pos ) ; }^1012^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( name.charAt ( 0 )  )  == '[' )  {     checkDesc ( name, false ) ; }else {     checkInternalName ( name, 0,  ( -1 ) , msg ) ; }^1012^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFormalTypeParameters (  pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFormalTypeParameters ( signature ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFormalTypeParameters ( pos, signature ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkFormalTypeParameter ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkFormalTypeParameters ( null, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, 0 )  )  == '<' )  {     pos = checkFormalTypeParameters ( signature, pos ) ; }^1013^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1013^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1013^^^^^1007^1023^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^if  ( getChar ( signature, -4 )  == '<' )  {^1012^^^^^1007^1023^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1012^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkClassTypeSignature (  pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkClassTypeSignature ( signature ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkClassTypeSignature ( pos, signature ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkClassTypeSignature ( null, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1015^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^while  ( getChar ( signature, pos )  >= 'L' )  {^1016^^^^^1007^1023^while  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar (  pos )  == 'L' )  {^1016^^^^^1007^1023^while  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar ( signature )  == 'L' )  {^1016^^^^^1007^1023^while  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar ( pos, signature )  == 'L' )  {^1016^^^^^1007^1023^while  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^while  ( checkIdentifier ( signature, pos )  == 'L' )  {^1016^^^^^1007^1023^while  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkClassTypeSignature (  pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkClassTypeSignature ( signature ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkClassTypeSignature ( pos, signature ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkClassTypeSignature ( null, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1017^^^^^1007^1023^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1016^1017^^^^1007^1023^while  ( getChar ( signature, pos )  == 'L' )  { pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^if  ( pos == signature.length (  )  )  {^1019^^^^^1007^1023^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^if  ( pos != signature.length() - 5  )  {^1019^^^^^1007^1023^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( signature != pos.length (  )  )  {^1019^^^^^1007^1023^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P6_Replace_Expression]^if  ( signature + ": error at index " + pos )  {^1019^^^^^1007^1023^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P6_Replace_Expression]^if  ( signature + ": error at index " )  {^1019^^^^^1007^1023^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^if  ( pos != signature.charAt (  )  )  {^1019^^^^^1007^1023^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( end != desc.length (  )  )  {^1019^^^^^1007^1023^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(((signature + ": error at index ") + pos));^1019^1020^1021^1022^^1007^1023^if  ( pos != signature.length (  )  )  { throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P16_Remove_Block]^^1019^1020^1021^1022^^1007^1023^if  ( pos != signature.length (  )  )  { throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( getChar ( signature, pos )  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": identifier expected at index " )  + pos )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( opcode ==  ( NEW )  )  &&  (  ( type.charAt ( 0 )  )  == '[' )  )  {     throw new IllegalArgumentException (  ( "NEW cannot be used to create arrays: " + type )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^1019^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  ||  ": error at index "  ||  pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  <<  ": error at index " + pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + "rro error at index " + pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  ( signature + ": identifier expected at index " )  + pos )  )  ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^throw new IllegalArgumentException ( pos + ": error at index " + signature ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^1020^^^^^1007^1023^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  |  ": error at index " + pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + " at in error at index " + pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  ^  ": error at index "  ^  pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  !=  ": error at index " + pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + ": error at index t index" + pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  >=  ": error at index "  >=  pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + ": error at index  error at i" + pos ) ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^1020^1021^^^^1007^1023^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^if  ( pos != signature.length() + 0  )  {^1019^^^^^1007^1023^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P1_Replace_Type]^long  pos = 0;^1035^^^^^1020^1050^int pos = 0;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^int pos = 9;^1035^^^^^1020^1050^int pos = 0;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^int start = 1;int pos = 0;^1035^^^^^1020^1050^int pos = 0;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^if  ( getChar ( signature, 0 )  <= '<' )  {^1036^^^^^1021^1051^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^if  ( getChar ( signature, pos )  == '<' )  {^1036^^^^^1021^1051^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar (  0 )  == '<' )  {^1036^^^^^1021^1051^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^if  ( checkIdentifier ( signature, 0 )  == '<' )  {^1036^^^^^1021^1051^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^if  ( getChar ( signature, 0 - 0 )  == '<' )  {^1036^^^^^1021^1051^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == c )  {^1036^^^^^1021^1051^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == 'V' )  {^1036^^^^^1021^1051^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == 'L' )  {^1036^^^^^1021^1051^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P15_Unwrap_Block]^pos = org.mockito.asm.util.CheckMethodAdapter.checkFormalTypeParameters(signature, pos);^1036^1037^1038^^^1021^1051^if  ( getChar ( signature, 0 )  == '<' )  { pos = checkFormalTypeParameters ( signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P16_Remove_Block]^^1036^1037^1038^^^1021^1051^if  ( getChar ( signature, 0 )  == '<' )  { pos = checkFormalTypeParameters ( signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == 'V' )  {     ++pos; }else {     pos = checkTypeSignature ( signature, pos ) ; }^1036^^^^^1021^1051^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == 'L' )  {     pos = checkClassTypeSignature ( signature, pos ) ; }else {     pos = checkTypeVariableSignature ( signature, pos ) ; }^1036^^^^^1021^1051^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( "L[T".indexOf ( getChar ( signature, pos )  )  )  !=  ( -1 )  )  {     pos = checkFieldTypeSignature ( signature, pos ) ; }^1036^^^^^1021^1051^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == '<' )  {     pos = checkTypeArguments ( signature, pos ) ; }^1036^^^^^1021^1051^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( name.charAt ( 0 )  )  == '[' )  {     checkDesc ( name, false ) ; }else {     checkInternalName ( name, 0,  ( -1 ) , msg ) ; }^1036^^^^^1021^1051^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFormalTypeParameters (  pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFormalTypeParameters ( signature ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFormalTypeParameters ( pos, signature ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkFormalTypeParameter ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkFormalTypeParameters ( null, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkFormalTypeParameters ( signature, pos ) ;^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, 0 )  )  == '<' )  {     pos = checkFormalTypeParameters ( signature, pos ) ; }^1037^^^^^1022^1052^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1037^^^^^1022^1052^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1037^^^^^1022^1052^pos = checkFormalTypeParameters ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^if  ( getChar ( signature, 8 )  == '<' )  {^1036^^^^^1021^1051^if  ( getChar ( signature, 0 )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1036^^^^^1021^1051^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( ' ( ',  pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( ' ( ', signature ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( ' ( ', pos, signature ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkDesc ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkChar ( ' ( ', null, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkChar ( ';', signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^char c = getChar ( signature, pos ) ;pos = checkChar ( ' ( ', signature, pos ) ;^1039^^^^^1024^1054^pos = checkChar ( ' ( ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  == -1 )  {^1040^^^^^1025^1055^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^while  ( "CBSIFJCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^1040^^^^^1025^1055^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -10 )  {^1040^^^^^1025^1055^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( "ZCBSIFJDL[T".indexOf ( getChar (  pos )  )  != -1 )  {^1040^^^^^1025^1055^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature )  )  != -1 )  {^1040^^^^^1025^1055^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( pos, signature )  )  != -1 )  {^1040^^^^^1025^1055^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^while  ( "ZCBSIFJDL[T".indexOf ( checkIdentifier ( signature, pos )  )  != -1 )  {^1040^^^^^1025^1055^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeSignature (  pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeSignature ( signature ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeSignature ( pos, signature ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkClassTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkTypeSignature ( null, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkChar ( ';', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeVariableSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeSignature ( signature, pos + 1 ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^int pos = checkFieldTypeSignature ( signature, 0 ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^char c = getChar ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1041^^^^^1026^1056^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^while  ( "SIFJDCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^1040^^^^^1025^1055^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1040^1041^^^^1025^1055^while  ( "ZCBSIFJDL[T".indexOf ( getChar ( signature, pos )  )  != -1 )  { pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( ' ) ',  pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( ' ) ', signature ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( ' ) ', pos, signature ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkDesc ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkChar ( ' ) ', null, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkChar ( ';', signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^char c = getChar ( signature, pos ) ;pos = checkChar ( ' ) ', signature, pos ) ;^1043^^^^^1028^1058^pos = checkChar ( ' ) ', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^if  ( getChar ( signature, pos )  <= 'V' )  {^1044^^^^^1029^1059^if  ( getChar ( signature, pos )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar (  pos )  == 'V' )  {^1044^^^^^1029^1059^if  ( getChar ( signature, pos )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar ( signature )  == 'V' )  {^1044^^^^^1029^1059^if  ( getChar ( signature, pos )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar ( pos, signature )  == 'V' )  {^1044^^^^^1029^1059^if  ( getChar ( signature, pos )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^if  ( checkIdentifier ( signature, pos )  == 'V' )  {^1044^^^^^1029^1059^if  ( getChar ( signature, pos )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == '<' )  {^1044^^^^^1029^1059^if  ( getChar ( signature, pos )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == c )  {^1044^^^^^1029^1059^if  ( getChar ( signature, pos )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == 'L' )  {^1044^^^^^1029^1059^if  ( getChar ( signature, pos )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, 0 )  == '<' )  {^1044^^^^^1029^1059^if  ( getChar ( signature, pos )  == 'V' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P15_Unwrap_Block]^++pos;^1044^1045^1046^1047^1048^1029^1059^if  ( getChar ( signature, pos )  == 'V' )  { ++pos; } else { pos = checkTypeSignature ( signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P16_Remove_Block]^^1044^1045^1046^1047^1048^1029^1059^if  ( getChar ( signature, pos )  == 'V' )  { ++pos; } else { pos = checkTypeSignature ( signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == 'L' )  {     pos = checkClassTypeSignature ( signature, pos ) ; }else {     pos = checkTypeVariableSignature ( signature, pos ) ; }^1044^^^^^1029^1059^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, 0 )  )  == '<' )  {     pos = checkFormalTypeParameters ( signature, pos ) ; }^1044^^^^^1029^1059^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( "L[T".indexOf ( getChar ( signature, pos )  )  )  !=  ( -1 )  )  {     pos = checkFieldTypeSignature ( signature, pos ) ; }^1044^^^^^1029^1059^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == '<' )  {     pos = checkTypeArguments ( signature, pos ) ; }^1044^^^^^1029^1059^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeSignature (  pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeSignature ( signature ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeSignature ( pos, signature ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkClassTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkTypeSignature ( null, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1047^^^^^1044^1048^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1047^^^^^1044^1048^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkChar ( ';', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeVariableSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeSignature ( signature, pos + 1 ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^int pos = checkFieldTypeSignature ( signature, 0 ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^char c = getChar ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1044^1048^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeSignature (  pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeSignature ( signature ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeSignature ( pos, signature ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkClassTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkTypeSignature ( null, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1047^^^^^1032^1062^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1047^^^^^1032^1062^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1044^^^^^1029^1059^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1044^^^^^1029^1059^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkChar ( ';', signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeVariableSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeSignature ( signature, pos + 1 ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^int pos = checkFieldTypeSignature ( signature, 0 ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^char c = getChar ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeSignature ( signature, pos ) ;^1047^^^^^1032^1062^pos = checkTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^while  ( getChar ( signature, pos )  != '^' )  {^1049^^^^^1034^1064^while  ( getChar ( signature, pos )  == '^' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^while  ( getChar ( signature, pos )  >= '^' )  {^1049^^^^^1034^1064^while  ( getChar ( signature, pos )  == '^' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar (  pos )  == '^' )  {^1049^^^^^1034^1064^while  ( getChar ( signature, pos )  == '^' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar ( signature )  == '^' )  {^1049^^^^^1034^1064^while  ( getChar ( signature, pos )  == '^' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar ( pos, signature )  == '^' )  {^1049^^^^^1034^1064^while  ( getChar ( signature, pos )  == '^' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^while  ( checkIdentifier ( signature, pos )  == '^' )  {^1049^^^^^1034^1064^while  ( getChar ( signature, pos )  == '^' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^if  ( getChar ( signature, pos )  <= 'L' )  {^1051^^^^^1036^1066^if  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar (  pos )  == 'L' )  {^1051^^^^^1036^1066^if  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar ( signature )  == 'L' )  {^1051^^^^^1036^1066^if  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar ( pos, signature )  == 'L' )  {^1051^^^^^1036^1066^if  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^if  ( checkIdentifier ( signature, pos )  == 'L' )  {^1051^^^^^1036^1066^if  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == '<' )  {^1051^^^^^1036^1066^if  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == c )  {^1051^^^^^1036^1066^if  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == 'V' )  {^1051^^^^^1036^1066^if  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, 0 )  == '<' )  {^1051^^^^^1036^1066^if  ( getChar ( signature, pos )  == 'L' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P15_Unwrap_Block]^pos = org.mockito.asm.util.CheckMethodAdapter.checkClassTypeSignature(signature, pos);^1051^1052^1053^1054^1055^1036^1066^if  ( getChar ( signature, pos )  == 'L' )  { pos = checkClassTypeSignature ( signature, pos ) ; } else { pos = checkTypeVariableSignature ( signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P16_Remove_Block]^^1051^1052^1053^1054^1055^1036^1066^if  ( getChar ( signature, pos )  == 'L' )  { pos = checkClassTypeSignature ( signature, pos ) ; } else { pos = checkTypeVariableSignature ( signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == 'V' )  {     ++pos; }else {     pos = checkTypeSignature ( signature, pos ) ; }^1051^^^^^1036^1066^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, 0 )  )  == '<' )  {     pos = checkFormalTypeParameters ( signature, pos ) ; }^1051^^^^^1036^1066^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( "L[T".indexOf ( getChar ( signature, pos )  )  )  !=  ( -1 )  )  {     pos = checkFieldTypeSignature ( signature, pos ) ; }^1051^^^^^1036^1066^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == '<' )  {     pos = checkTypeArguments ( signature, pos ) ; }^1051^^^^^1036^1066^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( name.charAt ( 0 )  )  == '[' )  {     checkDesc ( name, false ) ; }else {     checkInternalName ( name, 0,  ( -1 ) , msg ) ; }^1051^^^^^1036^1066^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeVariableSignature (  pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeVariableSignature ( signature ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeVariableSignature ( pos, signature ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkTypeSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkTypeVariableSignature ( null, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1054^^^^^1051^1055^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeVariableSignature ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeSignature ( signature, pos + 1 ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^int pos = checkFieldTypeSignature ( signature, 0 ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1051^1055^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkClassTypeSignature (  pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkClassTypeSignature ( signature ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkClassTypeSignature ( pos, signature ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkClassTypeSignature ( null, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkClassTypeSignature ( signature, pos ) ;^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1052^^^^^1037^1067^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1052^^^^^1037^1067^pos = checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeVariableSignature (  pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeVariableSignature ( signature ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeVariableSignature ( pos, signature ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkTypeSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkTypeVariableSignature ( null, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1054^^^^^1039^1069^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1051^^^^^1036^1066^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1051^^^^^1036^1066^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeVariableSignature ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeSignature ( signature, pos + 1 ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^int pos = checkFieldTypeSignature ( signature, 0 ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeVariableSignature ( signature, pos ) ;^1054^^^^^1039^1069^pos = checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1049^1050^^^^1034^1064^while  ( getChar ( signature, pos )  == '^' )  { ++pos;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^if  ( pos >= signature.length (  )  )  {^1057^^^^^1042^1072^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^if  ( pos != signature.length() + 2  )  {^1057^^^^^1042^1072^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( signature != pos.length (  )  )  {^1057^^^^^1042^1072^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P6_Replace_Expression]^if  ( signature + ": error at index " + pos )  {^1057^^^^^1042^1072^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P6_Replace_Expression]^if  ( signature + ": error at index " )  {^1057^^^^^1042^1072^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^if  ( pos != signature.charAt (  )  )  {^1057^^^^^1042^1072^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( end != desc.length (  )  )  {^1057^^^^^1042^1072^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(((signature + ": error at index ") + pos));^1057^1058^1059^1060^^1042^1072^if  ( pos != signature.length (  )  )  { throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P16_Remove_Block]^^1057^1058^1059^1060^^1042^1072^if  ( pos != signature.length (  )  )  { throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( getChar ( signature, pos )  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": identifier expected at index " )  + pos )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( opcode ==  ( NEW )  )  &&  (  ( type.charAt ( 0 )  )  == '[' )  )  {     throw new IllegalArgumentException (  ( "NEW cannot be used to create arrays: " + type )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^1057^^^^^1042^1072^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  <=  ": error at index "  <=  pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  ^  ": error at index " + pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + "e error at index " + pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  ( signature + ": identifier expected at index " )  + pos )  )  ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^throw new IllegalArgumentException ( pos + ": error at index " + signature ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^1058^^^^^1043^1073^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  <  ": error at index " + pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + ": error at index or at index" + pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature   instanceof   ": error at index "   instanceof   pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  <<  ": error at index " + pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + " error at index" + pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  <  ": error at index "  <  pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + "err error at index " + pos ) ;^1058^1059^^^^1043^1073^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^if  ( pos != signature.length() + 5  )  {^1057^^^^^1042^1072^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkMethodSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P1_Replace_Type]^short  pos = checkFieldTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^int pos = checkFieldTypeSignature ( signature, pos ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^int pos = checkClassTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;int pos = checkFieldTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;int pos = checkFieldTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;int pos = checkFieldTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;int pos = checkFieldTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeVariableSignature ( signature, pos ) ;int pos = checkFieldTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;int pos = checkFieldTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;int pos = checkFieldTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;int pos = checkFieldTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeSignature ( signature, pos + 1 ) ;int pos = checkFieldTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;int pos = checkFieldTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;int pos = checkFieldTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;int pos = checkFieldTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;int pos = checkFieldTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;int pos = checkFieldTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkFieldTypeSignature ( signature, pos ) ;int pos = checkFieldTypeSignature ( signature, 0 ) ;^1069^^^^^1068^1074^int pos = checkFieldTypeSignature ( signature, 0 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^if  ( pos == signature.length (  )  )  {^1070^^^^^1068^1074^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^if  ( pos != signature.length() - 4  )  {^1070^^^^^1068^1074^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( signature != pos.length (  )  )  {^1070^^^^^1068^1074^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P6_Replace_Expression]^if  ( signature + ": error at index " + pos )  {^1070^^^^^1068^1074^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P6_Replace_Expression]^if  ( signature + ": error at index " )  {^1070^^^^^1068^1074^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^if  ( pos != signature.charAt (  )  )  {^1070^^^^^1068^1074^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^if  ( pos != signature .lastIndexOf ( pos )   )  {^1070^^^^^1068^1074^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( end != desc.length (  )  )  {^1070^^^^^1068^1074^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(((signature + ": error at index ") + pos));^1070^1071^1072^1073^^1068^1074^if  ( pos != signature.length (  )  )  { throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P16_Remove_Block]^^1070^1071^1072^1073^^1068^1074^if  ( pos != signature.length (  )  )  { throw new IllegalArgumentException ( signature + ": error at index " + pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( getChar ( signature, pos )  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": identifier expected at index " )  + pos )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( labels == null )  ||  (  ( labels.length )  !=  (  ( max - min )  + 1 )  )  )  {     throw new IllegalArgumentException ( "There must be max - min + 1 labels" ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( opcode ==  ( NEW )  )  &&  (  ( type.charAt ( 0 )  )  == '[' )  )  {     throw new IllegalArgumentException (  ( "NEW cannot be used to create arrays: " + type )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^1070^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  &  ": error at index "  &  pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  <=  ": error at index " + pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + ": e" + pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  ( signature + ": identifier expected at index " )  + pos )  )  ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^throw new IllegalArgumentException ( pos + ": error at index " + signature ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^1071^^^^^1068^1074^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  <=  ": error at index "  <=  pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  <  ": error at index " + pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + ": error a error at index " + pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  !=  ": error at index "  !=  pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  ||  ": error at index " + pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + ":  error at index " + pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  &&  ": error at index " + pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + "or a" + pos ) ;^1071^1072^^^^1068^1074^throw new IllegalArgumentException ( signature + ": error at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^if  ( pos != signature.length() + 2  )  {^1070^^^^^1068^1074^if  ( pos != signature.length (  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFieldSignature [RETURN_TYPE] void   String signature [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( '<',  pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( '<', signature ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( '<', pos, signature ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkDesc ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkChar ( '<', null, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1088^1089^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ; pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkChar ( ';', signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^char c = getChar ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1088^^^^^1083^1094^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFormalTypeParameter (  pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFormalTypeParameter ( signature ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFormalTypeParameter ( pos, signature ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkFormalTypeParameters ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkFormalTypeParameter ( null, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1089^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^while  ( getChar ( signature, pos )  <= '>' )  {^1090^^^^^1083^1094^while  ( getChar ( signature, pos )  != '>' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar (  pos )  != '>' )  {^1090^^^^^1083^1094^while  ( getChar ( signature, pos )  != '>' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar ( signature )  != '>' )  {^1090^^^^^1083^1094^while  ( getChar ( signature, pos )  != '>' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar ( pos, signature )  != '>' )  {^1090^^^^^1083^1094^while  ( getChar ( signature, pos )  != '>' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^while  ( checkIdentifier ( signature, pos )  != '>' )  {^1090^^^^^1083^1094^while  ( getChar ( signature, pos )  != '>' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFormalTypeParameter (  pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFormalTypeParameter ( signature ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFormalTypeParameter ( pos, signature ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkFormalTypeParameters ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkFormalTypeParameter ( null, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkFormalTypeParameter ( signature, pos ) ;^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1091^^^^^1083^1094^pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1090^1091^^^^1083^1094^while  ( getChar ( signature, pos )  != '>' )  { pos = checkFormalTypeParameter ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^return pos ;^1093^^^^^1083^1094^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^return pos  |  4;^1093^^^^^1083^1094^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameters [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkIdentifier (  pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkIdentifier ( signature ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkIdentifier ( pos, signature ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkTypeArgument ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkIdentifier ( null, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkIdentifier ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkIdentifier ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1108^^^^^1103^1117^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1108^^^^^1103^1117^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1108^^^^^1103^1117^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1108^1109^1110^1111^1112^1103^1117^pos = checkIdentifier ( signature, pos ) ; pos = checkChar ( ':', signature, pos ) ; if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  { pos = checkFieldTypeSignature ( signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( ':',  pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( ':', signature ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( ':', pos, signature ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkDesc ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkChar ( ':', null, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1109^^^^^1103^1117^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1109^^^^^1103^1117^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkChar ( ';', signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^char c = getChar ( signature, pos ) ;pos = checkChar ( ':', signature, pos ) ;^1109^^^^^1103^1117^pos = checkChar ( ':', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  >= -1 )  {^1110^^^^^1103^1117^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^if  ( "L[T[".indexOf ( getChar ( signature, pos )  )  != -1 )  {^1110^^^^^1103^1117^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -6 )  {^1110^^^^^1103^1117^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( "L[T".indexOf ( getChar (  pos )  )  != -1 )  {^1110^^^^^1103^1117^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( "L[T".indexOf ( getChar ( signature )  )  != -1 )  {^1110^^^^^1103^1117^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( "L[T".indexOf ( getChar ( pos, signature )  )  != -1 )  {^1110^^^^^1103^1117^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^if  ( "L[T" .indexOf ( pos , pos )   != -1 )  {^1110^^^^^1103^1117^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^if  ( "L[T".indexOf ( checkIdentifier ( signature, pos )  )  != -1 )  {^1110^^^^^1103^1117^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == c )  {^1110^^^^^1103^1117^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P15_Unwrap_Block]^pos = org.mockito.asm.util.CheckMethodAdapter.checkFieldTypeSignature(signature, pos);^1110^1111^1112^^^1103^1117^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  { pos = checkFieldTypeSignature ( signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P16_Remove_Block]^^1110^1111^1112^^^1103^1117^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  { pos = checkFieldTypeSignature ( signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == 'V' )  {     ++pos; }else {     pos = checkTypeSignature ( signature, pos ) ; }^1110^^^^^1103^1117^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == 'L' )  {     pos = checkClassTypeSignature ( signature, pos ) ; }else {     pos = checkTypeVariableSignature ( signature, pos ) ; }^1110^^^^^1103^1117^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, 0 )  )  == '<' )  {     pos = checkFormalTypeParameters ( signature, pos ) ; }^1110^^^^^1103^1117^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == '<' )  {     pos = checkTypeArguments ( signature, pos ) ; }^1110^^^^^1103^1117^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( name.charAt ( 0 )  )  == '[' )  {     checkDesc ( name, false ) ; }else {     checkInternalName ( name, 0,  ( -1 ) , msg ) ; }^1110^^^^^1103^1117^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFieldTypeSignature (  pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFieldTypeSignature ( signature ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFieldTypeSignature ( pos, signature ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkClassTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkFieldTypeSignature ( null, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1111^^^^^1103^1117^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeVariableSignature ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeSignature ( signature, pos + 1 ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^int pos = checkFieldTypeSignature ( signature, 0 ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^char c = getChar ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkFieldTypeSignature ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos ) ;^1111^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^if  ( "".indexOf ( getChar ( signature, pos )  )  != -1 )  {^1110^^^^^1103^1117^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1110^^^^^1103^1117^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1110^^^^^1103^1117^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^while  ( getChar ( signature, pos )  >= ':' )  {^1113^^^^^1103^1117^while  ( getChar ( signature, pos )  == ':' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar (  pos )  == ':' )  {^1113^^^^^1103^1117^while  ( getChar ( signature, pos )  == ':' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar ( signature )  == ':' )  {^1113^^^^^1103^1117^while  ( getChar ( signature, pos )  == ':' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar ( pos, signature )  == ':' )  {^1113^^^^^1103^1117^while  ( getChar ( signature, pos )  == ':' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^while  ( checkIdentifier ( signature, pos )  == ':' )  {^1113^^^^^1103^1117^while  ( getChar ( signature, pos )  == ':' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^pos = checkFieldTypeSignature ( signature, pos   instanceof   1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^pos = checkFieldTypeSignature ( signature, pos + pos ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFieldTypeSignature (  pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFieldTypeSignature ( signature + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkFieldTypeSignature ( pos, signature + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkChar ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos = checkFieldTypeSignature ( signature, pos + 1 / 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^pos = checkFieldTypeSignature ( signature, pos  <<  1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^pos = checkFieldTypeSignature ( signature, pos  ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeVariableSignature ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeSignature ( signature, pos + 1 ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^int pos = checkFieldTypeSignature ( signature, 0 ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^while  ( getChar ( signature, pos )  == ':' )  { pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkFieldTypeSignature ( signature, pos ) ;pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^pos = checkFieldTypeSignature ( signature, pos  >=  1 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos = checkFieldTypeSignature ( signature, pos + 2 ) ;^1114^^^^^1103^1117^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1113^1114^^^^1103^1117^while  ( getChar ( signature, pos )  == ':' )  { pos = checkFieldTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFormalTypeParameter [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkClassTypeSignature (  pos ) ;^1136^^^^^1126^1142^return checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkClassTypeSignature ( signature ) ;^1136^^^^^1126^1142^return checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkClassTypeSignature ( pos, signature ) ;^1136^^^^^1126^1142^return checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^return checkTypeSignature ( signature, pos ) ;^1136^^^^^1126^1142^return checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^return checkTypeSignature ( signature, pos  >>  1 ) ;^1138^^^^^1126^1142^return checkTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^return checkTypeSignature ( signature, pos  ) ;^1138^^^^^1126^1142^return checkTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkTypeSignature (  pos + 1 ) ;^1138^^^^^1126^1142^return checkTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkTypeSignature ( signature + 1 ) ;^1138^^^^^1126^1142^return checkTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkTypeSignature ( pos, signature + 1 ) ;^1138^^^^^1126^1142^return checkTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^return checkChar ( signature, pos + 1 ) ;^1138^^^^^1126^1142^return checkTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^return checkChar ( signature, pos + 3 ) ;^1138^^^^^1126^1142^return checkTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkTypeVariableSignature (  pos ) ;^1140^^^^^1126^1142^return checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkTypeVariableSignature ( signature ) ;^1140^^^^^1126^1142^return checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkTypeVariableSignature ( pos, signature ) ;^1140^^^^^1126^1142^return checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^return checkTypeSignature ( signature, pos ) ;^1140^^^^^1126^1142^return checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^switch  ( getChar (  pos )  )  {^1134^^^^^1126^1142^switch  ( getChar ( signature, pos )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^switch  ( getChar ( signature )  )  {^1134^^^^^1126^1142^switch  ( getChar ( signature, pos )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^switch  ( getChar ( pos, signature )  )  {^1134^^^^^1126^1142^switch  ( getChar ( signature, pos )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^switch  ( checkIdentifier ( signature, pos )  )  {^1134^^^^^1126^1142^switch  ( getChar ( signature, pos )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1134^1135^1136^^^1126^1142^switch  ( getChar ( signature, pos )  )  { case 'L': return checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1136^^^^^1126^1142^return checkClassTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^return checkTypeSignature ( signature, pos  &  1 ) ;^1138^^^^^1126^1142^return checkTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^return checkTypeSignature ( signature, pos + pos ) ;^1138^^^^^1126^1142^return checkTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1138^^^^^1126^1142^return checkTypeSignature ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1140^^^^^1126^1142^return checkTypeVariableSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkFieldTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( 'L',  pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( 'L', signature ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( 'L', pos, signature ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkDesc ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkChar ( 'L', null, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1157^1158^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ; pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkChar ( ';', signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^char c = getChar ( signature, pos ) ;pos = checkChar ( 'L', signature, pos ) ;^1157^^^^^1151^1172^pos = checkChar ( 'L', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkIdentifier (  pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkIdentifier ( signature ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkIdentifier ( pos, signature ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkTypeArgument ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkIdentifier ( null, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkIdentifier ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkIdentifier ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1158^^^^^1151^1172^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1158^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1158^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1158^1159^1160^1161^^1151^1172^pos = checkIdentifier ( signature, pos ) ; while  ( getChar ( signature, pos )  == '/' )  { pos = checkIdentifier ( signature, pos + 1 ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^while  ( getChar ( signature, pos )  <= '/' )  {^1159^^^^^1151^1172^while  ( getChar ( signature, pos )  == '/' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar (  pos )  == '/' )  {^1159^^^^^1151^1172^while  ( getChar ( signature, pos )  == '/' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar ( signature )  == '/' )  {^1159^^^^^1151^1172^while  ( getChar ( signature, pos )  == '/' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar ( pos, signature )  == '/' )  {^1159^^^^^1151^1172^while  ( getChar ( signature, pos )  == '/' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^while  ( checkIdentifier ( signature, pos )  == '/' )  {^1159^^^^^1151^1172^while  ( getChar ( signature, pos )  == '/' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == 'V' )  {     ++pos; }else {     pos = checkTypeSignature ( signature, pos ) ; }^1159^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == 'L' )  {     pos = checkClassTypeSignature ( signature, pos ) ; }else {     pos = checkTypeVariableSignature ( signature, pos ) ; }^1159^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, 0 )  )  == '<' )  {     pos = checkFormalTypeParameters ( signature, pos ) ; }^1159^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( "L[T".indexOf ( getChar ( signature, pos )  )  )  !=  ( -1 )  )  {     pos = checkFieldTypeSignature ( signature, pos ) ; }^1159^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == '<' )  {     pos = checkTypeArguments ( signature, pos ) ; }^1159^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1159^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( name.charAt ( 0 )  )  == '[' )  {     checkDesc ( name, false ) ; }else {     checkInternalName ( name, 0,  ( -1 ) , msg ) ; }^1159^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^pos = checkIdentifier ( signature, pos  >  1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^pos = checkIdentifier ( signature, pos + pos ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkIdentifier (  pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkIdentifier ( signature + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkIdentifier ( pos, signature + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkChar ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos = checkIdentifier ( signature, pos + 4 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1160^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1160^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^pos = checkIdentifier ( signature, pos  |  1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^pos = checkIdentifier ( signature, pos  ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1160^1161^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^pos = checkIdentifier ( signature, pos  <=  1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos = checkIdentifier ( signature, pos + 1L ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1159^1160^^^^1151^1172^while  ( getChar ( signature, pos )  == '/' )  { pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1159^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^pos = checkIdentifier ( signature, pos   instanceof   1 ) ;^1160^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^if  ( getChar ( signature, pos )  != '<' )  {^1162^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar (  pos )  == '<' )  {^1162^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar ( signature )  == '<' )  {^1162^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar ( pos, signature )  == '<' )  {^1162^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^if  ( checkIdentifier ( signature, pos )  == '<' )  {^1162^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == c )  {^1162^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == 'V' )  {^1162^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == 'L' )  {^1162^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, 0 )  == '<' )  {^1162^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P15_Unwrap_Block]^pos = org.mockito.asm.util.CheckMethodAdapter.checkTypeArguments(signature, pos);^1162^1163^1164^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  { pos = checkTypeArguments ( signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P16_Remove_Block]^^1162^1163^1164^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  { pos = checkTypeArguments ( signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == 'V' )  {     ++pos; }else {     pos = checkTypeSignature ( signature, pos ) ; }^1162^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == 'L' )  {     pos = checkClassTypeSignature ( signature, pos ) ; }else {     pos = checkTypeVariableSignature ( signature, pos ) ; }^1162^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, 0 )  )  == '<' )  {     pos = checkFormalTypeParameters ( signature, pos ) ; }^1162^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( "L[T".indexOf ( getChar ( signature, pos )  )  )  !=  ( -1 )  )  {     pos = checkFieldTypeSignature ( signature, pos ) ; }^1162^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1162^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( name.charAt ( 0 )  )  == '[' )  {     checkDesc ( name, false ) ; }else {     checkInternalName ( name, 0,  ( -1 ) , msg ) ; }^1162^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeArguments (  pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeArguments ( signature ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeArguments ( pos, signature ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkTypeArgument ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkTypeArguments ( null, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1163^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1163^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkChar ( ';', signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeVariableSignature ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeSignature ( signature, pos + 1 ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^int pos = checkFieldTypeSignature ( signature, 0 ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^char c = getChar ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1163^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1162^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^while  ( getChar ( signature, pos )  >= '.' )  {^1165^^^^^1151^1172^while  ( getChar ( signature, pos )  == '.' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^while  ( getChar ( signature, pos )  != '.' )  {^1165^^^^^1151^1172^while  ( getChar ( signature, pos )  == '.' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar (  pos )  == '.' )  {^1165^^^^^1151^1172^while  ( getChar ( signature, pos )  == '.' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar ( signature )  == '.' )  {^1165^^^^^1151^1172^while  ( getChar ( signature, pos )  == '.' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar ( pos, signature )  == '.' )  {^1165^^^^^1151^1172^while  ( getChar ( signature, pos )  == '.' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^while  ( checkIdentifier ( signature, pos )  == '.' )  {^1165^^^^^1151^1172^while  ( getChar ( signature, pos )  == '.' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^if  ( getChar ( signature, pos )  >= '<' )  {^1167^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar (  pos )  == '<' )  {^1167^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar ( signature )  == '<' )  {^1167^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar ( pos, signature )  == '<' )  {^1167^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^if  ( checkIdentifier ( signature, pos )  == '<' )  {^1167^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == c )  {^1167^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == 'V' )  {^1167^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == 'L' )  {^1167^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, 0 )  == '<' )  {^1167^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P15_Unwrap_Block]^pos = org.mockito.asm.util.CheckMethodAdapter.checkTypeArguments(signature, pos);^1167^1168^1169^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  { pos = checkTypeArguments ( signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P16_Remove_Block]^^1167^1168^1169^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  { pos = checkTypeArguments ( signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == 'V' )  {     ++pos; }else {     pos = checkTypeSignature ( signature, pos ) ; }^1167^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == 'L' )  {     pos = checkClassTypeSignature ( signature, pos ) ; }else {     pos = checkTypeVariableSignature ( signature, pos ) ; }^1167^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, 0 )  )  == '<' )  {     pos = checkFormalTypeParameters ( signature, pos ) ; }^1167^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( "L[T".indexOf ( getChar ( signature, pos )  )  )  !=  ( -1 )  )  {     pos = checkFieldTypeSignature ( signature, pos ) ; }^1167^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1167^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( name.charAt ( 0 )  )  == '[' )  {     checkDesc ( name, false ) ; }else {     checkInternalName ( name, 0,  ( -1 ) , msg ) ; }^1167^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeArguments (  pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeArguments ( signature ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeArguments ( pos, signature ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkTypeArgument ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkTypeArguments ( null, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1168^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1168^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkChar ( ';', signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeVariableSignature ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeSignature ( signature, pos + 1 ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^int pos = checkFieldTypeSignature ( signature, 0 ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^char c = getChar ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeArguments ( signature, pos ) ;^1168^^^^^1151^1172^pos = checkTypeArguments ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^pos = checkIdentifier ( signature, pos  ==  1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^pos = checkIdentifier ( signature, pos  ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkIdentifier (  pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkIdentifier ( signature + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkIdentifier ( pos, signature + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkChar ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos = checkIdentifier ( signature, pos + 1 / 3 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkIdentifier ( signature, pos + 1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1166^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1166^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^pos = checkIdentifier ( signature, pos  <=  1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^pos = checkIdentifier ( signature, pos +  ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1166^1167^1168^1169^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ; if  ( getChar ( signature, pos )  == '<' )  { pos = checkTypeArguments ( signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1167^^^^^1151^1172^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^if  ( getChar ( signature, pos )  != '<' )  {^1167^^^^^1151^1172^if  ( getChar ( signature, pos )  == '<' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^pos = checkIdentifier ( signature, pos  ||  1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^pos = checkIdentifier ( signature, pos + pos ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos = checkIdentifier ( signature, pos + 2 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1165^1166^^^^1151^1172^while  ( getChar ( signature, pos )  == '.' )  { pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^pos = checkIdentifier ( signature, pos   instanceof   1 ) ;^1166^^^^^1151^1172^pos = checkIdentifier ( signature, pos + 1 ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkChar ( ';',  pos ) ;^1171^^^^^1151^1172^return checkChar ( ';', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkChar ( ';', signature ) ;^1171^^^^^1151^1172^return checkChar ( ';', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkChar ( ';', pos, signature ) ;^1171^^^^^1151^1172^return checkChar ( ';', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^return checkDesc ( ';', signature, pos ) ;^1171^^^^^1151^1172^return checkChar ( ';', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1171^^^^^1151^1172^return checkChar ( ';', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkClassTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( '<',  pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( '<', signature ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( '<', pos, signature ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkDesc ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkChar ( '<', null, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1185^1186^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ; pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkChar ( ';', signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^char c = getChar ( signature, pos ) ;pos = checkChar ( '<', signature, pos ) ;^1185^^^^^1181^1191^pos = checkChar ( '<', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeArgument (  pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeArgument ( signature ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeArgument ( pos, signature ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkTypeArguments ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkTypeArgument ( null, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkChar ( ';', signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeVariableSignature ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeSignature ( signature, pos + 1 ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^int pos = checkFieldTypeSignature ( signature, 0 ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^char c = getChar ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1186^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^while  ( getChar ( signature, pos )  >= '>' )  {^1187^^^^^1181^1191^while  ( getChar ( signature, pos )  != '>' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar (  pos )  != '>' )  {^1187^^^^^1181^1191^while  ( getChar ( signature, pos )  != '>' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar ( signature )  != '>' )  {^1187^^^^^1181^1191^while  ( getChar ( signature, pos )  != '>' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( getChar ( pos, signature )  != '>' )  {^1187^^^^^1181^1191^while  ( getChar ( signature, pos )  != '>' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^while  ( checkIdentifier ( signature, pos )  != '>' )  {^1187^^^^^1181^1191^while  ( getChar ( signature, pos )  != '>' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeArgument (  pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeArgument ( signature ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkTypeArgument ( pos, signature ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkTypeArguments ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkTypeArgument ( null, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkChar ( ';', signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeVariableSignature ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeSignature ( signature, pos + 1 ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^int pos = checkFieldTypeSignature ( signature, 0 ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^char c = getChar ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkFieldTypeSignature ( signature, pos ) ;pos = checkTypeArgument ( signature, pos ) ;^1188^^^^^1181^1191^pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1187^1188^^^^1181^1191^while  ( getChar ( signature, pos )  != '>' )  { pos = checkTypeArgument ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^return pos ;^1190^^^^^1181^1191^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArguments [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P1_Replace_Type]^int c = getChar ( signature, pos ) ;^1204^^^^^1200^1211^char c = getChar ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^char c = getChar (  pos ) ;^1204^^^^^1200^1211^char c = getChar ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^char c = getChar ( signature ) ;^1204^^^^^1200^1211^char c = getChar ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^char c = getChar ( pos, signature ) ;^1204^^^^^1200^1211^char c = getChar ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^char c = checkIdentifier ( signature, pos ) ;^1204^^^^^1200^1211^char c = getChar ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P12_Insert_Condition]^if  ( getChar ( signature, pos )  == '<' )  { char c = getChar ( signature, pos ) ; }^1204^^^^^1200^1211^char c = getChar ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P12_Insert_Condition]^if  ( getChar ( signature, pos )  == c )  { char c = getChar ( signature, pos ) ; }^1204^^^^^1200^1211^char c = getChar ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P12_Insert_Condition]^if  ( getChar ( signature, pos )  == 'V' )  { char c = getChar ( signature, pos ) ; }^1204^^^^^1200^1211^char c = getChar ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P12_Insert_Condition]^if  ( getChar ( signature, pos )  == 'L' )  { char c = getChar ( signature, pos ) ; }^1204^^^^^1200^1211^char c = getChar ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P12_Insert_Condition]^if  ( getChar ( signature, 0 )  == '<' )  { char c = getChar ( signature, pos ) ; }^1204^^^^^1200^1211^char c = getChar ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1204^^^^^1200^1211^char c = getChar ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^if  ( c <= '*' )  {^1205^^^^^1200^1211^if  ( c == '*' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P6_Replace_Expression]^if  ( pos + 1 )  {^1205^^^^^1200^1211^if  ( c == '*' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P6_Replace_Expression]^if  ( c == '+' || c == '-' )  {^1205^^^^^1200^1211^if  ( c == '*' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P6_Replace_Expression]^if  ( c == '+' )  {^1205^^^^^1200^1211^if  ( c == '*' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P6_Replace_Expression]^if  ( c == '-' )  {^1205^^^^^1200^1211^if  ( c == '*' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( attr == null )  {^1205^^^^^1200^1211^if  ( c == '*' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( e < s )  {^1205^^^^^1200^1211^if  ( c == '*' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P15_Unwrap_Block]^return pos + 1;^1205^1206^1207^1208^1209^1200^1211^if  ( c == '*' )  { return pos + 1; } else if  ( c == '+' || c == '-' )  { pos++; }^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P16_Remove_Block]^^1205^1206^1207^1208^1209^1200^1211^if  ( c == '*' )  { return pos + 1; } else if  ( c == '+' || c == '-' )  { pos++; }^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^} else if  ( c == '+' && c == '-' )  {^1207^^^^^1200^1211^} else if  ( c == '+' || c == '-' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^} else if  ( c != '+' || c == '-' )  {^1207^^^^^1200^1211^} else if  ( c == '+' || c == '-' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^} else if  ( c == '+' || c != '-' )  {^1207^^^^^1200^1211^} else if  ( c == '+' || c == '-' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P6_Replace_Expression]^} else if  ( c == '+' ) {^1207^^^^^1200^1211^} else if  ( c == '+' || c == '-' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P6_Replace_Expression]^} else if  (  c == '-' )  {^1207^^^^^1200^1211^} else if  ( c == '+' || c == '-' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P6_Replace_Expression]^} else {^1207^^^^^1200^1211^} else if  ( c == '+' || c == '-' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^}  if  ( c == '+' ) {^1207^^^^^1200^1211^} else if  ( c == '+' || c == '-' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P15_Unwrap_Block]^pos++;^1207^1208^1209^^^1200^1211^} else if  ( c == '+' || c == '-' )  { pos++; }^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P16_Remove_Block]^^1207^1208^1209^^^1200^1211^} else if  ( c == '+' || c == '-' )  { pos++; }^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^return pos ;^1206^^^^^1200^1211^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^return pos  &  1;^1206^^^^^1200^1211^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^} else if  ( c == '+' || c <= '-' )  {^1207^^^^^1200^1211^} else if  ( c == '+' || c == '-' )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^return pos + pos;^1206^^^^^1200^1211^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkFieldTypeSignature (  pos ) ;^1210^^^^^1200^1211^return checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkFieldTypeSignature ( signature ) ;^1210^^^^^1200^1211^return checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkFieldTypeSignature ( pos, signature ) ;^1210^^^^^1200^1211^return checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^return checkClassTypeSignature ( signature, pos ) ;^1210^^^^^1200^1211^return checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1210^^^^^1200^1211^return checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeArgument [RETURN_TYPE] int   String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( 'T',  pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( 'T', signature ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkChar ( 'T', pos, signature ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkDesc ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkChar ( 'T', null, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1227^1228^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ; pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkChar ( ';', signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeVariableSignature ( signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkTypeSignature ( signature, pos + 1 ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkClassTypeSignature ( signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^char c = getChar ( signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^return checkFieldTypeSignature ( signature, pos ) ;pos = checkChar ( 'T', signature, pos ) ;^1227^^^^^1220^1230^pos = checkChar ( 'T', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkIdentifier (  pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkIdentifier ( signature ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^pos = checkIdentifier ( pos, signature ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^pos = checkTypeArgument ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^pos =  checkIdentifier ( null, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameter ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeVariableSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ( ', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ':', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFieldTypeSignature ( signature, pos + 1 ) ;pos = checkIdentifier ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'T', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( ' ) ', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArguments ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkClassTypeSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeArgument ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( 'L', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkTypeSignature ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkChar ( '<', signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkIdentifier ( signature, pos + 1 ) ;pos = checkIdentifier ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P11_Insert_Donor_Statement]^pos = checkFormalTypeParameters ( signature, pos ) ;pos = checkIdentifier ( signature, pos ) ;^1228^^^^^1220^1230^pos = checkIdentifier ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1228^^^^^1220^1230^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1228^^^^^1220^1230^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1228^1229^1230^^^1220^1230^pos = checkIdentifier ( signature, pos ) ; return checkChar ( ';', signature, pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkChar ( ';',  pos ) ;^1229^^^^^1220^1230^return checkChar ( ';', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkChar ( ';', signature ) ;^1229^^^^^1220^1230^return checkChar ( ';', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkChar ( ';', pos, signature ) ;^1229^^^^^1220^1230^return checkChar ( ';', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^return checkDesc ( ';', signature, pos ) ;^1229^^^^^1220^1230^return checkChar ( ';', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1229^^^^^1220^1230^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1229^^^^^1220^1230^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1229^^^^^1220^1230^return checkChar ( ';', signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeVariableSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^return pos + pos;^1252^^^^^1239^1256^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^return pos  !=  1;;^1252^^^^^1239^1256^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkFieldTypeSignature (  pos ) ;^1254^^^^^1239^1256^return checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkFieldTypeSignature ( signature ) ;^1254^^^^^1239^1256^return checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return checkFieldTypeSignature ( pos, signature ) ;^1254^^^^^1239^1256^return checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^return checkClassTypeSignature ( signature, pos ) ;^1254^^^^^1239^1256^return checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^switch  ( getChar (  pos )  )  {^1243^^^^^1239^1256^switch  ( getChar ( signature, pos )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^switch  ( getChar ( signature )  )  {^1243^^^^^1239^1256^switch  ( getChar ( signature, pos )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^switch  ( getChar ( pos, signature )  )  {^1243^^^^^1239^1256^switch  ( getChar ( signature, pos )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^switch  ( checkIdentifier ( signature, pos )  )  {^1243^^^^^1239^1256^switch  ( getChar ( signature, pos )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1254^^^^^1239^1256^return checkFieldTypeSignature ( signature, pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkTypeSignature [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P4_Replace_Constructor]^if  ( !Character.isJavaIdentifierStart ( getChar (  pos )  )  )  {^1266^^^^^1265^1275^if  ( !Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P4_Replace_Constructor]^if  ( !Character.isJavaIdentifierStart ( getChar ( signature )  )  )  {^1266^^^^^1265^1275^if  ( !Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( !Character.isJavaIdentifierStart ( getChar ( pos, signature )  )  )  {^1266^^^^^1265^1275^if  ( !Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P6_Replace_Expression]^if  ( signature + ": identifier expected at index " )  {^1266^^^^^1265^1275^if  ( !Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^if  ( !Character.isJavaIdentifierStart ( checkIdentifier ( signature, pos )  )  )  {^1266^^^^^1265^1275^if  ( !Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( !Character.isJavaIdentifierStart ( name.charAt ( 0 )  )  )  {^1266^^^^^1265^1275^if  ( !Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( !Character.isJavaIdentifierStart ( name.charAt ( start )  )  )  {^1266^^^^^1265^1275^if  ( !Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( !Character.isJavaIdentifierPart ( name.charAt ( i )  )  )  {^1266^^^^^1265^1275^if  ( !Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException(((signature + ": identifier expected at index ") + pos));^1266^1267^1268^1269^^1265^1275^if  ( !Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  { throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P16_Remove_Block]^^1266^1267^1268^1269^^1265^1275^if  ( !Character.isJavaIdentifierStart ( getChar ( signature, pos )  )  )  { throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( start )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^1266^^^^^1265^1275^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( index <  ( desc.length (  )  )  )  {     return checkDesc ( desc, index, false ) ; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1266^^^^^1265^1275^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^1266^^^^^1265^1275^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  (  ( opcode < 0 )  ||  ( opcode > 199 )  )  ||  (  ( TYPE[opcode] )  != type )  )  {     throw new IllegalArgumentException (  ( "Invalid opcode: " + opcode )  ) ; }^1266^^^^^1265^1275^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^1266^^^^^1265^1275^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  <=  ": identifier expected at index "  <=  pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  <  ": identifier expected at index " + pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + "ifier expect" + pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  (  (  ( signature + ": '" )  + c )  + "' expected at index " )  + pos )  )  ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^throw new IllegalArgumentException ( pos + ": identifier expected at index " + signature ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  !=  ": identifier expected at index "  !=  pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  &&  ": identifier expected at index " + pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + ": identifier expected at index i" + pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^1267^^^^^1265^1275^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + "i identifier expected at index " + pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature   instanceof   ": identifier expected at index "   instanceof   pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + "r identifier expected at index " + pos ) ;^1267^1268^^^^1265^1275^throw new IllegalArgumentException ( signature + ": identifier expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1266^^^^^1265^1275^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( Character.isJavaIdentifierPart ( getChar (  pos )  )  )  {^1271^^^^^1265^1275^while  ( Character.isJavaIdentifierPart ( getChar ( signature, pos )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( Character.isJavaIdentifierPart ( getChar ( signature )  )  )  {^1271^^^^^1265^1275^while  ( Character.isJavaIdentifierPart ( getChar ( signature, pos )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^while  ( Character.isJavaIdentifierPart ( getChar ( pos, signature )  )  )  {^1271^^^^^1265^1275^while  ( Character.isJavaIdentifierPart ( getChar ( signature, pos )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^while  ( Character.isJavaIdentifierPart ( checkIdentifier ( signature, pos )  )  )  {^1271^^^^^1265^1275^while  ( Character.isJavaIdentifierPart ( getChar ( signature, pos )  )  )  {^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( getChar ( signature, pos )  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": identifier expected at index " )  + pos )  ) ; }^1271^^^^^1265^1275^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1271^^^^^1265^1275^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1271^1272^1273^^^1265^1275^while  ( Character.isJavaIdentifierPart ( getChar ( signature, pos )  )  )  { ++pos; }^[CLASS] CheckMethodAdapter  [METHOD] checkIdentifier [RETURN_TYPE] int   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^if  ( getChar ( signature, pos )  <= c )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar (  pos )  == c )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar ( signature )  == c )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar ( pos, signature )  == c )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar ( signature, c )  == pos )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^if  ( getChar ( c, pos )  == signature )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P6_Replace_Expression]^if  ( pos + 1 )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^if  ( checkIdentifier ( signature, pos )  == c )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == '<' )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == 'V' )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, pos )  == 'L' )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( getChar ( signature, 0 )  == '<' )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P9_Replace_Statement]^if  ( "L[T".indexOf ( getChar ( signature, pos )  )  != -1 )  {^1286^^^^^1284^1291^if  ( getChar ( signature, pos )  == c )  {^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P15_Unwrap_Block]^return pos + 1;^1286^1287^1288^^^1284^1291^if  ( getChar ( signature, pos )  == c )  { return pos + 1; }^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P16_Remove_Block]^^1286^1287^1288^^^1284^1291^if  ( getChar ( signature, pos )  == c )  { return pos + 1; }^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == '<' )  {     pos = checkTypeArguments ( signature, pos ) ; }^1286^^^^^1284^1291^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^return pos ;^1287^^^^^1284^1291^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^return true ;^1287^^^^^1284^1291^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^return pos + pos;^1287^^^^^1284^1291^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^return pos  ^  1;^1287^^^^^1284^1291^return pos + 1;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  ( type != null )  {     checkInternalName ( type, "type" ) ; }^1286^^^^^1284^1291^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P13_Insert_Block]^if  (  ( getChar ( signature, pos )  )  == c )  {     return pos + 1; }^1286^^^^^1284^1291^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  !=  ": '"  !=  c + "' expected at index " + pos ) ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  >  ": '" + c + "' expected at index " + pos ) ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at inde expected at index " + pos ) ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  ( signature + ": identifier expected at index " )  + pos )  )  ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^throw new IllegalArgumentException ( c + ": '" + signature + "' expected at index " + pos ) ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^throw new IllegalArgumentException ( pos + ": '" + c + "' expected at index " + signature ) ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature   instanceof   ": '"   instanceof   c + "' expected at index " + pos ) ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^throw new IllegalArgumentException ( signature  <  ": '" + c + "' expected at index " + pos ) ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + "  '" + c + "' expected at index " + pos ) ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^throw new IllegalArgumentException ( signature + ": '" + c + "ted at index" + pos ) ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P8_Replace_Mix]^throw new IllegalArgumentException ( "Max = " + max + " must be greater than or equal to min = " + min ) ; ;^1289^1290^^^^1284^1291^throw new IllegalArgumentException ( signature + ": '" + c + "' expected at index " + pos ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkChar [RETURN_TYPE] int   final char c String signature int pos [VARIABLES] char  c  int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P1_Replace_Type]^return pos < signature.length (  )  ? signature.charAt ( pos )  :  ( int )  0;^1302^^^^^1301^1303^return pos < signature.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^[CLASS] CheckMethodAdapter  [METHOD] getChar [RETURN_TYPE] char   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^return pos == signature.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^1302^^^^^1301^1303^return pos < signature.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^[CLASS] CheckMethodAdapter  [METHOD] getChar [RETURN_TYPE] char   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^return pos < signature.length() + 8  ? signature.charAt ( pos )  :  ( char )  0;^1302^^^^^1301^1303^return pos < signature.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^[CLASS] CheckMethodAdapter  [METHOD] getChar [RETURN_TYPE] char   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P5_Replace_Variable]^return signature < pos.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^1302^^^^^1301^1303^return pos < signature.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^[CLASS] CheckMethodAdapter  [METHOD] getChar [RETURN_TYPE] char   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^return pos < signature.charAt (  )  ? signature.charAt ( pos )  :  ( char )  0;^1302^^^^^1301^1303^return pos < signature.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^[CLASS] CheckMethodAdapter  [METHOD] getChar [RETURN_TYPE] char   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^return pos < signature.length (  )  ? signature.indexOf ( pos )  :  ( char )  0;^1302^^^^^1301^1303^return pos < signature.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^[CLASS] CheckMethodAdapter  [METHOD] getChar [RETURN_TYPE] char   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^return pos < signature.length() + 5  ? signature.charAt ( pos )  :  ( char )  0;^1302^^^^^1301^1303^return pos < signature.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^[CLASS] CheckMethodAdapter  [METHOD] getChar [RETURN_TYPE] char   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P7_Replace_Invocation]^return pos < signature .lastIndexOf ( pos )   ? signature.charAt ( pos )  :  ( char )  0;^1302^^^^^1301^1303^return pos < signature.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^[CLASS] CheckMethodAdapter  [METHOD] getChar [RETURN_TYPE] char   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P14_Delete_Statement]^^1302^^^^^1301^1303^return pos < signature.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^[CLASS] CheckMethodAdapter  [METHOD] getChar [RETURN_TYPE] char   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P3_Replace_Literal]^return pos < signature.length() - 9  ? signature.charAt ( pos )  :  ( char )  0;^1302^^^^^1301^1303^return pos < signature.length (  )  ? signature.charAt ( pos )  :  ( char )  0;^[CLASS] CheckMethodAdapter  [METHOD] getChar [RETURN_TYPE] char   String signature int pos [VARIABLES] int[]  TYPE  keys  boolean  canBeVoid  endCode  endMethod  startCode  visible  String  signature  Map  labels  int  pos  
[P2_Replace_Operator]^if  ( label != null )  {^1319^^^^^1314^1327^if  ( label == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P6_Replace_Expression]^if  ( "Invalid " + msg + "  ( must not be null ) " )  {^1319^^^^^1314^1327^if  ( label == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P6_Replace_Expression]^if  ( "Invalid " + msg )  {^1319^^^^^1314^1327^if  ( label == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P8_Replace_Mix]^if  ( label == false )  {^1319^^^^^1314^1327^if  ( label == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P9_Replace_Statement]^if  ( attr == null )  {^1319^^^^^1314^1327^if  ( label == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P9_Replace_Statement]^if  ( type != null )  {^1319^^^^^1314^1327^if  ( label == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((("Invalid " + msg) + " (must not be null)"));^1319^1320^1321^1322^^1314^1327^if  ( label == null )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P16_Remove_Block]^^1319^1320^1321^1322^^1314^1327^if  ( label == null )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >>  msg  >>  "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  |  msg + "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "v" + msg + "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  )  " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^1320^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^1320^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^1320^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ==  msg  ==  "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <=  msg + "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid i" + msg + "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^1320^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^1320^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^1320^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^1320^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^1320^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^1320^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ^  msg  ^  "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "   instanceof   msg + "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Inv" + msg + "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  !=  msg  !=  "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ^  msg + "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "lid" + msg + "  ( must not be null ) " ) ;^1320^1321^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must not be null ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^if  ( checkVisited || labels.get ( label )  == null )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^if  ( checkVisited && labels.get ( label )  != null )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P5_Replace_Variable]^if  ( startCode && labels.get ( label )  == null )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P5_Replace_Variable]^if  ( label && checkVisiteds.get ( label )  == null )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P5_Replace_Variable]^if  ( labels && checkVisited.get ( label )  == null )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P6_Replace_Expression]^if  ( checkVisited ) {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P6_Replace_Expression]^if  (  labels.get ( label )  == null )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P6_Replace_Expression]^if  ( "Invalid " + msg + "  ( must be visited first ) " )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P6_Replace_Expression]^if  ( "Invalid " + msg )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P8_Replace_Mix]^if  (  labels.get ( label )  == true )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P9_Replace_Statement]^if  ( labels.get ( label )  != null )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((("Invalid " + msg) + " (must be visited first)"));^1323^1324^1325^1326^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P16_Remove_Block]^^1323^1324^1325^1326^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  { throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ; }^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  (  ( desc.charAt ( start )  )  == 'V' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  (  ( labels.get ( label )  )  != null )  {     throw new IllegalArgumentException ( "Already visited label" ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( end !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  (  ( desc.charAt ( 0 )  )  != '[' )  {     throw new IllegalArgumentException (  ( "Invalid descriptor  ( must be an array type descriptor ) : " + desc )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be '<init>' or '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  (  ( value < 0 )  ||  ( value > 65535 )  )  {     throw new IllegalArgumentException (  (  ( msg + "  ( must be an unsigned short ) : " )  + value )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  (  ( index ==  ( -1 )  )  ||  (  ( index - start )  < 2 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( start !=  ( desc.length (  )  )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  (  ( name == null )  ||  ( end ==  ( -1 )  ?  ( name.length (  )  )  <= start : end <= start )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  (  ( desc == null )  ||  (  ( desc.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException ( "Invalid method descriptor  ( must not be null or empty ) " ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( dims >  (  ( desc.lastIndexOf ( '[' )  )  + 1 )  )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must not be greater than dims ( desc )  ) : " + dims )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  (  (  ( desc.charAt ( 0 )  )  != ' ( ' )  ||  (  ( desc.length (  )  )  < 3 )  )  {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( 0 )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a '<init>', '<clinit>' or a valid Java identifier ) : " )  + name )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( canBeVoid )  {     return start + 1; }else {     throw new IllegalArgumentException (  ( "Invalid descriptor: " + desc )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( ! ( value instanceof Label )  )  {     throw new IllegalArgumentException (  ( "Invalid stack frame value: " + value )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierStart ( name.charAt ( start )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( pos !=  ( signature.length (  )  )  )  {     throw new IllegalArgumentException (  (  ( signature + ": error at index " )  + pos )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  (  ( desc == null )  ||  ( start >=  ( desc.length (  )  )  )  )  {     throw new IllegalArgumentException ( "Invalid type descriptor  ( must not be null or empty ) " ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( ! ( isJavaIdentifierPart ( name.charAt ( i )  )  )  )  {     throw new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  ) ; }^1323^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  &&  msg  &&  "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <=  msg + "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "n" + msg + "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException (  (  (  ( "Invalid " + msg )  + "  ( must be a valid Java identifier ) : " )  + name )  )  " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( e < s )  {     throw new IllegalArgumentException ( "Invalid start and end labels  ( end must be greater than start ) " ) ; }^1324^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( checkVisited &&  (  ( labels.get ( label )  )  == null )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must be visited first ) " )  ) ; }^1324^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( label == null )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null ) " )  ) ; }^1324^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( dims < 1 )  {     throw new IllegalArgumentException (  ( "Invalid dimensions  ( must be greater than 0 ) : " + dims )  ) ; }^1324^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <=  msg  <=  "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  ^  msg + "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "" + msg + "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( nLocal > mLocal )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nLocal=" + nLocal )  + " for frame type " )  + type )  ) ; }^1324^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  (  ( name == null )  ||  (  ( name.length (  )  )  == 0 )  )  {     throw new IllegalArgumentException (  (  ( "Invalid " + msg )  + "  ( must not be null or empty ) " )  ) ; }^1324^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( max < min )  {     throw new IllegalArgumentException (  (  (  ( "Max = " + max )  + " must be greater than or equal to min = " )  + min )  ) ; }^1324^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( nStack > mStack )  {     throw new IllegalArgumentException (  (  (  ( "Invalid nStack=" + nStack )  + " for frame type " )  + type )  ) ; }^1324^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P13_Insert_Block]^if  ( attr == null )  {     throw new IllegalArgumentException ( "Invalid attribute  ( must not be null ) " ) ; }^1324^^^^^1314^1327^[Delete]^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  <  msg  <  "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  >>  msg + "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "Invalid n" + msg + "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P2_Replace_Operator]^throw new IllegalArgumentException ( "Invalid "  &  msg  &  "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P3_Replace_Literal]^throw new IllegalArgumentException ( "val" + msg + "  ( must be visited first ) " ) ;^1324^1325^^^^1314^1327^throw new IllegalArgumentException ( "Invalid " + msg + "  ( must be visited first ) " ) ;^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P5_Replace_Variable]^if  ( checkVisited && labelss.get ( label )  == null )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
[P5_Replace_Variable]^if  ( checkVisited && label.get ( labels )  == null )  {^1323^^^^^1314^1327^if  ( checkVisited && labels.get ( label )  == null )  {^[CLASS] CheckMethodAdapter  [METHOD] checkLabel [RETURN_TYPE] void   Label label final boolean checkVisited String msg [VARIABLES] Label  label  int[]  TYPE  keys  boolean  canBeVoid  checkVisited  endCode  endMethod  startCode  visible  String  msg  Map  labels  
