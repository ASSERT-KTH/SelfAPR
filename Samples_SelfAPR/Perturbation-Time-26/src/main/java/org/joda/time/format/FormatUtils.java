[P1_Replace_Type]^private static final int LOG_10 = Math.log ( 10 ) ;^31^^^^^26^36^private static final double LOG_10 = Math.log ( 10 ) ;^[CLASS] FormatUtils   [VARIABLES] 
[P3_Replace_Literal]^private static final double LOG_5 = Math.log ( 5 ) ;^31^^^^^26^36^private static final double LOG_10 = Math.log ( 10 ) ;^[CLASS] FormatUtils   [VARIABLES] 
[P8_Replace_Mix]^private  final double LOG_9 = Math.log ( 9 ) ;^31^^^^^26^36^private static final double LOG_10 = Math.log ( 10 ) ;^[CLASS] FormatUtils   [VARIABLES] 
[P2_Replace_Operator]^if  ( value <= 0 )  {^50^^^^^35^65^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < value )  {^50^^^^^35^65^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^if  ( digits < 0 )  {^50^^^^^35^65^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value != MIN_VALUE )  {^50^^^^^35^65^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( size > 10 )  {^50^^^^^35^65^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( "" + - (  ( long )   ( MIN_VALUE )  ) )  {^50^^^^^35^65^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^if  ( value < 0 / 2 )  {^50^^^^^35^65^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P9_Replace_Statement]^if  ( value < 1000 )  {^50^^^^^35^65^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P9_Replace_Statement]^if  ( value < 10 )  {^50^^^^^35^65^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 0 )  {     buf.append ( '-' ) ;     if  ( value !=  ( MIN_VALUE )  )  {         value = -value;     }else {         for  ( ; size > 19; size-- )  {             buf.append ( '0' ) ;         }         buf.append ( "9223372036854775808" ) ;         return ;     } }^50^^^^^35^65^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value !=  ( MIN_VALUE )  )  {     value = -value; }else {     out.write (  ( "" +  ( - (  ( long )   ( MIN_VALUE )  )  )  )  ) ;     return ; }^50^^^^^35^65^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value !=  ( MIN_VALUE )  )  {     value = -value; }else {     for  ( ; size > 10; size-- )  {         out.write ( '0' ) ;     }     out.write (  ( "" +  ( - (  ( long )   ( MIN_VALUE )  )  )  )  ) ;     return ; }^50^^^^^35^65^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 0 )  {     out.write ( '-' ) ;     if  ( value !=  ( MIN_VALUE )  )  {         value = -value;     }else {         out.write (  ( "" +  ( - (  ( long )   ( MIN_VALUE )  )  )  )  ) ;         return ;     } }^50^^^^^35^65^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 0 )  {     buf.append ( '-' ) ;     if  ( value !=  ( MIN_VALUE )  )  {         value = -value;     }else {         buf.append (  ( "" +  ( - (  ( long )   ( MIN_VALUE )  )  )  )  ) ;         return ;     } }^50^^^^^35^65^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 0 )  {     out.write ( '-' ) ;     if  ( value !=  ( MIN_VALUE )  )  {         value = -value;     }else {         for  ( ; size > 19; size-- )  {             out.write ( '0' ) ;         }         out.write ( "9223372036854775808" ) ;         return ;     } }^50^^^^^35^65^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value !=  ( MIN_VALUE )  )  {     value = -value; }else {     for  ( ; size > 19; size-- )  {         out.write ( '0' ) ;     }     out.write ( "9223372036854775808" ) ;     return ; }^50^^^^^35^65^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value !=  ( MIN_VALUE )  )  {     value = -value; }else {     for  ( ; size > 10; size-- )  {         buf.append ( '0' ) ;     }     buf.append (  ( "" +  ( - (  ( long )   ( MIN_VALUE )  )  )  )  ) ;     return ; }^50^^^^^35^65^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value !=  ( MIN_VALUE )  )  {     value = -value; }else {     buf.append (  ( "" +  ( - (  ( long )   ( MIN_VALUE )  )  )  )  ) ;     return ; }^50^^^^^35^65^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 0 )  {     out.write ( '-' ) ;     if  ( value !=  ( MIN_VALUE )  )  {         value = -value;     }else {         for  ( ; size > 10; size-- )  {             out.write ( '0' ) ;         }         out.write (  ( "" +  ( - (  ( long )   ( MIN_VALUE )  )  )  )  ) ;         return ;     } }^50^^^^^35^65^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value !=  ( MIN_VALUE )  )  {     value = -value; }else {     for  ( ; size > 19; size-- )  {         buf.append ( '0' ) ;     }     buf.append ( "9223372036854775808" ) ;     return ; }^50^^^^^35^65^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^if  ( value >= Integer.MIN_VALUE )  {^52^^^^^37^67^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^if  ( value != Integer.size )  {^52^^^^^37^67^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( size > 10 )  {^52^^^^^37^67^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( "" + - (  ( long )   ( MIN_VALUE )  ) )  {^52^^^^^37^67^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P9_Replace_Statement]^if  ( value != Long.MIN_VALUE )  {^52^^^^^37^67^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P15_Unwrap_Block]^value = -value;^52^53^54^55^56^37^67^if  ( value != Integer.MIN_VALUE )  { value = -value; } else { for  ( ; size > 10; size-- )  { buf.append ( '0' ) ; }^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P16_Remove_Block]^^52^53^54^55^56^37^67^if  ( value != Integer.MIN_VALUE )  { value = -value; } else { for  ( ; size > 10; size-- )  { buf.append ( '0' ) ; }^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size < 10; size-- )  {^55^^^^^52^60^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > 5; size-- )  {^55^^^^^52^60^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; value > 10; size-- )  {^55^^^^^52^60^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^56^^^^^52^60^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;buf.append ( '0' ) ;^56^^^^^52^60^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;buf.append ( '0' ) ;^56^^^^^52^60^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;buf.append ( '0' ) ;^56^^^^^52^60^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;buf.append ( '0' ) ;^56^^^^^52^60^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^58^^^^^52^60^buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ;^58^^^^^52^60^buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^size = -value;^53^^^^^38^68^value = -value;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^value =  -size;^53^^^^^38^68^value = -value;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size >= 10; size-- )  {^55^^^^^40^70^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > value; size-- )  {^55^^^^^40^70^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; value > 10; size-- )  {^55^^^^^40^70^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^56^^^^^41^71^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;buf.append ( '0' ) ;^56^^^^^41^71^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;buf.append ( '0' ) ;^56^^^^^41^71^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;buf.append ( '0' ) ;^56^^^^^41^71^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;buf.append ( '0' ) ;^56^^^^^41^71^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^51^^^^^36^66^buf.append ( '-' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;buf.append ( '-' ) ;^51^^^^^36^66^buf.append ( '-' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;buf.append ( '-' ) ;^51^^^^^36^66^buf.append ( '-' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '0' ) ;buf.append ( '-' ) ;^51^^^^^36^66^buf.append ( '-' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;buf.append ( '-' ) ;^51^^^^^36^66^buf.append ( '-' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^58^^^^^43^73^buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ;^58^^^^^43^73^buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^if  ( value == Integer.MIN_VALUE )  {^52^^^^^37^67^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^if  ( digits != Integer.MIN_VALUE )  {^52^^^^^37^67^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^if  ( value != Integer.value )  {^52^^^^^37^67^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size >= 10; size-- )  {^55^^^^^52^60^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > digits; size-- )  {^55^^^^^52^60^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size < 10; size-- )  {^55^^^^^40^70^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > d; size-- )  {^55^^^^^40^70^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^if  ( value == 10 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^if  ( value <= 10 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < size )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < d0 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < 80 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < -50 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < digits0 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^if  ( size < 10 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( size > 1 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  (  ( char )   ( value + '0' ) )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value < 100 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( size > 2 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( (value + 1) * 13421772 >> 27 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value + 1 * 13421772 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value + 1 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  (  ( char )   ( d + '0' ) )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  (  ( char )   (  ( value -  ( d << 3 )  )  -  ( d << 1 )  + '0' ) )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value -  ( d << 3 )  - d << 1 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value - d << 3 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( d << 3 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( d << 1 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value < 1000 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value < 10000 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( int log(value) / LOG_10) + 1 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  (  ( int )   ( log ( value )  / LOG_10 ) )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( size > digits )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^if  ( size < 5 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P9_Replace_Statement]^if  ( value < 0 )  {^62^^^^^47^77^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P15_Unwrap_Block]^for (; size > 1; size--) {    buf.append('0');}; buf.append(((char) (value + '0')));^62^63^64^65^^47^77^if  ( value < 10 )  { for  ( ; size > 1; size-- )  { buf.append ( '0' ) ; }^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P16_Remove_Block]^^62^63^64^65^^47^77^if  ( value < 10 )  { for  ( ; size > 1; size-- )  { buf.append ( '0' ) ; }^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^} else if  ( value <= 100 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 101 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < digits00 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < d00 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^} else if  ( size < 100 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( size > 2 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( (value + 1) * 13421772 >> 27 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( value + 1 * 13421772 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( value + 1 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  (  ( char )   ( d + '0' ) )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  (  ( char )   (  ( value -  ( d << 3 )  )  -  ( d << 1 )  + '0' ) )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( value -  ( d << 3 )  - d << 1 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( value - d << 3 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( d << 3 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( d << 1 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( value < 1000 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( value < 10000 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( int log(value) / LOG_10) + 1 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  (  ( int )   ( log ( value )  / LOG_10 ) )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( size > digits )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P9_Replace_Statement]^} else if  ( size <= 19 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P15_Unwrap_Block]^for (; size > 2; size--) {    buf.append('0');}; int d = ((value + 1) * 13421772) >> 27; buf.append(((char) (d + '0'))); buf.append(((char) (((value - (d << 3)) - (d << 1)) + '0')));^67^68^69^70^^52^82^} else if  ( value < 100 )  { for  ( ; size > 2; size-- )  { buf.append ( '0' ) ; }^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P16_Remove_Block]^^67^68^69^70^^52^82^} else if  ( value < 100 )  { for  ( ; size > 2; size-- )  { buf.append ( '0' ) ; }^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^if  ( value == 1000 )  {^80^^^^^67^91^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < 993 )  {^80^^^^^67^91^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < 10000 )  {^80^^^^^67^91^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^if  ( size < 1000 )  {^80^^^^^67^91^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( int log(value) / LOG_10) + 1 )  {^80^^^^^67^91^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  (  ( int )   ( log ( value )  / LOG_10 ) )  {^80^^^^^67^91^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^if  ( value < 717 )  {^80^^^^^67^91^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P9_Replace_Statement]^if  ( value < 0 )  {^80^^^^^67^91^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P9_Replace_Statement]^if  ( value < 10 )  {^80^^^^^67^91^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 10000 )  {     digits = 4; }else {     digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1; }^80^^^^^67^91^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^} else if  ( value <= 10000 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value <  )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < size0000 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^} else if  ( size < 10000 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( int log(value) / LOG_10) + 1 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  (  ( int )   ( log ( value )  / LOG_10 ) )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^} else if  ( value < 10000 << 2 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P9_Replace_Statement]^} else if  ( size <= 19 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P15_Unwrap_Block]^digits = 4;^82^83^84^85^86^67^91^} else if  ( value < 10000 )  { digits = 4; } else { digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1; }^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P16_Remove_Block]^^82^83^84^85^86^67^91^} else if  ( value < 10000 )  { digits = 4; } else { digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1; }^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 1000 )  {     digits = 3; }else     if  ( value < 10000 )  {         digits = 4;     }else {         digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1;     }^82^^^^^67^91^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P1_Replace_Type]^digits =  (  long  )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  >  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  ( int )  ( Math.log ( value )  - LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  ;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^digits =  ( int )  ( Math.log ( size )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_20 )  + 2;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 10000 )  {     digits = 4; }else {     digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1; }^85^^^^^67^91^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^(  ( int )  ( Math.log ( value )  / LOG_10 )  + 1 )  )  )  )  ) ;digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = 2;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 4 - 3;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^digits = 3;digits = 4;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = -4;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 4 - 0;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P1_Replace_Type]^digits =  (  short  )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =   instanceof   ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  ( int )  ( Math.log ( value )  * LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_00 )  + 0;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = 7;^81^^^^^67^91^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 0;^81^^^^^67^91^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^digits = 4;digits = 3;^81^^^^^67^91^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < size )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 60000 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^} else if  ( size < 10000L )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  ||  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_0 )  + ;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_1 + 00 )  + 1 + 0;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = -3;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 4 % 1;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size >= digits; size-- )  {^87^^^^^67^91^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; value > digits; size-- )  {^87^^^^^67^91^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; size > value; size-- )  {^87^^^^^67^91^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; digits > size; size-- )  {^87^^^^^67^91^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^88^^^^^67^91^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;buf.append ( '0' ) ;^88^^^^^67^91^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;buf.append ( '0' ) ;^88^^^^^67^91^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;buf.append ( '0' ) ;^88^^^^^67^91^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;buf.append ( '0' ) ;^88^^^^^67^91^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = -3;^81^^^^^67^91^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 3 >>> 3;^81^^^^^67^91^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = 3;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  &&  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P1_Replace_Type]^long  digits;^79^^^^^67^91^int digits;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^buf.append ( Integer.toString ( size )  ) ;^90^^^^^67^91^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^90^^^^^67^91^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( Long.toString ( value )  ) ;buf.append ( Integer.toString ( value )  ) ;^90^^^^^67^91^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( Integer.toString ( value )  ) ;buf.append ( Integer.toString ( value )  ) ;^90^^^^^67^91^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )  ( value + '0' )  ) ;buf.append ( Integer.toString ( value )  ) ;^90^^^^^67^91^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )   ( d + '0' )  ) ;buf.append ( Integer.toString ( value )  ) ;^90^^^^^67^91^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( Long.toString ( value )  ) ;buf.append ( Integer.toString ( value )  ) ;^90^^^^^67^91^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size == 2; size-- )  {^68^^^^^53^83^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > value; size-- )  {^68^^^^^53^83^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; value > 2; size-- )  {^68^^^^^53^83^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^69^^^^^54^84^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;buf.append ( '0' ) ;^69^^^^^54^84^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;buf.append ( '0' ) ;^69^^^^^54^84^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;buf.append ( '0' ) ;^69^^^^^54^84^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;buf.append ( '0' ) ;^69^^^^^54^84^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P1_Replace_Type]^short  d =  (  ( value + 1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^int d =  (  ( value + 1 )  * 13421772 )   <  27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^int + d =  (  ( value + 1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^int d =  (  ( value  ||  1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value  )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421777 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> value;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^int d =  (  ( size + 1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( d  ||  '0' )  ) ;^75^^^^^60^90^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^buf.append (  ( char )   ( value + '0' )  ) ;^75^^^^^60^90^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^75^^^^^60^90^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )  ( value + '0' )  ) ;buf.append (  ( char )   ( d + '0' )  ) ;^75^^^^^60^90^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( Long.toString ( value )  ) ;buf.append (  ( char )   ( d + '0' )  ) ;^75^^^^^60^90^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;buf.append (  ( char )   ( d + '0' )  ) ;^75^^^^^60^90^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( Integer.toString ( value )  ) ;buf.append (  ( char )   ( d + '0' )  ) ;^75^^^^^60^90^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  <<  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value  |   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value   instanceof    ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value -  ( d   instanceof   3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d  <=  1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^buf.append (  ( char )   ( value -  ( d << value )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << size )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^buf.append (  ( char )   ( size -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^buf.append (  ( char )   ( value -  ( value << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^buf.append (  ( char )   ( d -  ( value << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^buf.append (  ( char )   ( value -  ( size << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )  ( value + '0' )  ) ;buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )   ( d + '0' )  ) ;buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^if  ( value > 1000 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^if  ( value <= 1000 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < 998 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < digits000 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^if  ( size < 1000 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value < 10000 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( int log(value) / LOG_10) + 1 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^if  (  ( int )   ( log ( value )  / LOG_10 ) )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^if  ( value < 30 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P9_Replace_Statement]^if  ( value < 0 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P9_Replace_Statement]^if  ( value < 10 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 10000 )  {     digits = 4; }else {     digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1; }^80^^^^^65^95^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^} else if  ( value <= 10000 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 10003 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 00000 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^} else if  ( size < 10000 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( int log(value) / LOG_10) + 1 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  (  ( int )   ( log ( value )  / LOG_10 ) )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P6_Replace_Expression]^} else {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P9_Replace_Statement]^} else if  ( size <= 19 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P15_Unwrap_Block]^digits = 4;^82^83^84^85^86^67^97^} else if  ( value < 10000 )  { digits = 4; } else { digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1; }^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P16_Remove_Block]^^82^83^84^85^86^67^97^} else if  ( value < 10000 )  { digits = 4; } else { digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1; }^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 1000 )  {     digits = 3; }else     if  ( value < 10000 )  {         digits = 4;     }else {         digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1;     }^82^^^^^67^97^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P1_Replace_Type]^digits =  (  long  )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  >>  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  ( int )  ( Math.log ( value )  * LOG_10 )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  ;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^digits =  ( int )  ( Math.log ( size )  / LOG_10 )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_1L0 )  + 1L;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 10000 )  {     digits = 4; }else {     digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1; }^85^^^^^82^86^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^(  ( int )  ( Math.log ( value )  / LOG_10 )  + 1 )  )  )  )  ) ;digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = 13;^83^^^^^68^98^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 6;^83^^^^^68^98^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^digits = 3;digits = 4;^83^^^^^68^98^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = -4;^83^^^^^68^98^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 0;^83^^^^^68^98^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P1_Replace_Type]^digits =  (  short  )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =   instanceof   ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  ( int )  ( Math.log ( value )  - LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  ;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^digits =  ( int )  ( Math.log ( size )  / LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_1 / 20 )  + 1 / 2;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 10000 )  {     digits = 4; }else {     digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1; }^85^^^^^70^100^[Delete]^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^(  ( int )  ( Math.log ( value )  / LOG_10 )  + 1 )  )  )  )  ) ;digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = size;^81^^^^^66^96^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 3 + 1;^81^^^^^66^96^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^digits = 4;digits = 3;^81^^^^^66^96^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^} else if  ( value == 10000 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 10001 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < digits0000 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^} else if  ( value < 0 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P1_Replace_Type]^digits =  (  short  )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  <  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_size0 )  + size;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_20 )  + 2;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = size;^83^^^^^68^98^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 4L;^83^^^^^68^98^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size >= 2; size-- )  {^68^^^^^53^83^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > -6; size-- )  {^68^^^^^53^83^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size >= digits; size-- )  {^87^^^^^72^102^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; value > digits; size-- )  {^87^^^^^72^102^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; size > value; size-- )  {^87^^^^^72^102^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; digits > size; size-- )  {^87^^^^^72^102^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^88^^^^^73^103^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;buf.append ( '0' ) ;^88^^^^^73^103^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;buf.append ( '0' ) ;^88^^^^^73^103^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;buf.append ( '0' ) ;^88^^^^^73^103^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;buf.append ( '0' ) ;^88^^^^^73^103^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 5;^81^^^^^66^96^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 4 * 2;^83^^^^^68^98^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  !=  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  ( int )  ( Math.log ( value )  * LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_size0 )  + size;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^int d =  (  ( value + 1 )  * 13421772 )   !=  27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^int d =  (  ( value  &  1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * digits )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> 19;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P1_Replace_Type]^short  digits;^79^^^^^64^94^int digits;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( d  !=  '0' )  ) ;^75^^^^^60^90^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ==  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value  ||   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value  ==   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value -  ( d  |  3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d  |  1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^buf.append (  ( char )   ( value -  ( d << 7 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << digits )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^buf.append ( Integer.toString ( size )  ) ;^90^^^^^75^105^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^90^^^^^75^105^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( Long.toString ( value )  ) ;buf.append ( Integer.toString ( value )  ) ;^90^^^^^75^105^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( Integer.toString ( value )  ) ;buf.append ( Integer.toString ( value )  ) ;^90^^^^^75^105^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )  ( value + '0' )  ) ;buf.append ( Integer.toString ( value )  ) ;^90^^^^^75^105^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )   ( d + '0' )  ) ;buf.append ( Integer.toString ( value )  ) ;^90^^^^^75^105^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( Long.toString ( value )  ) ;buf.append ( Integer.toString ( value )  ) ;^90^^^^^75^105^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size < 1; size-- )  {^63^^^^^48^78^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > d; size-- )  {^63^^^^^48^78^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; value > 1; size-- )  {^63^^^^^48^78^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^64^^^^^49^79^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;buf.append ( '0' ) ;^64^^^^^49^79^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;buf.append ( '0' ) ;^64^^^^^49^79^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;buf.append ( '0' ) ;^64^^^^^49^79^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;buf.append ( '0' ) ;^64^^^^^49^79^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P7_Replace_Invocation]^buf .append ( null )  ;^64^^^^^49^79^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ==  ( char )  ( value + '0' )  ) ;^66^^^^^51^81^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P5_Replace_Variable]^buf.append (  ( char )  ( size + '0' )  ) ;^66^^^^^51^81^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P14_Delete_Statement]^^66^^^^^51^81^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )   ( d + '0' )  ) ;buf.append (  ( char )  ( value + '0' )  ) ;^66^^^^^51^81^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( Long.toString ( value )  ) ;buf.append (  ( char )  ( value + '0' )  ) ;^66^^^^^51^81^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;buf.append (  ( char )  ( value + '0' )  ) ;^66^^^^^51^81^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( Integer.toString ( value )  ) ;buf.append (  ( char )  ( value + '0' )  ) ;^66^^^^^51^81^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < digits )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 00 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < -600 )  {^67^^^^^52^82^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^if  ( value <= 1000 )  {^80^^^^^67^91^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < value000 )  {^80^^^^^67^91^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^if  ( value < 626 )  {^80^^^^^67^91^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 9991 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < value0000 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^} else if  ( value < 4220 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  ( int )  ( Math.log ( value )  + LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_digits0 )  + digits;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_1 + 10 )  + 1 + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = 13;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 4 << 1;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = value;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 4 - 4;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  <  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_1L0 )  + 1L;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = value;^81^^^^^67^91^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 6;^81^^^^^67^91^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^} else if  ( value > 10000 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < value )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < digits0000 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^}  if  ( size < 1 )  {^82^^^^^67^91^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  |  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_40 )  + 4;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = 10;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 5;^83^^^^^67^91^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  <=  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_d0 )  + d;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_1 >>> 20 )  + 1 >>> 2;^85^^^^^67^91^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > size; size-- )  {^68^^^^^53^83^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^int d =  (  ( value + 1 )  * 13421772 )   ||  27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^int d =  (  ( value  ^  1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + digits )  * digits342digits772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421766 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> 29;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ^  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value  <<   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value  >>   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value -  ( d  >  3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d  &&  1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^buf.append (  ( char )   ( value -  ( d << 12 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < digits )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < -3000 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^if  ( value < 326 )  {^80^^^^^65^95^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < size0000 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^} else if  ( value < 9543 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  ^  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_1 - 00 )  + 1 - 0;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 5;^83^^^^^68^98^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 4 % 2;^83^^^^^68^98^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  >>  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_digits0 )  + digits;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_00 )  + 0;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = 8;^81^^^^^66^96^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 6;^81^^^^^66^96^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 10004 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 70000 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^} else if  ( size < 8613 )  {^82^^^^^67^97^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_1 * 10 )  + 1 * 1;^85^^^^^82^86^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = -5;^83^^^^^68^98^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 3;^83^^^^^68^98^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size >= 1; size-- )  {^63^^^^^48^78^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > ; size-- )  {^63^^^^^48^78^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > d; size-- )  {^68^^^^^53^83^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^digits = value;^81^^^^^66^96^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 0;^81^^^^^66^96^digits = 3;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 4 + 0;^83^^^^^68^98^digits = 4;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  >  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_1 % 40 )  + 1 % 4;^85^^^^^70^100^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P1_Replace_Type]^long  d =  (  ( value + 1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^int d =  (  ( value + 1 )  * 13421772 )    instanceof   27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^int - d =  (  ( value + 1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^int d =  (  ( value  |  1 )  * 13421772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + size )  * size342size772 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421775 )  >> 27;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> 34;^74^^^^^59^89^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  <<  ( char )  ( value + '0' )  ) ;^66^^^^^51^81^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( d  &&  '0' )  ) ;^75^^^^^60^90^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  <  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value  <   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value -  ( d  ==  3 )  -  ( d << 1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d  &  1 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P3_Replace_Literal]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 4 )  + '0' )  ) ;^77^^^^^62^92^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf int value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  digits  size  value  
[P1_Replace_Type]^long  intValue =  (  long  ) value;^105^^^^^104^129^int intValue =  ( int ) value;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^if  ( intValue > value )  {^106^^^^^104^129^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^if  ( size == value )  {^106^^^^^104^129^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( size <= 19 )  {^106^^^^^104^129^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( value < 0 )  {^106^^^^^104^129^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( value != MIN_VALUE )  {^106^^^^^104^129^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( size > 19 )  {^106^^^^^104^129^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( int log(value) / LOG_10) + 1 )  {^106^^^^^104^129^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  (  ( int )   ( log ( value )  / LOG_10 ) )  {^106^^^^^104^129^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( size > digits )  {^106^^^^^104^129^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^} else if  ( size == 19 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^} else if  ( size <= digits )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^} else if  ( size <= 23 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^} else if  ( size <= -79 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^} else if  ( intValue <= 19 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^} else if  ( value < 0 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^} else if  ( value != MIN_VALUE )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^} else if  ( size > 19 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^} else if  ( int log(value) / LOG_10) + 1 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^} else if  (  ( int )   ( log ( value )  / LOG_10 ) )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^} else if  ( size > digits )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^} else {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P9_Replace_Statement]^} else if  ( value < 10000 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P9_Replace_Statement]^} else if  ( value < 100 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^if  ( value <= 0 )  {^111^^^^^104^129^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^if  ( value < -9 )  {^111^^^^^104^129^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( value != MIN_VALUE )  {^111^^^^^104^129^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( size > 19 )  {^111^^^^^104^129^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^if  ( value < 2 )  {^111^^^^^104^129^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P9_Replace_Statement]^if  ( value < 1000 )  {^111^^^^^104^129^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P9_Replace_Statement]^if  ( value < 10 )  {^111^^^^^104^129^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^if  ( value == Long.MIN_VALUE )  {^113^^^^^104^129^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^if  ( value != Long.value )  {^113^^^^^104^129^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( size > 19 )  {^113^^^^^104^129^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^if  ( value = Long.MIN_VALUE )  {^113^^^^^104^129^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P9_Replace_Statement]^if  ( value != Integer.MIN_VALUE )  {^113^^^^^104^129^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P15_Unwrap_Block]^value = -value;^113^114^115^116^117^104^129^if  ( value != Long.MIN_VALUE )  { value = -value; } else { for  ( ; size > 19; size-- )  { buf.append ( '0' ) ; }^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P16_Remove_Block]^^113^114^115^116^117^104^129^if  ( value != Long.MIN_VALUE )  { value = -value; } else { for  ( ; size > 19; size-- )  { buf.append ( '0' ) ; }^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^for  ( ; size >= 19; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > 14; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^for  ( ; intValue > 19; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^117^^^^^104^129^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;buf.append ( '0' ) ;^117^^^^^104^129^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;buf.append ( '0' ) ;^117^^^^^104^129^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;buf.append ( '0' ) ;^117^^^^^104^129^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;buf.append ( '0' ) ;^117^^^^^104^129^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^buf.append ( "9" ) ;^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^119^120^^^^104^129^buf.append ( "9223372036854775808" ) ; return;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( "9223372036854775808" ) ;buf.append ( "9223372036854775808" ) ;^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^value =  -null;^114^^^^^104^129^value = -value;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > digits; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^112^^^^^104^129^buf.append ( '-' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;buf.append ( '-' ) ;^112^^^^^104^129^buf.append ( '-' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;buf.append ( '-' ) ;^112^^^^^104^129^buf.append ( '-' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append ( '0' ) ;buf.append ( '-' ) ;^112^^^^^104^129^buf.append ( '-' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;buf.append ( '-' ) ;^112^^^^^104^129^buf.append ( '-' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^buf.append ( "92233720368547758086" ) ;^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^for  ( ; size == 19; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > ; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^buf.append ( "92" ) ;^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > 13; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^for  ( ; size >= digits; size-- )  {^124^^^^^104^129^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^for  ( ; intValue > digits; size-- )  {^124^^^^^104^129^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^for  ( ; size > intValue; size-- )  {^124^^^^^104^129^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^for  ( ; digits > size; size-- )  {^124^^^^^104^129^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^125^^^^^104^129^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;buf.append ( '0' ) ;^125^^^^^104^129^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;buf.append ( '0' ) ;^125^^^^^104^129^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;buf.append ( '0' ) ;^125^^^^^104^129^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;buf.append ( '0' ) ;^125^^^^^104^129^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P1_Replace_Type]^short  digits =  (  short  )  ( Math.log ( value )  / LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^int digits =  &&  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^int digits =  ( int )  ( Math.log ( value )  * LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^int digits =  ( int )  ( Math.log ( value )  / LOG_digits0 )  + digits;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^int digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^buf.append ( "922" ) ;^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^(  ( int )  ( Math.log ( value )  / LOG_10 )  + 1 )  )  )  )  ) ;int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^127^^^^^104^129^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( Long.toString ( value )  ) ;buf.append ( Long.toString ( value )  ) ;^127^^^^^104^129^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( Integer.toString ( value )  ) ;buf.append ( Long.toString ( value )  ) ;^127^^^^^104^129^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append (  ( char )  ( value + '0' )  ) ;buf.append ( Long.toString ( value )  ) ;^127^^^^^104^129^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append (  ( char )   ( d + '0' )  ) ;buf.append ( Long.toString ( value )  ) ;^127^^^^^104^129^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append ( Integer.toString ( value )  ) ;buf.append ( Long.toString ( value )  ) ;^127^^^^^104^129^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^109^^^^^104^129^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( Long.toString ( value )  ) ;buf.append ( Long.toString ( value )  ) ;^109^^^^^104^129^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( Integer.toString ( value )  ) ;buf.append ( Long.toString ( value )  ) ;^109^^^^^104^129^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append (  ( char )  ( value + '0' )  ) ;buf.append ( Long.toString ( value )  ) ;^109^^^^^104^129^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append (  ( char )   ( d + '0' )  ) ;buf.append ( Long.toString ( value )  ) ;^109^^^^^104^129^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append ( Integer.toString ( value )  ) ;buf.append ( Long.toString ( value )  ) ;^109^^^^^104^129^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^if  ( value < intValue )  {^111^^^^^104^129^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^if  ( value < 1 )  {^111^^^^^104^129^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^if  ( value <= Long.MIN_VALUE )  {^113^^^^^104^129^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > 20; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^buf .append ( 3 )  ;^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > size; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P7_Replace_Invocation]^buf .append ( null )  ;^117^^^^^104^129^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^buf.append ( "372036854775" ) ;^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P7_Replace_Invocation]^buf .append ( null )  ;^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^int digits =  !=  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^int digits =  ( int )  ( Math.log ( value )  + LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^buf.append ( "7223372036854775808" ) ;^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^buf .append ( 3 )  ;^127^^^^^104^129^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^appendPaddedInteger ( buf, digits, size ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^appendPaddedInteger ( buf, intValue, digits ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^appendPaddedInteger (  intValue, size ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^appendPaddedInteger ( buf,  size ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^appendPaddedInteger ( buf, intValue ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^appendPaddedInteger ( size, intValue, buf ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^appendPaddedInteger ( buf, size, intValue ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^writeUnpaddedInteger ( out, intValue ) ;appendPaddedInteger ( buf, intValue, size ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^appendUnpaddedInteger ( buf, intValue ) ;appendPaddedInteger ( buf, intValue, size ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^writePaddedInteger ( out, intValue, size ) ;appendPaddedInteger ( buf, intValue, size ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^} else if  ( size < 19 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^} else if  ( size <= 27 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^} else if  ( size <= digits9 )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^}  if  ( size <= 0  )  {^108^^^^^104^129^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^if  ( value < digits )  {^111^^^^^104^129^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > 22; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > 16; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P7_Replace_Invocation]^buf .append ( 3 )  ;^117^^^^^104^129^buf.append ( '0' ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^buf.append ( "223372036854775808" ) ;^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^for  ( ; size < 19; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^buf.append ( "203223372036854775808" ) ;^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P1_Replace_Type]^long  digits =  (  long  )  ( Math.log ( value )  / LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^int digits =  <=  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^buf.append ( "85477580223372036854775808" ) ;^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^if  ( value <  )  {^111^^^^^104^129^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^if  ( value < 3 )  {^111^^^^^104^129^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^if  ( value >= Long.MIN_VALUE )  {^113^^^^^104^129^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > 15; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^buf.append ( "23372036" ) ;^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^buf.append ( "9223372223372036854775808" ) ;^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > intValue; size-- )  {^116^^^^^104^129^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^buf.append ( "922337203685477223372036854775808" ) ;^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^int digits =  ==  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^int digits =  ( int )  ( Math.log ( value )  - LOG_10 )  + 1;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  ;^123^^^^^104^129^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^appendPaddedInteger ( intValue, buf, size ) ;^107^^^^^104^129^appendPaddedInteger ( buf, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^buf.append ( "3372" ) ;^119^^^^^104^129^buf.append ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] appendPaddedInteger [RETURN_TYPE] void   StringBuffer buf long value int size [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^if  ( value <= 0 )  {^144^^^^^129^159^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < digits )  {^144^^^^^129^159^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^if  ( size < 0 )  {^144^^^^^129^159^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value != MIN_VALUE )  {^144^^^^^129^159^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( size > 10 )  {^144^^^^^129^159^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( "" + - (  ( long )   ( MIN_VALUE )  ) )  {^144^^^^^129^159^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^if  ( digits < 0 >> 3 )  {^144^^^^^129^159^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P9_Replace_Statement]^if  ( value < 1000 )  {^144^^^^^129^159^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P9_Replace_Statement]^if  ( value < 10 )  {^144^^^^^129^159^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^if  ( value >= Integer.MIN_VALUE )  {^146^^^^^131^161^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^if  ( digits != Integer.MIN_VALUE )  {^146^^^^^131^161^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^if  ( value != Integer.value )  {^146^^^^^131^161^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( size > 10 )  {^146^^^^^131^161^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( "" + - (  ( long )   ( MIN_VALUE )  ) )  {^146^^^^^131^161^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^if  ( value = Integer.MIN_VALUE )  {^146^^^^^131^161^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P9_Replace_Statement]^if  ( value != Long.MIN_VALUE )  {^146^^^^^131^161^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P15_Unwrap_Block]^value = -value;^146^147^148^149^150^131^161^if  ( value != Integer.MIN_VALUE )  { value = -value; } else { for  ( ; size > 10; size-- )  { out.write ( '0' ) ; }^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P16_Remove_Block]^^146^147^148^149^150^131^161^if  ( value != Integer.MIN_VALUE )  { value = -value; } else { for  ( ; size > 10; size-- )  { out.write ( '0' ) ; }^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size >= 10; size-- )  {^149^^^^^146^154^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > 8; size-- )  {^149^^^^^146^154^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; value > 10; size-- )  {^149^^^^^146^154^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^out .write ( d )  ;^150^^^^^146^154^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^150^^^^^146^154^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;out.write ( '0' ) ;^150^^^^^146^154^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;out.write ( '0' ) ;^150^^^^^146^154^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( value + '0' ) ;out.write ( '0' ) ;^150^^^^^146^154^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '0' ) ;out.write ( '0' ) ;^150^^^^^146^154^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;out.write ( '0' ) ;^150^^^^^146^154^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P7_Replace_Invocation]^out .write ( value )  ;^150^^^^^146^154^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^152^153^^^^146^154^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ; return;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ;out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;^152^^^^^146^154^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^size = -value;^147^^^^^132^162^value = -value;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^value =  -size;^147^^^^^132^162^value = -value;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size >= 10; size-- )  {^149^^^^^134^164^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > digits; size-- )  {^149^^^^^134^164^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; value > 10; size-- )  {^149^^^^^134^164^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P7_Replace_Invocation]^out .write ( value )  ;^150^^^^^135^165^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^150^^^^^135^165^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;out.write ( '0' ) ;^150^^^^^135^165^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;out.write ( '0' ) ;^150^^^^^135^165^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( value + '0' ) ;out.write ( '0' ) ;^150^^^^^135^165^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '0' ) ;out.write ( '0' ) ;^150^^^^^135^165^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;out.write ( '0' ) ;^150^^^^^135^165^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^145^^^^^130^160^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;out.write ( '-' ) ;^145^^^^^130^160^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;out.write ( '-' ) ;^145^^^^^130^160^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( value + '0' ) ;out.write ( '-' ) ;^145^^^^^130^160^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '0' ) ;out.write ( '-' ) ;^145^^^^^130^160^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;out.write ( '-' ) ;^145^^^^^130^160^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^152^153^^^^137^167^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ; return;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ;out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;^152^^^^^137^167^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^if  ( value <= Integer.MIN_VALUE )  {^146^^^^^131^161^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^if  ( size != Integer.MIN_VALUE )  {^146^^^^^131^161^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size < 10; size-- )  {^149^^^^^146^154^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > 14; size-- )  {^149^^^^^146^154^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P7_Replace_Invocation]^out .write ( digits )  ;^150^^^^^146^154^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^out .write ( size )  ;^150^^^^^146^154^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^out .write ( d )  ;^152^^^^^146^154^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P12_Insert_Condition]^if  ( value != Integer.MIN_VALUE )  { out.write ( "" + - ( long ) Integer.MIN_VALUE ) ; }^152^^^^^146^154^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size == 10; size-- )  {^149^^^^^134^164^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > d; size-- )  {^149^^^^^134^164^for  ( ; size > 10; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^out .write ( value )  ;^152^^^^^137^167^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P12_Insert_Condition]^if  ( value != Integer.MIN_VALUE )  { out.write ( "" + - ( long ) Integer.MIN_VALUE ) ; }^152^^^^^137^167^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^if  ( value > 10 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^if  ( value <= 10 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < d )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < d0 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < 80 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < -70 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^if  ( size < 10 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( size > 1 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value + '0' )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value < 100 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( size > 2 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( (value + 1) * 13421772 >> 27 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value + 1 * 13421772 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value + 1 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( d + '0' )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  (  ( value -  ( d << 3 )  )  -  ( d << 1 )  + '0' )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value -  ( d << 3 )  - d << 1 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value - d << 3 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( d << 3 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( d << 1 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value < 1000 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value < 10000 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( int log(value) / LOG_10) + 1 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  (  ( int )   ( log ( value )  / LOG_10 ) )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( size > digits )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^if  ( value < 10 + 4 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P9_Replace_Statement]^if  ( value < 0 )  {^156^^^^^141^171^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P15_Unwrap_Block]^for (; size > 1; size--) {    out.write('0');}; out.write((value + '0'));^156^157^158^159^^141^171^if  ( value < 10 )  { for  ( ; size > 1; size-- )  { out.write ( '0' ) ; }^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P16_Remove_Block]^^156^157^158^159^^141^171^if  ( value < 10 )  { for  ( ; size > 1; size-- )  { out.write ( '0' ) ; }^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^} else if  ( value <= 100 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < d )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 900 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < digits00 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < -600 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^} else if  ( size < 100 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( size > 2 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( (value + 1) * 13421772 >> 27 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( value + 1 * 13421772 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( value + 1 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( d + '0' )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  (  ( value -  ( d << 3 )  )  -  ( d << 1 )  + '0' )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( value -  ( d << 3 )  - d << 1 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( value - d << 3 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( d << 3 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( d << 1 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( value < 1000 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( value < 10000 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( int log(value) / LOG_10) + 1 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  (  ( int )   ( log ( value )  / LOG_10 ) )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( size > digits )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^}  if  ( value < 89 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P9_Replace_Statement]^} else if  ( size <= 19 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P15_Unwrap_Block]^for (; size > 2; size--) {    out.write('0');}; int d = ((value + 1) * 13421772) >> 27; out.write((d + '0')); out.write((((value - (d << 3)) - (d << 1)) + '0'));^161^162^163^164^^146^176^} else if  ( value < 100 )  { for  ( ; size > 2; size-- )  { out.write ( '0' ) ; }^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P16_Remove_Block]^^161^162^163^164^^146^176^} else if  ( value < 100 )  { for  ( ; size > 2; size-- )  { out.write ( '0' ) ; }^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^if  ( value <= 1000 )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < 1008 )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < size000 )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^if  ( size < 1000 )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value < 10000 )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( int log(value) / LOG_10) + 1 )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  (  ( int )   ( log ( value )  / LOG_10 ) )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^if  ( value < 0 )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P9_Replace_Statement]^if  ( value < 10 )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 10000 )  {     digits = 4; }else {     digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1; }^174^^^^^161^185^[Delete]^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^} else if  ( value <= 10000 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 10007 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 100000 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^} else if  ( size < 10000 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( int log(value) / LOG_10) + 1 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  (  ( int )   ( log ( value )  / LOG_10 ) )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^}  if  ( value < 2682 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P9_Replace_Statement]^} else if  ( size <= 19 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P15_Unwrap_Block]^digits = 4;^176^177^178^179^180^161^185^} else if  ( value < 10000 )  { digits = 4; } else { digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1; }^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P16_Remove_Block]^^176^177^178^179^180^161^185^} else if  ( value < 10000 )  { digits = 4; } else { digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1; }^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 1000 )  {     digits = 3; }else     if  ( value < 10000 )  {         digits = 4;     }else {         digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1;     }^176^^^^^161^185^[Delete]^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P1_Replace_Type]^digits =  (  short  )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  >=  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  ( int )  ( Math.log ( value )  - LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_0 )  + ;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^digits =  ( int )  ( Math.log ( size )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_1 / 10 )  + 1 / 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 10000 )  {     digits = 4; }else {     digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1; }^179^^^^^161^185^[Delete]^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^(  ( int )  ( Math.log ( value )  / LOG_10 )  + 1 )  )  )  )  ) ;digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = 5;^177^^^^^161^185^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 1;^177^^^^^161^185^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^digits = 3;digits = 4;^177^^^^^161^185^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = value;^177^^^^^161^185^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 0;^177^^^^^161^185^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  >  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_digits0 )  + digits;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_40 )  + 4;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = d;^175^^^^^161^185^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 3 / 4;^175^^^^^161^185^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^digits = 4;digits = 3;^175^^^^^161^185^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 9998 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < -30000 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  <  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  ( int )  ( Math.log ( value )  * LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_d0 )  + d;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_1L0 )  + 1L;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = -4;^177^^^^^161^185^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 3;^177^^^^^161^185^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size >= digits; size-- )  {^181^^^^^161^185^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; value > digits; size-- )  {^181^^^^^161^185^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; size > value; size-- )  {^181^^^^^161^185^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; digits > size; size-- )  {^181^^^^^161^185^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P7_Replace_Invocation]^out .write ( value )  ;^182^^^^^161^185^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^out .write ( digits )  ;^182^^^^^161^185^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^182^^^^^161^185^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;out.write ( '0' ) ;^182^^^^^161^185^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;out.write ( '0' ) ;^182^^^^^161^185^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( value + '0' ) ;out.write ( '0' ) ;^182^^^^^161^185^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '0' ) ;out.write ( '0' ) ;^182^^^^^161^185^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;out.write ( '0' ) ;^182^^^^^161^185^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = value;^175^^^^^161^185^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 3 << 3;^175^^^^^161^185^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = -1;^177^^^^^161^185^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  ||  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_20 )  + 2;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P1_Replace_Type]^short  digits;^173^^^^^161^185^int digits;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^out.write ( Integer.toString ( size )  ) ;^184^^^^^161^185^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P7_Replace_Invocation]^out .write ( digits )  ;^184^^^^^161^185^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^184^^^^^161^185^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( Long.toString ( value )  ) ;out.write ( Integer.toString ( value )  ) ;^184^^^^^161^185^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( Long.toString ( value )  ) ;out.write ( Integer.toString ( value )  ) ;^184^^^^^161^185^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( Integer.toString ( value )  ) ;out.write ( Integer.toString ( value )  ) ;^184^^^^^161^185^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size >= 2; size-- )  {^162^^^^^147^177^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > -2; size-- )  {^162^^^^^147^177^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; value > 2; size-- )  {^162^^^^^147^177^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^163^^^^^148^178^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;out.write ( '0' ) ;^163^^^^^148^178^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;out.write ( '0' ) ;^163^^^^^148^178^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( value + '0' ) ;out.write ( '0' ) ;^163^^^^^148^178^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '0' ) ;out.write ( '0' ) ;^163^^^^^148^178^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;out.write ( '0' ) ;^163^^^^^148^178^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P1_Replace_Type]^short  d =  (  ( value + 1 )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^int d =  (  ( value + 1 )  * 13421772 )   >=  27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^int - d =  (  ( value + 1 )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^int d =  (  ( value  >=  1 )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + value )  * value342value772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * value )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> 25;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^int d =  (  ( size + 1 )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( d  ||  '0' ) ;^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^out.write ( value + '0' ) ;^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;out.write ( d + '0' ) ;^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;out.write ( d + '0' ) ;^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;out.write ( d + '0' ) ;^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( value + '0' ) ;out.write ( d + '0' ) ;^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '0' ) ;out.write ( d + '0' ) ;^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value -  <<  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value  |   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value  <<   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value -  ( d  ==  3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value -  ( d << 3 )  -  ( d  &  1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^out.write ( value -  ( d << -6 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^out.write ( size -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^out.write ( value -  ( value << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^out.write ( value -  ( size << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^if  ( value <= 1000 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^if  ( value == 1000 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < 1007 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < size000 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^if  ( size < 1000 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( value < 10000 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  ( int log(value) / LOG_10) + 1 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^if  (  ( int )   ( log ( value )  / LOG_10 ) )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^if  ( value < 710 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P9_Replace_Statement]^if  ( value < 0 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P9_Replace_Statement]^if  ( value < 10 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 10000 )  {     digits = 4; }else {     digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1; }^174^^^^^159^189^[Delete]^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^} else if  ( value > 10000 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < size )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < value0000 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^} else if  ( size < 10000 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  ( int log(value) / LOG_10) + 1 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else if  (  ( int )   ( log ( value )  / LOG_10 ) )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P6_Replace_Expression]^} else {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P9_Replace_Statement]^} else if  ( size <= 19 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P15_Unwrap_Block]^digits = 4;^176^177^178^179^180^161^191^} else if  ( value < 10000 )  { digits = 4; } else { digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1; }^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P16_Remove_Block]^^176^177^178^179^180^161^191^} else if  ( value < 10000 )  { digits = 4; } else { digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1; }^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 1000 )  {     digits = 3; }else     if  ( value < 10000 )  {         digits = 4;     }else {         digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1;     }^176^^^^^161^191^[Delete]^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P1_Replace_Type]^digits =  (  long  )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  >  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  ( int )  ( Math.log ( value )  * LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  ;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^digits =  ( int )  ( Math.log ( size )  / LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_20 )  + 2;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 10000 )  {     digits = 4; }else {     digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1; }^179^^^^^176^180^[Delete]^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^(  ( int )  ( Math.log ( value )  / LOG_10 )  + 1 )  )  )  )  ) ;digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = digits;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 1;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^digits = 3;digits = 4;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = 9;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 0;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P1_Replace_Type]^digits =  (  short  )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  >>  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  ( int )  ( Math.log ( value )  + LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_value0 )  + value;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^digits =  ( int )  ( Math.log ( size )  / LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_1 - 30 )  + 1 - 3;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P13_Insert_Block]^if  ( value < 10000 )  {     digits = 4; }else {     digits =  (  ( int )   (  ( log ( value )  )  /  ( LOG_10 )  )  )  + 1; }^179^^^^^164^194^[Delete]^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^(  ( int )  ( Math.log ( value )  / LOG_10 )  + 1 )  )  )  )  ) ;digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = digits;^175^^^^^160^190^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 3 - 0;^175^^^^^160^190^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^digits = 4;digits = 3;^175^^^^^160^190^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^} else if  ( value <= 10000 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 10001 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 70000 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P1_Replace_Type]^digits =  (  short  )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  >=  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_40 )  + 4;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 5;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size == 2; size-- )  {^162^^^^^147^177^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > 3; size-- )  {^162^^^^^147^177^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^out .write ( d )  ;^163^^^^^148^178^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size >= digits; size-- )  {^181^^^^^166^196^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; value > digits; size-- )  {^181^^^^^166^196^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; size > value; size-- )  {^181^^^^^166^196^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; digits > size; size-- )  {^181^^^^^166^196^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^182^^^^^167^197^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;out.write ( '0' ) ;^182^^^^^167^197^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;out.write ( '0' ) ;^182^^^^^167^197^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( value + '0' ) ;out.write ( '0' ) ;^182^^^^^167^197^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '0' ) ;out.write ( '0' ) ;^182^^^^^167^197^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;out.write ( '0' ) ;^182^^^^^167^197^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = 8;^175^^^^^160^190^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 3 - 4;^175^^^^^160^190^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = -1;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 3;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  !=  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  ( int )  ( Math.log ( value )  - LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_digits0 )  + digits;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_30 )  + 3;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^int d =  (  ( value + 1 )  * 13421772 )    instanceof   27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^int / d =  (  ( value + 1 )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^int d =  (  ( value  >>  1 )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value  )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421774 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> 30;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P1_Replace_Type]^long  digits;^173^^^^^158^188^int digits;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P7_Replace_Invocation]^out .write ( value )  ;^163^^^^^148^178^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( d  ==  '0' ) ;^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value -  |  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value  >   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value -  ( d   instanceof   3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^out.write ( value -  ( d << -5 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^out.write ( value -  ( d << 3 )  -  ( d << size )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^out.write ( d -  ( value << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^out.write ( Integer.toString ( size )  ) ;^184^^^^^169^199^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P7_Replace_Invocation]^out .write ( d )  ;^184^^^^^169^199^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^184^^^^^169^199^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( Long.toString ( value )  ) ;out.write ( Integer.toString ( value )  ) ;^184^^^^^169^199^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( Long.toString ( value )  ) ;out.write ( Integer.toString ( value )  ) ;^184^^^^^169^199^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( Integer.toString ( value )  ) ;out.write ( Integer.toString ( value )  ) ;^184^^^^^169^199^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size < 1; size-- )  {^157^^^^^142^172^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > ; size-- )  {^157^^^^^142^172^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^for  ( ; value > 1; size-- )  {^157^^^^^142^172^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P7_Replace_Invocation]^out .write ( d )  ;^158^^^^^143^173^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^158^^^^^143^173^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;out.write ( '0' ) ;^158^^^^^143^173^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;out.write ( '0' ) ;^158^^^^^143^173^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( value + '0' ) ;out.write ( '0' ) ;^158^^^^^143^173^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^buf.append ( '0' ) ;out.write ( '0' ) ;^158^^^^^143^173^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;out.write ( '0' ) ;^158^^^^^143^173^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P7_Replace_Invocation]^out .write ( size )  ;^158^^^^^143^173^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value  !=  '0' ) ;^160^^^^^145^175^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P5_Replace_Variable]^out.write ( size + '0' ) ;^160^^^^^145^175^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P14_Delete_Statement]^^160^^^^^145^175^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;out.write ( value + '0' ) ;^160^^^^^145^175^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;out.write ( value + '0' ) ;^160^^^^^145^175^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;out.write ( value + '0' ) ;^160^^^^^145^175^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^} else if  ( value > 100 )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < size )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^}  if  ( value < 100L )  {^161^^^^^146^176^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^if  ( value == 1000 )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < 996 )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < value000 )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^if  ( value < 971 )  {^174^^^^^161^185^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^} else if  ( value > 10000 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < value )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 20000 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  !=  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  ( int )  ( Math.log ( value )  + LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  ;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_00 )  + 0;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 4 - 4;^177^^^^^161^185^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = digits;^177^^^^^161^185^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 4 * 1;^177^^^^^161^185^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  &  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_1 >>> 30 )  + 1 >>> 3;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = size;^175^^^^^161^185^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 3L;^175^^^^^161^185^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 10003 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < value0000 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^} else if  ( value < 7530 )  {^176^^^^^161^185^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P1_Replace_Type]^digits =  (  long  )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  <=  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_size0 )  + size;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_1 >>> 00 )  + 1 >>> 0;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = d;^177^^^^^161^185^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P7_Replace_Invocation]^out .write ( d )  ;^182^^^^^161^185^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = 7;^175^^^^^161^185^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 2;^175^^^^^161^185^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_30 )  + 3;^179^^^^^161^185^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P1_Replace_Type]^long  digits;^173^^^^^161^185^int digits;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P7_Replace_Invocation]^out .write ( value )  ;^184^^^^^161^185^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > 10; size-- )  {^162^^^^^147^177^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^int d =  (  ( value + 1 )  * 13421772 )   &  27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^int d =  (  ( value   instanceof   1 )  * 13421772 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421763 )  >> 27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> 21;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( d  >  '0' ) ;^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P7_Replace_Invocation]^out .write ( size )  ;^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value -  ^  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value  >>   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value -  ( d  |  3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value -  ( d << 3 )  -  ( d  >=  1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^out.write ( value -  ( d << -1 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^out.write ( value -  ( d << 3 )  -  ( d << digits )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < 1001 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^if  ( value < d000 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^if  ( value < 1000 / 1 )  {^174^^^^^159^189^if  ( value < 1000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < d )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < -50000 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^} else if  ( value < 2 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  <  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = size;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 4 - 2;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = value;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  &  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  ;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_00 )  + 0;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = 5;^175^^^^^160^190^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 3 / 2;^175^^^^^160^190^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < 9999 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^} else if  ( value < d0000 )  {^176^^^^^161^191^} else if  ( value < 10000 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  &  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits =  ( int )  ( Math.log ( value )  / LOG_size0 )  + size;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_30 )  + 3;^179^^^^^176^180^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^digits = ;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 4 / 2;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > d; size-- )  {^157^^^^^142^172^for  ( ; size > 1; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^out .write ( value )  ;^158^^^^^143^173^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^for  ( ; size < 2; size-- )  {^162^^^^^147^177^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^for  ( ; size > 5; size-- )  {^162^^^^^147^177^for  ( ; size > 2; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 3 * 3;^175^^^^^160^190^digits = 3;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits = 6;^177^^^^^162^192^digits = 4;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^digits =  ||  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^digits =  ( int )  ( Math.log ( value )  / LOG_1L0 )  + 1L;^179^^^^^164^194^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^int d =  (  ( value + 1 )  * 13421772 )   >  27;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> 33;^168^^^^^153^183^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P1_Replace_Type]^short  digits;^173^^^^^158^188^int digits;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value  <<  '0' ) ;^160^^^^^145^175^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( d   instanceof   '0' ) ;^169^^^^^154^184^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value -  ==  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value   instanceof    ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value  <   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P2_Replace_Operator]^out.write ( value -  ( d << 3 )  -  ( d   instanceof   1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^out.write ( value -  ( d << 9 )  -  ( d << 1 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P3_Replace_Literal]^out.write ( value -  ( d << 3 )  -  ( d << 3 )  + '0' ) ;^171^^^^^156^186^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P8_Replace_Mix]^out .write ( value )  ;^182^^^^^167^197^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out int value int size [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  digits  size  value  
[P1_Replace_Type]^short  intValue =  (  short  ) value;^201^^^^^200^225^int intValue =  ( int ) value;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^if  ( intValue > value )  {^202^^^^^200^225^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^if  ( size == value )  {^202^^^^^200^225^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( size <= 19 )  {^202^^^^^200^225^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( value < 0 )  {^202^^^^^200^225^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( value != MIN_VALUE )  {^202^^^^^200^225^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( size > 19 )  {^202^^^^^200^225^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( int log(value) / LOG_10) + 1 )  {^202^^^^^200^225^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  (  ( int )   ( log ( value )  / LOG_10 ) )  {^202^^^^^200^225^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( size > digits )  {^202^^^^^200^225^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^} else if  ( size > 19 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^} else if  ( size <= size )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^} else if  ( size <= 11 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^} else if  ( size <= intValue9 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^} else if  ( value < 0 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^} else if  ( value != MIN_VALUE )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^} else if  ( int log(value) / LOG_10) + 1 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^} else if  (  ( int )   ( log ( value )  / LOG_10 ) )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^} else if  ( size > digits )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^} else {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^} else if  ( size <= 0  )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P9_Replace_Statement]^} else if  ( value < 10000 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P9_Replace_Statement]^} else if  ( value < 100 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^if  ( value > 0 )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^if  ( value < intValue )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( value != MIN_VALUE )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( size > 19 )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^if  ( value < 1 )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P9_Replace_Statement]^if  ( value < 1000 )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P9_Replace_Statement]^if  ( value < 10 )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^if  ( value <= Long.MIN_VALUE )  {^209^^^^^200^225^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P6_Replace_Expression]^if  ( size > 19 )  {^209^^^^^200^225^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P9_Replace_Statement]^if  ( value != Integer.MIN_VALUE )  {^209^^^^^200^225^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P15_Unwrap_Block]^value = -value;^209^210^211^212^213^200^225^if  ( value != Long.MIN_VALUE )  { value = -value; } else { for  ( ; size > 19; size-- )  { out.write ( '0' ) ; }^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P16_Remove_Block]^^209^210^211^212^213^200^225^if  ( value != Long.MIN_VALUE )  { value = -value; } else { for  ( ; size > 19; size-- )  { out.write ( '0' ) ; }^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^for  ( ; size == 19; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > 14; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^for  ( ; intValue > 19; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^213^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;out.write ( '0' ) ;^213^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;out.write ( '0' ) ;^213^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( value + '0' ) ;out.write ( '0' ) ;^213^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append ( '0' ) ;out.write ( '0' ) ;^213^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;out.write ( '0' ) ;^213^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^215^216^^^^200^225^out.write ( "9223372036854775808" ) ; return;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append ( "9223372036854775808" ) ;out.write ( "9223372036854775808" ) ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^value =  -null;^210^^^^^200^225^value = -value;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^for  ( ; size >= 19; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > 22; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^out .write ( intValue )  ;^213^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P7_Replace_Invocation]^out .write ( size )  ;^208^^^^^200^225^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^208^^^^^200^225^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;out.write ( '-' ) ;^208^^^^^200^225^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;out.write ( '-' ) ;^208^^^^^200^225^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( value + '0' ) ;out.write ( '-' ) ;^208^^^^^200^225^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append ( '0' ) ;out.write ( '-' ) ;^208^^^^^200^225^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;out.write ( '-' ) ;^208^^^^^200^225^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^out .write ( digits )  ;^213^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^out.write ( "547758223372036854775808" ) ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P7_Replace_Invocation]^out .write ( intValue )  ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^if  ( value >= Long.MIN_VALUE )  {^209^^^^^200^225^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^if  ( value = Long.MIN_VALUE )  {^209^^^^^200^225^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > size; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^out.write ( "922337223372036854775808" ) ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^out .write ( size )  ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > intValue; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^out .write ( size )  ;^213^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^for  ( ; size >= digits; size-- )  {^220^^^^^200^225^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^for  ( ; intValue > digits; size-- )  {^220^^^^^200^225^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^for  ( ; size > size; size-- )  {^220^^^^^200^225^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^for  ( ; digits > size; size-- )  {^220^^^^^200^225^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^221^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;out.write ( '0' ) ;^221^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;out.write ( '0' ) ;^221^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( value + '0' ) ;out.write ( '0' ) ;^221^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append ( '0' ) ;out.write ( '0' ) ;^221^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;out.write ( '0' ) ;^221^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P1_Replace_Type]^long  digits =  (  long  )  ( Math.log ( value )  / LOG_10 )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^int digits =  ^  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^int digits =  ( int )  ( Math.log ( value )  - LOG_10 )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  ;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^int digits =  ( int )  ( Math.log ( LOG_10 )  / value )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P7_Replace_Invocation]^out .write ( digits )  ;^208^^^^^200^225^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^out.write ( "33720368" ) ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^(  ( int )  ( Math.log ( value )  / LOG_10 )  + 1 )  )  )  )  ) ;int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P7_Replace_Invocation]^out .write ( digits )  ;^221^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^223^^^^^200^225^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( Integer.toString ( value )  ) ;out.write ( Long.toString ( value )  ) ;^223^^^^^200^225^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append ( Long.toString ( value )  ) ;out.write ( Long.toString ( value )  ) ;^223^^^^^200^225^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append ( Integer.toString ( value )  ) ;out.write ( Long.toString ( value )  ) ;^223^^^^^200^225^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^205^^^^^200^225^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^out.write ( Integer.toString ( value )  ) ;out.write ( Long.toString ( value )  ) ;^205^^^^^200^225^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append ( Long.toString ( value )  ) ;out.write ( Long.toString ( value )  ) ;^205^^^^^200^225^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^buf.append ( Integer.toString ( value )  ) ;out.write ( Long.toString ( value )  ) ;^205^^^^^200^225^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^if  ( value == 0 )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > 18; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^out.write ( "922337203685477580" ) ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^out.write ( "3223372036854775808" ) ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^if  ( value == Long.MIN_VALUE )  {^209^^^^^200^225^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^for  ( ; size < 19; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > 26; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^out.write ( "2337203685477" ) ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^for  ( ; size > intValue; size-- )  {^220^^^^^200^225^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P1_Replace_Type]^short  digits =  (  short  )  ( Math.log ( value )  / LOG_10 )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^int digits =  ( int )  ( Math.log ( value )  + LOG_10 )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^int digits =  ( int )  ( Math.log ( value )  / LOG_digits0 )  + digits;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P7_Replace_Invocation]^out .write ( intValue )  ;^205^^^^^200^225^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^out.write ( "92233720223372036854775808" ) ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P7_Replace_Invocation]^out .write ( digits )  ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^out .write ( intValue )  ;^221^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P7_Replace_Invocation]^out .write ( intValue )  ;^223^^^^^200^225^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^writePaddedInteger ( out, digits, size ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^writePaddedInteger ( out, intValue, intValue ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^writePaddedInteger (  intValue, size ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^writePaddedInteger ( out,  size ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^writePaddedInteger ( out, intValue ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^writePaddedInteger ( intValue, out, size ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^writePaddedInteger ( out, size, intValue ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^writePaddedInteger ( out, intValue, digits ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P14_Delete_Statement]^^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^writeUnpaddedInteger ( out, intValue ) ;writePaddedInteger ( out, intValue, size ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^appendUnpaddedInteger ( buf, intValue ) ;writePaddedInteger ( out, intValue, size ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P11_Insert_Donor_Statement]^appendPaddedInteger ( buf, intValue, size ) ;writePaddedInteger ( out, intValue, size ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^} else if  ( size < 19 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^} else if  ( size <= digits )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^} else if  ( size <= 25 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^} else if  ( size <= digits9 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^} else if  ( intValue <= 19 )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^}  if  ( size <= 0  )  {^204^^^^^200^225^} else if  ( size <= 19 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^if  ( value <= 0 )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^if  ( value < digits )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^if  ( value < 3 )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > ; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^out.write ( "9223372036854775808854" ) ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^out.write ( "922337203685477580892233" ) ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^out .write ( size )  ;^221^^^^^200^225^out.write ( '0' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^int digits =  >>  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^int digits =  ( int )  ( Math.log ( value )  / LOG_intValue0 )  + intValue;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^out .write ( intValue )  ;^208^^^^^200^225^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^out.write ( "80223372036854775808" ) ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P7_Replace_Invocation]^out .write ( digits )  ;^223^^^^^200^225^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^out .write ( size )  ;^223^^^^^200^225^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^out .write ( size )  ;^205^^^^^200^225^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^if  ( value < 2 )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^if  ( value < 0 - 3 )  {^207^^^^^200^225^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^out.write ( "2" ) ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > 13; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^out.write ( "9223372036854775808922337203685" ) ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^out.write ( "922337203685" ) ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^for  ( ; size > 21; size-- )  {^212^^^^^200^225^for  ( ; size > 19; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^for  ( ; size == digits; size-- )  {^220^^^^^200^225^for  ( ; size > digits; size-- )  {^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^int digits =  <  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^int digits =  ( int )  ( Math.log ( value )  / LOG_0 )  + ;^219^^^^^200^225^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P5_Replace_Variable]^writePaddedInteger ( size, intValue, out ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P8_Replace_Mix]^writePaddedInteger ( out, size, size ) ;^203^^^^^200^225^writePaddedInteger ( out, intValue, size ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P3_Replace_Literal]^out.write ( "9223372036854" ) ;^215^^^^^200^225^out.write ( "9223372036854775808" ) ;^[CLASS] FormatUtils  [METHOD] writePaddedInteger [RETURN_TYPE] void   Writer out long value int size [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  digits  intValue  size  
[P2_Replace_Operator]^if  ( value <= 0 )  {^236^^^^^235^258^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^if  ( value < value )  {^236^^^^^235^258^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P5_Replace_Variable]^if  ( d < 0 )  {^236^^^^^235^258^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^if  ( value != MIN_VALUE )  {^236^^^^^235^258^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^if  ( "" + - (  ( long )   ( MIN_VALUE )  ) )  {^236^^^^^235^258^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P8_Replace_Mix]^if  ( value < 2 )  {^236^^^^^235^258^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P9_Replace_Statement]^if  ( value < 1000 )  {^236^^^^^235^258^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P9_Replace_Statement]^if  ( value < 10 )  {^236^^^^^235^258^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P13_Insert_Block]^if  ( value < 0 )  {     buf.append ( '-' ) ;     if  ( value !=  ( MIN_VALUE )  )  {         value = -value;     }else {         for  ( ; size > 19; size-- )  {             buf.append ( '0' ) ;         }         buf.append ( "9223372036854775808" ) ;         return ;     } }^236^^^^^235^258^[Delete]^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P13_Insert_Block]^if  ( value !=  ( MIN_VALUE )  )  {     value = -value; }else {     out.write (  ( "" +  ( - (  ( long )   ( MIN_VALUE )  )  )  )  ) ;     return ; }^236^^^^^235^258^[Delete]^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P13_Insert_Block]^if  ( value < 0 )  {     out.write ( '-' ) ;     if  ( value !=  ( MIN_VALUE )  )  {         value = -value;     }else {         out.write (  ( "" +  ( - (  ( long )   ( MIN_VALUE )  )  )  )  ) ;         return ;     } }^236^^^^^235^258^[Delete]^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P13_Insert_Block]^if  ( value < 0 )  {     buf.append ( '-' ) ;     if  ( value !=  ( MIN_VALUE )  )  {         value = -value;     }else {         for  ( ; size > 10; size-- )  {             buf.append ( '0' ) ;         }         buf.append (  ( "" +  ( - (  ( long )   ( MIN_VALUE )  )  )  )  ) ;         return ;     } }^236^^^^^235^258^[Delete]^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P13_Insert_Block]^if  ( value < 0 )  {     out.write ( '-' ) ;     if  ( value !=  ( MIN_VALUE )  )  {         value = -value;     }else {         for  ( ; size > 19; size-- )  {             out.write ( '0' ) ;         }         out.write ( "9223372036854775808" ) ;         return ;     } }^236^^^^^235^258^[Delete]^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P13_Insert_Block]^if  ( value !=  ( MIN_VALUE )  )  {     value = -value; }else {     buf.append (  ( "" +  ( - (  ( long )   ( MIN_VALUE )  )  )  )  ) ;     return ; }^236^^^^^235^258^[Delete]^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P13_Insert_Block]^if  ( value < 0 )  {     out.write ( '-' ) ;     if  ( value !=  ( MIN_VALUE )  )  {         value = -value;     }else {         for  ( ; size > 10; size-- )  {             out.write ( '0' ) ;         }         out.write (  ( "" +  ( - (  ( long )   ( MIN_VALUE )  )  )  )  ) ;         return ;     } }^236^^^^^235^258^[Delete]^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^if  ( value <= Integer.MIN_VALUE )  {^238^^^^^235^258^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P5_Replace_Variable]^if  ( d != Integer.MIN_VALUE )  {^238^^^^^235^258^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P5_Replace_Variable]^if  ( value != Integer.value )  {^238^^^^^235^258^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^if  ( "" + - (  ( long )   ( MIN_VALUE )  ) )  {^238^^^^^235^258^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P9_Replace_Statement]^if  ( value != Long.MIN_VALUE )  {^238^^^^^235^258^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P15_Unwrap_Block]^value = -value;^238^239^240^241^242^235^258^if  ( value != Integer.MIN_VALUE )  { value = -value; } else { buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ; return; }^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P16_Remove_Block]^^238^239^240^241^242^235^258^if  ( value != Integer.MIN_VALUE )  { value = -value; } else { buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ; return; }^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P14_Delete_Statement]^^241^^^^^235^258^buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ;^241^^^^^235^258^buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P5_Replace_Variable]^d = -value;^239^^^^^235^258^value = -value;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P8_Replace_Mix]^value =  -d;^239^^^^^235^258^value = -value;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P7_Replace_Invocation]^buf .append ( 2 )  ;^237^^^^^235^258^buf.append ( '-' ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P14_Delete_Statement]^^237^^^^^235^258^buf.append ( '-' ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;buf.append ( '-' ) ;^237^^^^^235^258^buf.append ( '-' ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;buf.append ( '-' ) ;^237^^^^^235^258^buf.append ( '-' ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^buf.append ( '0' ) ;buf.append ( '-' ) ;^237^^^^^235^258^buf.append ( '-' ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;buf.append ( '-' ) ;^237^^^^^235^258^buf.append ( '-' ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P14_Delete_Statement]^^241^242^^^^235^258^buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ; return;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^if  ( value >= Integer.MIN_VALUE )  {^238^^^^^235^258^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P8_Replace_Mix]^if  ( value != Integer.d )  {^238^^^^^235^258^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^if  ( value <= 10 )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^if  ( value < 5 )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^if  ( value < value0 )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^if  ( value < 50 )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^if  (  ( char )   ( value + '0' ) )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^if  ( value < 100 )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^if  ( (value + 1) * 13421772 >> 27 )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^if  ( value + 1 * 13421772 )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^if  ( value + 1 )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^if  (  ( char )   ( d + '0' ) )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^if  (  ( char )   (  ( value -  ( d << 3 )  )  -  ( d << 1 )  + '0' ) )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^if  ( value -  ( d << 3 )  - d << 1 )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^if  ( value - d << 3 )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^if  ( d << 3 )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^if  ( d << 1 )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P8_Replace_Mix]^if  ( value < 10L )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P9_Replace_Statement]^if  ( value < 0 )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P9_Replace_Statement]^if  ( value < 1000 )  {^245^^^^^235^258^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^} else if  ( value <= 100 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^} else if  ( value < value )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^} else if  ( value < -300 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^} else if  ( value < 700 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^} else if  ( (value + 1) * 13421772 >> 27 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^} else if  ( value + 1 * 13421772 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^} else if  ( value + 1 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^} else if  (  ( char )   ( d + '0' ) )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^} else if  (  ( char )   (  ( value -  ( d << 3 )  )  -  ( d << 1 )  + '0' ) )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^} else if  ( value -  ( d << 3 )  - d << 1 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^} else if  ( value - d << 3 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^} else if  ( d << 3 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^} else if  ( d << 1 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P6_Replace_Expression]^} else {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P8_Replace_Mix]^}  if  ( value < 20 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P9_Replace_Statement]^} else if  ( size <= 19 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P8_Replace_Mix]^buf.append ( Integer.toString ( d )  ) ;^256^^^^^235^258^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P14_Delete_Statement]^^256^^^^^235^258^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( Long.toString ( value )  ) ;buf.append ( Integer.toString ( value )  ) ;^256^^^^^235^258^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( Integer.toString ( value )  ) ;buf.append ( Integer.toString ( value )  ) ;^256^^^^^235^258^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )  ( value + '0' )  ) ;buf.append ( Integer.toString ( value )  ) ;^256^^^^^235^258^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )   ( d + '0' )  ) ;buf.append ( Integer.toString ( value )  ) ;^256^^^^^235^258^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^buf.append ( Long.toString ( value )  ) ;buf.append ( Integer.toString ( value )  ) ;^256^^^^^235^258^buf.append ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P1_Replace_Type]^short  d =  (  ( value + 1 )  * 13421772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^int d =  (  ( value + 1 )  * 13421772 )   <  27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^int - d =  (  ( value + 1 )  * 13421772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^int d =  (  ( value  ^  1 )  * 13421772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + value )  * value342value772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> d;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( d  <  '0' )  ) ;^252^^^^^235^258^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P5_Replace_Variable]^buf.append (  ( char )   ( value + '0' )  ) ;^252^^^^^235^258^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P14_Delete_Statement]^^252^^^^^235^258^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )  ( value + '0' )  ) ;buf.append (  ( char )   ( d + '0' )  ) ;^252^^^^^235^258^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^buf.append ( Long.toString ( value )  ) ;buf.append (  ( char )   ( d + '0' )  ) ;^252^^^^^235^258^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;buf.append (  ( char )   ( d + '0' )  ) ;^252^^^^^235^258^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^buf.append ( Integer.toString ( value )  ) ;buf.append (  ( char )   ( d + '0' )  ) ;^252^^^^^235^258^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (   instanceof   ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value  &   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value  !=   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value -  ( d  >=  3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d  |  1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^buf.append (  ( char )   ( value -  ( d << value )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 8 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P5_Replace_Variable]^buf.append (  ( char )   ( d -  ( value << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P14_Delete_Statement]^^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )  ( value + '0' )  ) ;buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )   ( d + '0' )  ) ;buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P1_Replace_Type]^long  d =  (  ( value + 1 )  * 13421772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^int d =  (  ( value + 1 )  * 13421772 )   ==  27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^int d =  (  ( value  &  1 )  * 13421772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + d )  * d342d772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421766 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> 32;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( d  >  '0' )  ) ;^252^^^^^235^258^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  &&  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value  >=   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value -  ( d  |  3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d  &  1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^buf.append (  ( char )   ( value -  ( d << d )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << d )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P8_Replace_Mix]^buf.append (  ( char )   ( value -  ( value << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  !=  ( char )  ( value + '0' )  ) ;^246^^^^^235^258^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P5_Replace_Variable]^buf.append (  ( char )  ( d + '0' )  ) ;^246^^^^^235^258^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P14_Delete_Statement]^^246^^^^^235^258^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )   ( d + '0' )  ) ;buf.append (  ( char )  ( value + '0' )  ) ;^246^^^^^235^258^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^buf.append ( Long.toString ( value )  ) ;buf.append (  ( char )  ( value + '0' )  ) ;^246^^^^^235^258^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;buf.append (  ( char )  ( value + '0' )  ) ;^246^^^^^235^258^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P11_Insert_Donor_Statement]^buf.append ( Integer.toString ( value )  ) ;buf.append (  ( char )  ( value + '0' )  ) ;^246^^^^^235^258^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^} else if  ( value == 100 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^} else if  ( value < 97 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^} else if  ( value < 800 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^} else if  ( value < 900 )  {^247^^^^^235^258^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^int d =  (  ( value + 1 )  * 13421772 )   !=  27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^int d =  (  ( value  ==  1 )  * 13421772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * value )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> 19;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( d  <<  '0' )  ) ;^252^^^^^235^258^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  >=  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value  <=   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value  &&   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value -  ( d  ==  3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d  <=  1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^buf.append (  ( char )   ( value -  ( d << 4 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << value )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^int d =  (  ( value + 1 )  * 13421772 )    instanceof   27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^int / d =  (  ( value + 1 )  * 13421772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^int d =  (  ( value   instanceof   1 )  * 13421772 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421769 )  >> 27;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> value;^251^^^^^235^258^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  &&  ( char )  ( value + '0' )  ) ;^246^^^^^235^258^buf.append (  ( char )  ( value + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( d  &  '0' )  ) ;^252^^^^^235^258^buf.append (  ( char )   ( d + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  &  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value  ^   ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value -  ( d  ||  3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P2_Replace_Operator]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d  >>  1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P3_Replace_Literal]^buf.append (  ( char )   ( value -  ( d << 9 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P8_Replace_Mix]^buf.append (  ( char )   ( d -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^254^^^^^235^258^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf int value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  int  d  value  
[P1_Replace_Type]^long  intValue =  (  long  ) value;^269^^^^^268^275^int intValue =  ( int ) value;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P2_Replace_Operator]^if  ( intValue != value )  {^270^^^^^268^275^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P5_Replace_Variable]^if  ( value == intValue )  {^270^^^^^268^275^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P15_Unwrap_Block]^org.joda.time.format.FormatUtils.appendUnpaddedInteger(buf, intValue);^270^271^272^273^274^268^275^if  ( intValue == value )  { appendUnpaddedInteger ( buf, intValue ) ; } else { buf.append ( Long.toString ( value )  ) ; }^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P16_Remove_Block]^^270^271^272^273^274^268^275^if  ( intValue == value )  { appendUnpaddedInteger ( buf, intValue ) ; } else { buf.append ( Long.toString ( value )  ) ; }^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P13_Insert_Block]^if  ( intValue == value )  {     writeUnpaddedInteger ( out, intValue ) ; }else {     out.write ( toString ( value )  ) ; }^270^^^^^268^275^[Delete]^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P14_Delete_Statement]^^273^^^^^268^275^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P11_Insert_Donor_Statement]^out.write ( Long.toString ( value )  ) ;buf.append ( Long.toString ( value )  ) ;^273^^^^^268^275^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P11_Insert_Donor_Statement]^out.write ( Integer.toString ( value )  ) ;buf.append ( Long.toString ( value )  ) ;^273^^^^^268^275^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P11_Insert_Donor_Statement]^buf.append (  ( char )  ( value + '0' )  ) ;buf.append ( Long.toString ( value )  ) ;^273^^^^^268^275^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P11_Insert_Donor_Statement]^buf.append (  ( char )   ( d + '0' )  ) ;buf.append ( Long.toString ( value )  ) ;^273^^^^^268^275^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P11_Insert_Donor_Statement]^buf.append ( Integer.toString ( value )  ) ;buf.append ( Long.toString ( value )  ) ;^273^^^^^268^275^buf.append ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P5_Replace_Variable]^appendUnpaddedInteger (  intValue ) ;^271^^^^^268^275^appendUnpaddedInteger ( buf, intValue ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P5_Replace_Variable]^appendUnpaddedInteger ( buf ) ;^271^^^^^268^275^appendUnpaddedInteger ( buf, intValue ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P5_Replace_Variable]^appendUnpaddedInteger ( intValue, buf ) ;^271^^^^^268^275^appendUnpaddedInteger ( buf, intValue ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P14_Delete_Statement]^^271^^^^^268^275^appendUnpaddedInteger ( buf, intValue ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P11_Insert_Donor_Statement]^writeUnpaddedInteger ( out, intValue ) ;appendUnpaddedInteger ( buf, intValue ) ;^271^^^^^268^275^appendUnpaddedInteger ( buf, intValue ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P11_Insert_Donor_Statement]^writePaddedInteger ( out, intValue, size ) ;appendUnpaddedInteger ( buf, intValue ) ;^271^^^^^268^275^appendUnpaddedInteger ( buf, intValue ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P11_Insert_Donor_Statement]^appendPaddedInteger ( buf, intValue, size ) ;appendUnpaddedInteger ( buf, intValue ) ;^271^^^^^268^275^appendUnpaddedInteger ( buf, intValue ) ;^[CLASS] FormatUtils  [METHOD] appendUnpaddedInteger [RETURN_TYPE] void   StringBuffer buf long value [VARIABLES] StringBuffer  buf  boolean  double  LOG_10  long  value  int  intValue  
[P2_Replace_Operator]^if  ( value <= 0 )  {^288^^^^^285^310^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^if  ( value < -4 )  {^288^^^^^285^310^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P5_Replace_Variable]^if  ( d < 0 )  {^288^^^^^285^310^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^if  ( value != MIN_VALUE )  {^288^^^^^285^310^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^if  ( "" + - (  ( long )   ( MIN_VALUE )  ) )  {^288^^^^^285^310^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P8_Replace_Mix]^if  ( value < 2 )  {^288^^^^^285^310^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P9_Replace_Statement]^if  ( value < 1000 )  {^288^^^^^285^310^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P9_Replace_Statement]^if  ( value < 10 )  {^288^^^^^285^310^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^if  ( value <= Integer.MIN_VALUE )  {^290^^^^^285^310^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P5_Replace_Variable]^if  ( d != Integer.MIN_VALUE )  {^290^^^^^285^310^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^if  ( "" + - (  ( long )   ( MIN_VALUE )  ) )  {^290^^^^^285^310^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P8_Replace_Mix]^if  ( value != Integer.value )  {^290^^^^^285^310^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P9_Replace_Statement]^if  ( value != Long.MIN_VALUE )  {^290^^^^^285^310^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P15_Unwrap_Block]^value = -value;^290^291^292^293^294^285^310^if  ( value != Integer.MIN_VALUE )  { value = -value; } else { out.write ( "" + - ( long ) Integer.MIN_VALUE ) ; return; }^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P16_Remove_Block]^^290^291^292^293^294^285^310^if  ( value != Integer.MIN_VALUE )  { value = -value; } else { out.write ( "" + - ( long ) Integer.MIN_VALUE ) ; return; }^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P14_Delete_Statement]^^293^^^^^285^310^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^buf.append ( "" + - ( long ) Integer.MIN_VALUE ) ;out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;^293^^^^^285^310^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P12_Insert_Condition]^if  ( value != Integer.MIN_VALUE )  { out.write ( "" + - ( long ) Integer.MIN_VALUE ) ; }^293^^^^^285^310^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P5_Replace_Variable]^d = -value;^291^^^^^285^310^value = -value;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P8_Replace_Mix]^value =  -d;^291^^^^^285^310^value = -value;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P7_Replace_Invocation]^out .write ( d )  ;^289^^^^^285^310^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P14_Delete_Statement]^^289^^^^^285^310^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;out.write ( '-' ) ;^289^^^^^285^310^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;out.write ( '-' ) ;^289^^^^^285^310^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( value + '0' ) ;out.write ( '-' ) ;^289^^^^^285^310^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^buf.append ( '0' ) ;out.write ( '-' ) ;^289^^^^^285^310^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;out.write ( '-' ) ;^289^^^^^285^310^out.write ( '-' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P14_Delete_Statement]^^293^294^^^^285^310^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ; return;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^if  ( value == Integer.MIN_VALUE )  {^290^^^^^285^310^if  ( value != Integer.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P7_Replace_Invocation]^out .write ( d )  ;^293^^^^^285^310^out.write ( "" + - ( long ) Integer.MIN_VALUE ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^if  ( value <= 10 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^if  ( value <  )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^if  ( value < 80 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^if  ( value < -40 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^if  ( value + '0' )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^if  ( value < 100 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^if  ( (value + 1) * 13421772 >> 27 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^if  ( value + 1 * 13421772 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^if  ( value + 1 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^if  ( d + '0' )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^if  (  ( value -  ( d << 3 )  )  -  ( d << 1 )  + '0' )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^if  ( value -  ( d << 3 )  - d << 1 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^if  ( value - d << 3 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^if  ( d << 3 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^if  ( d << 1 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P8_Replace_Mix]^if  ( value < 8 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P9_Replace_Statement]^if  ( value < 0 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P9_Replace_Statement]^if  ( value < 1000 )  {^297^^^^^285^310^if  ( value < 10 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^} else if  ( value <= 100 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^} else if  ( value < d )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^} else if  ( value < value00 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^} else if  ( value < -300 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^} else if  ( (value + 1) * 13421772 >> 27 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^} else if  ( value + 1 * 13421772 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^} else if  ( value + 1 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^} else if  ( d + '0' )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^} else if  (  ( value -  ( d << 3 )  )  -  ( d << 1 )  + '0' )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^} else if  ( value -  ( d << 3 )  - d << 1 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^} else if  ( value - d << 3 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^} else if  ( d << 3 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^} else if  ( d << 1 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P6_Replace_Expression]^} else {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P8_Replace_Mix]^}  if  ( value < 34 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P9_Replace_Statement]^} else if  ( size <= 19 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P5_Replace_Variable]^out.write ( Integer.toString ( d )  ) ;^308^^^^^285^310^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P14_Delete_Statement]^^308^^^^^285^310^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( Long.toString ( value )  ) ;out.write ( Integer.toString ( value )  ) ;^308^^^^^285^310^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^buf.append ( Long.toString ( value )  ) ;out.write ( Integer.toString ( value )  ) ;^308^^^^^285^310^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^buf.append ( Integer.toString ( value )  ) ;out.write ( Integer.toString ( value )  ) ;^308^^^^^285^310^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P1_Replace_Type]^short  d =  (  ( value + 1 )  * 13421772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^int d =  (  ( value + 1 )  * 13421772 )   &  27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^int + d =  (  ( value + 1 )  * 13421772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^int d =  (  ( value  <  1 )  * 13421772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value +  )  * 342772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421766 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> 24;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( d   instanceof   '0' ) ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P5_Replace_Variable]^out.write ( value + '0' ) ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P7_Replace_Invocation]^out .write ( d )  ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P14_Delete_Statement]^^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;out.write ( d + '0' ) ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^buf.append ( '-' ) ;out.write ( d + '0' ) ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;out.write ( d + '0' ) ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( value + '0' ) ;out.write ( d + '0' ) ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^buf.append ( '0' ) ;out.write ( d + '0' ) ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( value -  ||  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( value  >=   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( value  <   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( value -  ( d  >=  3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( value -  ( d << 3 )  -  ( d   instanceof   1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^out.write ( value -  ( d << -5 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^out.write ( value -  ( d << 3 )  -  ( d << d )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P5_Replace_Variable]^out.write ( d -  ( value << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P14_Delete_Statement]^^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^buf.append (  ( char )   ( value -  ( d << 3 )  -  ( d << 1 )  + '0' )  ) ;out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^int d =  (  ( value  |  1 )  * 13421772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value  )  * 13421772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421764 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> d;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( d  ==  '0' ) ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P7_Replace_Invocation]^out .write ( value )  ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( value  &   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( value -  ( d  !=  3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( value -  ( d << 3 )  -  ( d  ^  1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^out.write ( value -  ( d << 9 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^out.write ( value -  ( d << 3 )  -  ( d << value )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P5_Replace_Variable]^out.write ( d -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( value  ==  '0' ) ;^298^^^^^285^310^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P5_Replace_Variable]^out.write ( d + '0' ) ;^298^^^^^285^310^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P14_Delete_Statement]^^298^^^^^285^310^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( '0' ) ;out.write ( value + '0' ) ;^298^^^^^285^310^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( '-' ) ;out.write ( value + '0' ) ;^298^^^^^285^310^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P11_Insert_Donor_Statement]^out.write ( d + '0' ) ;out.write ( value + '0' ) ;^298^^^^^285^310^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^} else if  ( value < value )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^} else if  ( value < 500 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^} else if  ( value < -500 )  {^299^^^^^285^310^} else if  ( value < 100 )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P7_Replace_Invocation]^out .write ( d )  ;^308^^^^^285^310^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^int d =  (  ( value + 1 )  * 13421772 )   <  27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^int d =  (  ( value   instanceof   1 )  * 13421772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + value )  * value342value772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421769 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421772 )  >> value;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( d  <<  '0' ) ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( value -  |  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( value  >>   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( value  &&   ( d << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( value -  ( d << 3 )  -  ( d  >=  1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^out.write ( value -  ( d << 6 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^out.write ( value -  ( d << 3 )  -  ( d << 8 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P5_Replace_Variable]^out.write ( value -  ( value << 3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^int d =  (  ( value + 1 )  * 13421772 )   ==  27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^int - d =  (  ( value + 1 )  * 13421772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^int d =  (  ( value  &&  1 )  * 13421772 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^int d =  (  ( value + 1 )  * 13421781 )  >> 27;^303^^^^^285^310^int d =  (  ( value + 1 )  * 13421772 )  >> 27;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( value  |  '0' ) ;^298^^^^^285^310^out.write ( value + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( d  &  '0' ) ;^304^^^^^285^310^out.write ( d + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( value -  ( d  <  3 )  -  ( d << 1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P2_Replace_Operator]^out.write ( value -  ( d << 3 )  -  ( d  >>  1 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P3_Replace_Literal]^out.write ( value -  ( d << 3 )  -  ( d << 6 )  + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P7_Replace_Invocation]^out .write ( d )   + '0' ) ;^306^^^^^285^310^out.write ( value -  ( d << 3 )  -  ( d << 1 )  + '0' ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P7_Replace_Invocation]^out .write ( value )  ;^308^^^^^285^310^out.write ( Integer.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out int value [VARIABLES] boolean  double  LOG_10  Writer  out  int  d  value  
[P1_Replace_Type]^short  intValue =  (  short  ) value;^323^^^^^320^329^int intValue =  ( int ) value;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P2_Replace_Operator]^if  ( intValue >= value )  {^324^^^^^320^329^if  ( intValue == value )  {^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P15_Unwrap_Block]^org.joda.time.format.FormatUtils.writeUnpaddedInteger(out, intValue);^324^325^326^327^328^320^329^if  ( intValue == value )  { writeUnpaddedInteger ( out, intValue ) ; } else { out.write ( Long.toString ( value )  ) ; }^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P16_Remove_Block]^^324^325^326^327^328^320^329^if  ( intValue == value )  { writeUnpaddedInteger ( out, intValue ) ; } else { out.write ( Long.toString ( value )  ) ; }^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P13_Insert_Block]^if  ( intValue == value )  {     appendUnpaddedInteger ( buf, intValue ) ; }else {     buf.append ( toString ( value )  ) ; }^324^^^^^320^329^[Delete]^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P8_Replace_Mix]^out .write ( intValue )  ;^327^^^^^320^329^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P14_Delete_Statement]^^327^^^^^320^329^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P11_Insert_Donor_Statement]^out.write ( Integer.toString ( value )  ) ;out.write ( Long.toString ( value )  ) ;^327^^^^^320^329^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P11_Insert_Donor_Statement]^buf.append ( Long.toString ( value )  ) ;out.write ( Long.toString ( value )  ) ;^327^^^^^320^329^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P11_Insert_Donor_Statement]^buf.append ( Integer.toString ( value )  ) ;out.write ( Long.toString ( value )  ) ;^327^^^^^320^329^out.write ( Long.toString ( value )  ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P5_Replace_Variable]^writeUnpaddedInteger (  intValue ) ;^325^^^^^320^329^writeUnpaddedInteger ( out, intValue ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P5_Replace_Variable]^writeUnpaddedInteger ( out ) ;^325^^^^^320^329^writeUnpaddedInteger ( out, intValue ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P5_Replace_Variable]^writeUnpaddedInteger ( intValue, out ) ;^325^^^^^320^329^writeUnpaddedInteger ( out, intValue ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P14_Delete_Statement]^^325^^^^^320^329^writeUnpaddedInteger ( out, intValue ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P11_Insert_Donor_Statement]^appendUnpaddedInteger ( buf, intValue ) ;writeUnpaddedInteger ( out, intValue ) ;^325^^^^^320^329^writeUnpaddedInteger ( out, intValue ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P11_Insert_Donor_Statement]^writePaddedInteger ( out, intValue, size ) ;writeUnpaddedInteger ( out, intValue ) ;^325^^^^^320^329^writeUnpaddedInteger ( out, intValue ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P11_Insert_Donor_Statement]^appendPaddedInteger ( buf, intValue, size ) ;writeUnpaddedInteger ( out, intValue ) ;^325^^^^^320^329^writeUnpaddedInteger ( out, intValue ) ;^[CLASS] FormatUtils  [METHOD] writeUnpaddedInteger [RETURN_TYPE] void   Writer out long value [VARIABLES] boolean  double  LOG_10  Writer  out  long  value  int  intValue  
[P2_Replace_Operator]^if  ( value <= 0 )  {^336^^^^^335^349^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P3_Replace_Literal]^if  ( value < 1 )  {^336^^^^^335^349^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P6_Replace_Expression]^if  ( value != MIN_VALUE )  {^336^^^^^335^349^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P6_Replace_Expression]^if  ( calculateDigitCount((-value)) + 1 )  {^336^^^^^335^349^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P8_Replace_Mix]^if  ( value < 3 )  {^336^^^^^335^349^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P9_Replace_Statement]^if  ( value < 1000 )  {^336^^^^^335^349^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P9_Replace_Statement]^if  ( value < 10 )  {^336^^^^^335^349^if  ( value < 0 )  {^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P15_Unwrap_Block]^if (value != (java.lang.Long.MIN_VALUE)) {    return (org.joda.time.format.FormatUtils.calculateDigitCount((-value))) + 1;}else {    return 20;};^336^337^338^339^340^335^349^if  ( value < 0 )  { if  ( value != Long.MIN_VALUE )  { return calculateDigitCount ( -value )  + 1; } else { return 20; }^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P16_Remove_Block]^^336^337^338^339^340^335^349^if  ( value < 0 )  { if  ( value != Long.MIN_VALUE )  { return calculateDigitCount ( -value )  + 1; } else { return 20; }^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P13_Insert_Block]^if  ( value !=  ( MIN_VALUE )  )  {     return  ( calculateDigitCount (  ( -value )  )  )  + 1; }else {     return 20; }^336^^^^^335^349^[Delete]^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P2_Replace_Operator]^if  ( value == Long.MIN_VALUE )  {^337^^^^^335^349^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P6_Replace_Expression]^if  ( calculateDigitCount((-value)) + 1 )  {^337^^^^^335^349^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P9_Replace_Statement]^if  ( value != Integer.MIN_VALUE )  {^337^^^^^335^349^if  ( value != Long.MIN_VALUE )  {^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P15_Unwrap_Block]^return (org.joda.time.format.FormatUtils.calculateDigitCount((-value))) + 1;^337^338^339^340^341^335^349^if  ( value != Long.MIN_VALUE )  { return calculateDigitCount ( -value )  + 1; } else { return 20; }^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P16_Remove_Block]^^337^338^339^340^341^335^349^if  ( value != Long.MIN_VALUE )  { return calculateDigitCount ( -value )  + 1; } else { return 20; }^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P13_Insert_Block]^if  ( value < 0 )  {     if  ( value !=  ( MIN_VALUE )  )  {         return  ( calculateDigitCount (  ( -value )  )  )  + 1;     }else {         return 20;     } }^337^^^^^335^349^[Delete]^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P3_Replace_Literal]^return ;^340^^^^^335^349^return 20;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P8_Replace_Mix]^return 20 << 2;^340^^^^^335^349^return 20;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P2_Replace_Operator]^return calculateDigitCount ( -value )  !=  + 1;^338^^^^^335^349^return calculateDigitCount ( -value )  + 1;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P3_Replace_Literal]^return calculateDigitCount ( -value )  ;^338^^^^^335^349^return calculateDigitCount ( -value )  + 1;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P13_Insert_Block]^if  ( value !=  ( MIN_VALUE )  )  {     return  ( calculateDigitCount (  ( -value )  )  )  + 1; }else {     return 20; }^338^^^^^335^349^[Delete]^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P14_Delete_Statement]^^338^^^^^335^349^return calculateDigitCount ( -value )  + 1;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P2_Replace_Operator]^return calculateDigitCount ( -value )  &  + 1;^338^^^^^335^349^return calculateDigitCount ( -value )  + 1;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P3_Replace_Literal]^return 19;^340^^^^^335^349^return 20;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P8_Replace_Mix]^return 20 / 0;^340^^^^^335^349^return 20;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P3_Replace_Literal]^return 11;^340^^^^^335^349^return 20;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P2_Replace_Operator]^return calculateDigitCount ( -value )  <  + 1;^338^^^^^335^349^return calculateDigitCount ( -value )  + 1;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P8_Replace_Mix]^return calculateDigitCount ( -value )   &  1;^338^^^^^335^349^return calculateDigitCount ( -value )  + 1;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P2_Replace_Operator]^return calculateDigitCount ( -value )  &&  + 1;^338^^^^^335^349^return calculateDigitCount ( -value )  + 1;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P8_Replace_Mix]^return calculateDigitCount ( -value )   &&  1;^338^^^^^335^349^return calculateDigitCount ( -value )  + 1;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P3_Replace_Literal]^return 14;^340^^^^^335^349^return 20;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P8_Replace_Mix]^return 20L;^340^^^^^335^349^return 20;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P2_Replace_Operator]^return ( value <= 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P2_Replace_Operator]^return ( value < 10 ? 1 : ( value <= 100 ? 2 : ( value < 1000 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P2_Replace_Operator]^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value <= 1000 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P3_Replace_Literal]^return ( value < 7 ? 1 : ( value < 70 ? 2 : ( value < 700 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P3_Replace_Literal]^return ( value < 70 ? 7 : ( value < 700 ? 2 : ( value < 7000 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P3_Replace_Literal]^return ( value < 10 ? 1 : ( value < 109 ? 2 : ( value < 1090 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P3_Replace_Literal]^return ( value < 10 ? 1 : ( value < 100 ? -3 : ( value < 1000 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P3_Replace_Literal]^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1007 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P3_Replace_Literal]^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 6 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P3_Replace_Literal]^return ( value < 60 ? 6 : ( value < 600 ? 2 : ( value < 6000 ? 3 :^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P8_Replace_Mix]^return true ;^343^344^345^346^^335^349^return ( value < 10 ? 1 : ( value < 100 ? 2 : ( value < 1000 ? 3 :^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P14_Delete_Statement]^^348^^^^^335^349^(  ( int )  ( Math.log ( value )  / LOG_10 )  + 1 )  )  )  )  ) ;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P11_Insert_Donor_Statement]^digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;(  ( int )  ( Math.log ( value )  / LOG_10 )  + 1 )  )  )  )  ) ;^348^^^^^335^349^(  ( int )  ( Math.log ( value )  / LOG_10 )  + 1 )  )  )  )  ) ;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P11_Insert_Donor_Statement]^int digits =  ( int )  ( Math.log ( value )  / LOG_10 )  + 1;(  ( int )  ( Math.log ( value )  / LOG_10 )  + 1 )  )  )  )  ) ;^348^^^^^335^349^(  ( int )  ( Math.log ( value )  / LOG_10 )  + 1 )  )  )  )  ) ;^[CLASS] FormatUtils  [METHOD] calculateDigitCount [RETURN_TYPE] int   long value [VARIABLES] double  LOG_10  long  value  boolean  
[P1_Replace_Type]^long  value = text.charAt ( position )  - '0';^352^^^^^351^354^int value = text.charAt ( position )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P2_Replace_Operator]^int value = text.charAt ( position )   ^  '0';^352^^^^^351^354^int value = text.charAt ( position )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P5_Replace_Variable]^int value = position.charAt ( text )  - '0';^352^^^^^351^354^int value = text.charAt ( position )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P7_Replace_Invocation]^int value = text.substring ( position )  - '0';^352^^^^^351^354^int value = text.charAt ( position )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P5_Replace_Variable]^int value = text.charAt ( value )  - '0';^352^^^^^351^354^int value = text.charAt ( position )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P7_Replace_Invocation]^int value = text .concat ( text )   - '0';^352^^^^^351^354^int value = text.charAt ( position )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P14_Delete_Statement]^^352^353^^^^351^354^int value = text.charAt ( position )  - '0'; return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P2_Replace_Operator]^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )   &  '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P2_Replace_Operator]^return  ==  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P2_Replace_Operator]^return  |  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P2_Replace_Operator]^return  (  ( value  <  3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P2_Replace_Operator]^return  (  ( value << 3 )  +  ( value  >=  1 )  )  + text.charAt ( position + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P2_Replace_Operator]^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position  >>  1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P3_Replace_Literal]^return  (  ( value << position )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P3_Replace_Literal]^return  (  ( value << 3 )  +  ( value << value )  )  + text.charAt ( position + value )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P5_Replace_Variable]^return  (  ( position << 3 )  +  ( value << 1 )  )  + text.charAt ( value + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P5_Replace_Variable]^return  (  ( text << 3 )  +  ( value << 1 )  )  + value.charAt ( position + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P5_Replace_Variable]^return  (  ( value << 3 )  +  ( value << 1 )  )  + position.charAt ( text + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P8_Replace_Mix]^return true ;^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P3_Replace_Literal]^return  (  ( value << 3 )  +  ( value << position )  )  + text.charAt ( position + position )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P5_Replace_Variable]^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( value + 1 )  - '0';^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P14_Delete_Statement]^^353^^^^^351^354^return  (  ( value << 3 )  +  ( value << 1 )  )  + text.charAt ( position + 1 )  - '0';^[CLASS] FormatUtils  [METHOD] parseTwoDigits [RETURN_TYPE] int   String text int position [VARIABLES] String  text  boolean  double  LOG_10  int  position  value  
[P1_Replace_Type]^short  sampleLen = errorPos + 32;^357^^^^^356^375^int sampleLen = errorPos + 32;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^int sampleLen = errorPos + sampleLen;^357^^^^^356^375^int sampleLen = errorPos + 32;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P1_Replace_Type]^char sampleText;^358^^^^^356^375^String sampleText;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P2_Replace_Operator]^if  ( text.length (  )  == sampleLen + 3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P2_Replace_Operator]^if  ( text.length (  )  <= sampleLen   instanceof   3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^if  ( text.length (  )  <= sampleLen + sampleLen )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^if  ( text.length() + 2  <= sampleLen + 3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^if  ( sampleText.length (  )  <= sampleLen + 3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^if  ( text.length (  )  <= errorPos + 3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^if  ( sampleLen.length (  )  <= text + 3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P6_Replace_Expression]^if  ( sampleLen + 3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P7_Replace_Invocation]^if  ( text.charAt (  )  <= sampleLen + 3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P7_Replace_Invocation]^if  ( text .concat ( text )   <= sampleLen + 3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P8_Replace_Mix]^if  ( text.charAt (  )  <= sampleLen + 0  )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P15_Unwrap_Block]^sampleText = text;^359^360^361^362^363^356^375^if  ( text.length (  )  <= sampleLen + 3 )  { sampleText = text; } else { sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ; }^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P16_Remove_Block]^^359^360^361^362^363^356^375^if  ( text.length (  )  <= sampleLen + 3 )  { sampleText = text; } else { sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ; }^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^sampleText = text.substring ( , sampleLen ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^sampleText = sampleText.substring ( 0, sampleLen ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^sampleText = text.substring ( 0, errorPos ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^sampleText = text.substring ( 0 ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^sampleText = sampleLen.substring ( 0, text ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P8_Replace_Mix]^sampleText = text.substring ( 4, sampleLen ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^sampleText = text.substring ( sampleLen, sampleLen ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^sampleText = text.substring ( 0, sampleLen ) .concat ( "." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P14_Delete_Statement]^^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^sampleText = text.substring ( errorPos, sampleLen ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^sampleText = sampleText;^360^^^^^356^375^sampleText = text;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P8_Replace_Mix]^sampleText =  null;^360^^^^^356^375^sampleText = text;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P7_Replace_Invocation]^sampleText = text.substring ( 0, sampleLen )  .charAt ( errorPos )  ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P8_Replace_Mix]^sampleText = text.substring ( 2, sampleLen ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^if  ( text.length() + 5  <= sampleLen + 3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P7_Replace_Invocation]^if  ( text .concat ( sampleText )   <= sampleLen + 3 )  {^359^^^^^356^375^if  ( text.length (  )  <= sampleLen + 3 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^sampleText = text.substring ( -7, sampleLen ) .concat ( "..." ) ;^362^^^^^356^375^sampleText = text.substring ( 0, sampleLen ) .concat ( "..." ) ;^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P2_Replace_Operator]^if  ( errorPos > 0 )  {^365^^^^^356^375^if  ( errorPos <= 0 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^if  ( errorPos <= errorPos )  {^365^^^^^356^375^if  ( errorPos <= 0 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^if  ( sampleLen <= 0 )  {^365^^^^^356^375^if  ( errorPos <= 0 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P6_Replace_Expression]^if  ( "Invalid format: \"" + sampleText + '"' )  {^365^^^^^356^375^if  ( errorPos <= 0 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P6_Replace_Expression]^if  ( "Invalid format: \"" + sampleText )  {^365^^^^^356^375^if  ( errorPos <= 0 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P8_Replace_Mix]^if  ( errorPos <= 2 )  {^365^^^^^356^375^if  ( errorPos <= 0 )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P15_Unwrap_Block]^return ("Invalid format: \"" + sampleText) + '"';^365^366^367^^^356^375^if  ( errorPos <= 0 )  { return "Invalid format: \"" + sampleText + '"'; }^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P16_Remove_Block]^^365^366^367^^^356^375^if  ( errorPos <= 0 )  { return "Invalid format: \"" + sampleText + '"'; }^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P13_Insert_Block]^if  ( errorPos >=  ( text.length (  )  )  )  {     return  ( "Invalid format: \"" + sampleText )  + "\" is too short"; }^365^^^^^356^375^[Delete]^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P2_Replace_Operator]^return "Invalid format: \""  <<  sampleText + '"';^366^^^^^356^375^return "Invalid format: \"" + sampleText + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^return "Invalid format: \"Invalid format:" + sampleText + '"';^366^^^^^356^375^return "Invalid format: \"" + sampleText + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^return "Invalid format: \"" + text + '"';^366^^^^^356^375^return "Invalid format: \"" + sampleText + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P13_Insert_Block]^if  ( errorPos <= 0 )  {     return  ( "Invalid format: \"" + sampleText )  + '"'; }^366^^^^^356^375^[Delete]^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P2_Replace_Operator]^return "Invalid format: \""  <  sampleText + '"';^366^^^^^356^375^return "Invalid format: \"" + sampleText + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^return "nvalid format: \"" + sampleText + '"';^366^^^^^356^375^return "Invalid format: \"" + sampleText + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P8_Replace_Mix]^return "Invalid format: \"" + sampleText +text;^366^^^^^356^375^return "Invalid format: \"" + sampleText + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P2_Replace_Operator]^if  ( errorPos == text.length (  )  )  {^369^^^^^356^375^if  ( errorPos >= text.length (  )  )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^if  ( errorPos >= text.length() + 9  )  {^369^^^^^356^375^if  ( errorPos >= text.length (  )  )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^if  ( sampleLen >= text.length (  )  )  {^369^^^^^356^375^if  ( errorPos >= text.length (  )  )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P6_Replace_Expression]^if  ( "Invalid format: \"" + sampleText + "\" is too short" )  {^369^^^^^356^375^if  ( errorPos >= text.length (  )  )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P6_Replace_Expression]^if  ( "Invalid format: \"" + sampleText )  {^369^^^^^356^375^if  ( errorPos >= text.length (  )  )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P7_Replace_Invocation]^if  ( errorPos >= text.charAt (  )  )  {^369^^^^^356^375^if  ( errorPos >= text.length (  )  )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P8_Replace_Mix]^if  ( errorPos >= text .concat ( sampleText )   )  {^369^^^^^356^375^if  ( errorPos >= text.length (  )  )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P15_Unwrap_Block]^return ("Invalid format: \"" + sampleText) + "\" is too short";^369^370^371^^^356^375^if  ( errorPos >= text.length (  )  )  { return "Invalid format: \"" + sampleText + "\" is too short"; }^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P16_Remove_Block]^^369^370^371^^^356^375^if  ( errorPos >= text.length (  )  )  { return "Invalid format: \"" + sampleText + "\" is too short"; }^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P13_Insert_Block]^if  ( errorPos <= 0 )  {     return  ( "Invalid format: \"" + sampleText )  + '"'; }^369^^^^^356^375^[Delete]^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P2_Replace_Operator]^return "Invalid format: \""  <<  sampleText + "\" is too short";^370^^^^^356^375^return "Invalid format: \"" + sampleText + "\" is too short";^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^return "Invalid format: \"In" + sampleText + "\" is too short";^370^^^^^356^375^return "Invalid format: \"" + sampleText + "\" is too short";^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^return "Invalid format: \"" + sampleText + "\" is too short\" ";^370^^^^^356^375^return "Invalid format: \"" + sampleText + "\" is too short";^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^return "Invalid format: \"" + text + "\" is too short";^370^^^^^356^375^return "Invalid format: \"" + sampleText + "\" is too short";^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P13_Insert_Block]^if  ( errorPos >=  ( text.length (  )  )  )  {     return  ( "Invalid format: \"" + sampleText )  + "\" is too short"; }^370^^^^^356^375^[Delete]^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P2_Replace_Operator]^return "Invalid format: \""  ==  sampleText + "\" is too short";^370^^^^^356^375^return "Invalid format: \"" + sampleText + "\" is too short";^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^return "Invalid format: \"nvalid format:" + sampleText + "\" is too short";^370^^^^^356^375^return "Invalid format: \"" + sampleText + "\" is too short";^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^return "Invalid format: \"" + sampleText + "" " is too short";^370^^^^^356^375^return "Invalid format: \"" + sampleText + "\" is too short";^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P8_Replace_Mix]^return "Invalid format: \""  ||  sampleText  ||  "\" is too short";^370^^^^^356^375^return "Invalid format: \"" + sampleText + "\" is too short";^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^if  ( errorPos >= text.length() + 5  )  {^369^^^^^356^375^if  ( errorPos >= text.length (  )  )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^if  ( errorPos >= sampleText.length (  )  )  {^369^^^^^356^375^if  ( errorPos >= text.length (  )  )  {^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P2_Replace_Operator]^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  >>  + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P2_Replace_Operator]^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )   instanceof   + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P2_Replace_Operator]^return "Invalid format: \""  ||  sampleText  ||  "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P2_Replace_Operator]^return "Invalid format: \""  <=  sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^return "Invalid format: \"o" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P3_Replace_Literal]^return "Invalid format: \"" + sampleText + "\" is malf" + sampleText.substring ( errorPos )  + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^return "Invalid format: \"" + text + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( sampleLen )  + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^return "Invalid format: \"" + errorPos + "\" is malformed at \"" + sampleText.substring ( sampleText )  + '"';^373^374^^^^356^375^return "Invalid format: \"" + sampleText + "\" is malformed at \"" + sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P5_Replace_Variable]^sampleText.substring ( sampleLen )  + '"';^374^^^^^356^375^sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P7_Replace_Invocation]^sampleText .substring ( errorPos )   + '"';^374^^^^^356^375^sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
[P14_Delete_Statement]^^374^^^^^356^375^sampleText.substring ( errorPos )  + '"';^[CLASS] FormatUtils  [METHOD] createErrorMessage [RETURN_TYPE] String   String text final int errorPos [VARIABLES] String  sampleText  text  boolean  double  LOG_10  int  errorPos  sampleLen  
