[P14_Delete_Statement]^^36^^^^^35^37^super (  ) ;^[CLASS] FieldUtils  [METHOD] <init> [RETURN_TYPE] FieldUtils()   [VARIABLES] boolean  
[P2_Replace_Operator]^if  ( value != Integer.MIN_VALUE )  {^49^^^^^48^53^if  ( value == Integer.MIN_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeNegate [RETURN_TYPE] int   int value [VARIABLES] boolean  int  value 
[P16_Remove_Block]^^49^50^51^^^48^53^if  ( value == Integer.MIN_VALUE )  { throw new ArithmeticException  (" ")  ; }^[CLASS] FieldUtils  [METHOD] safeNegate [RETURN_TYPE] int   int value [VARIABLES] boolean  int  value 
[P15_Unwrap_Block]^throw new java.lang.ArithmeticException("Integer.MIN_VALUE cannot be negated");^49^50^51^^^48^53^if  ( value == Integer.MIN_VALUE )  { throw new ArithmeticException  (" ")  ; }^[CLASS] FieldUtils  [METHOD] safeNegate [RETURN_TYPE] int   int value [VARIABLES] boolean  int  value  
[P16_Remove_Block]^^49^50^51^^^48^53^if  ( value == Integer.MIN_VALUE )  { throw new ArithmeticException  (" ")  ; }^[CLASS] FieldUtils  [METHOD] safeNegate [RETURN_TYPE] int   int value [VARIABLES] boolean  int  value  
[P13_Insert_Block]^if  ( value ==  ( MIN_VALUE )  )  {     throw new ArithmeticException ( "Integer.MIN_VALUE cannot be negated" ) ; }^50^^^^^48^53^[Delete]^[CLASS] FieldUtils  [METHOD] safeNegate [RETURN_TYPE] int   int value [VARIABLES] boolean  int  value  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new ArithmeticException  (" ")  ;^50^^^^^48^53^throw new ArithmeticException  (" ")  ;^[CLASS] FieldUtils  [METHOD] safeNegate [RETURN_TYPE] int   int value [VARIABLES] boolean  int  value  
[P1_Replace_Type]^long  sum = val1 + val2;^64^^^^^63^71^int sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P5_Replace_Variable]^int sum = val2 + val2;^64^^^^^63^71^int sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P5_Replace_Variable]^int sum = val1 + val1;^64^^^^^63^71^int sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P5_Replace_Variable]^int sum = val2 + val1;^64^^^^^63^71^int sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P11_Insert_Donor_Statement]^long sum = val1 + val2;int sum = val1 + val2;^64^^^^^63^71^int sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P11_Insert_Donor_Statement]^long diff = val1 - val2;int sum = val1 + val2;^64^^^^^63^71^int sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P11_Insert_Donor_Statement]^long total = val1 * scalar;int sum = val1 + val2;^64^^^^^63^71^int sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P11_Insert_Donor_Statement]^long total = val1 * val2;int sum = val1 + val2;^64^^^^^63^71^int sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P2_Replace_Operator]^if  (  ( val1 ^ sum )  < 0 ||  ( val1 ^ val2 )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P2_Replace_Operator]^if  (  ( val1 ^ sum )  <= 0 &&  ( val1 ^ val2 )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P2_Replace_Operator]^if  (  ( val1 & sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P2_Replace_Operator]^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  > 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P2_Replace_Operator]^if  (  ( val1 ^ sum )  < 0 &&  ( val1 & val2 )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P3_Replace_Literal]^if  (  ( val1 ^ sum )  < sum &&  ( val1 ^ val2 )  >= sum )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P5_Replace_Variable]^if  (  ( sum ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P5_Replace_Variable]^if  (  ( val1 ^ val2 )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P5_Replace_Variable]^if  (  ( sum ^ val1 )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P5_Replace_Variable]^if  (  ( val2 ^ sum )  < 0 &&  ( val1 ^ val1 )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P6_Replace_Expression]^if  (  ( val1 ^ sum )  < 0 ) {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P6_Replace_Expression]^if  (   ( val1 ^ val2 )  >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P6_Replace_Expression]^if  ( val1 ^ sum < 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P6_Replace_Expression]^if  ( val1 ^ sum )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P6_Replace_Expression]^if  ( val1 ^ val2 >= 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P6_Replace_Expression]^if  ( val1 ^ val2 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P6_Replace_Expression]^if  (  ( "The calculation caused an overflow: " + val1 )  + " + " + val2 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P6_Replace_Expression]^if  ( "The calculation caused an overflow: " + val1 + " + " )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P6_Replace_Expression]^if  ( "The calculation caused an overflow: " + val1 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P8_Replace_Mix]^if  (  ( val1 ^ sum )  < 3 &&  ( val1 ^ val2 )  >= 3 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P9_Replace_Statement]^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^66^^^^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P15_Unwrap_Block]^throw new java.lang.ArithmeticException(((("The calculation caused an overflow: " + val1) + " + ") + val2));^66^67^68^69^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  { throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ; }^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P16_Remove_Block]^^66^67^68^69^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  { throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ; }^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P16_Remove_Block]^^66^67^68^69^^63^71^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  { throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ; }^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2
[P13_Insert_Block]^if  (  ( total / scalar )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + scalar )  ) ; }^66^^^^^63^71^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P13_Insert_Block]^if  (  (  ( val1 ^ diff )  < 0 )  &&  (  ( val1 ^ val2 )  < 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " - " )  + val2 )  ) ; }^66^^^^^63^71^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P13_Insert_Block]^if  (  ( total / val2 )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^66^^^^^63^71^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P13_Insert_Block]^if  (  ( total <  ( MIN_VALUE )  )  ||  ( total >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^66^^^^^63^71^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  !=  val1  !=  "  !=  " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ||  val1 + " + " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "e he calculation caused an overflow: " + val1 + " + " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " +  +" + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P4_Replace_Constructor]^throw throw  new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " - " )  + val2 )  )  ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P5_Replace_Variable]^throw new ArithmeticException ( "The calculation caused an overflow: " + sum + " + " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P5_Replace_Variable]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + sum ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P5_Replace_Variable]^throw new ArithmeticException ( "The calculation caused an overflow: " + val2 + " + " + val1 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P13_Insert_Block]^if  (  ( total / scalar )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + scalar )  ) ; }^67^^^^^63^71^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P13_Insert_Block]^if  (  (  ( val1 ^ diff )  < 0 )  &&  (  ( val1 ^ val2 )  < 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " - " )  + val2 )  ) ; }^67^^^^^63^71^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P13_Insert_Block]^if  (  ( total / val2 )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^67^^^^^63^71^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P13_Insert_Block]^if  (  (  ( val1 ^ sum )  < 0 )  &&  (  ( val1 ^ val2 )  >= 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " + " )  + val2 )  ) ; }^67^^^^^63^71^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  |  val1  |  "  |  " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ^  val1 + " + " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: aused an overf" + val1 + " + " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P13_Insert_Block]^if  (  ( total <  ( MIN_VALUE )  )  ||  ( total >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^67^^^^^63^71^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "   instanceof   val1   instanceof   "   instanceof   " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <<  val1 + " + " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "he calc" + val1 + " + " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "e calculation caused an overflohe calculation caused an overflow: " + val1 + " + " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + "+ " + val2 ) ;^67^68^^^^63^71^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P5_Replace_Variable]^return val2;^70^^^^^63^71^return sum;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  sum  val1  val2  
[P1_Replace_Type]^short  sum = val1 + val2;^82^^^^^81^89^long sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P5_Replace_Variable]^long sum = val2 + val2;^82^^^^^81^89^long sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P5_Replace_Variable]^long sum = val1 + val1;^82^^^^^81^89^long sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P5_Replace_Variable]^long sum = val2 + val1;^82^^^^^81^89^long sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P11_Insert_Donor_Statement]^long diff = val1 - val2;long sum = val1 + val2;^82^^^^^81^89^long sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P11_Insert_Donor_Statement]^int sum = val1 + val2;long sum = val1 + val2;^82^^^^^81^89^long sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P11_Insert_Donor_Statement]^long total = val1 * scalar;long sum = val1 + val2;^82^^^^^81^89^long sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P11_Insert_Donor_Statement]^long total = val1 * val2;long sum = val1 + val2;^82^^^^^81^89^long sum = val1 + val2;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P2_Replace_Operator]^if  (  ( val1 ^ sum )  < 0 ||  ( val1 ^ val2 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P2_Replace_Operator]^if  (  ( val1 ^ sum )  <= 0 &&  ( val1 ^ val2 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P2_Replace_Operator]^if  (  ( val1 & sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P2_Replace_Operator]^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  == 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P2_Replace_Operator]^if  (  ( val1 ^ sum )  < 0 &&  ( val1 & val2 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P3_Replace_Literal]^if  (  ( val1 ^ sum )  < 9 &&  ( val1 ^ val2 )  >= 9 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P3_Replace_Literal]^if  (  ( val1 ^ sum )  < -7 &&  ( val1 ^ val2 )  >= -7 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P5_Replace_Variable]^if  (  ( val2 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P5_Replace_Variable]^if  (  ( val1 ^ val1 )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P5_Replace_Variable]^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ sum )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P5_Replace_Variable]^if  (  ( val2 ^ sum )  < 0 &&  ( val1 ^ val1 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P5_Replace_Variable]^if  (  ( sum ^ val1 )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P5_Replace_Variable]^if  (  ( val1 ^ val2 )  < 0 &&  ( val1 ^ sum )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P6_Replace_Expression]^if  (  ( val1 ^ sum )  < 0 ) {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P6_Replace_Expression]^if  (   ( val1 ^ val2 )  >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P6_Replace_Expression]^if  ( val1 ^ sum < 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P6_Replace_Expression]^if  ( val1 ^ sum )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P6_Replace_Expression]^if  ( val1 ^ val2 >= 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P6_Replace_Expression]^if  ( val1 ^ val2 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P6_Replace_Expression]^if  (  ( "The calculation caused an overflow: " + val1 )  + " + " + val2 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P6_Replace_Expression]^if  ( "The calculation caused an overflow: " + val1 + " + " )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P6_Replace_Expression]^if  ( "The calculation caused an overflow: " + val1 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P8_Replace_Mix]^if  (  ( val1 ^ sum )  < 0L &&  ( val1 ^ val2 )  >= 0L )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P9_Replace_Statement]^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^84^^^^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P15_Unwrap_Block]^throw new java.lang.ArithmeticException(((("The calculation caused an overflow: " + val1) + " + ") + val2));^84^85^86^87^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  { throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ; }^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P16_Remove_Block]^^84^85^86^87^^81^89^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  { throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ; }^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P13_Insert_Block]^if  (  ( total / scalar )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + scalar )  ) ; }^84^^^^^81^89^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P13_Insert_Block]^if  (  (  ( val1 ^ diff )  < 0 )  &&  (  ( val1 ^ val2 )  < 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " - " )  + val2 )  ) ; }^84^^^^^81^89^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P13_Insert_Block]^if  (  ( total / val2 )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^84^^^^^81^89^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P13_Insert_Block]^if  (  ( total <  ( MIN_VALUE )  )  ||  ( total >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^84^^^^^81^89^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  !=  val1  !=  "  !=  " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  >>  val1 + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "on causedhe calculation caused an overflow: " + val1 + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " +  " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P4_Replace_Constructor]^throw throw  new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " - " )  + val2 )  )  ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P5_Replace_Variable]^throw new ArithmeticException ( "The calculation caused an overflow: " + sum + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P5_Replace_Variable]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + sum ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P5_Replace_Variable]^throw new ArithmeticException ( "The calculation caused an overflow: " + val2 + " + " + val1 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P13_Insert_Block]^if  (  ( total / scalar )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + scalar )  ) ; }^85^^^^^81^89^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P13_Insert_Block]^if  (  (  ( val1 ^ diff )  < 0 )  &&  (  ( val1 ^ val2 )  < 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " - " )  + val2 )  ) ; }^85^^^^^81^89^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P13_Insert_Block]^if  (  ( total / val2 )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^85^^^^^81^89^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P13_Insert_Block]^if  (  (  ( val1 ^ sum )  < 0 )  &&  (  ( val1 ^ val2 )  >= 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " + " )  + val2 )  ) ; }^85^^^^^81^89^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ||  val1  ||  "  ||  " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  !=  val1 + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: he calculat" + val1 + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + "" + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P13_Insert_Block]^if  (  ( total <  ( MIN_VALUE )  )  ||  ( total >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^85^^^^^81^89^[Delete]^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <<  val1  <<  "  <<  " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  >  val1 + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: alc" + val1 + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " ++ " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  &  val1 + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: ion caused an" + val1 + " + " + val2 ) ;^85^86^^^^81^89^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P5_Replace_Variable]^return val2;^88^^^^^81^89^return sum;^[CLASS] FieldUtils  [METHOD] safeAdd [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  sum  val1  val2  
[P1_Replace_Type]^short  diff = val1 - val2;^100^^^^^99^107^long diff = val1 - val2;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P2_Replace_Operator]^long diff = val1  !=  val2;^100^^^^^99^107^long diff = val1 - val2;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P5_Replace_Variable]^long diff = val2 - val2;^100^^^^^99^107^long diff = val1 - val2;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P5_Replace_Variable]^long diff = val2 - val1;^100^^^^^99^107^long diff = val1 - val2;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P11_Insert_Donor_Statement]^long sum = val1 + val2;long diff = val1 - val2;^100^^^^^99^107^long diff = val1 - val2;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P11_Insert_Donor_Statement]^int sum = val1 + val2;long diff = val1 - val2;^100^^^^^99^107^long diff = val1 - val2;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P11_Insert_Donor_Statement]^long total = val1 * scalar;long diff = val1 - val2;^100^^^^^99^107^long diff = val1 - val2;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P11_Insert_Donor_Statement]^long total = val1 * val2;long diff = val1 - val2;^100^^^^^99^107^long diff = val1 - val2;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P2_Replace_Operator]^if  (  ( val1 ^ diff )  < 0 ||  ( val1 ^ val2 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P2_Replace_Operator]^if  (  ( val1 ^ diff )  <= 0 &&  ( val1 ^ val2 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P2_Replace_Operator]^if  (  ( val1 & diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P2_Replace_Operator]^if  (  ( val1 ^ diff )  > 0 &&  ( val1 ^ val2 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P2_Replace_Operator]^if  (  ( val1 ^ diff )  < 0 &&  ( val1 & val2 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P3_Replace_Literal]^if  (  ( val1 ^ diff )  < 7 &&  ( val1 ^ val2 )  < 7 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P3_Replace_Literal]^if  (  ( val1 ^ diff )  < null &&  ( val1 ^ val2 )  < null )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P5_Replace_Variable]^if  (  ( val1 ^ val1 )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P5_Replace_Variable]^if  (  ( diff ^ val1 )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P5_Replace_Variable]^if  (  ( val2 ^ diff )  < 0 &&  ( val1 ^ val1 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P6_Replace_Expression]^if  (  ( val1 ^ diff )  < 0 ) {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P6_Replace_Expression]^if  (   ( val1 ^ val2 )  < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P6_Replace_Expression]^if  ( val1 ^ diff < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P6_Replace_Expression]^if  ( val1 ^ diff )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P6_Replace_Expression]^if  ( val1 ^ val2 < 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P6_Replace_Expression]^if  ( val1 ^ val2 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P6_Replace_Expression]^if  (  ( "The calculation caused an overflow: " + val1 )  + " - " + val2 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P6_Replace_Expression]^if  ( "The calculation caused an overflow: " + val1 + " - " )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P6_Replace_Expression]^if  ( "The calculation caused an overflow: " + val1 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P8_Replace_Mix]^if  (  ( val1 ^ diff )  < 2 &&  ( val1 ^ val2 )  < 2 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P9_Replace_Statement]^if  (  ( val1 ^ sum )  < 0 &&  ( val1 ^ val2 )  >= 0 )  {^102^^^^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  {^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P15_Unwrap_Block]^throw new java.lang.ArithmeticException(((("The calculation caused an overflow: " + val1) + " - ") + val2));^102^103^104^105^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  { throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ; }^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P16_Remove_Block]^^102^103^104^105^^99^107^if  (  ( val1 ^ diff )  < 0 &&  ( val1 ^ val2 )  < 0 )  { throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ; }^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P13_Insert_Block]^if  (  ( total / scalar )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + scalar )  ) ; }^102^^^^^99^107^[Delete]^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P13_Insert_Block]^if  (  ( total / val2 )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^102^^^^^99^107^[Delete]^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P13_Insert_Block]^if  (  (  ( val1 ^ sum )  < 0 )  &&  (  ( val1 ^ val2 )  >= 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " + " )  + val2 )  ) ; }^102^^^^^99^107^[Delete]^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P13_Insert_Block]^if  (  ( total <  ( MIN_VALUE )  )  ||  ( total >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^102^^^^^99^107^[Delete]^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  &  val1  &  " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ^  val1 + " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calcula" + val1 + " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " -- " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P4_Replace_Constructor]^throw throw  new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " + " )  + val2 )  )  ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P5_Replace_Variable]^throw new ArithmeticException ( "The calculation caused an overflow: " + diff + " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P5_Replace_Variable]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + diff ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P5_Replace_Variable]^throw new ArithmeticException ( "The calculation caused an overflow: " + val2 + " - " + val1 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P13_Insert_Block]^if  (  ( total / scalar )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + scalar )  ) ; }^103^^^^^99^107^[Delete]^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P13_Insert_Block]^if  (  (  ( val1 ^ diff )  < 0 )  &&  (  ( val1 ^ val2 )  < 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " - " )  + val2 )  ) ; }^103^^^^^99^107^[Delete]^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P13_Insert_Block]^if  (  ( total / val2 )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^103^^^^^99^107^[Delete]^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P13_Insert_Block]^if  (  (  ( val1 ^ sum )  < 0 )  &&  (  ( val1 ^ val2 )  >= 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " + " )  + val2 )  ) ; }^103^^^^^99^107^[Delete]^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "   instanceof   val1   instanceof   " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <<  val1 + " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "e calculation caused an overhe calculation caused an overflow: " + val1 + " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P13_Insert_Block]^if  (  ( total <  ( MIN_VALUE )  )  ||  ( total >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^103^^^^^99^107^[Delete]^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ^  val1  ^  " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  !=  val1 + " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation cahe calculation caused an overflow: " + val1 + " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <<  val1  <<  " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "ation caused an overf" + val1 + " - " + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + "-" + val2 ) ;^103^104^^^^99^107^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P5_Replace_Variable]^return val2;^106^^^^^99^107^return diff;^[CLASS] FieldUtils  [METHOD] safeSubtract [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  diff  val1  val2  
[P1_Replace_Type]^int  total =  (  int  )  val1 *  (  int  )  val2;^119^^^^^118^125^long total =  ( long )  val1 *  ( long )  val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P2_Replace_Operator]^long + total =  ( long )  val1 *  ( long )  val2;^119^^^^^118^125^long total =  ( long )  val1 *  ( long )  val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P11_Insert_Donor_Statement]^long total = val1 * val2;long total =  ( long )  val1 *  ( long )  val2;^119^^^^^118^125^long total =  ( long )  val1 *  ( long )  val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P2_Replace_Operator]^if  ( total < Integer.MIN_VALUE && total > Integer.MAX_VALUE )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P2_Replace_Operator]^if  ( total <= Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P2_Replace_Operator]^if  ( total < Integer.MIN_VALUE || total >= Integer.MAX_VALUE )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P5_Replace_Variable]^if  ( total < Integer.val2 || total > Integer.MAX_VALUE )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P5_Replace_Variable]^if  ( total < Integer.MIN_VALUE || total > Integer.val2 )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P6_Replace_Expression]^if  ( total < Integer.MIN_VALUE ) {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P6_Replace_Expression]^if  (  total > Integer.MAX_VALUE )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P6_Replace_Expression]^if  ( total < MIN_VALUE )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P6_Replace_Expression]^if  ( total > MAX_VALUE )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P6_Replace_Expression]^if  (  ( "The calculation caused an overflow: " + val1 )  + " * " + val2 )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P6_Replace_Expression]^if  ( "The calculation caused an overflow: " + val1 + " * " )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P6_Replace_Expression]^if  ( "The calculation caused an overflow: " + val1 )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P8_Replace_Mix]^if  ( total < Integer.MIN_VALUE || total > Integer.val1 )  {^120^^^^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P15_Unwrap_Block]^throw new java.lang.ArithmeticException(((("The calculation caused an overflow: " + val1) + " * ") + val2));^120^121^122^123^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  { throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ; }^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P16_Remove_Block]^^120^121^122^123^^118^125^if  ( total < Integer.MIN_VALUE || total > Integer.MAX_VALUE )  { throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ; }^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P13_Insert_Block]^if  (  ( total / scalar )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + scalar )  ) ; }^120^^^^^118^125^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P13_Insert_Block]^if  (  (  ( val1 ^ diff )  < 0 )  &&  (  ( val1 ^ val2 )  < 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " - " )  + val2 )  ) ; }^120^^^^^118^125^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P13_Insert_Block]^if  (  ( total / val2 )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^120^^^^^118^125^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P13_Insert_Block]^if  (  (  ( val1 ^ sum )  < 0 )  &&  (  ( val1 ^ val2 )  >= 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " + " )  + val2 )  ) ; }^120^^^^^118^125^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ||  val1  ||  " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "   instanceof   val1 + " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: ion caused an o" + val1 + " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " ** " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P4_Replace_Constructor]^throw throw  new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " - " )  + val2 )  )  ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P5_Replace_Variable]^throw new ArithmeticException ( "The calculation caused an overflow: " + val2 + " * " + val1 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P13_Insert_Block]^if  (  ( total / scalar )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + scalar )  ) ; }^121^^^^^118^125^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P13_Insert_Block]^if  (  (  ( val1 ^ diff )  < 0 )  &&  (  ( val1 ^ val2 )  < 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " - " )  + val2 )  ) ; }^121^^^^^118^125^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P13_Insert_Block]^if  (  ( total / val2 )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^121^^^^^118^125^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P13_Insert_Block]^if  (  (  ( val1 ^ sum )  < 0 )  &&  (  ( val1 ^ val2 )  >= 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " + " )  + val2 )  ) ; }^121^^^^^118^125^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  >  val1  >  " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <<  val1 + " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculathe calculation caused an overflow: " + val1 + " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " *  " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P13_Insert_Block]^if  (  ( total <  ( MIN_VALUE )  )  ||  ( total >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^121^^^^^118^125^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  &  val1  &  " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P3_Replace_Literal]^throw new ArithmeticException ( "he cal" + val1 + " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  !=  val1  !=  " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ==  val1 + " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation " + val1 + " * " + val2 ) ;^121^122^^^^118^125^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P1_Replace_Type]^return  (  short  )  total;^124^^^^^118^125^return  ( int )  total;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] int   int val1 int val2 [VARIABLES] boolean  int  val1  val2  long  total  
[P8_Replace_Mix]^return 0;^141^^^^^136^151^return 0L;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P5_Replace_Variable]^return total;^143^^^^^136^151^return val1;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P1_Replace_Type]^short  total = val1 * scalar;^145^^^^^136^151^long total = val1 * scalar;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P2_Replace_Operator]^long + total = val1 * scalar;^145^^^^^136^151^long total = val1 * scalar;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P5_Replace_Variable]^long total = scalar * val1;^145^^^^^136^151^long total = val1 * scalar;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P11_Insert_Donor_Statement]^long sum = val1 + val2;long total = val1 * scalar;^145^^^^^136^151^long total = val1 * scalar;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P11_Insert_Donor_Statement]^long diff = val1 - val2;long total = val1 * scalar;^145^^^^^136^151^long total = val1 * scalar;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P11_Insert_Donor_Statement]^int sum = val1 + val2;long total = val1 * scalar;^145^^^^^136^151^long total = val1 * scalar;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P11_Insert_Donor_Statement]^long total = val1 * val2;long total = val1 * scalar;^145^^^^^136^151^long total = val1 * scalar;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P2_Replace_Operator]^if  ( total / scalar == val1 )  {^146^^^^^136^151^if  ( total / scalar != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P2_Replace_Operator]^if  ( total + scalar != val1 )  {^146^^^^^136^151^if  ( total / scalar != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P5_Replace_Variable]^if  ( val1 / scalar != val1 )  {^146^^^^^136^151^if  ( total / scalar != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P5_Replace_Variable]^if  ( total / scalar != total )  {^146^^^^^136^151^if  ( total / scalar != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P5_Replace_Variable]^if  ( val1 / scalar != total )  {^146^^^^^136^151^if  ( total / scalar != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P5_Replace_Variable]^if  ( total / val1 != scalar )  {^146^^^^^136^151^if  ( total / scalar != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P6_Replace_Expression]^if  ( total / scalar )  {^146^^^^^136^151^if  ( total / scalar != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P6_Replace_Expression]^if  (  ( "The calculation caused an overflow: " + val1 )  + " * " + scalar )  {^146^^^^^136^151^if  ( total / scalar != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P6_Replace_Expression]^if  ( "The calculation caused an overflow: " + val1 + " * " )  {^146^^^^^136^151^if  ( total / scalar != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P6_Replace_Expression]^if  ( "The calculation caused an overflow: " + val1 )  {^146^^^^^136^151^if  ( total / scalar != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P8_Replace_Mix]^if  ( total / scalar = val1 )  {^146^^^^^136^151^if  ( total / scalar != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P9_Replace_Statement]^if  ( total / val2 != val1 )  {^146^^^^^136^151^if  ( total / scalar != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P15_Unwrap_Block]^throw new java.lang.ArithmeticException(((("The calculation caused an overflow: " + val1) + " * ") + scalar));^146^147^148^149^^136^151^if  ( total / scalar != val1 )  { throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ; }^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P16_Remove_Block]^^146^147^148^149^^136^151^if  ( total / scalar != val1 )  { throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ; }^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P13_Insert_Block]^if  (  (  ( val1 ^ diff )  < 0 )  &&  (  ( val1 ^ val2 )  < 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " - " )  + val2 )  ) ; }^146^^^^^136^151^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P13_Insert_Block]^if  (  ( total / val2 )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^146^^^^^136^151^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P13_Insert_Block]^if  (  (  ( val1 ^ sum )  < 0 )  &&  (  ( val1 ^ val2 )  >= 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " + " )  + val2 )  ) ; }^146^^^^^136^151^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P13_Insert_Block]^if  (  ( total <  ( MIN_VALUE )  )  ||  ( total >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^146^^^^^136^151^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  >  val1  >  " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <<  val1 + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: T" + val1 + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + "* " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P4_Replace_Constructor]^throw throw  new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " - " )  + val2 )  )  ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P5_Replace_Variable]^throw new ArithmeticException ( "The calculation caused an overflow: " + total + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P5_Replace_Variable]^throw new ArithmeticException ( "The calculation caused an overflow: " + scalar + " * " + val1 ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P13_Insert_Block]^if  (  ( total / scalar )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + scalar )  ) ; }^147^^^^^136^151^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P13_Insert_Block]^if  (  (  ( val1 ^ diff )  < 0 )  &&  (  ( val1 ^ val2 )  < 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " - " )  + val2 )  ) ; }^147^^^^^136^151^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P13_Insert_Block]^if  (  ( total / val2 )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^147^^^^^136^151^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P13_Insert_Block]^if  (  (  ( val1 ^ sum )  < 0 )  &&  (  ( val1 ^ val2 )  >= 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " + " )  + val2 )  ) ; }^147^^^^^136^151^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <  val1  <  " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  &&  val1 + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P3_Replace_Literal]^throw new ArithmeticException ( "an ohe calculation caused an overflow: " + val1 + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P8_Replace_Mix]^return false;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P13_Insert_Block]^if  (  ( total <  ( MIN_VALUE )  )  ||  ( total >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^147^^^^^136^151^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ==  val1  ==  " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "   instanceof   val1 + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P3_Replace_Literal]^throw new ArithmeticException ( "hhe calculation caused an overflow: " + val1 + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  |  val1  |  " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  &  val1 + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: n over" + val1 + " * " + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + "" + scalar ) ;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P8_Replace_Mix]^return 0;^147^148^^^^136^151^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P5_Replace_Variable]^return val1;^150^^^^^136^151^return total;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 int scalar [VARIABLES] boolean  long  total  val1  int  scalar  
[P2_Replace_Operator]^if  ( val2 <= 1 )  {^162^^^^^161^174^if  ( val2 == 1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P3_Replace_Literal]^if  ( val2 == 6 )  {^162^^^^^161^174^if  ( val2 == 1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P5_Replace_Variable]^if  ( total == 1 )  {^162^^^^^161^174^if  ( val2 == 1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P8_Replace_Mix]^if  ( val2 == 0 )  {^162^^^^^161^174^if  ( val2 == 1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P9_Replace_Statement]^if  ( value >= 0 )  {^162^^^^^161^174^if  ( val2 == 1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P15_Unwrap_Block]^return val1;^162^163^164^^^161^174^if  ( val2 == 1 )  { return val1; }^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P16_Remove_Block]^^162^163^164^^^161^174^if  ( val2 == 1 )  { return val1; }^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P13_Insert_Block]^if  ( val2 == 0 )  {     return 0; }^162^^^^^161^174^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P13_Insert_Block]^if  ( remByRange == 0 )  {     return 0 + minValue; }^162^^^^^161^174^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P13_Insert_Block]^if  ( object1 == object2 )  {     return true; }^162^^^^^161^174^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P5_Replace_Variable]^return val2;^163^^^^^161^174^return val1;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P2_Replace_Operator]^if  ( val2 != 0 )  {^165^^^^^161^174^if  ( val2 == 0 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P3_Replace_Literal]^if  ( val2 == 8 )  {^165^^^^^161^174^if  ( val2 == 0 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P5_Replace_Variable]^if  ( val1 == 0 )  {^165^^^^^161^174^if  ( val2 == 0 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P8_Replace_Mix]^if  ( val2 == 3 )  {^165^^^^^161^174^if  ( val2 == 0 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P9_Replace_Statement]^if  ( val2 == 1 )  {^165^^^^^161^174^if  ( val2 == 0 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P9_Replace_Statement]^if  ( remByRange == 0 )  {^165^^^^^161^174^if  ( val2 == 0 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P9_Replace_Statement]^if  ( value >= 0 )  {^165^^^^^161^174^if  ( val2 == 0 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P15_Unwrap_Block]^return 0;^165^166^167^^^161^174^if  ( val2 == 0 )  { return 0; }^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P16_Remove_Block]^^165^166^167^^^161^174^if  ( val2 == 0 )  { return 0; }^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P13_Insert_Block]^if  ( remByRange == 0 )  {     return 0 + minValue; }^165^^^^^161^174^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P13_Insert_Block]^if  ( val2 == 1 )  {     return val1; }^165^^^^^161^174^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P13_Insert_Block]^if  ( object1 == object2 )  {     return true; }^165^^^^^161^174^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P3_Replace_Literal]^return -2;^166^^^^^161^174^return 0;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P8_Replace_Mix]^return 1;^166^^^^^161^174^return 0;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P3_Replace_Literal]^return -6;^166^^^^^161^174^return 0;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P8_Replace_Mix]^return 4;^166^^^^^161^174^return 0;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P1_Replace_Type]^short  total = val1 * val2;^168^^^^^161^174^long total = val1 * val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P2_Replace_Operator]^long / total = val1 * val2;^168^^^^^161^174^long total = val1 * val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P5_Replace_Variable]^long total = val1 * val1;^168^^^^^161^174^long total = val1 * val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P5_Replace_Variable]^long total = val2 * val1;^168^^^^^161^174^long total = val1 * val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P11_Insert_Donor_Statement]^long sum = val1 + val2;long total = val1 * val2;^168^^^^^161^174^long total = val1 * val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P11_Insert_Donor_Statement]^long diff = val1 - val2;long total = val1 * val2;^168^^^^^161^174^long total = val1 * val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P11_Insert_Donor_Statement]^int sum = val1 + val2;long total = val1 * val2;^168^^^^^161^174^long total = val1 * val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P11_Insert_Donor_Statement]^long total = val1 * scalar;long total = val1 * val2;^168^^^^^161^174^long total = val1 * val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P11_Insert_Donor_Statement]^long total =  ( long )  val1 *  ( long )  val2;long total = val1 * val2;^168^^^^^161^174^long total = val1 * val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P12_Insert_Condition]^if  ( total / val2 != val1 )  { long total = val1 * val2; }^168^^^^^161^174^long total = val1 * val2;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P2_Replace_Operator]^if  ( total / val2 > val1 )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P2_Replace_Operator]^if  ( total * val2 != val1 )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P5_Replace_Variable]^if  ( val2 / val2 != val1 )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P5_Replace_Variable]^if  ( total / val1 != val1 )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P5_Replace_Variable]^if  ( total / val2 != val2 )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P5_Replace_Variable]^if  ( val1 / val2 != total )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P5_Replace_Variable]^if  ( total / val1 != val2 )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P6_Replace_Expression]^if  ( total / val2 )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P6_Replace_Expression]^if  (  ( "The calculation caused an overflow: " + val1 )  + " * " + val2 )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P6_Replace_Expression]^if  ( "The calculation caused an overflow: " + val1 + " * " )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P6_Replace_Expression]^if  ( "The calculation caused an overflow: " + val1 )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P8_Replace_Mix]^if  ( total / total != val1 )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P9_Replace_Statement]^if  ( total / scalar != val1 )  {^169^^^^^161^174^if  ( total / val2 != val1 )  {^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P15_Unwrap_Block]^throw new java.lang.ArithmeticException(((("The calculation caused an overflow: " + val1) + " * ") + val2));^169^170^171^172^^161^174^if  ( total / val2 != val1 )  { throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ; }^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P16_Remove_Block]^^169^170^171^172^^161^174^if  ( total / val2 != val1 )  { throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ; }^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P13_Insert_Block]^if  (  ( total / scalar )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + scalar )  ) ; }^169^^^^^161^174^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P13_Insert_Block]^if  (  (  ( val1 ^ diff )  < 0 )  &&  (  ( val1 ^ val2 )  < 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " - " )  + val2 )  ) ; }^169^^^^^161^174^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P13_Insert_Block]^if  (  (  ( val1 ^ sum )  < 0 )  &&  (  ( val1 ^ val2 )  >= 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " + " )  + val2 )  ) ; }^169^^^^^161^174^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P13_Insert_Block]^if  (  ( total <  ( MIN_VALUE )  )  ||  ( total >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^169^^^^^161^174^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  >=  val1  >=  " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <  val1 + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: cu" + val1 + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + "* " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P4_Replace_Constructor]^throw throw  new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " - " )  + val2 )  )  ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P5_Replace_Variable]^throw new ArithmeticException ( "The calculation caused an overflow: " + total + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P5_Replace_Variable]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + total ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P5_Replace_Variable]^throw new ArithmeticException ( "The calculation caused an overflow: " + val2 + " * " + val1 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P13_Insert_Block]^if  (  ( total / scalar )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + scalar )  ) ; }^170^^^^^161^174^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P13_Insert_Block]^if  (  (  ( val1 ^ diff )  < 0 )  &&  (  ( val1 ^ val2 )  < 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " - " )  + val2 )  ) ; }^170^^^^^161^174^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P13_Insert_Block]^if  (  ( total / val2 )  != val1 )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^170^^^^^161^174^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P13_Insert_Block]^if  (  (  ( val1 ^ sum )  < 0 )  &&  (  ( val1 ^ val2 )  >= 0 )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " + " )  + val2 )  ) ; }^170^^^^^161^174^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ^  val1  ^  " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  ==  val1 + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "n caushe calculation caused an overflow: " + val1 + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + "" + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " + " + val2 ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + scalar ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P11_Insert_Donor_Statement]^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " - " + val2 ) ;throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P13_Insert_Block]^if  (  ( total <  ( MIN_VALUE )  )  ||  ( total >  ( MAX_VALUE )  )  )  {     throw new ArithmeticException (  (  (  ( "The calculation caused an overflow: " + val1 )  + " * " )  + val2 )  ) ; }^170^^^^^161^174^[Delete]^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  >  val1 + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "lculation caused ahe calculation caused an overflow: " + val1 + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "  <  val1  <  " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P2_Replace_Operator]^throw new ArithmeticException ( "The calculation caused an overflow: "   instanceof   val1 + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P3_Replace_Literal]^throw new ArithmeticException ( "d an overhe calculation caused an overflow: " + val1 + " * " + val2 ) ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P8_Replace_Mix]^return ;^170^171^^^^161^174^throw new ArithmeticException ( "The calculation caused an overflow: " + val1 + " * " + val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P5_Replace_Variable]^return val2;^173^^^^^161^174^return total;^[CLASS] FieldUtils  [METHOD] safeMultiply [RETURN_TYPE] long   long val1 long val2 [VARIABLES] boolean  long  total  val1  val2  
[P2_Replace_Operator]^if  ( Integer.MIN_VALUE <= value || value <= Integer.MAX_VALUE )  {^184^^^^^183^188^if  ( Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeToInt [RETURN_TYPE] int   long value [VARIABLES] boolean  long  value  
[P2_Replace_Operator]^if  ( Integer.MIN_VALUE < value && value <= Integer.MAX_VALUE )  {^184^^^^^183^188^if  ( Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeToInt [RETURN_TYPE] int   long value [VARIABLES] boolean  long  value  
[P6_Replace_Expression]^if  ( Integer.MIN_VALUE <= value ) {^184^^^^^183^188^if  ( Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeToInt [RETURN_TYPE] int   long value [VARIABLES] boolean  long  value  
[P6_Replace_Expression]^if  (  value <= Integer.MAX_VALUE )  {^184^^^^^183^188^if  ( Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeToInt [RETURN_TYPE] int   long value [VARIABLES] boolean  long  value  
[P6_Replace_Expression]^if  ( MIN_VALUE <= value )  {^184^^^^^183^188^if  ( Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeToInt [RETURN_TYPE] int   long value [VARIABLES] boolean  long  value  
[P6_Replace_Expression]^if  ( value <= MAX_VALUE )  {^184^^^^^183^188^if  ( Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE )  {^[CLASS] FieldUtils  [METHOD] safeToInt [RETURN_TYPE] int   long value [VARIABLES] boolean  long  value  
[P15_Unwrap_Block]^return ((int) (value));^184^185^186^^^183^188^if  ( Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE )  { return  ( int )  value; }^[CLASS] FieldUtils  [METHOD] safeToInt [RETURN_TYPE] int   long value [VARIABLES] boolean  long  value  
[P16_Remove_Block]^^184^185^186^^^183^188^if  ( Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE )  { return  ( int )  value; }^[CLASS] FieldUtils  [METHOD] safeToInt [RETURN_TYPE] int   long value [VARIABLES] boolean  long  value  
[P1_Replace_Type]^return  (  short  )  value;^185^^^^^183^188^return  ( int )  value;^[CLASS] FieldUtils  [METHOD] safeToInt [RETURN_TYPE] int   long value [VARIABLES] boolean  long  value  
[P1_Replace_Type]^return  (  long  )  value;^185^^^^^183^188^return  ( int )  value;^[CLASS] FieldUtils  [METHOD] safeToInt [RETURN_TYPE] int   long value [VARIABLES] boolean  long  value  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ")  ; ;^187^^^^^183^188^throw new ArithmeticException  (" ")  ;^[CLASS] FieldUtils  [METHOD] safeToInt [RETURN_TYPE] int   long value [VARIABLES] boolean  long  value  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new ArithmeticException  (" ")  ;^187^^^^^183^188^throw new ArithmeticException  (" ")  ;^[CLASS] FieldUtils  [METHOD] safeToInt [RETURN_TYPE] int   long value [VARIABLES] boolean  long  value  
[P1_Replace_Type]^short  val = FieldUtils.safeMultiply ( val1, val2 ) ;^199^^^^^198^201^long val = FieldUtils.safeMultiply ( val1, val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[P5_Replace_Variable]^long val = FieldUtils.safeMultiply ( val1, val1 ) ;^199^^^^^198^201^long val = FieldUtils.safeMultiply ( val1, val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[P5_Replace_Variable]^long val = FieldUtils.safeMultiply (  val2 ) ;^199^^^^^198^201^long val = FieldUtils.safeMultiply ( val1, val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[P5_Replace_Variable]^long val = FieldUtils.safeMultiply ( val1 ) ;^199^^^^^198^201^long val = FieldUtils.safeMultiply ( val1, val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[P5_Replace_Variable]^long val = FieldUtils.safeMultiply ( val2, val1 ) ;^199^^^^^198^201^long val = FieldUtils.safeMultiply ( val1, val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[P8_Replace_Mix]^long val = FieldUtils.safeMultiply ( val2, val2 ) ;^199^^^^^198^201^long val = FieldUtils.safeMultiply ( val1, val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[P5_Replace_Variable]^long val = FieldUtils.safeMultiply ( val, val2 ) ;^199^^^^^198^201^long val = FieldUtils.safeMultiply ( val1, val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[P5_Replace_Variable]^long val = FieldUtils.safeMultiply ( val1, val ) ;^199^^^^^198^201^long val = FieldUtils.safeMultiply ( val1, val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[P14_Delete_Statement]^^199^^^^^198^201^long val = FieldUtils.safeMultiply ( val1, val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[P11_Insert_Donor_Statement]^return FieldUtils.safeToInt ( val ) ;long val = FieldUtils.safeMultiply ( val1, val2 ) ;^199^^^^^198^201^long val = FieldUtils.safeMultiply ( val1, val2 ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[P5_Replace_Variable]^return FieldUtils.safeToInt ( val2 ) ;^200^^^^^198^201^return FieldUtils.safeToInt ( val ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[P7_Replace_Invocation]^return FieldUtils.safeNegate ( val ) ;^200^^^^^198^201^return FieldUtils.safeToInt ( val ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[P8_Replace_Mix]^return FieldUtils .safeMultiplyToInt ( val , val1 )  ;^200^^^^^198^201^return FieldUtils.safeToInt ( val ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[P7_Replace_Invocation]^return FieldUtils .safeMultiplyToInt ( val1 , val2 )  ;^200^^^^^198^201^return FieldUtils.safeToInt ( val ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[P8_Replace_Mix]^return FieldUtils.safeNegate ( val2 ) ;^200^^^^^198^201^return FieldUtils.safeToInt ( val ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[P14_Delete_Statement]^^200^^^^^198^201^return FieldUtils.safeToInt ( val ) ;^[CLASS] FieldUtils  [METHOD] safeMultiplyToInt [RETURN_TYPE] int   long val1 long val2 [VARIABLES] boolean  long  val  val1  val2  
[P2_Replace_Operator]^if  (  ( value < lowerBound )  &&  ( value > upperBound )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P2_Replace_Operator]^if  (  ( value <= lowerBound )  ||  ( value > upperBound )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P2_Replace_Operator]^if  (  ( value < lowerBound )  ||  ( value >= upperBound )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^if  (  ( upperBound < lowerBound )  ||  ( value > upperBound )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^if  (  ( value < value )  ||  ( value > upperBound )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^if  (  ( value < lowerBound )  ||  ( value > lowerBound )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^if  (  ( upperBound < lowerBound )  ||  ( value > value )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^if  (  ( value < upperBound )  ||  ( value > lowerBound )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P6_Replace_Expression]^if  (  ( value < lowerBound )  ) {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P6_Replace_Expression]^if  (   ( value > upperBound )  )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P6_Replace_Expression]^if  ( value < lowerBound )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P6_Replace_Expression]^if  ( value > upperBound )  {^214^^^^^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P15_Unwrap_Block]^throw new org.joda.time.IllegalFieldValueException(field.getType(), new java.lang.Integer(value), new java.lang.Integer(lowerBound), new java.lang.Integer(upperBound));^214^215^216^217^218^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  { throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P16_Remove_Block]^^214^215^216^217^218^212^219^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  { throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P13_Insert_Block]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {     throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^214^^^^^212^219^[Delete]^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P13_Insert_Block]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {     throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^214^^^^^212^219^[Delete]^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( value ) , new Integer ( upperBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( value )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( lowerBound.getType (  ) , new Integer ( value ) , new Integer ( field ) , new Integer ( upperBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( lowerBound ) , new Integer ( value ) , new Integer ( upperBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( value )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P13_Insert_Block]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {     throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^215^^^^^212^219^[Delete]^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P13_Insert_Block]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {     throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^215^^^^^212^219^[Delete]^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P13_Insert_Block]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {     throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^215^^^^^212^219^[Delete]^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P4_Replace_Constructor]^( field.getType (  ) , ( field.getType (  ) ,  new Integer ( upperBound )  , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^216^217^^^^212^219^( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^( field.getType (  ) , new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^216^217^^^^212^219^( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P4_Replace_Constructor]^new Integer ( upperBound )  , new Integer ( upperBound )  ) ;^217^^^^^212^219^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^new Integer ( value ) , new Integer ( upperBound )  ) ;^217^^^^^212^219^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P12_Insert_Condition]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  { new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^217^^^^^212^219^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P4_Replace_Constructor]^new Integer ( lowerBound )  , new Integer ( upperBound )  ) ;^217^^^^^212^219^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^new Integer ( lowerBound ) , new Integer ( value )  ) ;^217^^^^^212^219^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( lowerBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( upperBound.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( field )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( upperBound ) , new Integer ( lowerBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P14_Delete_Statement]^^216^217^^^^212^219^( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( upperBound ) , new Integer ( upperBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( lowerBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( value.getType (  ) , new Integer ( field ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^215^216^217^^^212^219^throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeField field int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeField  field  int  lowerBound  upperBound  value  
[P2_Replace_Operator]^if  (  ( value < lowerBound )  &&  ( value > upperBound )  )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P2_Replace_Operator]^if  (  ( value <= lowerBound )  ||  ( value > upperBound )  )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P2_Replace_Operator]^if  (  ( value < lowerBound )  ||  ( value >= upperBound )  )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^if  (  ( lowerBound < lowerBound )  ||  ( value > upperBound )  )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^if  (  ( value < lowerBound )  ||  ( value > value )  )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^if  (  ( upperBound < lowerBound )  ||  ( value > value )  )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^if  (  ( value < upperBound )  ||  ( value > lowerBound )  )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P6_Replace_Expression]^if  (  ( value < lowerBound )  ) {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P6_Replace_Expression]^if  (   ( value > upperBound )  )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P6_Replace_Expression]^if  ( value < lowerBound )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P6_Replace_Expression]^if  ( value > upperBound )  {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P8_Replace_Mix]^if  (  ( value < value )  ) {^232^^^^^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P15_Unwrap_Block]^throw new org.joda.time.IllegalFieldValueException(fieldType, new java.lang.Integer(value), new java.lang.Integer(lowerBound), new java.lang.Integer(upperBound));^232^233^234^235^236^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  { throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P16_Remove_Block]^^232^233^234^235^236^230^237^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  { throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P13_Insert_Block]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {     throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^232^^^^^230^237^[Delete]^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P13_Insert_Block]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {     throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^232^^^^^230^237^[Delete]^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P4_Replace_Constructor]^throw new IllegalFieldValueException (  new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( fieldType, new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( value ) , new Integer ( upperBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( value )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( lowerBound, new Integer ( value ) , new Integer ( fieldType ) , new Integer ( upperBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( fieldType, new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( value )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( fieldType, new Integer ( lowerBound ) , new Integer ( value ) , new Integer ( upperBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( upperBound ) , new Integer ( lowerBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P8_Replace_Mix]^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( lowerBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P13_Insert_Block]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {     throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^233^^^^^230^237^[Delete]^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P13_Insert_Block]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {     throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^233^^^^^230^237^[Delete]^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P13_Insert_Block]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {     throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^233^^^^^230^237^[Delete]^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P4_Replace_Constructor]^( fieldType, ( fieldType,  new Integer ( upperBound )  , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^234^235^^^^230^237^( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^( fieldType, new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^234^235^^^^230^237^( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P4_Replace_Constructor]^new Integer ( upperBound )  , new Integer ( upperBound )  ) ;^235^^^^^230^237^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^new Integer ( value ) , new Integer ( upperBound )  ) ;^235^^^^^230^237^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P12_Insert_Condition]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  { new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^235^^^^^230^237^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P4_Replace_Constructor]^new Integer ( lowerBound )  , new Integer ( upperBound )  ) ;^235^^^^^230^237^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^new Integer ( lowerBound ) , new Integer ( value )  ) ;^235^^^^^230^237^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( fieldType, new Integer ( lowerBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( upperBound ) , new Integer ( upperBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( value, new Integer ( fieldType ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^233^234^235^^^230^237^throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   DateTimeFieldType fieldType int value int lowerBound int upperBound [VARIABLES] boolean  DateTimeFieldType  fieldType  int  lowerBound  upperBound  value  
[P2_Replace_Operator]^if  (  ( value < lowerBound )  &&  ( value > upperBound )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P2_Replace_Operator]^if  (  ( value <= lowerBound )  ||  ( value > upperBound )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P2_Replace_Operator]^if  (  ( value < lowerBound )  ||  ( value >= upperBound )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^if  (  ( upperBound < lowerBound )  ||  ( value > upperBound )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^if  (  ( value < upperBound )  ||  ( value > upperBound )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^if  (  ( value < lowerBound )  ||  ( value > lowerBound )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^if  (  ( lowerBound < value )  ||  ( value > upperBound )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^if  (  ( value < upperBound )  ||  ( value > lowerBound )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P6_Replace_Expression]^if  (  ( value < lowerBound )  ) {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P6_Replace_Expression]^if  (   ( value > upperBound )  )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P6_Replace_Expression]^if  ( value < lowerBound )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P6_Replace_Expression]^if  ( value > upperBound )  {^249^^^^^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P15_Unwrap_Block]^throw new org.joda.time.IllegalFieldValueException(fieldName, new java.lang.Integer(value), new java.lang.Integer(lowerBound), new java.lang.Integer(upperBound));^249^250^251^252^253^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  { throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P16_Remove_Block]^^249^250^251^252^253^247^254^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  { throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P13_Insert_Block]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {     throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^249^^^^^247^254^[Delete]^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P13_Insert_Block]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {     throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^249^^^^^247^254^[Delete]^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P4_Replace_Constructor]^throw throw  new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  )  , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P4_Replace_Constructor]^throw new IllegalFieldValueException (  new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( fieldName, new Integer ( lowerBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( lowerBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( lowerBound, new Integer ( value ) , new Integer ( fieldName ) , new Integer ( upperBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( fieldName, new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( value )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( upperBound ) , new Integer ( lowerBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P13_Insert_Block]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {     throw new IllegalFieldValueException ( field.getType (  ) , new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^250^^^^^247^254^[Delete]^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P13_Insert_Block]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {     throw new IllegalFieldValueException ( fieldType, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^250^^^^^247^254^[Delete]^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P13_Insert_Block]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  {     throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^250^^^^^247^254^[Delete]^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P4_Replace_Constructor]^( fieldName, ( fieldName,  new Integer ( upperBound )  , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^251^252^^^^247^254^( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^( fieldName, new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^251^252^^^^247^254^( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P4_Replace_Constructor]^new Integer ( upperBound )  , new Integer ( upperBound )  ) ;^252^^^^^247^254^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^new Integer ( value ) , new Integer ( upperBound )  ) ;^252^^^^^247^254^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P12_Insert_Condition]^if  (  ( value < lowerBound )  ||  ( value > upperBound )  )  { new Integer ( lowerBound ) , new Integer ( upperBound )  ) ; }^252^^^^^247^254^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P4_Replace_Constructor]^new Integer ( lowerBound )  , new Integer ( upperBound )  ) ;^252^^^^^247^254^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^new Integer ( lowerBound ) , new Integer ( value )  ) ;^252^^^^^247^254^new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( value ) , new Integer ( upperBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( upperBound, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( fieldName )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( fieldName, new Integer ( lowerBound ) , new Integer ( value ) , new Integer ( upperBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( value )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P8_Replace_Mix]^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( upperBound ) , new Integer ( upperBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^throw new IllegalFieldValueException ( fieldName, new Integer ( upperBound ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^250^251^252^^^247^254^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , new Integer ( lowerBound ) , new Integer ( upperBound )  ) ;^[CLASS] FieldUtils  [METHOD] verifyValueBounds [RETURN_TYPE] void   String fieldName int value int lowerBound int upperBound [VARIABLES] boolean  String  fieldName  int  lowerBound  upperBound  value  
[P5_Replace_Variable]^return getWrappedValue ( minValue + wrapValue, minValue, maxValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[P5_Replace_Variable]^return getWrappedValue ( currentValue + maxValue, minValue, maxValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[P5_Replace_Variable]^return getWrappedValue ( currentValue + wrapValue, wrapValue, maxValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[P5_Replace_Variable]^return getWrappedValue ( currentValue + wrapValue, minValue, wrapValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[P5_Replace_Variable]^return getWrappedValue ( currentValue +  minValue, maxValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[P5_Replace_Variable]^return getWrappedValue ( currentValue + wrapValue,  maxValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[P5_Replace_Variable]^return getWrappedValue ( currentValue + wrapValue, minValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[P5_Replace_Variable]^return getWrappedValue ( wrapValue + currentValue, minValue, maxValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[P5_Replace_Variable]^return getWrappedValue ( currentValue + maxValue, minValue, wrapValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[P5_Replace_Variable]^return getWrappedValue ( currentValue + wrapValue, maxValue, minValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[P5_Replace_Variable]^return getWrappedValue ( wrapValue + wrapValue, minValue, maxValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[P5_Replace_Variable]^return getWrappedValue ( maxValue + wrapValue, minValue, currentValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[P5_Replace_Variable]^return getWrappedValue ( currentValue + minValue, wrapValue, maxValue ) ;^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[P14_Delete_Statement]^^273^^^^^271^274^return getWrappedValue ( currentValue + wrapValue, minValue, maxValue ) ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int currentValue int wrapValue int minValue int maxValue [VARIABLES] boolean  int  currentValue  maxValue  minValue  wrapValue  
[P2_Replace_Operator]^if  ( minValue > maxValue )  {^289^^^^^288^306^if  ( minValue >= maxValue )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^if  ( wrapRange >= maxValue )  {^289^^^^^288^306^if  ( minValue >= maxValue )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^if  ( minValue >= wrapRange )  {^289^^^^^288^306^if  ( minValue >= maxValue )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^if  ( maxValue >= minValue )  {^289^^^^^288^306^if  ( minValue >= maxValue )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("MIN > MAX");^289^290^291^^^288^306^if  ( minValue >= maxValue )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P16_Remove_Block]^^289^290^291^^^288^306^if  ( minValue >= maxValue )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P13_Insert_Block]^if  ( minValue >= maxValue )  {     throw new IllegalArgumentException ( "MIN > MAX" ) ; }^290^^^^^288^306^[Delete]^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P11_Insert_Donor_Statement]^throw new ArithmeticException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^290^^^^^288^306^throw new IllegalArgumentException  (" ")  ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P8_Replace_Mix]^throw new IllegalFieldValueException ( fieldName, new Integer ( value ) , ;^290^^^^^288^306^throw new IllegalArgumentException  (" ")  ;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P1_Replace_Type]^long  wrapRange = maxValue - minValue + 1;^293^^^^^288^306^int wrapRange = maxValue - minValue + 1;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P2_Replace_Operator]^int wrapRange = maxValue   instanceof   minValue + 1;^293^^^^^288^306^int wrapRange = maxValue - minValue + 1;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P3_Replace_Literal]^int wrapRange = maxValue - minValue ;^293^^^^^288^306^int wrapRange = maxValue - minValue + 1;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^int wrapRange = value - minValue + 1;^293^^^^^288^306^int wrapRange = maxValue - minValue + 1;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^int wrapRange = maxValue - value + 1;^293^^^^^288^306^int wrapRange = maxValue - minValue + 1;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^int wrapRange = minValue - maxValue + 1;^293^^^^^288^306^int wrapRange = maxValue - minValue + 1;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P2_Replace_Operator]^value += minValue;^294^^^^^288^306^value -= minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^value -= wrapRange;^294^^^^^288^306^value -= minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P2_Replace_Operator]^if  ( value > 0 )  {^296^^^^^288^306^if  ( value >= 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P3_Replace_Literal]^if  ( value >= minValue )  {^296^^^^^288^306^if  ( value >= 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^if  ( remByRange >= 0 )  {^296^^^^^288^306^if  ( value >= 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P6_Replace_Expression]^if  ( value % wrapRange + minValue )  {^296^^^^^288^306^if  ( value >= 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P6_Replace_Expression]^if  ( value % wrapRange )  {^296^^^^^288^306^if  ( value >= 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P8_Replace_Mix]^if  ( value >= 0 + 3 )  {^296^^^^^288^306^if  ( value >= 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P9_Replace_Statement]^if  ( val2 == 0 )  {^296^^^^^288^306^if  ( value >= 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P9_Replace_Statement]^if  ( val2 == 1 )  {^296^^^^^288^306^if  ( value >= 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P9_Replace_Statement]^if  ( remByRange == 0 )  {^296^^^^^288^306^if  ( value >= 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P15_Unwrap_Block]^return (value % wrapRange) + minValue;^296^297^298^^^288^306^if  ( value >= 0 )  { return  ( value % wrapRange )  + minValue; }^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P16_Remove_Block]^^296^297^298^^^288^306^if  ( value >= 0 )  { return  ( value % wrapRange )  + minValue; }^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P13_Insert_Block]^if  ( remByRange == 0 )  {     return 0 + minValue; }^296^^^^^288^306^[Delete]^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P2_Replace_Operator]^return  &&  ( value % wrapRange )  + minValue;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P2_Replace_Operator]^return  ( value  <  wrapRange )  + minValue;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^return  ( remByRange % wrapRange )  + minValue;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^return  ( value % remByRange )  + minValue;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^return  ( value % wrapRange )  + value;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^return  ( wrapRange % value )  + minValue;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^return  ( value % minValue )  + wrapRange;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^return  ( minValue % wrapRange )  + value;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P8_Replace_Mix]^return  (value )  + minValue;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P13_Insert_Block]^if  ( value >= 0 )  {     return  ( value % wrapRange )  + minValue; }^297^^^^^288^306^[Delete]^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P2_Replace_Operator]^return  >>  ( value % wrapRange )  + minValue;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P2_Replace_Operator]^return  ( value  ||  wrapRange )  + minValue;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^return  ( value % wrapRange )  + wrapRange;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P8_Replace_Mix]^return  ( value % wrapRange )   ;^297^^^^^288^306^return  ( value % wrapRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P1_Replace_Type]^short  remByRange =  ( -value )  % wrapRange;^300^^^^^288^306^int remByRange =  ( -value )  % wrapRange;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P2_Replace_Operator]^int remByRange =  ( -value )   &&  wrapRange;^300^^^^^288^306^int remByRange =  ( -value )  % wrapRange;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P8_Replace_Mix]^int remByRange =  ( -value )  % value;^300^^^^^288^306^int remByRange =  ( -value )  % wrapRange;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P2_Replace_Operator]^if  ( remByRange != 0 )  {^302^^^^^288^306^if  ( remByRange == 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P3_Replace_Literal]^if  ( remByRange == -8 )  {^302^^^^^288^306^if  ( remByRange == 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P3_Replace_Literal]^if  ( remByRange == value )  {^302^^^^^288^306^if  ( remByRange == 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^if  ( wrapRange == 0 )  {^302^^^^^288^306^if  ( remByRange == 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P6_Replace_Expression]^if  ( 0 + minValue )  {^302^^^^^288^306^if  ( remByRange == 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P8_Replace_Mix]^if  ( remByRange == 2 )  {^302^^^^^288^306^if  ( remByRange == 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P9_Replace_Statement]^if  ( val2 == 0 )  {^302^^^^^288^306^if  ( remByRange == 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P9_Replace_Statement]^if  ( value >= 0 )  {^302^^^^^288^306^if  ( remByRange == 0 )  {^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P15_Unwrap_Block]^return 0 + minValue;^302^303^304^^^288^306^if  ( remByRange == 0 )  { return 0 + minValue; }^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P16_Remove_Block]^^302^303^304^^^288^306^if  ( remByRange == 0 )  { return 0 + minValue; }^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P13_Insert_Block]^if  ( value >= 0 )  {     return  ( value % wrapRange )  + minValue; }^302^^^^^288^306^[Delete]^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P13_Insert_Block]^if  ( val2 == 0 )  {     return 0; }^302^^^^^288^306^[Delete]^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P13_Insert_Block]^if  ( val2 == 1 )  {     return val1; }^302^^^^^288^306^[Delete]^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P3_Replace_Literal]^return -6 + minValue;^303^^^^^288^306^return 0 + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^return 0 + wrapRange;^303^^^^^288^306^return 0 + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P8_Replace_Mix]^returnvalue + minValue;^303^^^^^288^306^return 0 + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P3_Replace_Literal]^return minValue + minValue;^303^^^^^288^306^return 0 + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^return 0 + value;^303^^^^^288^306^return 0 + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P2_Replace_Operator]^return  &&  ( wrapRange - remByRange )  + minValue;^305^^^^^288^306^return  ( wrapRange - remByRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P2_Replace_Operator]^return  ( wrapRange  <=  remByRange )  + minValue;^305^^^^^288^306^return  ( wrapRange - remByRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^return  ( value - remByRange )  + minValue;^305^^^^^288^306^return  ( wrapRange - remByRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^return  ( wrapRange - wrapRange )  + minValue;^305^^^^^288^306^return  ( wrapRange - remByRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^return  ( wrapRange - remByRange )  + wrapRange;^305^^^^^288^306^return  ( wrapRange - remByRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^return  ( remByRange - wrapRange )  + minValue;^305^^^^^288^306^return  ( wrapRange - remByRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P5_Replace_Variable]^return  ( wrapRange - minValue )  + remByRange;^305^^^^^288^306^return  ( wrapRange - remByRange )  + minValue;^[CLASS] FieldUtils  [METHOD] getWrappedValue [RETURN_TYPE] int   int value int minValue int maxValue [VARIABLES] boolean  int  maxValue  minValue  remByRange  value  wrapRange  
[P2_Replace_Operator]^if  ( object1 >= object2 )  {^318^^^^^317^325^if  ( object1 == object2 )  {^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P5_Replace_Variable]^if  ( object2 == object1 )  {^318^^^^^317^325^if  ( object1 == object2 )  {^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P15_Unwrap_Block]^return true;^318^319^320^^^317^325^if  ( object1 == object2 )  { return true; }^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P16_Remove_Block]^^318^319^320^^^317^325^if  ( object1 == object2 )  { return true; }^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P13_Insert_Block]^if  (  ( object1 == null )  ||  ( object2 == null )  )  {     return false; }^318^^^^^317^325^[Delete]^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P13_Insert_Block]^if  ( val2 == 0 )  {     return 0; }^318^^^^^317^325^[Delete]^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P13_Insert_Block]^if  ( val2 == 1 )  {     return val1; }^318^^^^^317^325^[Delete]^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P3_Replace_Literal]^return false;^319^^^^^317^325^return true;^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P2_Replace_Operator]^if  ( object1 == null && object2 == null )  {^321^^^^^317^325^if  ( object1 == null || object2 == null )  {^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P2_Replace_Operator]^if  ( object1 != null || object2 == null )  {^321^^^^^317^325^if  ( object1 == null || object2 == null )  {^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P2_Replace_Operator]^if  ( object1 == null || object2 != null )  {^321^^^^^317^325^if  ( object1 == null || object2 == null )  {^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P5_Replace_Variable]^if  ( object2 == null || object1 == null )  {^321^^^^^317^325^if  ( object1 == null || object2 == null )  {^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P6_Replace_Expression]^if  ( object1 == null ) {^321^^^^^317^325^if  ( object1 == null || object2 == null )  {^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P6_Replace_Expression]^if  (  object2 == null )  {^321^^^^^317^325^if  ( object1 == null || object2 == null )  {^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P8_Replace_Mix]^if  ( object1 == true || object2 == true )  {^321^^^^^317^325^if  ( object1 == null || object2 == null )  {^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P15_Unwrap_Block]^return false;^321^322^323^^^317^325^if  ( object1 == null || object2 == null )  { return false; }^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P16_Remove_Block]^^321^322^323^^^317^325^if  ( object1 == null || object2 == null )  { return false; }^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P13_Insert_Block]^if  ( object1 == object2 )  {     return true; }^321^^^^^317^325^[Delete]^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P3_Replace_Literal]^return true;^322^^^^^317^325^return false;^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P5_Replace_Variable]^return object2.equals ( object1 ) ;^324^^^^^317^325^return object1.equals ( object2 ) ;^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P7_Replace_Invocation]^return object1 .equals ( object1 )  ;^324^^^^^317^325^return object1.equals ( object2 ) ;^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P12_Insert_Condition]^if  ( object1 == object2 )  { return object1.equals ( object2 ) ; }^324^^^^^317^325^return object1.equals ( object2 ) ;^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P7_Replace_Invocation]^return object1 .equals ( object2 )  ;^324^^^^^317^325^return object1.equals ( object2 ) ;^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
[P14_Delete_Statement]^^324^^^^^317^325^return object1.equals ( object2 ) ;^[CLASS] FieldUtils  [METHOD] equals [RETURN_TYPE] boolean   Object object1 Object object2 [VARIABLES] boolean  Object  object1  object2  
