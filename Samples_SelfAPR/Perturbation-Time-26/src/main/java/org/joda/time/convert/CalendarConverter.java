[P14_Delete_Statement]^^49^^^^^48^50^super (  ) ;^[CLASS] CalendarConverter  [METHOD] <init> [RETURN_TYPE] CalendarConverter()   [VARIABLES] CalendarConverter  INSTANCE  boolean  
[P2_Replace_Operator]^if  ( chrono == null )  {^68^^^^^67^80^if  ( chrono != null )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P8_Replace_Mix]^if  ( chrono != true )  {^68^^^^^67^80^if  ( chrono != null )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P15_Unwrap_Block]^return chrono;^68^69^70^^^67^80^if  ( chrono != null )  { return chrono; }^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P16_Remove_Block]^^68^69^70^^^67^80^if  ( chrono != null )  { return chrono; }^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P11_Insert_Donor_Statement]^Calendar calendar =  ( Calendar )  object;Calendar cal =  ( Calendar )  object;^71^^^^^67^80^Calendar cal =  ( Calendar )  object;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P11_Insert_Donor_Statement]^GregorianCalendar gc =  ( GregorianCalendar )  object;Calendar cal =  ( Calendar )  object;^71^^^^^67^80^Calendar cal =  ( Calendar )  object;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P7_Replace_Invocation]^zone = DateTimeZone .getDefault (  )  ;^74^^^^^67^80^zone = DateTimeZone.forTimeZone ( cal.getTimeZone (  )  ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P8_Replace_Mix]^zone =  DateTimeZone.forTimeZone ( null.getTimeZone (  )  ) ;^74^^^^^67^80^zone = DateTimeZone.forTimeZone ( cal.getTimeZone (  )  ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P11_Insert_Donor_Statement]^zone = DateTimeZone.getDefault (  ) ;zone = DateTimeZone.forTimeZone ( cal.getTimeZone (  )  ) ;^74^^^^^67^80^zone = DateTimeZone.forTimeZone ( cal.getTimeZone (  )  ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P8_Replace_Mix]^zone = DateTimeZone.forTimeZone ( cal .getTime (  )   ) ;^74^^^^^67^80^zone = DateTimeZone.forTimeZone ( cal.getTimeZone (  )  ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P14_Delete_Statement]^^74^75^76^77^78^67^80^zone = DateTimeZone.forTimeZone ( cal.getTimeZone (  )  ) ;  } catch  ( IllegalArgumentException ex )  { zone = DateTimeZone.getDefault (  ) ; }^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P8_Replace_Mix]^zone  =  zone ;^77^^^^^67^80^zone = DateTimeZone.getDefault (  ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P11_Insert_Donor_Statement]^zone = DateTimeZone.forTimeZone ( cal.getTimeZone (  )  ) ;zone = DateTimeZone.getDefault (  ) ;^77^^^^^67^80^zone = DateTimeZone.getDefault (  ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P14_Delete_Statement]^^77^^^^^67^80^zone = DateTimeZone.getDefault (  ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P5_Replace_Variable]^return getChronology (  zone ) ;^79^^^^^67^80^return getChronology ( cal, zone ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P5_Replace_Variable]^return getChronology ( cal ) ;^79^^^^^67^80^return getChronology ( cal, zone ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P5_Replace_Variable]^return getChronology ( zone, cal ) ;^79^^^^^67^80^return getChronology ( cal, zone ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P7_Replace_Invocation]^return getInstantMillis ( cal, zone ) ;^79^^^^^67^80^return getChronology ( cal, zone ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P14_Delete_Statement]^^79^^^^^67^80^return getChronology ( cal, zone ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  boolean  Calendar  cal  Object  object  Chronology  chrono  DateTimeZone  zone  IllegalArgumentException  ex  
[P3_Replace_Literal]^if  ( object.getClass (  ) .getName (  ) .endsWith ( "stCalendBuddhistCalendar" )  )  {^94^^^^^93^109^if  ( object.getClass (  ) .getName (  ) .endsWith ( ".BuddhistCalendar" )  )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P6_Replace_Expression]^if  ( cutover == MIN_VALUE )  {^94^^^^^93^109^if  ( object.getClass (  ) .getName (  ) .endsWith ( ".BuddhistCalendar" )  )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P6_Replace_Expression]^if  ( cutover == MAX_VALUE )  {^94^^^^^93^109^if  ( object.getClass (  ) .getName (  ) .endsWith ( ".BuddhistCalendar" )  )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P13_Insert_Block]^if  ( object instanceof GregorianCalendar )  {     GregorianCalendar gc =  (  ( GregorianCalendar )   ( object )  ) ;     long cutover = gc.getGregorianChange (  ) .getTime (  ) ;     if  ( cutover ==  ( MIN_VALUE )  )  {         return getInstance ( zone ) ;     }else         if  ( cutover ==  ( MAX_VALUE )  )  {             return getInstance ( zone ) ;         }else {             return getInstance ( zone, cutover, 4 ) ;         }      }else {     return getInstance ( zone ) ; }^94^^^^^93^109^[Delete]^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P2_Replace_Operator]^} else if  ( object  &&  GregorianCalendar )  {^96^^^^^93^109^} else if  ( object instanceof GregorianCalendar )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P6_Replace_Expression]^} else if  ( cutover == MIN_VALUE )  {^96^^^^^93^109^} else if  ( object instanceof GregorianCalendar )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P6_Replace_Expression]^} else if  ( cutover == MAX_VALUE )  {^96^^^^^93^109^} else if  ( object instanceof GregorianCalendar )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P6_Replace_Expression]^} else {^96^^^^^93^109^} else if  ( object instanceof GregorianCalendar )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P14_Delete_Statement]^^107^^^^^93^109^return ISOChronology.getInstance ( zone ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P2_Replace_Operator]^if  ( cutover <= Long.MIN_VALUE )  {^99^^^^^93^109^if  ( cutover == Long.MIN_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P2_Replace_Operator]^if  ( cutover != Long.MIN_VALUE )  {^99^^^^^93^109^if  ( cutover == Long.MIN_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P6_Replace_Expression]^if  ( cutover == MAX_VALUE )  {^99^^^^^93^109^if  ( cutover == Long.MIN_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P2_Replace_Operator]^} else if  ( cutover != Long.MAX_VALUE )  {^101^^^^^93^109^} else if  ( cutover == Long.MAX_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P5_Replace_Variable]^} else if  ( cutover == Long.cutover )  {^101^^^^^93^109^} else if  ( cutover == Long.MAX_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P6_Replace_Expression]^} else {^101^^^^^93^109^} else if  ( cutover == Long.MAX_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P15_Unwrap_Block]^return org.joda.time.chrono.JulianChronology.getInstance(zone);^101^102^103^104^105^93^109^} else if  ( cutover == Long.MAX_VALUE )  { return JulianChronology.getInstance ( zone ) ; } else { return GJChronology.getInstance ( zone, cutover, 4 ) ; }^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P16_Remove_Block]^^101^102^103^104^105^93^109^} else if  ( cutover == Long.MAX_VALUE )  { return JulianChronology.getInstance ( zone ) ; } else { return GJChronology.getInstance ( zone, cutover, 4 ) ; }^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P13_Insert_Block]^if  ( cutover ==  ( MIN_VALUE )  )  {     return getInstance ( zone ) ; }else     if  ( cutover ==  ( MAX_VALUE )  )  {         return getInstance ( zone ) ;     }else {         return getInstance ( zone, cutover, 4 ) ;     }^101^^^^^93^109^[Delete]^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover, 0 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P5_Replace_Variable]^return GJChronology.getInstance (  cutover, 4 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P5_Replace_Variable]^return GJChronology.getInstance ( zone,  4 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P5_Replace_Variable]^return GJChronology.getInstance ( cutover, zone, 4 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P7_Replace_Invocation]^return GJChronology .getInstance ( zone )  ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P8_Replace_Mix]^return GJChronology.getInstance ( zone, cutover, 5 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover, -3 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P14_Delete_Statement]^^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P14_Delete_Statement]^^102^^^^^93^109^return JulianChronology.getInstance ( zone ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P8_Replace_Mix]^return GJChronology.getInstance ( zone, cutover, 4 + 2 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover,  ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P14_Delete_Statement]^^100^^^^^93^109^return GregorianChronology.getInstance ( zone ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover, -4 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover, 7 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover, 2 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P11_Insert_Donor_Statement]^Calendar calendar =  ( Calendar )  object;GregorianCalendar gc =  ( GregorianCalendar )  object;^97^^^^^93^109^GregorianCalendar gc =  ( GregorianCalendar )  object;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P11_Insert_Donor_Statement]^Calendar cal =  ( Calendar )  object;GregorianCalendar gc =  ( GregorianCalendar )  object;^97^^^^^93^109^GregorianCalendar gc =  ( GregorianCalendar )  object;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P1_Replace_Type]^int  cutover = gc.getGregorianChange (  ) .getTime (  ) ;^98^^^^^93^109^long cutover = gc.getGregorianChange (  ) .getTime (  ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P14_Delete_Statement]^^98^^^^^93^109^long cutover = gc.getGregorianChange (  ) .getTime (  ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P5_Replace_Variable]^if  ( cutover == Long.cutover )  {^99^^^^^93^109^if  ( cutover == Long.MIN_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P8_Replace_Mix]^}  if  ( cutover == Long.MAX_VALUE )  {^101^^^^^93^109^} else if  ( cutover == Long.MAX_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover, 9 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover, 1 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P8_Replace_Mix]^return GJChronology.getInstance ( zone, cutover, 4 / 1 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P8_Replace_Mix]^return GJChronology.getInstance ( zone, cutover, 4 * 2 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover, null ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P8_Replace_Mix]^return JulianChronology .getInstance ( zone , cutover , 3 )  ;^102^^^^^93^109^return JulianChronology.getInstance ( zone ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover, 12 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P8_Replace_Mix]^return JulianChronology .getInstance ( zone , cutover , 1 )  ;^102^^^^^93^109^return JulianChronology.getInstance ( zone ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover, 13 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P14_Delete_Statement]^^95^^^^^93^109^return BuddhistChronology.getInstance ( zone ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P2_Replace_Operator]^} else if  ( object  >  GregorianCalendar )  {^96^^^^^93^109^} else if  ( object instanceof GregorianCalendar )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P8_Replace_Mix]^}  if  ( object instanceof GregorianCalendar )  {^96^^^^^93^109^} else if  ( object instanceof GregorianCalendar )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P2_Replace_Operator]^} else if  ( cutover > Long.MAX_VALUE )  {^101^^^^^93^109^} else if  ( cutover == Long.MAX_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover, -2 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover, 10 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P8_Replace_Mix]^return GJChronology.getInstance ( zone, cutover, 4 * 3 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P8_Replace_Mix]^return GJChronology.getInstance ( zone, cutover, 4 << 4 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P8_Replace_Mix]^return GJChronology.getInstance ( zone, cutover, 6 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover, -1 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover, 11 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P8_Replace_Mix]^return GJChronology.getInstance ( zone, cutover, 4 << 1 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P2_Replace_Operator]^} else if  ( cutover <= Long.MAX_VALUE )  {^101^^^^^93^109^} else if  ( cutover == Long.MAX_VALUE )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P8_Replace_Mix]^return GJChronology.getInstance ( zone, cutover, 4 - 0 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover, 3 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P8_Replace_Mix]^return GregorianChronology .getInstance ( zone , cutover , 0 )  ;^100^^^^^93^109^return GregorianChronology.getInstance ( zone ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^return GJChronology.getInstance ( zone, cutover, -5 ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P8_Replace_Mix]^return GJChronology.getInstance ( zone, cutover, 4L ) ;^104^^^^^93^109^return GJChronology.getInstance ( zone, cutover, 4 ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P1_Replace_Type]^short  cutover = gc.getGregorianChange (  ) .getTime (  ) ;^98^^^^^93^109^long cutover = gc.getGregorianChange (  ) .getTime (  ) ;^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P3_Replace_Literal]^if  ( object.getClass (  ) .getName (  ) .endsWith ( ".Bud" )  )  {^94^^^^^93^109^if  ( object.getClass (  ) .getName (  ) .endsWith ( ".BuddhistCalendar" )  )  {^[CLASS] CalendarConverter  [METHOD] getChronology [RETURN_TYPE] Chronology   Object object DateTimeZone zone [VARIABLES] CalendarConverter  INSTANCE  GregorianCalendar  gc  Object  object  boolean  DateTimeZone  zone  long  cutover  
[P11_Insert_Donor_Statement]^GregorianCalendar gc =  ( GregorianCalendar )  object;Calendar calendar =  ( Calendar )  object;^121^^^^^120^123^Calendar calendar =  ( Calendar )  object;^[CLASS] CalendarConverter  [METHOD] getInstantMillis [RETURN_TYPE] long   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  Object  object  Chronology  chrono  boolean  Calendar  calendar  
[P11_Insert_Donor_Statement]^Calendar cal =  ( Calendar )  object;Calendar calendar =  ( Calendar )  object;^121^^^^^120^123^Calendar calendar =  ( Calendar )  object;^[CLASS] CalendarConverter  [METHOD] getInstantMillis [RETURN_TYPE] long   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  Object  object  Chronology  chrono  boolean  Calendar  calendar  
[P14_Delete_Statement]^^122^^^^^120^123^return calendar.getTime (  ) .getTime (  ) ;^[CLASS] CalendarConverter  [METHOD] getInstantMillis [RETURN_TYPE] long   Object object Chronology chrono [VARIABLES] CalendarConverter  INSTANCE  Object  object  Chronology  chrono  boolean  Calendar  calendar  
