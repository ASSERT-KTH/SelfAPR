[P14_Delete_Statement]^^54^^^^^53^55^super (  ) ;^[CLASS] AbstractPartial  [METHOD] <init> [RETURN_TYPE] AbstractPartial()   [VARIABLES] boolean  
[P7_Replace_Invocation]^return getField ( index, getChronology (  )  ) .getValue (  ) ;^79^^^^^78^80^return getField ( index, getChronology (  )  ) .getType (  ) ;^[CLASS] AbstractPartial  [METHOD] getFieldType [RETURN_TYPE] DateTimeFieldType   int index [VARIABLES] boolean  int  index  
[P7_Replace_Invocation]^return indexOf ( index, getChronology (  )  ) .getType (  ) ;^79^^^^^78^80^return getField ( index, getChronology (  )  ) .getType (  ) ;^[CLASS] AbstractPartial  [METHOD] getFieldType [RETURN_TYPE] DateTimeFieldType   int index [VARIABLES] boolean  int  index  
[P7_Replace_Invocation]^return getField ( index, getType (  )  ) .getType (  ) ;^79^^^^^78^80^return getField ( index, getChronology (  )  ) .getType (  ) ;^[CLASS] AbstractPartial  [METHOD] getFieldType [RETURN_TYPE] DateTimeFieldType   int index [VARIABLES] boolean  int  index  
[P8_Replace_Mix]^return getField ( index, getChronology (  )  )  .getValue ( index )  ;^79^^^^^78^80^return getField ( index, getChronology (  )  ) .getType (  ) ;^[CLASS] AbstractPartial  [METHOD] getFieldType [RETURN_TYPE] DateTimeFieldType   int index [VARIABLES] boolean  int  index  
[P14_Delete_Statement]^^79^^^^^78^80^return getField ( index, getChronology (  )  ) .getType (  ) ;^[CLASS] AbstractPartial  [METHOD] getFieldType [RETURN_TYPE] DateTimeFieldType   int index [VARIABLES] boolean  int  index  
[P3_Replace_Literal]^DateTimeFieldType[] result = new DateTimeFieldType[size() + 7 ];^90^^^^^89^95^DateTimeFieldType[] result = new DateTimeFieldType[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getFieldTypes [RETURN_TYPE] DateTimeFieldType[]   [VARIABLES] boolean  DateTimeFieldType[]  result  int  i  
[P7_Replace_Invocation]^DateTimeFieldType[] result = new DateTimeFieldType[hashCode (  ) ];^90^^^^^89^95^DateTimeFieldType[] result = new DateTimeFieldType[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getFieldTypes [RETURN_TYPE] DateTimeFieldType[]   [VARIABLES] boolean  DateTimeFieldType[]  result  int  i  
[P11_Insert_Donor_Statement]^DateTimeField[] result = new DateTimeField[size (  ) ];DateTimeFieldType[] result = new DateTimeFieldType[size (  ) ];^90^^^^^89^95^DateTimeFieldType[] result = new DateTimeFieldType[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getFieldTypes [RETURN_TYPE] DateTimeFieldType[]   [VARIABLES] boolean  DateTimeFieldType[]  result  int  i  
[P11_Insert_Donor_Statement]^int[] result = new int[size (  ) ];DateTimeFieldType[] result = new DateTimeFieldType[size (  ) ];^90^^^^^89^95^DateTimeFieldType[] result = new DateTimeFieldType[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getFieldTypes [RETURN_TYPE] DateTimeFieldType[]   [VARIABLES] boolean  DateTimeFieldType[]  result  int  i  
[P3_Replace_Literal]^DateTimeFieldType[] result = new DateTimeFieldType[size() - 1 ];^90^^^^^89^95^DateTimeFieldType[] result = new DateTimeFieldType[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getFieldTypes [RETURN_TYPE] DateTimeFieldType[]   [VARIABLES] boolean  DateTimeFieldType[]  result  int  i  
[P14_Delete_Statement]^^90^^^^^89^95^DateTimeFieldType[] result = new DateTimeFieldType[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getFieldTypes [RETURN_TYPE] DateTimeFieldType[]   [VARIABLES] boolean  DateTimeFieldType[]  result  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < result.length; i++ )  {^91^^^^^89^95^for  ( int i = 0; i < result.length; i++ )  {^[CLASS] AbstractPartial  [METHOD] getFieldTypes [RETURN_TYPE] DateTimeFieldType[]   [VARIABLES] boolean  DateTimeFieldType[]  result  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i > result.length; i++ )  {^91^^^^^89^95^for  ( int i = 0; i < result.length; i++ )  {^[CLASS] AbstractPartial  [METHOD] getFieldTypes [RETURN_TYPE] DateTimeFieldType[]   [VARIABLES] boolean  DateTimeFieldType[]  result  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < result.length; i++ )  {^91^^^^^89^95^for  ( int i = 0; i < result.length; i++ )  {^[CLASS] AbstractPartial  [METHOD] getFieldTypes [RETURN_TYPE] DateTimeFieldType[]   [VARIABLES] boolean  DateTimeFieldType[]  result  int  i  
[P7_Replace_Invocation]^result[i] = getField ( i ) ;^92^^^^^89^95^result[i] = getFieldType ( i ) ;^[CLASS] AbstractPartial  [METHOD] getFieldTypes [RETURN_TYPE] DateTimeFieldType[]   [VARIABLES] boolean  DateTimeFieldType[]  result  int  i  
[P8_Replace_Mix]^result[i]  =  result[i] ;^92^^^^^89^95^result[i] = getFieldType ( i ) ;^[CLASS] AbstractPartial  [METHOD] getFieldTypes [RETURN_TYPE] DateTimeFieldType[]   [VARIABLES] boolean  DateTimeFieldType[]  result  int  i  
[P11_Insert_Donor_Statement]^result[i] = getValue ( i ) ;result[i] = getFieldType ( i ) ;^92^^^^^89^95^result[i] = getFieldType ( i ) ;^[CLASS] AbstractPartial  [METHOD] getFieldTypes [RETURN_TYPE] DateTimeFieldType[]   [VARIABLES] boolean  DateTimeFieldType[]  result  int  i  
[P11_Insert_Donor_Statement]^result[i] = getField ( i ) ;result[i] = getFieldType ( i ) ;^92^^^^^89^95^result[i] = getFieldType ( i ) ;^[CLASS] AbstractPartial  [METHOD] getFieldTypes [RETURN_TYPE] DateTimeFieldType[]   [VARIABLES] boolean  DateTimeFieldType[]  result  int  i  
[P14_Delete_Statement]^^92^^^^^89^95^result[i] = getFieldType ( i ) ;^[CLASS] AbstractPartial  [METHOD] getFieldTypes [RETURN_TYPE] DateTimeFieldType[]   [VARIABLES] boolean  DateTimeFieldType[]  result  int  i  
[P8_Replace_Mix]^result[i]  = null ;^92^^^^^89^95^result[i] = getFieldType ( i ) ;^[CLASS] AbstractPartial  [METHOD] getFieldTypes [RETURN_TYPE] DateTimeFieldType[]   [VARIABLES] boolean  DateTimeFieldType[]  result  int  i  
[P7_Replace_Invocation]^return indexOf ( index, getChronology (  )  ) ;^105^^^^^104^106^return getField ( index, getChronology (  )  ) ;^[CLASS] AbstractPartial  [METHOD] getField [RETURN_TYPE] DateTimeField   int index [VARIABLES] boolean  int  index  
[P7_Replace_Invocation]^return getField ( index, getType (  )  ) ;^105^^^^^104^106^return getField ( index, getChronology (  )  ) ;^[CLASS] AbstractPartial  [METHOD] getField [RETURN_TYPE] DateTimeField   int index [VARIABLES] boolean  int  index  
[P14_Delete_Statement]^^105^^^^^104^106^return getField ( index, getChronology (  )  ) ;^[CLASS] AbstractPartial  [METHOD] getField [RETURN_TYPE] DateTimeField   int index [VARIABLES] boolean  int  index  
[P3_Replace_Literal]^DateTimeField[] result = new DateTimeField[size() + 8 ];^116^^^^^115^121^DateTimeField[] result = new DateTimeField[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getFields [RETURN_TYPE] DateTimeField[]   [VARIABLES] boolean  DateTimeField[]  result  int  i  
[P7_Replace_Invocation]^DateTimeField[] result = new DateTimeField[hashCode (  ) ];^116^^^^^115^121^DateTimeField[] result = new DateTimeField[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getFields [RETURN_TYPE] DateTimeField[]   [VARIABLES] boolean  DateTimeField[]  result  int  i  
[P11_Insert_Donor_Statement]^int[] result = new int[size (  ) ];DateTimeField[] result = new DateTimeField[size (  ) ];^116^^^^^115^121^DateTimeField[] result = new DateTimeField[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getFields [RETURN_TYPE] DateTimeField[]   [VARIABLES] boolean  DateTimeField[]  result  int  i  
[P11_Insert_Donor_Statement]^DateTimeFieldType[] result = new DateTimeFieldType[size (  ) ];DateTimeField[] result = new DateTimeField[size (  ) ];^116^^^^^115^121^DateTimeField[] result = new DateTimeField[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getFields [RETURN_TYPE] DateTimeField[]   [VARIABLES] boolean  DateTimeField[]  result  int  i  
[P3_Replace_Literal]^DateTimeField[] result = new DateTimeField[size() - 8 ];^116^^^^^115^121^DateTimeField[] result = new DateTimeField[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getFields [RETURN_TYPE] DateTimeField[]   [VARIABLES] boolean  DateTimeField[]  result  int  i  
[P14_Delete_Statement]^^116^^^^^115^121^DateTimeField[] result = new DateTimeField[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getFields [RETURN_TYPE] DateTimeField[]   [VARIABLES] boolean  DateTimeField[]  result  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < result.length; i++ )  {^117^^^^^115^121^for  ( int i = 0; i < result.length; i++ )  {^[CLASS] AbstractPartial  [METHOD] getFields [RETURN_TYPE] DateTimeField[]   [VARIABLES] boolean  DateTimeField[]  result  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= result.length; i++ )  {^117^^^^^115^121^for  ( int i = 0; i < result.length; i++ )  {^[CLASS] AbstractPartial  [METHOD] getFields [RETURN_TYPE] DateTimeField[]   [VARIABLES] boolean  DateTimeField[]  result  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < result.length; i++ )  {^117^^^^^115^121^for  ( int i = 0; i < result.length; i++ )  {^[CLASS] AbstractPartial  [METHOD] getFields [RETURN_TYPE] DateTimeField[]   [VARIABLES] boolean  DateTimeField[]  result  int  i  
[P7_Replace_Invocation]^result[i] = getFieldType ( i ) ;^118^^^^^115^121^result[i] = getField ( i ) ;^[CLASS] AbstractPartial  [METHOD] getFields [RETURN_TYPE] DateTimeField[]   [VARIABLES] boolean  DateTimeField[]  result  int  i  
[P8_Replace_Mix]^result[i]  =  result[i] ;^118^^^^^115^121^result[i] = getField ( i ) ;^[CLASS] AbstractPartial  [METHOD] getFields [RETURN_TYPE] DateTimeField[]   [VARIABLES] boolean  DateTimeField[]  result  int  i  
[P11_Insert_Donor_Statement]^result[i] = getValue ( i ) ;result[i] = getField ( i ) ;^118^^^^^115^121^result[i] = getField ( i ) ;^[CLASS] AbstractPartial  [METHOD] getFields [RETURN_TYPE] DateTimeField[]   [VARIABLES] boolean  DateTimeField[]  result  int  i  
[P11_Insert_Donor_Statement]^result[i] = getFieldType ( i ) ;result[i] = getField ( i ) ;^118^^^^^115^121^result[i] = getField ( i ) ;^[CLASS] AbstractPartial  [METHOD] getFields [RETURN_TYPE] DateTimeField[]   [VARIABLES] boolean  DateTimeField[]  result  int  i  
[P14_Delete_Statement]^^118^^^^^115^121^result[i] = getField ( i ) ;^[CLASS] AbstractPartial  [METHOD] getFields [RETURN_TYPE] DateTimeField[]   [VARIABLES] boolean  DateTimeField[]  result  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < result.length; i++ )  {^117^^^^^115^121^for  ( int i = 0; i < result.length; i++ )  {^[CLASS] AbstractPartial  [METHOD] getFields [RETURN_TYPE] DateTimeField[]   [VARIABLES] boolean  DateTimeField[]  result  int  i  
[P3_Replace_Literal]^int[] result = new int[size() + 3 ];^132^^^^^131^137^int[] result = new int[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P7_Replace_Invocation]^int[] result = new int[hashCode (  ) ];^132^^^^^131^137^int[] result = new int[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P11_Insert_Donor_Statement]^DateTimeField[] result = new DateTimeField[size (  ) ];int[] result = new int[size (  ) ];^132^^^^^131^137^int[] result = new int[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P11_Insert_Donor_Statement]^DateTimeFieldType[] result = new DateTimeFieldType[size (  ) ];int[] result = new int[size (  ) ];^132^^^^^131^137^int[] result = new int[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P3_Replace_Literal]^int[] result = new int[size() + 2 ];^132^^^^^131^137^int[] result = new int[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P14_Delete_Statement]^^132^^^^^131^137^int[] result = new int[size (  ) ];^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < result.length; i++ )  {^133^^^^^131^137^for  ( int i = 0; i < result.length; i++ )  {^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= result.length; i++ )  {^133^^^^^131^137^for  ( int i = 0; i < result.length; i++ )  {^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P3_Replace_Literal]^for  ( int i = 7; i < result.length; i++ )  {^133^^^^^131^137^for  ( int i = 0; i < result.length; i++ )  {^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P5_Replace_Variable]^for  ( resultnt i = 0; i < i.length; i++ )  {^133^^^^^131^137^for  ( int i = 0; i < result.length; i++ )  {^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P5_Replace_Variable]^for  ( result.lengthnt i = 0; i < i; i++ )  {^133^^^^^131^137^for  ( int i = 0; i < result.length; i++ )  {^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P8_Replace_Mix]^result[i]  =  result[i] ;^134^^^^^131^137^result[i] = getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P11_Insert_Donor_Statement]^total = 23 * total + getValue ( i ) ;result[i] = getValue ( i ) ;^134^^^^^131^137^result[i] = getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P11_Insert_Donor_Statement]^result[i] = getFieldType ( i ) ;result[i] = getValue ( i ) ;^134^^^^^131^137^result[i] = getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P11_Insert_Donor_Statement]^result[i] = getField ( i ) ;result[i] = getValue ( i ) ;^134^^^^^131^137^result[i] = getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P14_Delete_Statement]^^134^^^^^131^137^result[i] = getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P8_Replace_Mix]^result[i]  = null ;^134^^^^^131^137^result[i] = getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < result.length; i++ )  {^133^^^^^131^137^for  ( int i = 0; i < result.length; i++ )  {^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < result.length; i++ )  {^133^^^^^131^137^for  ( int i = 0; i < result.length; i++ )  {^[CLASS] AbstractPartial  [METHOD] getValues [RETURN_TYPE] int[]   [VARIABLES] boolean  int[]  result  int  i  
[P14_Delete_Statement]^^150^^^^^149^151^return getValue ( indexOfSupported ( type )  ) ;^[CLASS] AbstractPartial  [METHOD] get [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  
[P2_Replace_Operator]^return  ( indexOf ( type )  > -1 ) ;^160^^^^^159^161^return  ( indexOf ( type )  != -1 ) ;^[CLASS] AbstractPartial  [METHOD] isSupported [RETURN_TYPE] boolean   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  
[P3_Replace_Literal]^return  ( indexOf ( type )  != -2 ) ;^160^^^^^159^161^return  ( indexOf ( type )  != -1 ) ;^[CLASS] AbstractPartial  [METHOD] isSupported [RETURN_TYPE] boolean   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  
[P14_Delete_Statement]^^160^^^^^159^161^return  ( indexOf ( type )  != -1 ) ;^[CLASS] AbstractPartial  [METHOD] isSupported [RETURN_TYPE] boolean   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  
[P2_Replace_Operator]^if  ( getFieldType ( i )  != type )  {^171^^^^^169^176^if  ( getFieldType ( i )  == type )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P5_Replace_Variable]^if  ( getFieldType ( isize )  == type )  {^171^^^^^169^176^if  ( getFieldType ( i )  == type )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P5_Replace_Variable]^if  ( getFieldType ( type )  == i )  {^171^^^^^169^176^if  ( getFieldType ( i )  == type )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P7_Replace_Invocation]^if  ( getField ( i )  == type )  {^171^^^^^169^176^if  ( getFieldType ( i )  == type )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P15_Unwrap_Block]^return i;^171^172^173^^^169^176^if  ( getFieldType ( i )  == type )  { return i; }^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P16_Remove_Block]^^171^172^173^^^169^176^if  ( getFieldType ( i )  == type )  { return i; }^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P13_Insert_Block]^if  (  ( getFieldType ( i ) .getDurationType (  )  )  == type )  {     return i; }^171^^^^^169^176^[Delete]^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P13_Insert_Block]^if  (  ( getValue ( i )  )  <  ( other.getValue ( i )  )  )  {     return -1; }^171^^^^^169^176^[Delete]^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P13_Insert_Block]^if  (  ( this )  == partial )  {     return true; }^171^^^^^169^176^[Delete]^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P13_Insert_Block]^if  (  ( getValue ( i )  )  >  ( other.getValue ( i )  )  )  {     return 1; }^171^^^^^169^176^[Delete]^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P13_Insert_Block]^if  (  ( this )  == other )  {     return 0; }^171^^^^^169^176^[Delete]^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P8_Replace_Mix]^return isize;^172^^^^^169^176^return i;^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P1_Replace_Type]^for  (  long  i = 0, isize = size (  ) ; i < isize; i++ )  {^170^^^^^169^176^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P2_Replace_Operator]^for  ( int i = 0, isize = size (  ) ; i > isize; i++ )  {^170^^^^^169^176^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 1, isize = size (  ) ; i < isize; i++ )  {^170^^^^^169^176^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() + 6 ; i < isize; i++ )  {^170^^^^^169^176^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P5_Replace_Variable]^for  ( isizent i = 0, isize = size (  ) ; i < isize; i++ )  {^170^^^^^169^176^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P5_Replace_Variable]^for  ( int i = 0size = size (  ) ; i < isize; i++ )  {^170^^^^^169^176^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P5_Replace_Variable]^for  ( int i = 0 = size (  ) ; i < isize; i++ )  {^170^^^^^169^176^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P5_Replace_Variable]^for  ( isizent i = 0, i = size (  ) ; i < isize; i++ )  {^170^^^^^169^176^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P7_Replace_Invocation]^for  ( int i = 0, ihashCode = size (  ) ; i < isize; i++ )  {^170^^^^^169^176^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P8_Replace_Mix]^for  ( ihashCodent i = 0, isize = size (  ) ; i < isize; i++ )  {^170^^^^^169^176^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P3_Replace_Literal]^for  ( int i = -5, isize = size (  ) ; i < isize; i++ )  {^170^^^^^169^176^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() - 2 ; i < isize; i++ )  {^170^^^^^169^176^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() - 0 ; i < isize; i++ )  {^170^^^^^169^176^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() - 3 ; i < isize; i++ )  {^170^^^^^169^176^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P14_Delete_Statement]^^170^171^172^173^^169^176^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  { if  ( getFieldType ( i )  == type )  { return i; }^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P8_Replace_Mix]^if  ( getField ( isize )  == type )  {^171^^^^^169^176^if  ( getFieldType ( i )  == type )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P3_Replace_Literal]^return --1;^175^^^^^169^176^return -1;^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P8_Replace_Mix]^return -2;^175^^^^^169^176^return -1;^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  i  isize  
[P1_Replace_Type]^short  index = indexOf ( type ) ;^187^^^^^186^192^int index = indexOf ( type ) ;^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  index  
[P14_Delete_Statement]^^187^^^^^186^192^int index = indexOf ( type ) ;^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  index  
[P11_Insert_Donor_Statement]^return  ( indexOf ( type )  != -1 ) ;int index = indexOf ( type ) ;^187^^^^^186^192^int index = indexOf ( type ) ;^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  index  
[P2_Replace_Operator]^if  ( index > -1 )  {^188^^^^^186^192^if  ( index == -1 )  {^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  index  
[P3_Replace_Literal]^if  ( index == - )  {^188^^^^^186^192^if  ( index == -1 )  {^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  index  
[P6_Replace_Expression]^if  ( "Field '" + type + "' is not supported" )  {^188^^^^^186^192^if  ( index == -1 )  {^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  index  
[P6_Replace_Expression]^if  ( "Field '" + type )  {^188^^^^^186^192^if  ( index == -1 )  {^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  index  
[P8_Replace_Mix]^if  ( index == -0 )  {^188^^^^^186^192^if  ( index == -1 )  {^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  index  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((("Field '" + type) + "' is not supported"));^188^189^190^^^186^192^if  ( index == -1 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  index  
[P16_Remove_Block]^^188^189^190^^^186^192^if  ( index == -1 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  index  
[P13_Insert_Block]^if  ( partial == null )  {     throw new IllegalArgumentException ( "Partial cannot be null" ) ; }^188^^^^^186^192^[Delete]^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  index  
[P13_Insert_Block]^if  ( index ==  ( -1 )  )  {     throw new IllegalArgumentException (  (  ( "Field '" + type )  + "' is not supported" )  ) ; }^189^^^^^186^192^[Delete]^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  index  
[P8_Replace_Mix]^throw new ClassCastException  (" ")  ; ;^189^^^^^186^192^throw new IllegalArgumentException  (" ")  ;^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  index  
[P11_Insert_Donor_Statement]^throw new ClassCastException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^189^^^^^186^192^throw new IllegalArgumentException  (" ")  ;^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DateTimeFieldType type [VARIABLES] boolean  DateTimeFieldType  type  int  index  
[P2_Replace_Operator]^if  ( getFieldType ( i ) .getDurationType (  )  != type )  {^203^^^^^201^208^if  ( getFieldType ( i ) .getDurationType (  )  == type )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P5_Replace_Variable]^if  ( getFieldType ( isize ) .getDurationType (  )  == type )  {^203^^^^^201^208^if  ( getFieldType ( i ) .getDurationType (  )  == type )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P5_Replace_Variable]^if  ( getFieldType ( type ) .getDurationType (  )  == i )  {^203^^^^^201^208^if  ( getFieldType ( i ) .getDurationType (  )  == type )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P7_Replace_Invocation]^if  ( getField ( i ) .getDurationType (  )  == type )  {^203^^^^^201^208^if  ( getFieldType ( i ) .getDurationType (  )  == type )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P15_Unwrap_Block]^return i;^203^204^205^^^201^208^if  ( getFieldType ( i ) .getDurationType (  )  == type )  { return i; }^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P16_Remove_Block]^^203^204^205^^^201^208^if  ( getFieldType ( i ) .getDurationType (  )  == type )  { return i; }^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P13_Insert_Block]^if  (  ( getFieldType ( i )  )  == type )  {     return i; }^203^^^^^201^208^[Delete]^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P8_Replace_Mix]^return isize;^204^^^^^201^208^return i;^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P1_Replace_Type]^for  (  long  i = 0, isize = size (  ) ; i < isize; i++ )  {^202^^^^^201^208^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P2_Replace_Operator]^for  ( int i = 0, isize = size (  ) ; i > isize; i++ )  {^202^^^^^201^208^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 7, isize = size (  ) ; i < isize; i++ )  {^202^^^^^201^208^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() - 1 ; i < isize; i++ )  {^202^^^^^201^208^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P5_Replace_Variable]^for  ( isizent i = 0, isize = size (  ) ; i < isize; i++ )  {^202^^^^^201^208^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P5_Replace_Variable]^for  ( int i = 0size = size (  ) ; i < isize; i++ )  {^202^^^^^201^208^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P5_Replace_Variable]^for  ( int i = 0 = size (  ) ; i < isize; i++ )  {^202^^^^^201^208^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P5_Replace_Variable]^for  ( isizent i = 0, i = size (  ) ; i < isize; i++ )  {^202^^^^^201^208^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P7_Replace_Invocation]^for  ( int i = 0, ihashCode = size (  ) ; i < isize; i++ )  {^202^^^^^201^208^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P7_Replace_Invocation]^if  ( getFieldType ( i )  .hashCode (  )   == type )  {^203^^^^^201^208^if  ( getFieldType ( i ) .getDurationType (  )  == type )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P8_Replace_Mix]^if  ( getField ( isize ) .getDurationType (  )  == type )  {^203^^^^^201^208^if  ( getFieldType ( i ) .getDurationType (  )  == type )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P13_Insert_Block]^if  (  ( getFieldType ( i ) .getDurationType (  )  )  == type )  {     return i; }^203^^^^^201^208^[Delete]^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P1_Replace_Type]^for  (  short  i = 0, isize = size (  ) ; i < isize; i++ )  {^202^^^^^201^208^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() + 1 ; i < isize; i++ )  {^202^^^^^201^208^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() - 4 ; i < isize; i++ )  {^202^^^^^201^208^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() + 5 ; i < isize; i++ )  {^202^^^^^201^208^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P14_Delete_Statement]^^202^203^204^205^^201^208^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  { if  ( getFieldType ( i ) .getDurationType (  )  == type )  { return i; }^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P3_Replace_Literal]^return -isize;^207^^^^^201^208^return -1;^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P8_Replace_Mix]^return -3;^207^^^^^201^208^return -1;^[CLASS] AbstractPartial  [METHOD] indexOf [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  i  isize  
[P1_Replace_Type]^short  index = indexOf ( type ) ;^219^^^^^218^224^int index = indexOf ( type ) ;^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  index  
[P14_Delete_Statement]^^219^^^^^218^224^int index = indexOf ( type ) ;^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  index  
[P11_Insert_Donor_Statement]^return  ( indexOf ( type )  != -1 ) ;int index = indexOf ( type ) ;^219^^^^^218^224^int index = indexOf ( type ) ;^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  index  
[P2_Replace_Operator]^if  ( index <= -1 )  {^220^^^^^218^224^if  ( index == -1 )  {^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  index  
[P6_Replace_Expression]^if  ( "Field '" + type + "' is not supported" )  {^220^^^^^218^224^if  ( index == -1 )  {^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  index  
[P6_Replace_Expression]^if  ( "Field '" + type )  {^220^^^^^218^224^if  ( index == -1 )  {^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  index  
[P8_Replace_Mix]^if  ( index == -0 )  {^220^^^^^218^224^if  ( index == -1 )  {^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  index  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException((("Field '" + type) + "' is not supported"));^220^221^222^^^218^224^if  ( index == -1 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  index  
[P16_Remove_Block]^^220^221^222^^^218^224^if  ( index == -1 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  index  
[P13_Insert_Block]^if  ( partial == null )  {     throw new IllegalArgumentException ( "Partial cannot be null" ) ; }^220^^^^^218^224^[Delete]^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  index  
[P13_Insert_Block]^if  ( index ==  ( -1 )  )  {     throw new IllegalArgumentException (  (  ( "Field '" + type )  + "' is not supported" )  ) ; }^221^^^^^218^224^[Delete]^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  index  
[P8_Replace_Mix]^return false;^221^^^^^218^224^throw new IllegalArgumentException  (" ")  ;^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  index  
[P11_Insert_Donor_Statement]^throw new ClassCastException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^221^^^^^218^224^throw new IllegalArgumentException  (" ")  ;^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  index  
[P8_Replace_Mix]^throw new ClassCastException  (" ")  ; ;^221^^^^^218^224^throw new IllegalArgumentException  (" ")  ;^[CLASS] AbstractPartial  [METHOD] indexOfSupported [RETURN_TYPE] int   DurationFieldType type [VARIABLES] boolean  DurationFieldType  type  int  index  
[P7_Replace_Invocation]^Chronology chrono = DateTimeUtils.getInstantMillis ( baseInstant ) ;^240^^^^^239^244^Chronology chrono = DateTimeUtils.getInstantChronology ( baseInstant ) ;^[CLASS] AbstractPartial  [METHOD] toDateTime [RETURN_TYPE] DateTime   ReadableInstant baseInstant [VARIABLES] ReadableInstant  baseInstant  boolean  Chronology  chrono  long  instantMillis  resolved  
[P11_Insert_Donor_Statement]^long instantMillis = DateTimeUtils.getInstantMillis ( baseInstant ) ;Chronology chrono = DateTimeUtils.getInstantChronology ( baseInstant ) ;^240^^^^^239^244^Chronology chrono = DateTimeUtils.getInstantChronology ( baseInstant ) ;^[CLASS] AbstractPartial  [METHOD] toDateTime [RETURN_TYPE] DateTime   ReadableInstant baseInstant [VARIABLES] ReadableInstant  baseInstant  boolean  Chronology  chrono  long  instantMillis  resolved  
[P14_Delete_Statement]^^240^241^^^^239^244^Chronology chrono = DateTimeUtils.getInstantChronology ( baseInstant ) ; long instantMillis = DateTimeUtils.getInstantMillis ( baseInstant ) ;^[CLASS] AbstractPartial  [METHOD] toDateTime [RETURN_TYPE] DateTime   ReadableInstant baseInstant [VARIABLES] ReadableInstant  baseInstant  boolean  Chronology  chrono  long  instantMillis  resolved  
[P1_Replace_Type]^short  instantMillis = DateTimeUtils.getInstantMillis ( baseInstant ) ;^241^^^^^239^244^long instantMillis = DateTimeUtils.getInstantMillis ( baseInstant ) ;^[CLASS] AbstractPartial  [METHOD] toDateTime [RETURN_TYPE] DateTime   ReadableInstant baseInstant [VARIABLES] ReadableInstant  baseInstant  boolean  Chronology  chrono  long  instantMillis  resolved  
[P7_Replace_Invocation]^long instantMillis = DateTimeUtils.getInstantChronology ( baseInstant ) ;^241^^^^^239^244^long instantMillis = DateTimeUtils.getInstantMillis ( baseInstant ) ;^[CLASS] AbstractPartial  [METHOD] toDateTime [RETURN_TYPE] DateTime   ReadableInstant baseInstant [VARIABLES] ReadableInstant  baseInstant  boolean  Chronology  chrono  long  instantMillis  resolved  
[P11_Insert_Donor_Statement]^Chronology chrono = DateTimeUtils.getInstantChronology ( baseInstant ) ;long instantMillis = DateTimeUtils.getInstantMillis ( baseInstant ) ;^241^^^^^239^244^long instantMillis = DateTimeUtils.getInstantMillis ( baseInstant ) ;^[CLASS] AbstractPartial  [METHOD] toDateTime [RETURN_TYPE] DateTime   ReadableInstant baseInstant [VARIABLES] ReadableInstant  baseInstant  boolean  Chronology  chrono  long  instantMillis  resolved  
[P14_Delete_Statement]^^241^242^^^^239^244^long instantMillis = DateTimeUtils.getInstantMillis ( baseInstant ) ; long resolved = chrono.set ( this, instantMillis ) ;^[CLASS] AbstractPartial  [METHOD] toDateTime [RETURN_TYPE] DateTime   ReadableInstant baseInstant [VARIABLES] ReadableInstant  baseInstant  boolean  Chronology  chrono  long  instantMillis  resolved  
[P1_Replace_Type]^int  resolved = chrono.set ( this, instantMillis ) ;^242^^^^^239^244^long resolved = chrono.set ( this, instantMillis ) ;^[CLASS] AbstractPartial  [METHOD] toDateTime [RETURN_TYPE] DateTime   ReadableInstant baseInstant [VARIABLES] ReadableInstant  baseInstant  boolean  Chronology  chrono  long  instantMillis  resolved  
[P5_Replace_Variable]^long resolved = chrono.set ( this ) ;^242^^^^^239^244^long resolved = chrono.set ( this, instantMillis ) ;^[CLASS] AbstractPartial  [METHOD] toDateTime [RETURN_TYPE] DateTime   ReadableInstant baseInstant [VARIABLES] ReadableInstant  baseInstant  boolean  Chronology  chrono  long  instantMillis  resolved  
[P5_Replace_Variable]^long resolved = instantMillis.set ( this, chrono ) ;^242^^^^^239^244^long resolved = chrono.set ( this, instantMillis ) ;^[CLASS] AbstractPartial  [METHOD] toDateTime [RETURN_TYPE] DateTime   ReadableInstant baseInstant [VARIABLES] ReadableInstant  baseInstant  boolean  Chronology  chrono  long  instantMillis  resolved  
[P5_Replace_Variable]^long resolved = chrono.set ( this, resolved ) ;^242^^^^^239^244^long resolved = chrono.set ( this, instantMillis ) ;^[CLASS] AbstractPartial  [METHOD] toDateTime [RETURN_TYPE] DateTime   ReadableInstant baseInstant [VARIABLES] ReadableInstant  baseInstant  boolean  Chronology  chrono  long  instantMillis  resolved  
[P14_Delete_Statement]^^242^243^^^^239^244^long resolved = chrono.set ( this, instantMillis ) ; return new DateTime ( resolved, chrono ) ;^[CLASS] AbstractPartial  [METHOD] toDateTime [RETURN_TYPE] DateTime   ReadableInstant baseInstant [VARIABLES] ReadableInstant  baseInstant  boolean  Chronology  chrono  long  instantMillis  resolved  
[P4_Replace_Constructor]^return new DateTime (  chrono ) ;^243^^^^^239^244^return new DateTime ( resolved, chrono ) ;^[CLASS] AbstractPartial  [METHOD] toDateTime [RETURN_TYPE] DateTime   ReadableInstant baseInstant [VARIABLES] ReadableInstant  baseInstant  boolean  Chronology  chrono  long  instantMillis  resolved  
[P4_Replace_Constructor]^return new DateTime ( resolved ) ;^243^^^^^239^244^return new DateTime ( resolved, chrono ) ;^[CLASS] AbstractPartial  [METHOD] toDateTime [RETURN_TYPE] DateTime   ReadableInstant baseInstant [VARIABLES] ReadableInstant  baseInstant  boolean  Chronology  chrono  long  instantMillis  resolved  
[P5_Replace_Variable]^return new DateTime ( instantMillis, chrono ) ;^243^^^^^239^244^return new DateTime ( resolved, chrono ) ;^[CLASS] AbstractPartial  [METHOD] toDateTime [RETURN_TYPE] DateTime   ReadableInstant baseInstant [VARIABLES] ReadableInstant  baseInstant  boolean  Chronology  chrono  long  instantMillis  resolved  
[P5_Replace_Variable]^return new DateTime ( chrono, resolved ) ;^243^^^^^239^244^return new DateTime ( resolved, chrono ) ;^[CLASS] AbstractPartial  [METHOD] toDateTime [RETURN_TYPE] DateTime   ReadableInstant baseInstant [VARIABLES] ReadableInstant  baseInstant  boolean  Chronology  chrono  long  instantMillis  resolved  
[P2_Replace_Operator]^if  ( this != partial )  {^255^^^^^254^271^if  ( this == partial )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P9_Replace_Statement]^if  ( this == other )  {^255^^^^^254^271^if  ( this == partial )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P15_Unwrap_Block]^return true;^255^256^257^^^254^271^if  ( this == partial )  { return true; }^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P16_Remove_Block]^^255^256^257^^^254^271^if  ( this == partial )  { return true; }^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P13_Insert_Block]^if  ( formatter == null )  {     return toString (  ) ; }^255^^^^^254^271^[Delete]^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P13_Insert_Block]^if  (  ( this )  == other )  {     return 0; }^255^^^^^254^271^[Delete]^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P13_Insert_Block]^if  (  ( getFieldType ( i )  )  == type )  {     return i; }^255^^^^^254^271^[Delete]^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P13_Insert_Block]^if  (  ( size (  )  )  !=  ( other.size (  )  )  )  {     return false; }^255^^^^^254^271^[Delete]^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P3_Replace_Literal]^return false;^256^^^^^254^271^return true;^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P2_Replace_Operator]^if  ( partial instanceof ReadablePartial <= false )  {^258^^^^^254^271^if  ( partial instanceof ReadablePartial == false )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P2_Replace_Operator]^if  ( partial  <=  ReadablePartial == false )  {^258^^^^^254^271^if  ( partial instanceof ReadablePartial == false )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P3_Replace_Literal]^if  ( partial instanceof ReadablePartial == true )  {^258^^^^^254^271^if  ( partial instanceof ReadablePartial == false )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P6_Replace_Expression]^if  ( partial instanceof ReadablePartial )  {^258^^^^^254^271^if  ( partial instanceof ReadablePartial == false )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P15_Unwrap_Block]^return false;^258^259^260^^^254^271^if  ( partial instanceof ReadablePartial == false )  { return false; }^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P16_Remove_Block]^^258^259^260^^^254^271^if  ( partial instanceof ReadablePartial == false )  { return false; }^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P3_Replace_Literal]^return true;^259^^^^^254^271^return false;^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P2_Replace_Operator]^if  ( size (  )  == other.size (  )  )  {^262^^^^^254^271^if  ( size (  )  != other.size (  )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P3_Replace_Literal]^if  ( size() + 3  != other.size() + 3  )  {^262^^^^^254^271^if  ( size (  )  != other.size (  )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P7_Replace_Invocation]^if  ( size (  )  != other.hashCode (  )  )  {^262^^^^^254^271^if  ( size (  )  != other.size (  )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P7_Replace_Invocation]^if  ( size (  )  != other.getValue (  )  )  {^262^^^^^254^271^if  ( size (  )  != other.size (  )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P15_Unwrap_Block]^return false;^262^263^264^^^254^271^if  ( size (  )  != other.size (  )  )  { return false; }^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P16_Remove_Block]^^262^263^264^^^254^271^if  ( size (  )  != other.size (  )  )  { return false; }^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P13_Insert_Block]^if  (  ( getValue ( i )  )  <  ( other.getValue ( i )  )  )  {     return -1; }^262^^^^^254^271^[Delete]^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P13_Insert_Block]^if  (  ( this )  == partial )  {     return true; }^262^^^^^254^271^[Delete]^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P13_Insert_Block]^if  (  ( getValue ( i )  )  >  ( other.getValue ( i )  )  )  {     return 1; }^262^^^^^254^271^[Delete]^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P13_Insert_Block]^if  (  ( this )  == other )  {     return 0; }^262^^^^^254^271^[Delete]^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P3_Replace_Literal]^return true;^263^^^^^254^271^return false;^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P3_Replace_Literal]^if  ( size() + 8  != other.size() + 8  )  {^262^^^^^254^271^if  ( size (  )  != other.size (  )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P3_Replace_Literal]^if  ( size() - 1  != other.size() - 1  )  {^262^^^^^254^271^if  ( size (  )  != other.size (  )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P2_Replace_Operator]^if  ( getValue ( i )  != other.getValue ( i )  && getFieldType ( i )  != other.getFieldType ( i )  )  {^266^^^^^254^271^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P2_Replace_Operator]^if  ( getValue ( i )  == other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  {^266^^^^^254^271^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P2_Replace_Operator]^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  <= other.getFieldType ( i )  )  {^266^^^^^254^271^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P5_Replace_Variable]^if  ( getValue ( isize )  != other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  {^266^^^^^254^271^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P5_Replace_Variable]^if  ( getValue ( other )  != i.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  {^266^^^^^254^271^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P6_Replace_Expression]^if  ( getValue ( i )  != other.getValue ( i )  ) {^266^^^^^254^271^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P6_Replace_Expression]^if  (  getFieldType ( i )  != other.getFieldType ( i )  )  {^266^^^^^254^271^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P7_Replace_Invocation]^if  ( getValue ( i )  != other .getType (  )   || getFieldType ( i )  != other.getFieldType ( i )  )  {^266^^^^^254^271^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P7_Replace_Invocation]^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other.getField ( i )  )  {^266^^^^^254^271^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P15_Unwrap_Block]^return false;^266^267^268^^^254^271^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  { return false; }^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P16_Remove_Block]^^266^267^268^^^254^271^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  { return false; }^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P3_Replace_Literal]^return true;^267^^^^^254^271^return false;^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P1_Replace_Type]^for  (  long  i = 0, isize = size (  ) ; i < isize; i++ )  {^265^^^^^254^271^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P2_Replace_Operator]^for  ( int i = 0, isize = size (  ) ; i <= isize; i++ )  {^265^^^^^254^271^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P3_Replace_Literal]^for  ( int i = i, isize = size (  ) ; i < isize; i++ )  {^265^^^^^254^271^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() + 1 ; i < isize; i++ )  {^265^^^^^254^271^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P5_Replace_Variable]^for  ( isizent i = 0, isize = size (  ) ; i < isize; i++ )  {^265^^^^^254^271^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P5_Replace_Variable]^for  ( int i = 0size = size (  ) ; i < isize; i++ )  {^265^^^^^254^271^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P5_Replace_Variable]^for  ( int i = 0 = size (  ) ; i < isize; i++ )  {^265^^^^^254^271^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P5_Replace_Variable]^for  ( isizent i = 0, i = size (  ) ; i < isize; i++ )  {^265^^^^^254^271^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P7_Replace_Invocation]^for  ( int i = 0, ihashCode = size (  ) ; i < isize; i++ )  {^265^^^^^254^271^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P2_Replace_Operator]^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  == other.getFieldType ( i )  )  {^266^^^^^254^271^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P7_Replace_Invocation]^if  ( getValue ( i )  != other .getValue ( isize )   || getFieldType ( i )  != other.getFieldType ( i )  )  {^266^^^^^254^271^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P7_Replace_Invocation]^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other .getField ( isize , null )   )  {^266^^^^^254^271^if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P3_Replace_Literal]^for  ( int i = -7, isize = size (  ) ; i < isize; i++ )  {^265^^^^^254^271^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() + 2 ; i < isize; i++ )  {^265^^^^^254^271^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P1_Replace_Type]^for  (  short  i = 0, isize = size (  ) ; i < isize; i++ )  {^265^^^^^254^271^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() - 5 ; i < isize; i++ )  {^265^^^^^254^271^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() + 9 ; i < isize; i++ )  {^265^^^^^254^271^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P14_Delete_Statement]^^265^266^267^268^^254^271^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  { if  ( getValue ( i )  != other.getValue ( i )  || getFieldType ( i )  != other.getFieldType ( i )  )  { return false; }^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P7_Replace_Invocation]^return FieldUtils.equals ( getChronology (  ) , other.getType (  )  ) ;^270^^^^^254^271^return FieldUtils.equals ( getChronology (  ) , other.getChronology (  )  ) ;^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P7_Replace_Invocation]^return FieldUtils.equals ( getChronology (  ) , other .getValue ( isize )   ) ;^270^^^^^254^271^return FieldUtils.equals ( getChronology (  ) , other.getChronology (  )  ) ;^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P7_Replace_Invocation]^return FieldUtils.equals ( getChronology (  ) , other.getValue (  )  ) ;^270^^^^^254^271^return FieldUtils.equals ( getChronology (  ) , other.getChronology (  )  ) ;^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P14_Delete_Statement]^^270^^^^^254^271^return FieldUtils.equals ( getChronology (  ) , other.getChronology (  )  ) ;^[CLASS] AbstractPartial  [METHOD] equals [RETURN_TYPE] boolean   Object partial [VARIABLES] ReadablePartial  other  boolean  Object  partial  int  i  isize  
[P1_Replace_Type]^short  total = 157;^280^^^^^279^287^int total = 157;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P3_Replace_Literal]^int total = total;^280^^^^^279^287^int total = 157;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P1_Replace_Type]^for  (  short  i = 0, isize = size (  ) ; i < isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P2_Replace_Operator]^for  ( int i = 0, isize = size (  ) ; i <= isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P2_Replace_Operator]^for  >>  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P2_Replace_Operator]^for  <  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P3_Replace_Literal]^for  ( int i = 5, isize = size (  ) ; i < isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() + 1 ; i < isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P5_Replace_Variable]^for  ( totalnt i = 0, isize = size (  ) ; i < isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P5_Replace_Variable]^for  ( int i = 0, total = size (  ) ; i < isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P5_Replace_Variable]^for  ( int i = 0size = size (  ) ; i < isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P5_Replace_Variable]^for  ( int i = 0 = size (  ) ; i < isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P5_Replace_Variable]^for  ( isizent i = 0, i = size (  ) ; i < isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P7_Replace_Invocation]^for  ( int i = 0, ihashCode = size (  ) ; i < isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P2_Replace_Operator]^total = 23 - total + getValue ( i ) ;^282^^^^^279^287^total = 23 * total + getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P3_Replace_Literal]^total = i * total + getValue ( i ) ;^282^^^^^279^287^total = 23 * total + getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P5_Replace_Variable]^total = 23 * i + getValue ( total ) ;^282^^^^^279^287^total = 23 * total + getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P8_Replace_Mix]^total = 22 * total + getValue ( i ) ;^282^^^^^279^287^total = 23 * total + getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P11_Insert_Donor_Statement]^result[i] = getValue ( i ) ;total = 23 * total + getValue ( i ) ;^282^^^^^279^287^total = 23 * total + getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P11_Insert_Donor_Statement]^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;total = 23 * total + getValue ( i ) ;^282^^^^^279^287^total = 23 * total + getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P2_Replace_Operator]^total = 23 * total + getFieldType ( i ) .hashCode (  ==  ) ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P2_Replace_Operator]^total = 23 / total + getFieldType ( i ) .hashCode (  ) ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P3_Replace_Literal]^total = 24 * total + getFieldType ( i ) .hashCode (  ) ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P5_Replace_Variable]^total = 23 * isize + getFieldType ( i ) .hashCode (  ) ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P5_Replace_Variable]^total = 23 * total + getFieldType ( isize ) .hashCode (  ) ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P5_Replace_Variable]^total = 23 * i + getFieldType ( total ) .hashCode (  ) ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P7_Replace_Invocation]^total = 23 * total + getFieldType ( i )  .getDurationType (  )  ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P7_Replace_Invocation]^total = 23 * total + getField ( i ) .hashCode (  ) ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P8_Replace_Mix]^total = 2 * total + getFieldType ( i ) .hashCode (  ) ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P11_Insert_Donor_Statement]^total = 23 * total + getValue ( i ) ;total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P11_Insert_Donor_Statement]^total += getChronology (  ) .hashCode (  ) ;total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P5_Replace_Variable]^total = 23 * total + getValue ( total ) ;^282^^^^^279^287^total = 23 * total + getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P14_Delete_Statement]^^282^283^^^^279^287^total = 23 * total + getValue ( i ) ; total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P5_Replace_Variable]^total = 23 * total + getFieldType ( total ) .hashCode (  ) ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P14_Delete_Statement]^^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P2_Replace_Operator]^total = 23 + total + getValue ( i ) ;^282^^^^^279^287^total = 23 * total + getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P3_Replace_Literal]^total = isize * total + getValue ( i ) ;^282^^^^^279^287^total = 23 * total + getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P5_Replace_Variable]^total = 23 * isize + getValue ( i ) ;^282^^^^^279^287^total = 23 * total + getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P5_Replace_Variable]^total = 23 * total + getValue ( isize ) ;^282^^^^^279^287^total = 23 * total + getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P8_Replace_Mix]^total = 20 * total + getValue ( i ) ;^282^^^^^279^287^total = 23 * total + getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P2_Replace_Operator]^total = 23 * total + getFieldType ( i ) .hashCode (  ^  ) ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P2_Replace_Operator]^total = 23 + total + getFieldType ( i ) .hashCode (  ) ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P3_Replace_Literal]^total =  * total + getFieldType ( i ) .hashCode (  ) ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P8_Replace_Mix]^total = 8 * total + getFieldType ( i ) .hashCode (  ) ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P1_Replace_Type]^for  (  long  i = 0, isize = size (  ) ; i < isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P3_Replace_Literal]^for  ( int i = -6, isize = size (  ) ; i < isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() + 9 ; i < isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() + 2 ; i < isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() - 3 ; i < isize; i++ )  {^281^^^^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P14_Delete_Statement]^^281^282^283^284^^279^287^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  { total = 23 * total + getValue ( i ) ; total = 23 * total + getFieldType ( i ) .hashCode (  ) ; }^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P14_Delete_Statement]^^282^^^^^279^287^total = 23 * total + getValue ( i ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P8_Replace_Mix]^total = 23 * total + getField ( total ) .hashCode (  ) ;^283^^^^^279^287^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P7_Replace_Invocation]^total += getChronology (  ) .size (  ) ;^285^^^^^279^287^total += getChronology (  ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P7_Replace_Invocation]^total += getType (  ) .hashCode (  ) ;^285^^^^^279^287^total += getChronology (  ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P8_Replace_Mix]^total +;^285^^^^^279^287^total += getChronology (  ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P11_Insert_Donor_Statement]^total = 23 * total + getFieldType ( i ) .hashCode (  ) ;total += getChronology (  ) .hashCode (  ) ;^285^^^^^279^287^total += getChronology (  ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P14_Delete_Statement]^^285^286^^^^279^287^total += getChronology (  ) .hashCode (  ) ; return total;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P11_Insert_Donor_Statement]^return getField ( index, getChronology (  )  ) .getType (  ) ;total += getChronology (  ) .hashCode (  ) ;^285^^^^^279^287^total += getChronology (  ) .hashCode (  ) ;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P5_Replace_Variable]^return isize;^286^^^^^279^287^return total;^[CLASS] AbstractPartial  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] boolean  int  i  isize  total  
[P2_Replace_Operator]^if  ( this != other )  {^316^^^^^315^337^if  ( this == other )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P9_Replace_Statement]^if  ( this == partial )  {^316^^^^^315^337^if  ( this == other )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P15_Unwrap_Block]^return 0;^316^317^318^^^315^337^if  ( this == other )  { return 0; }^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P16_Remove_Block]^^316^317^318^^^315^337^if  ( this == other )  { return 0; }^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( getValue ( i )  )  <  ( other.getValue ( i )  )  )  {     return -1; }^316^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( this )  == partial )  {     return true; }^316^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( getValue ( i )  )  >  ( other.getValue ( i )  )  )  {     return 1; }^316^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  ( formatter == null )  {     return toString (  ) ; }^316^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( getFieldType ( i )  )  == type )  {     return i; }^316^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( size (  )  )  !=  ( other.size (  )  )  )  {     return false; }^316^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^return 6;^317^^^^^315^337^return 0;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P8_Replace_Mix]^return 1;^317^^^^^315^337^return 0;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^return i;^317^^^^^315^337^return 0;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P8_Replace_Mix]^return 3;^317^^^^^315^337^return 0;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P2_Replace_Operator]^if  ( size (  )  == other.size (  )  )  {^319^^^^^315^337^if  ( size (  )  != other.size (  )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^if  ( size() - 2  != other.size() - 2  )  {^319^^^^^315^337^if  ( size (  )  != other.size (  )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P7_Replace_Invocation]^if  ( size (  )  != other.hashCode (  )  )  {^319^^^^^315^337^if  ( size (  )  != other.size (  )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P7_Replace_Invocation]^if  ( size (  )  != other.getValue (  )  )  {^319^^^^^315^337^if  ( size (  )  != other.size (  )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P15_Unwrap_Block]^throw new java.lang.ClassCastException("ReadablePartial objects must have matching field types");^319^320^321^^^315^337^if  ( size (  )  != other.size (  )  )  { throw new ClassCastException  (" ")  ; }^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P16_Remove_Block]^^319^320^321^^^315^337^if  ( size (  )  != other.size (  )  )  { throw new ClassCastException  (" ")  ; }^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( getFieldType ( i )  )  !=  ( other.getFieldType ( i )  )  )  {     throw new ClassCastException ( "ReadablePartial objects must have matching field types" ) ; }^319^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( getFieldType ( i )  )  !=  ( other.getFieldType ( i )  )  )  {     throw new ClassCastException ( "ReadablePartial objects must have matching field types" ) ; }^320^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( size (  )  )  !=  ( other.size (  )  )  )  {     throw new ClassCastException ( "ReadablePartial objects must have matching field types" ) ; }^320^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ")  ; ;^320^^^^^315^337^throw new ClassCastException  (" ")  ;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new ClassCastException  (" ")  ;^320^^^^^315^337^throw new ClassCastException  (" ")  ;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^if  ( size() - 9  != other.size() - 9  )  {^319^^^^^315^337^if  ( size (  )  != other.size (  )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^if  ( size() + 9  != other.size() + 9  )  {^319^^^^^315^337^if  ( size (  )  != other.size (  )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P2_Replace_Operator]^if  ( getFieldType ( i )  <= other.getFieldType ( i )  )  {^323^^^^^315^337^if  ( getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P5_Replace_Variable]^if  ( getFieldType ( isize )  != other.getFieldType ( i )  )  {^323^^^^^315^337^if  ( getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P5_Replace_Variable]^if  ( getFieldType ( other )  != i.getFieldType ( i )  )  {^323^^^^^315^337^if  ( getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P7_Replace_Invocation]^if  ( getFieldType ( i )  != other.getField ( i )  )  {^323^^^^^315^337^if  ( getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P9_Replace_Statement]^if  ( getValue ( i )  > other.getValue ( i )  )  {^323^^^^^315^337^if  ( getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P9_Replace_Statement]^if  ( getValue ( i )  < other.getValue ( i )  )  {^323^^^^^315^337^if  ( getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P15_Unwrap_Block]^throw new java.lang.ClassCastException("ReadablePartial objects must have matching field types");^323^324^325^^^315^337^if  ( getFieldType ( i )  != other.getFieldType ( i )  )  { throw new ClassCastException  (" ")  ; }^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P16_Remove_Block]^^323^324^325^^^315^337^if  ( getFieldType ( i )  != other.getFieldType ( i )  )  { throw new ClassCastException  (" ")  ; }^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( size (  )  )  !=  ( other.size (  )  )  )  {     throw new ClassCastException ( "ReadablePartial objects must have matching field types" ) ; }^323^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( getFieldType ( i )  )  !=  ( other.getFieldType ( i )  )  )  {     throw new ClassCastException ( "ReadablePartial objects must have matching field types" ) ; }^324^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( size (  )  )  !=  ( other.size (  )  )  )  {     throw new ClassCastException ( "ReadablePartial objects must have matching field types" ) ; }^324^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P11_Insert_Donor_Statement]^throw new IllegalArgumentException  (" ")  ;throw new ClassCastException  (" ")  ;^324^^^^^315^337^throw new ClassCastException  (" ")  ;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P1_Replace_Type]^for  (  long  i = 0, isize = size (  ) ; i < isize; i++ )  {^322^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P2_Replace_Operator]^for  ( int i = 0, isize = size (  ) ; i <= isize; i++ )  {^322^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^for  ( int i = -3, isize = size (  ) ; i < isize; i++ )  {^322^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() + 6 ; i < isize; i++ )  {^322^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P4_Replace_Constructor]^for  ( int i = 0size = size (  ) ; i < isize; i++ )  {^322^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P4_Replace_Constructor]^for  ( int i = 0 = size (  ) ; i < isize; i++ )  {^322^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P5_Replace_Variable]^for  ( isizent i = 0, isize = size (  ) ; i < isize; i++ )  {^322^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P5_Replace_Variable]^for  ( isizent i = 0, i = size (  ) ; i < isize; i++ )  {^322^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P7_Replace_Invocation]^for  ( int i = 0, ihashCode = size (  ) ; i < isize; i++ )  {^322^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P8_Replace_Mix]^for  ( ihashCodent i = 0, isize = size (  ) ; i < isize; i++ )  {^322^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P2_Replace_Operator]^if  ( getFieldType ( i )  == other.getFieldType ( i )  )  {^323^^^^^315^337^if  ( getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P8_Replace_Mix]^throw new IllegalArgumentException  (" ")  ; ;^324^^^^^315^337^throw new ClassCastException  (" ")  ;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P8_Replace_Mix]^return true;^324^^^^^315^337^throw new ClassCastException  (" ")  ;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P1_Replace_Type]^for  (  short  i = 0, isize = size (  ) ; i < isize; i++ )  {^322^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^for  ( int i = isize, isize = size (  ) ; i < isize; i++ )  {^322^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() - 5 ; i < isize; i++ )  {^322^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() - 2 ; i < isize; i++ )  {^322^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P14_Delete_Statement]^^322^323^324^325^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  { if  ( getFieldType ( i )  != other.getFieldType ( i )  )  { throw new ClassCastException  (" ")  ; }^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P8_Replace_Mix]^if  ( getFieldType ( isize )  != other.getField ( i )  )  {^323^^^^^315^337^if  ( getFieldType ( i )  != other.getFieldType ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P2_Replace_Operator]^if  ( getValue ( i )  < other.getValue ( i )  )  {^329^^^^^315^337^if  ( getValue ( i )  > other.getValue ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P5_Replace_Variable]^if  ( getValue ( isize )  > other.getValue ( i )  )  {^329^^^^^315^337^if  ( getValue ( i )  > other.getValue ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P5_Replace_Variable]^if  ( getValue ( other )  > i.getValue ( i )  )  {^329^^^^^315^337^if  ( getValue ( i )  > other.getValue ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P7_Replace_Invocation]^if  ( getValue ( i )  > other .getValue ( i )   )  {^329^^^^^315^337^if  ( getValue ( i )  > other.getValue ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P9_Replace_Statement]^if  ( getFieldType ( i )  != other.getFieldType ( i )  )  {^329^^^^^315^337^if  ( getValue ( i )  > other.getValue ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P15_Unwrap_Block]^return 1;^329^330^331^^^315^337^if  ( getValue ( i )  > other.getValue ( i )  )  { return 1; }^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P16_Remove_Block]^^329^330^331^^^315^337^if  ( getValue ( i )  > other.getValue ( i )  )  { return 1; }^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( getValue ( i )  )  <  ( other.getValue ( i )  )  )  {     return -1; }^329^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( this )  == other )  {     return 0; }^329^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( getFieldType ( i )  )  == type )  {     return i; }^329^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( size (  )  )  !=  ( other.size (  )  )  )  {     return false; }^329^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^return isize;^330^^^^^315^337^return 1;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P8_Replace_Mix]^return 1L;^330^^^^^315^337^return 1;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P2_Replace_Operator]^if  ( getValue ( i )  <= other.getValue ( i )  )  {^332^^^^^315^337^if  ( getValue ( i )  < other.getValue ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P5_Replace_Variable]^if  ( getValue ( isize )  < other.getValue ( i )  )  {^332^^^^^315^337^if  ( getValue ( i )  < other.getValue ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P5_Replace_Variable]^if  ( getValue ( other )  < i.getValue ( i )  )  {^332^^^^^315^337^if  ( getValue ( i )  < other.getValue ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P7_Replace_Invocation]^if  ( getValue ( i )  < other .getType (  )   )  {^332^^^^^315^337^if  ( getValue ( i )  < other.getValue ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P9_Replace_Statement]^if  ( getFieldType ( i )  != other.getFieldType ( i )  )  {^332^^^^^315^337^if  ( getValue ( i )  < other.getValue ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P9_Replace_Statement]^if  ( getValue ( i )  > other.getValue ( i )  )  {^332^^^^^315^337^if  ( getValue ( i )  < other.getValue ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P15_Unwrap_Block]^return -1;^332^333^334^^^315^337^if  ( getValue ( i )  < other.getValue ( i )  )  { return -1; }^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P16_Remove_Block]^^332^333^334^^^315^337^if  ( getValue ( i )  < other.getValue ( i )  )  { return -1; }^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( getValue ( i )  )  >  ( other.getValue ( i )  )  )  {     return 1; }^332^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( this )  == other )  {     return 0; }^332^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( getFieldType ( i )  )  == type )  {     return i; }^332^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P13_Insert_Block]^if  (  ( size (  )  )  !=  ( other.size (  )  )  )  {     return false; }^332^^^^^315^337^[Delete]^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^return -i;^333^^^^^315^337^return -1;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P8_Replace_Mix]^return -3;^333^^^^^315^337^return -1;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P1_Replace_Type]^for  (  short  i = 0, isize = size (  ) ; i < isize; i++ )  {^328^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P2_Replace_Operator]^for  ( int i = 0, isize = size (  ) ; i <= isize; i++ )  {^328^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() - 0 ; i < isize; i++ )  {^328^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P5_Replace_Variable]^for  ( int i = 0size = size (  ) ; i < isize; i++ )  {^328^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P5_Replace_Variable]^for  ( int i = 0 = size (  ) ; i < isize; i++ )  {^328^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P7_Replace_Invocation]^for  ( int i = 0, ihashCode = size (  ) ; i < isize; i++ )  {^328^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P8_Replace_Mix]^for  ( isizent i = 0, isize = size (  ) ; i < isize; i++ )  {^328^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P2_Replace_Operator]^if  ( getValue ( i )  >= other.getValue ( i )  )  {^329^^^^^315^337^if  ( getValue ( i )  > other.getValue ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^return -7;^330^^^^^315^337^return 1;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P8_Replace_Mix]^return 2;^330^^^^^315^337^return 1;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^return -isize;^333^^^^^315^337^return -1;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P8_Replace_Mix]^return -1 / 3;^333^^^^^315^337^return -1;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^return -10;^333^^^^^315^337^return -1;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P8_Replace_Mix]^return -1 - 0;^333^^^^^315^337^return -1;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P8_Replace_Mix]^return 1 >>> 2;^330^^^^^315^337^return 1;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P1_Replace_Type]^for  (  long  i = 0, isize = size (  ) ; i < isize; i++ )  {^328^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^for  ( int i = isize, isize = size (  ) ; i < isize; i++ )  {^328^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() + 0 ; i < isize; i++ )  {^328^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^for  ( int i = 0, isize = size() + 1 ; i < isize; i++ )  {^328^^^^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P14_Delete_Statement]^^328^329^330^331^^315^337^for  ( int i = 0, isize = size (  ) ; i < isize; i++ )  { if  ( getValue ( i )  > other.getValue ( i )  )  { return 1; }^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P7_Replace_Invocation]^if  ( getValue ( i )  < other .getValue ( isize )   )  {^332^^^^^315^337^if  ( getValue ( i )  < other.getValue ( i )  )  {^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P3_Replace_Literal]^return 7;^336^^^^^315^337^return 0;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P8_Replace_Mix]^return 0 * 3;^336^^^^^315^337^return 0;^[CLASS] AbstractPartial  [METHOD] compareTo [RETURN_TYPE] int   ReadablePartial other [VARIABLES] ReadablePartial  other  boolean  int  i  isize  
[P2_Replace_Operator]^if  ( partial != null )  {^355^^^^^354^359^if  ( partial == null )  {^[CLASS] AbstractPartial  [METHOD] isAfter [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P8_Replace_Mix]^if  ( partial == this )  {^355^^^^^354^359^if  ( partial == null )  {^[CLASS] AbstractPartial  [METHOD] isAfter [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P9_Replace_Statement]^if  ( formatter == null )  {^355^^^^^354^359^if  ( partial == null )  {^[CLASS] AbstractPartial  [METHOD] isAfter [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Partial cannot be null");^355^356^357^^^354^359^if  ( partial == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] AbstractPartial  [METHOD] isAfter [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P16_Remove_Block]^^355^356^357^^^354^359^if  ( partial == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] AbstractPartial  [METHOD] isAfter [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P13_Insert_Block]^if  ( index ==  ( -1 )  )  {     throw new IllegalArgumentException (  (  ( "Field '" + type )  + "' is not supported" )  ) ; }^355^^^^^354^359^[Delete]^[CLASS] AbstractPartial  [METHOD] isAfter [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P13_Insert_Block]^if  ( partial == null )  {     throw new IllegalArgumentException ( "Partial cannot be null" ) ; }^356^^^^^354^359^[Delete]^[CLASS] AbstractPartial  [METHOD] isAfter [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P8_Replace_Mix]^return false;^356^^^^^354^359^throw new IllegalArgumentException  (" ")  ;^[CLASS] AbstractPartial  [METHOD] isAfter [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P11_Insert_Donor_Statement]^throw new ClassCastException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^356^^^^^354^359^throw new IllegalArgumentException  (" ")  ;^[CLASS] AbstractPartial  [METHOD] isAfter [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P2_Replace_Operator]^return compareTo ( partial )  >= 0;^358^^^^^354^359^return compareTo ( partial )  > 0;^[CLASS] AbstractPartial  [METHOD] isAfter [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P3_Replace_Literal]^return compareTo ( partial )  > -4;^358^^^^^354^359^return compareTo ( partial )  > 0;^[CLASS] AbstractPartial  [METHOD] isAfter [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P7_Replace_Invocation]^return isAfter ( partial )  > 0;^358^^^^^354^359^return compareTo ( partial )  > 0;^[CLASS] AbstractPartial  [METHOD] isAfter [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P8_Replace_Mix]^return isAfter ( partial )  > 0L;^358^^^^^354^359^return compareTo ( partial )  > 0;^[CLASS] AbstractPartial  [METHOD] isAfter [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P14_Delete_Statement]^^358^^^^^354^359^return compareTo ( partial )  > 0;^[CLASS] AbstractPartial  [METHOD] isAfter [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P2_Replace_Operator]^if  ( partial != null )  {^377^^^^^376^381^if  ( partial == null )  {^[CLASS] AbstractPartial  [METHOD] isBefore [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P8_Replace_Mix]^if  ( partial == true )  {^377^^^^^376^381^if  ( partial == null )  {^[CLASS] AbstractPartial  [METHOD] isBefore [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P9_Replace_Statement]^if  ( formatter == null )  {^377^^^^^376^381^if  ( partial == null )  {^[CLASS] AbstractPartial  [METHOD] isBefore [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Partial cannot be null");^377^378^379^^^376^381^if  ( partial == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] AbstractPartial  [METHOD] isBefore [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P16_Remove_Block]^^377^378^379^^^376^381^if  ( partial == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] AbstractPartial  [METHOD] isBefore [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P13_Insert_Block]^if  ( index ==  ( -1 )  )  {     throw new IllegalArgumentException (  (  ( "Field '" + type )  + "' is not supported" )  ) ; }^377^^^^^376^381^[Delete]^[CLASS] AbstractPartial  [METHOD] isBefore [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P13_Insert_Block]^if  ( partial == null )  {     throw new IllegalArgumentException ( "Partial cannot be null" ) ; }^378^^^^^376^381^[Delete]^[CLASS] AbstractPartial  [METHOD] isBefore [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P8_Replace_Mix]^return true;^378^^^^^376^381^throw new IllegalArgumentException  (" ")  ;^[CLASS] AbstractPartial  [METHOD] isBefore [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P11_Insert_Donor_Statement]^throw new ClassCastException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^378^^^^^376^381^throw new IllegalArgumentException  (" ")  ;^[CLASS] AbstractPartial  [METHOD] isBefore [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P8_Replace_Mix]^throw new ClassCastException  (" ")  ; ;^378^^^^^376^381^throw new IllegalArgumentException  (" ")  ;^[CLASS] AbstractPartial  [METHOD] isBefore [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P2_Replace_Operator]^return compareTo ( partial )  <= 0;^380^^^^^376^381^return compareTo ( partial )  < 0;^[CLASS] AbstractPartial  [METHOD] isBefore [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P3_Replace_Literal]^return compareTo ( partial )  < 3;^380^^^^^376^381^return compareTo ( partial )  < 0;^[CLASS] AbstractPartial  [METHOD] isBefore [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P7_Replace_Invocation]^return isAfter ( partial )  < 0;^380^^^^^376^381^return compareTo ( partial )  < 0;^[CLASS] AbstractPartial  [METHOD] isBefore [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P14_Delete_Statement]^^380^^^^^376^381^return compareTo ( partial )  < 0;^[CLASS] AbstractPartial  [METHOD] isBefore [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P2_Replace_Operator]^if  ( partial != null )  {^399^^^^^398^403^if  ( partial == null )  {^[CLASS] AbstractPartial  [METHOD] isEqual [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P8_Replace_Mix]^if  ( partial == false )  {^399^^^^^398^403^if  ( partial == null )  {^[CLASS] AbstractPartial  [METHOD] isEqual [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P9_Replace_Statement]^if  ( formatter == null )  {^399^^^^^398^403^if  ( partial == null )  {^[CLASS] AbstractPartial  [METHOD] isEqual [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Partial cannot be null");^399^400^401^^^398^403^if  ( partial == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] AbstractPartial  [METHOD] isEqual [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P16_Remove_Block]^^399^400^401^^^398^403^if  ( partial == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] AbstractPartial  [METHOD] isEqual [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P13_Insert_Block]^if  ( index ==  ( -1 )  )  {     throw new IllegalArgumentException (  (  ( "Field '" + type )  + "' is not supported" )  ) ; }^399^^^^^398^403^[Delete]^[CLASS] AbstractPartial  [METHOD] isEqual [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P13_Insert_Block]^if  ( partial == null )  {     throw new IllegalArgumentException ( "Partial cannot be null" ) ; }^400^^^^^398^403^[Delete]^[CLASS] AbstractPartial  [METHOD] isEqual [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P11_Insert_Donor_Statement]^throw new ClassCastException  (" ")  ;throw new IllegalArgumentException  (" ")  ;^400^^^^^398^403^throw new IllegalArgumentException  (" ")  ;^[CLASS] AbstractPartial  [METHOD] isEqual [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P2_Replace_Operator]^return compareTo ( partial )  < 0;^402^^^^^398^403^return compareTo ( partial )  == 0;^[CLASS] AbstractPartial  [METHOD] isEqual [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P3_Replace_Literal]^return compareTo ( partial )  == -6;^402^^^^^398^403^return compareTo ( partial )  == 0;^[CLASS] AbstractPartial  [METHOD] isEqual [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P7_Replace_Invocation]^return isAfter ( partial )  == 0;^402^^^^^398^403^return compareTo ( partial )  == 0;^[CLASS] AbstractPartial  [METHOD] isEqual [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P8_Replace_Mix]^return isAfter ( partial )  == 4;^402^^^^^398^403^return compareTo ( partial )  == 0;^[CLASS] AbstractPartial  [METHOD] isEqual [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P14_Delete_Statement]^^402^^^^^398^403^return compareTo ( partial )  == 0;^[CLASS] AbstractPartial  [METHOD] isEqual [RETURN_TYPE] boolean   ReadablePartial partial [VARIABLES] ReadablePartial  partial  boolean  
[P2_Replace_Operator]^if  ( formatter != null )  {^414^^^^^413^418^if  ( formatter == null )  {^[CLASS] AbstractPartial  [METHOD] toString [RETURN_TYPE] String   DateTimeFormatter formatter [VARIABLES] boolean  DateTimeFormatter  formatter  
[P8_Replace_Mix]^if  ( formatter == false )  {^414^^^^^413^418^if  ( formatter == null )  {^[CLASS] AbstractPartial  [METHOD] toString [RETURN_TYPE] String   DateTimeFormatter formatter [VARIABLES] boolean  DateTimeFormatter  formatter  
[P9_Replace_Statement]^if  ( partial == null )  {^414^^^^^413^418^if  ( formatter == null )  {^[CLASS] AbstractPartial  [METHOD] toString [RETURN_TYPE] String   DateTimeFormatter formatter [VARIABLES] boolean  DateTimeFormatter  formatter  
[P15_Unwrap_Block]^return toString();^414^415^416^^^413^418^if  ( formatter == null )  { return toString (  ) ; }^[CLASS] AbstractPartial  [METHOD] toString [RETURN_TYPE] String   DateTimeFormatter formatter [VARIABLES] boolean  DateTimeFormatter  formatter  
[P16_Remove_Block]^^414^415^416^^^413^418^if  ( formatter == null )  { return toString (  ) ; }^[CLASS] AbstractPartial  [METHOD] toString [RETURN_TYPE] String   DateTimeFormatter formatter [VARIABLES] boolean  DateTimeFormatter  formatter  
[P13_Insert_Block]^if  (  ( this )  == partial )  {     return true; }^414^^^^^413^418^[Delete]^[CLASS] AbstractPartial  [METHOD] toString [RETURN_TYPE] String   DateTimeFormatter formatter [VARIABLES] boolean  DateTimeFormatter  formatter  
[P13_Insert_Block]^if  (  ( this )  == other )  {     return 0; }^414^^^^^413^418^[Delete]^[CLASS] AbstractPartial  [METHOD] toString [RETURN_TYPE] String   DateTimeFormatter formatter [VARIABLES] boolean  DateTimeFormatter  formatter  
[P7_Replace_Invocation]^return Object (  ) ;^415^^^^^413^418^return toString (  ) ;^[CLASS] AbstractPartial  [METHOD] toString [RETURN_TYPE] String   DateTimeFormatter formatter [VARIABLES] boolean  DateTimeFormatter  formatter  
[P14_Delete_Statement]^^415^^^^^413^418^return toString (  ) ;^[CLASS] AbstractPartial  [METHOD] toString [RETURN_TYPE] String   DateTimeFormatter formatter [VARIABLES] boolean  DateTimeFormatter  formatter  
[P8_Replace_Mix]^return formatter.print ( null ) ;^417^^^^^413^418^return formatter.print ( this ) ;^[CLASS] AbstractPartial  [METHOD] toString [RETURN_TYPE] String   DateTimeFormatter formatter [VARIABLES] boolean  DateTimeFormatter  formatter  
[P14_Delete_Statement]^^417^418^^^^413^418^return formatter.print ( this ) ; }^[CLASS] AbstractPartial  [METHOD] toString [RETURN_TYPE] String   DateTimeFormatter formatter [VARIABLES] boolean  DateTimeFormatter  formatter  
