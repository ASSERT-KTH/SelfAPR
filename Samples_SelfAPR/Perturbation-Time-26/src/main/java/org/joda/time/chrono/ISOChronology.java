[P1_Replace_Type]^private static final  int  serialVersionUID = -6212696554273812441L;^52^^^^^47^57^private static final long serialVersionUID = -6212696554273812441L;^[CLASS] ISOChronology Stub   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = -6212696554273812441;^52^^^^^47^57^private static final long serialVersionUID = -6212696554273812441L;^[CLASS] ISOChronology Stub   [VARIABLES] 
[P8_Replace_Mix]^private static  ISOChronology INSTANCE_UTC;^55^^^^^50^60^private static final ISOChronology INSTANCE_UTC;^[CLASS] ISOChronology Stub   [VARIABLES] 
[P1_Replace_Type]^private static final  long  FAST_CACHE_SIZE = 64;^57^^^^^52^62^private static final int FAST_CACHE_SIZE = 64;^[CLASS] ISOChronology Stub   [VARIABLES] 
[P8_Replace_Mix]^private static final int FAST_CACHE_SIZE  = null ;^57^^^^^52^62^private static final int FAST_CACHE_SIZE = 64;^[CLASS] ISOChronology Stub   [VARIABLES] 
[P8_Replace_Mix]^private static  ISOChronology[] cFastCache;^60^^^^^55^65^private static final ISOChronology[] cFastCache;^[CLASS] ISOChronology Stub   [VARIABLES] 
[P8_Replace_Mix]^private static  Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology> (  ) ;^63^^^^^58^68^private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology> (  ) ;^[CLASS] ISOChronology Stub   [VARIABLES] 
[P1_Replace_Type]^private static final  int  serialVersionUID = -6212696554273812441L;^212^^^^^207^217^private static final long serialVersionUID = -6212696554273812441L;^[CLASS] ISOChronology Stub   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = -6212696554273812441;^212^^^^^207^217^private static final long serialVersionUID = -6212696554273812441L;^[CLASS] ISOChronology Stub   [VARIABLES] 
[P14_Delete_Statement]^^122^^^^^121^123^super ( base, null ) ;^[CLASS] ISOChronology Stub  [METHOD] <init> [RETURN_TYPE] Chronology)   Chronology base [VARIABLES] ISOChronology  INSTANCE_UTC  ISOChronology[]  cFastCache  boolean  Chronology  base  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  DateTimeZone  iZone  
[P5_Replace_Variable]^iZone = iZone;^217^^^^^216^218^iZone = zone;^[CLASS] ISOChronology Stub  [METHOD] <init> [RETURN_TYPE] DateTimeZone)   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^iZone =  null;^217^^^^^216^218^iZone = zone;^[CLASS] ISOChronology Stub  [METHOD] <init> [RETURN_TYPE] DateTimeZone)   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^return getInstance ( DateTimeZone.getID (  )  ) ;^86^^^^^85^87^return getInstance ( DateTimeZone.getDefault (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   [VARIABLES] ISOChronology  INSTANCE_UTC  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^86^^^^^85^87^return getInstance ( DateTimeZone.getDefault (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   [VARIABLES] ISOChronology  INSTANCE_UTC  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^if  ( zone != null )  {^96^^^^^95^113^if  ( zone == null )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^if  ( iZone == null )  {^96^^^^^95^113^if  ( zone == null )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^if  ( zone == true )  {^96^^^^^95^113^if  ( zone == null )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P9_Replace_Statement]^if  ( chrono == null )  {^96^^^^^95^113^if  ( zone == null )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P15_Unwrap_Block]^zone = org.joda.time.DateTimeZone.getDefault();^96^97^98^^^95^113^if  ( zone == null )  { zone = DateTimeZone.getDefault (  ) ; }^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P16_Remove_Block]^^96^97^98^^^95^113^if  ( zone == null )  { zone = DateTimeZone.getDefault (  ) ; }^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^zone = DateTimeZone.getID (  ) ;^97^^^^^95^113^zone = DateTimeZone.getDefault (  ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^zone ;^97^^^^^95^113^zone = DateTimeZone.getDefault (  ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P11_Insert_Donor_Statement]^iZone =  ( DateTimeZone ) in.readObject (  ) ;zone = DateTimeZone.getDefault (  ) ;^97^^^^^95^113^zone = DateTimeZone.getDefault (  ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P13_Insert_Block]^if  ( zone == null )  {     zone = getDefault (  ) ; }^97^^^^^95^113^[Delete]^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^97^^^^^95^113^zone = DateTimeZone.getDefault (  ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P11_Insert_Donor_Statement]^return getInstance ( DateTimeZone.getDefault (  )  ) ;zone = DateTimeZone.getDefault (  ) ;^97^^^^^95^113^zone = DateTimeZone.getDefault (  ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^zone  =  zone ;^97^^^^^95^113^zone = DateTimeZone.getDefault (  ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P1_Replace_Type]^short  index = System.identityHashCode ( zone )  &  ( FAST_CACHE_SIZE - 1 ) ;^99^^^^^95^113^int index = System.identityHashCode ( zone )  &  ( FAST_CACHE_SIZE - 1 ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^int index = System.identityHashCode ( zone )   >=   ( FAST_CACHE_SIZE - 1 ) ;^99^^^^^95^113^int index = System.identityHashCode ( zone )  &  ( FAST_CACHE_SIZE - 1 ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^int index = System.identityHashCode ( zone )  &  ( FAST_CACHE_SIZE  &  1 ) ;^99^^^^^95^113^int index = System.identityHashCode ( zone )  &  ( FAST_CACHE_SIZE - 1 ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P3_Replace_Literal]^int index = System.identityHashCode ( zone )  &  ( FAST_CACHE_SIZE  ) ;^99^^^^^95^113^int index = System.identityHashCode ( zone )  &  ( FAST_CACHE_SIZE - 1 ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^int index = System.identityHashCode ( iZone )  &  ( FAST_CACHE_SIZE - 1 ) ;^99^^^^^95^113^int index = System.identityHashCode ( zone )  &  ( FAST_CACHE_SIZE - 1 ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^int index = System.identityHashCode ( FAST_CACHE_SIZE )  &  ( zone - 1 ) ;^99^^^^^95^113^int index = System.identityHashCode ( zone )  &  ( FAST_CACHE_SIZE - 1 ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^99^100^^^^95^113^int index = System.identityHashCode ( zone )  &  ( FAST_CACHE_SIZE - 1 ) ; ISOChronology chrono = cFastCache[index];^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^if  ( chrono != null || chrono.getZone (  )  == zone )  {^101^^^^^95^113^if  ( chrono != null && chrono.getZone (  )  == zone )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^if  ( chrono == null && chrono.getZone (  )  == zone )  {^101^^^^^95^113^if  ( chrono != null && chrono.getZone (  )  == zone )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^if  ( chrono != null && chrono.getZone (  )  != zone )  {^101^^^^^95^113^if  ( chrono != null && chrono.getZone (  )  == zone )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^if  ( chrono != null && chrono.getZone (  )  == iZone )  {^101^^^^^95^113^if  ( chrono != null && chrono.getZone (  )  == zone )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^if  ( zone != null && chrono.getZone (  )  == chrono )  {^101^^^^^95^113^if  ( chrono != null && chrono.getZone (  )  == zone )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P6_Replace_Expression]^if  ( chrono != null ) {^101^^^^^95^113^if  ( chrono != null && chrono.getZone (  )  == zone )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P6_Replace_Expression]^if  (  chrono.getZone (  )  == zone )  {^101^^^^^95^113^if  ( chrono != null && chrono.getZone (  )  == zone )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^if  ( chrono != true && chrono.getZone (  )  == zone )  {^101^^^^^95^113^if  ( chrono != null && chrono.getZone (  )  == zone )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P15_Unwrap_Block]^return chrono;^101^102^103^^^95^113^if  ( chrono != null && chrono.getZone (  )  == zone )  { return chrono; }^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P16_Remove_Block]^^101^102^103^^^95^113^if  ( chrono != null && chrono.getZone (  )  == zone )  { return chrono; }^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P13_Insert_Block]^if  ( zone ==  ( getZone (  )  )  )  {     return this; }^101^^^^^95^113^[Delete]^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^return INSTANCE_UTC;^102^^^^^95^113^return chrono;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^if  ( INSTANCE_UTC != null && chrono.getZone (  )  == zone )  {^101^^^^^95^113^if  ( chrono != null && chrono.getZone (  )  == zone )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^if  ( INSTANCE_UTC != null && chrono .getBase (  )   == zone )  {^101^^^^^95^113^if  ( chrono != null && chrono.getZone (  )  == zone )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^if  ( chrono != null )  {^106^^^^^95^113^if  ( chrono == null )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^if  ( chrono == false )  {^106^^^^^95^113^if  ( chrono == null )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P9_Replace_Statement]^if  ( zone != null )  {^106^^^^^95^113^if  ( chrono == null )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P9_Replace_Statement]^if  ( zone == null )  {^106^^^^^95^113^if  ( chrono == null )  {^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P15_Unwrap_Block]^chrono = new org.joda.time.chrono.ISOChronology(org.joda.time.chrono.ZonedChronology.getInstance(org.joda.time.chrono.ISOChronology.INSTANCE_UTC, zone)); org.joda.time.chrono.ISOChronology.cCache.put(zone, chrono);^106^107^108^109^^95^113^if  ( chrono == null )  { chrono = new ISOChronology ( ZonedChronology.getInstance ( INSTANCE_UTC, zone )  ) ; cCache.put ( zone, chrono ) ; }^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P16_Remove_Block]^^106^107^108^109^^95^113^if  ( chrono == null )  { chrono = new ISOChronology ( ZonedChronology.getInstance ( INSTANCE_UTC, zone )  ) ; cCache.put ( zone, chrono ) ; }^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^chrono = new ISOChronology ( ZonedChronology.getInstance ( INSTANCE_UTC, iZone )  ) ;^107^^^^^95^113^chrono = new ISOChronology ( ZonedChronology.getInstance ( INSTANCE_UTC, zone )  ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^chrono = new ISOChronology ( ZonedChronology.getInstance ( chrono, zone )  ) ;^107^^^^^95^113^chrono = new ISOChronology ( ZonedChronology.getInstance ( INSTANCE_UTC, zone )  ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^chrono = new ISOChronology ( ZonedChronology.getInstance ( INSTANCE_UTC )  ) ;^107^^^^^95^113^chrono = new ISOChronology ( ZonedChronology.getInstance ( INSTANCE_UTC, zone )  ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^chrono = new ISOChronology ( ZonedChronology.getInstance (  zone )  ) ;^107^^^^^95^113^chrono = new ISOChronology ( ZonedChronology.getInstance ( INSTANCE_UTC, zone )  ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^chrono = new ISOChronology ( ZonedChronology.getInstance ( zone, INSTANCE_UTC )  ) ;^107^^^^^95^113^chrono = new ISOChronology ( ZonedChronology.getInstance ( INSTANCE_UTC, zone )  ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P13_Insert_Block]^if  ( chrono == null )  {     chrono = new ISOChronology ( getInstance ( INSTANCE_UTC, zone )  ) ;     put ( zone, chrono ) ; }^107^^^^^95^113^[Delete]^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^107^^^^^95^113^chrono = new ISOChronology ( ZonedChronology.getInstance ( INSTANCE_UTC, zone )  ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^cCache.put ( iZone, chrono ) ;^108^^^^^95^113^cCache.put ( zone, chrono ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^cCache.put ( zone, INSTANCE_UTC ) ;^108^^^^^95^113^cCache.put ( zone, chrono ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^cCache.put (  chrono ) ;^108^^^^^95^113^cCache.put ( zone, chrono ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^cCache.put ( zone ) ;^108^^^^^95^113^cCache.put ( zone, chrono ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^cCache.put ( chrono, zone ) ;^108^^^^^95^113^cCache.put ( zone, chrono ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^108^^^^^95^113^cCache.put ( zone, chrono ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^chrono = cCache.get ( iZone ) ;^105^^^^^95^113^chrono = cCache.get ( zone ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^chrono = zone.get ( cCache ) ;^105^^^^^95^113^chrono = cCache.get ( zone ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^chrono = cCache.put ( zone ) ;^105^^^^^95^113^chrono = cCache.get ( zone ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^chrono = cCache .put ( chrono )  ;^105^^^^^95^113^chrono = cCache.get ( zone ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^chrono = 1.get ( zone ) ;^105^^^^^95^113^chrono = cCache.get ( zone ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^105^^^^^95^113^chrono = cCache.get ( zone ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^107^108^^^^95^113^chrono = new ISOChronology ( ZonedChronology.getInstance ( INSTANCE_UTC, zone )  ) ; cCache.put ( zone, chrono ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^cCache .put ( INSTANCE_UTC )  ;^108^^^^^95^113^cCache.put ( zone, chrono ) ;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^cFastCache[index] = INSTANCE_UTC;^111^^^^^95^113^cFastCache[index] = chrono;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^cFastCache[index]  =  cFastCache[index] ;^111^^^^^95^113^cFastCache[index] = chrono;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^return INSTANCE_UTC;^112^^^^^95^113^return chrono;^[CLASS] ISOChronology Stub  [METHOD] getInstance [RETURN_TYPE] ISOChronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^return chrono;^133^^^^^132^134^return INSTANCE_UTC;^[CLASS] ISOChronology Stub  [METHOD] withUTC [RETURN_TYPE] Chronology   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^if  ( zone != null )  {^143^^^^^142^150^if  ( zone == null )  {^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^if  ( iZone == null )  {^143^^^^^142^150^if  ( zone == null )  {^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^if  ( zone == false )  {^143^^^^^142^150^if  ( zone == null )  {^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P9_Replace_Statement]^if  ( chrono == null )  {^143^^^^^142^150^if  ( zone == null )  {^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P15_Unwrap_Block]^zone = org.joda.time.DateTimeZone.getDefault();^143^144^145^^^142^150^if  ( zone == null )  { zone = DateTimeZone.getDefault (  ) ; }^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P16_Remove_Block]^^143^144^145^^^142^150^if  ( zone == null )  { zone = DateTimeZone.getDefault (  ) ; }^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^zone = DateTimeZone.getID (  ) ;^144^^^^^142^150^zone = DateTimeZone.getDefault (  ) ;^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^zone  = null ;^144^^^^^142^150^zone = DateTimeZone.getDefault (  ) ;^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P11_Insert_Donor_Statement]^iZone =  ( DateTimeZone ) in.readObject (  ) ;zone = DateTimeZone.getDefault (  ) ;^144^^^^^142^150^zone = DateTimeZone.getDefault (  ) ;^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P13_Insert_Block]^if  ( zone == null )  {     zone = getDefault (  ) ; }^144^^^^^142^150^[Delete]^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^144^^^^^142^150^zone = DateTimeZone.getDefault (  ) ;^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P11_Insert_Donor_Statement]^return getInstance ( DateTimeZone.getDefault (  )  ) ;zone = DateTimeZone.getDefault (  ) ;^144^^^^^142^150^zone = DateTimeZone.getDefault (  ) ;^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^zone  =  zone ;^144^^^^^142^150^zone = DateTimeZone.getDefault (  ) ;^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^if  ( zone != getZone (  )  )  {^146^^^^^142^150^if  ( zone == getZone (  )  )  {^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^if  ( iZone == getZone (  )  )  {^146^^^^^142^150^if  ( zone == getZone (  )  )  {^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^if  ( zone == getBase (  )  )  {^146^^^^^142^150^if  ( zone == getZone (  )  )  {^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P15_Unwrap_Block]^return this;^146^147^148^^^142^150^if  ( zone == getZone (  )  )  { return this; }^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P16_Remove_Block]^^146^147^148^^^142^150^if  ( zone == getZone (  )  )  { return this; }^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P13_Insert_Block]^if  (  ( chrono != null )  &&  (  ( chrono.getZone (  )  )  == zone )  )  {     return chrono; }^146^^^^^142^150^[Delete]^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^return null;^147^^^^^142^150^return this;^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^return getInstance ( iZone ) ;^149^^^^^142^150^return getInstance ( zone ) ;^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^return withZone ( zone ) ;^149^^^^^142^150^return getInstance ( zone ) ;^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^return withZone ( iZone ) ;^149^^^^^142^150^return getInstance ( zone ) ;^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^149^^^^^142^150^return getInstance ( zone ) ;^[CLASS] ISOChronology Stub  [METHOD] withZone [RETURN_TYPE] Chronology   DateTimeZone zone [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P1_Replace_Type]^char str = "ISOChronology";^160^^^^^159^166^String str = "ISOChronology";^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P3_Replace_Literal]^String str = "ISOChronolSOChronology";^160^^^^^159^166^String str = "ISOChronology";^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^DateTimeZone zone = getBase (  ) ;^161^^^^^159^166^DateTimeZone zone = getZone (  ) ;^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^161^^^^^159^166^DateTimeZone zone = getZone (  ) ;^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P11_Insert_Donor_Statement]^return new Stub ( getZone (  )  ) ;DateTimeZone zone = getZone (  ) ;^161^^^^^159^166^DateTimeZone zone = getZone (  ) ;^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^if  ( zone == null )  {^162^^^^^159^166^if  ( zone != null )  {^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^if  ( iZone != null )  {^162^^^^^159^166^if  ( zone != null )  {^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P6_Replace_Expression]^if  ( (str + '[') + zone.getID() + ']' )  {^162^^^^^159^166^if  ( zone != null )  {^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P6_Replace_Expression]^if  ( str + '[' + zone.getID (  ) )  {^162^^^^^159^166^if  ( zone != null )  {^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P6_Replace_Expression]^if  ( str + '[' )  {^162^^^^^159^166^if  ( zone != null )  {^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^if  ( zone != this )  {^162^^^^^159^166^if  ( zone != null )  {^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P9_Replace_Statement]^if  ( chrono == null )  {^162^^^^^159^166^if  ( zone != null )  {^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P15_Unwrap_Block]^str = ((str + '[') + (zone.getID())) + ']';^162^163^164^^^159^166^if  ( zone != null )  { str = str + '[' + zone.getID (  )  + ']'; }^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P16_Remove_Block]^^162^163^164^^^159^166^if  ( zone != null )  { str = str + '[' + zone.getID (  )  + ']'; }^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^str = str + '[' + zone.getID (  |  )  + ']';^163^^^^^159^166^str = str + '[' + zone.getID (  )  + ']';^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^str = str  ^  '['  ^  zone.getID (  )  + ']';^163^^^^^159^166^str = str + '[' + zone.getID (  )  + ']';^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^str = str  <=  '[' + zone.getID (  )  + ']';^163^^^^^159^166^str = str + '[' + zone.getID (  )  + ']';^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^str = str + '[' + iZone.getID (  )  + ']';^163^^^^^159^166^str = str + '[' + zone.getID (  )  + ']';^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^str = zone + '[' + str.getID (  )  + ']';^163^^^^^159^166^str = str + '[' + zone.getID (  )  + ']';^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^str = str + '[' + zone .getDefault (  )   + ']';^163^^^^^159^166^str = str + '[' + zone.getID (  )  + ']';^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^str =  null + '[' + zone.getID (  )  + ']';^163^^^^^159^166^str = str + '[' + zone.getID (  )  + ']';^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P13_Insert_Block]^if  ( zone != null )  {     str =  (  ( str + '[' )  +  ( zone.getID (  )  )  )  + ']'; }^163^^^^^159^166^[Delete]^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^163^^^^^159^166^str = str + '[' + zone.getID (  )  + ']';^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^str = str + '[' + zone.getID (  ==  )  + ']';^163^^^^^159^166^str = str + '[' + zone.getID (  )  + ']';^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^str = str  &&  '['  &&  zone.getID (  )  + ']';^163^^^^^159^166^str = str + '[' + zone.getID (  )  + ']';^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^str = str  &  '[' + zone.getID (  )  + ']';^163^^^^^159^166^str = str + '[' + zone.getID (  )  + ']';^[CLASS] ISOChronology Stub  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  String  str  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^if  ( getBase (  ) .getZone (  )  >= DateTimeZone.UTC )  {^169^^^^^168^180^if  ( getBase (  ) .getZone (  )  == DateTimeZone.UTC )  {^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^if  ( getBase (  ) .getBase (  )  == DateTimeZone.UTC )  {^169^^^^^168^180^if  ( getBase (  ) .getZone (  )  == DateTimeZone.UTC )  {^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^if  ( getZone (  ) .getZone (  )  == DateTimeZone.UTC )  {^169^^^^^168^180^if  ( getBase (  ) .getZone (  )  == DateTimeZone.UTC )  {^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P3_Replace_Literal]^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 98 ) ;^171^172^^^^168^180^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^fields.centuryOfEra = new DividedDateTimeField ( chrono, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^171^172^^^^168^180^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^fields.yearOfCentury = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^171^172^^^^168^180^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^fields .weekyearOfCentury (  )  = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType^171^172^^^^168^180^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 4 ) ;^171^172^^^^168^180^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P11_Insert_Donor_Statement]^fields.yearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^171^172^^^^168^180^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P11_Insert_Donor_Statement]^fields.weekyearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^171^172^^^^168^180^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^fields.weekyearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;^173^174^^^^168^180^fields.yearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^fields.yearOfCentury =  new RemainderDateTimeField ( ( DividedDateTimeField )  null.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;^173^174^^^^168^180^fields.yearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P11_Insert_Donor_Statement]^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;fields.yearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;^173^174^^^^168^180^fields.yearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P11_Insert_Donor_Statement]^fields.weekyearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;fields.yearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;^173^174^^^^168^180^fields.yearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^fields.yearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;^175^176^^^^168^180^fields.weekyearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^fields .yearOfCentury (  )   fields.centuryOfEra, DateTimeFieldType^175^176^^^^168^180^fields.weekyearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^fields.weekyearOfCentury =  new RemainderDateTimeField ( ( DividedDateTimeField )  null.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;^175^176^^^^168^180^fields.weekyearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P11_Insert_Donor_Statement]^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;fields.weekyearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;^175^176^^^^168^180^fields.weekyearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P11_Insert_Donor_Statement]^fields.yearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;fields.weekyearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;^175^176^^^^168^180^fields.weekyearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^fields.centuries =  null.centuryOfEra.getDurationField (  ) ;^178^^^^^168^180^fields.centuries = fields.centuryOfEra.getDurationField (  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.yearOfCentury (  ) , 100 ) ;^172^^^^^168^180^ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^172^^^^^168^180^ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;^174^^^^^168^180^( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^174^^^^^168^180^( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P11_Insert_Donor_Statement]^( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;^174^^^^^168^180^( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;^176^^^^^168^180^( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^176^^^^^168^180^( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P11_Insert_Donor_Statement]^( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;^176^^^^^168^180^( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^178^^^^^168^180^fields.centuries = fields.centuryOfEra.getDurationField (  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P3_Replace_Literal]^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , index ) ;^171^172^^^^168^180^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 - 2 ) ;^171^172^^^^168^180^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^fields .weekyearOfCentury (  )   fields.centuryOfEra, DateTimeFieldType^173^174^^^^168^180^fields.yearOfCentury = new RemainderDateTimeField ( ( DividedDateTimeField )  fields.centuryOfEra, DateTimeFieldType.yearOfCentury (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P3_Replace_Literal]^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , FAST_CACHE_SIZE ) ;^171^172^^^^168^180^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^fields .weekyearOfCentury (  )  = new DividedDateTimeField ( chrono, DateTimeFieldType^171^172^^^^168^180^fields.centuryOfEra = new DividedDateTimeField ( ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra (  ) , 100 ) ;^[CLASS] ISOChronology Stub  [METHOD] assemble [RETURN_TYPE] void   Fields fields [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  Fields  fields  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^return super .equals ( obj )  ;^190^^^^^189^191^return super.equals ( obj ) ;^[CLASS] ISOChronology Stub  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Object  obj  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^190^^^^^189^191^return super.equals ( obj ) ;^[CLASS] ISOChronology Stub  [METHOD] equals [RETURN_TYPE] boolean   Object obj [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Object  obj  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^return "ISO".hashCode (  >>  )  * 11 + getZone (  ) .hashCode (  ) ;^200^^^^^199^201^return "ISO".hashCode (  )  * 11 + getZone (  ) .hashCode (  ) ;^[CLASS] ISOChronology Stub  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P2_Replace_Operator]^return "ISO".hashCode (  )  / 11 + getZone (  ) .hashCode (  ) ;^200^^^^^199^201^return "ISO".hashCode (  )  * 11 + getZone (  ) .hashCode (  ) ;^[CLASS] ISOChronology Stub  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P3_Replace_Literal]^return "".hashCode (  )  * 11 + getZone (  ) .hashCode (  ) ;^200^^^^^199^201^return "ISO".hashCode (  )  * 11 + getZone (  ) .hashCode (  ) ;^[CLASS] ISOChronology Stub  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P3_Replace_Literal]^return "ISO".hashCode (  )  * index + getZone (  ) .hashCode (  ) ;^200^^^^^199^201^return "ISO".hashCode (  )  * 11 + getZone (  ) .hashCode (  ) ;^[CLASS] ISOChronology Stub  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^return "ISO".getZone (  )  * 11 + getZone (  ) .hashCode (  ) ;^200^^^^^199^201^return "ISO".hashCode (  )  * 11 + getZone (  ) .hashCode (  ) ;^[CLASS] ISOChronology Stub  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^return "ISO" .hashCode (  )   * 11 + getZone (  )^200^^^^^199^201^return "ISO".hashCode (  )  * 11 + getZone (  ) .hashCode (  ) ;^[CLASS] ISOChronology Stub  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^return "ISO".hashCode (  )  * 11 + getBase (  ) .hashCode (  ) ;^200^^^^^199^201^return "ISO".hashCode (  )  * 11 + getZone (  ) .hashCode (  ) ;^[CLASS] ISOChronology Stub  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^return "ISO".getZone (  )  * 11  ;^200^^^^^199^201^return "ISO".hashCode (  )  * 11 + getZone (  ) .hashCode (  ) ;^[CLASS] ISOChronology Stub  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^200^^^^^199^201^return "ISO".hashCode (  )  * 11 + getZone (  ) .hashCode (  ) ;^[CLASS] ISOChronology Stub  [METHOD] hashCode [RETURN_TYPE] int   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^return new Stub ( getBase (  )  ) ;^208^^^^^207^209^return new Stub ( getZone (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] writeReplace [RETURN_TYPE] Object   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P12_Insert_Condition]^if  ( zone == getZone (  )  )  { return new Stub ( getZone (  )  ) ; }^208^^^^^207^209^return new Stub ( getZone (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] writeReplace [RETURN_TYPE] Object   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^208^^^^^207^209^return new Stub ( getZone (  )  ) ;^[CLASS] ISOChronology Stub  [METHOD] writeReplace [RETURN_TYPE] Object   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^return ISOChronology.getInstance ( zone ) ;^221^^^^^220^222^return ISOChronology.getInstance ( iZone ) ;^[CLASS] ISOChronology Stub  [METHOD] readResolve [RETURN_TYPE] Object   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^221^^^^^220^222^return ISOChronology.getInstance ( iZone ) ;^[CLASS] ISOChronology Stub  [METHOD] readResolve [RETURN_TYPE] Object   [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P5_Replace_Variable]^out.writeObject ( zone ) ;^225^^^^^224^226^out.writeObject ( iZone ) ;^[CLASS] ISOChronology Stub  [METHOD] writeObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  ObjectOutputStream  out  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^225^^^^^224^226^out.writeObject ( iZone ) ;^[CLASS] ISOChronology Stub  [METHOD] writeObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  ObjectOutputStream  out  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  
[P8_Replace_Mix]^iZone =   ( DateTimeZone ) null.readObject (  ) ;^231^^^^^228^232^iZone =  ( DateTimeZone ) in.readObject (  ) ;^[CLASS] ISOChronology Stub  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  ObjectInputStream  in  
[P11_Insert_Donor_Statement]^zone = DateTimeZone.getDefault (  ) ;iZone =  ( DateTimeZone ) in.readObject (  ) ;^231^^^^^228^232^iZone =  ( DateTimeZone ) in.readObject (  ) ;^[CLASS] ISOChronology Stub  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  ObjectInputStream  in  
[P14_Delete_Statement]^^231^^^^^228^232^iZone =  ( DateTimeZone ) in.readObject (  ) ;^[CLASS] ISOChronology Stub  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  ObjectInputStream  in  
[P1_Replace_Type]^private static final  short  serialVersionUID = -6212696554273812441L;^212^^^^^207^217^private static final long serialVersionUID = -6212696554273812441L;^[CLASS] Stub  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  ObjectInputStream  in  
[P8_Replace_Mix]^private static final long serialVersionUID = -6212696554273812441;^212^^^^^207^217^private static final long serialVersionUID = -6212696554273812441L;^[CLASS] Stub  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] ISOChronology  INSTANCE_UTC  chrono  ISOChronology[]  cFastCache  boolean  Map  cCache  long  serialVersionUID  int  FAST_CACHE_SIZE  index  DateTimeZone  iZone  zone  ObjectInputStream  in  
[P5_Replace_Variable]^iZone = iZone;^217^^^^^216^218^iZone = zone;^[CLASS] Stub  [METHOD] <init> [RETURN_TYPE] DateTimeZone)   DateTimeZone zone [VARIABLES] long  serialVersionUID  DateTimeZone  iZone  zone  boolean  
[P8_Replace_Mix]^iZone =  null;^217^^^^^216^218^iZone = zone;^[CLASS] Stub  [METHOD] <init> [RETURN_TYPE] DateTimeZone)   DateTimeZone zone [VARIABLES] long  serialVersionUID  DateTimeZone  iZone  zone  boolean  
[P5_Replace_Variable]^return ISOChronology.getInstance ( zone ) ;^221^^^^^220^222^return ISOChronology.getInstance ( iZone ) ;^[CLASS] Stub  [METHOD] readResolve [RETURN_TYPE] Object   [VARIABLES] long  serialVersionUID  DateTimeZone  iZone  zone  boolean  
[P14_Delete_Statement]^^221^^^^^220^222^return ISOChronology.getInstance ( iZone ) ;^[CLASS] Stub  [METHOD] readResolve [RETURN_TYPE] Object   [VARIABLES] long  serialVersionUID  DateTimeZone  iZone  zone  boolean  
[P5_Replace_Variable]^out.writeObject ( zone ) ;^225^^^^^224^226^out.writeObject ( iZone ) ;^[CLASS] Stub  [METHOD] writeObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  ObjectOutputStream  out  long  serialVersionUID  DateTimeZone  iZone  zone  
[P14_Delete_Statement]^^225^^^^^224^226^out.writeObject ( iZone ) ;^[CLASS] Stub  [METHOD] writeObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  ObjectOutputStream  out  long  serialVersionUID  DateTimeZone  iZone  zone  
[P7_Replace_Invocation]^iZone =  ( DateTimeZone ) in .writeObject ( null )  ;^231^^^^^228^232^iZone =  ( DateTimeZone ) in.readObject (  ) ;^[CLASS] Stub  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  long  serialVersionUID  DateTimeZone  iZone  zone  ObjectInputStream  in  
[P8_Replace_Mix]^iZone =   ( DateTimeZone ) null.readObject (  ) ;^231^^^^^228^232^iZone =  ( DateTimeZone ) in.readObject (  ) ;^[CLASS] Stub  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  long  serialVersionUID  DateTimeZone  iZone  zone  ObjectInputStream  in  
[P14_Delete_Statement]^^231^^^^^228^232^iZone =  ( DateTimeZone ) in.readObject (  ) ;^[CLASS] Stub  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  long  serialVersionUID  DateTimeZone  iZone  zone  ObjectInputStream  in  
