[P5_Replace_Variable]^super (  in ) ;^28^^^^^27^29^super ( format, in ) ;^[CLASS] CSVLexer  [METHOD] <init> [RETURN_TYPE] ExtendedBufferedReader)   CSVFormat format ExtendedBufferedReader in [VARIABLES] boolean  ExtendedBufferedReader  in  CSVFormat  format  
[P5_Replace_Variable]^super ( format ) ;^28^^^^^27^29^super ( format, in ) ;^[CLASS] CSVLexer  [METHOD] <init> [RETURN_TYPE] ExtendedBufferedReader)   CSVFormat format ExtendedBufferedReader in [VARIABLES] boolean  ExtendedBufferedReader  in  CSVFormat  format  
[P5_Replace_Variable]^super ( in, format ) ;^28^^^^^27^29^super ( format, in ) ;^[CLASS] CSVLexer  [METHOD] <init> [RETURN_TYPE] ExtendedBufferedReader)   CSVFormat format ExtendedBufferedReader in [VARIABLES] boolean  ExtendedBufferedReader  in  CSVFormat  format  
[P14_Delete_Statement]^^28^29^^^^27^29^super ( format, in ) ; }^[CLASS] CSVLexer  [METHOD] <init> [RETURN_TYPE] ExtendedBufferedReader)   CSVFormat format ExtendedBufferedReader in [VARIABLES] boolean  ExtendedBufferedReader  in  CSVFormat  format  
[P1_Replace_Type]^short  lastChar = in.readAgain (  ) ;^44^^^^^29^59^int lastChar = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^int lastChar = in.readLine (  ) ;^44^^^^^29^59^int lastChar = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^int c = in.read (  ) ;int lastChar = in.readAgain (  ) ;^44^^^^^29^59^int lastChar = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^44^^^^^29^59^int lastChar = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^c = in.readAgain (  ) ;int lastChar = in.readAgain (  ) ;^44^^^^^29^59^int lastChar = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^c = in.read (  ) ;int lastChar = in.readAgain (  ) ;^44^^^^^29^59^int lastChar = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P1_Replace_Type]^short  c = in.read (  ) ;^51^^^^^36^66^int c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^int c = in.readLine (  ) ;^51^^^^^36^66^int c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^int lastChar = in.readAgain (  ) ;int c = in.read (  ) ;^51^^^^^36^66^int c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^51^52^^^^36^66^int c = in.read (  ) ; boolean eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^c = in.readAgain (  ) ;int c = in.read (  ) ;^51^^^^^36^66^int c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^c = in.read (  ) ;int c = in.read (  ) ;^51^^^^^36^66^int c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^in.readLine (  ) ;int c = in.read (  ) ;^51^^^^^36^66^int c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^boolean eol = isEndOfLine ( lastChar ) ;^52^^^^^37^67^boolean eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^boolean eol = isEndOfFile ( c ) ;^52^^^^^37^67^boolean eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^boolean eol = isEndOfFile ( lastChar ) ;^52^^^^^37^67^boolean eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^52^^^^^37^67^boolean eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^c = in.readLine (  ) ;^53^^^^^38^68^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^c  =  c ;^53^^^^^38^68^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^eol = isEndOfLine ( c ) ;c = in.readAgain (  ) ;^53^^^^^38^68^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^c = in.read (  ) ;c = in.readAgain (  ) ;^53^^^^^38^68^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^53^^^^^38^68^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^int lastChar = in.readAgain (  ) ;c = in.readAgain (  ) ;^53^^^^^38^68^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^int c = in.read (  ) ;c = in.readAgain (  ) ;^53^^^^^38^68^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^in.readLine (  ) ;c = in.readAgain (  ) ;^53^^^^^38^68^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P2_Replace_Operator]^while  ( eol ||  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P2_Replace_Operator]^while  ( eol &&  ( lastChar == '\n' && lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P2_Replace_Operator]^while  ( eol &&  ( lastChar <= '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P2_Replace_Operator]^while  ( eol &&  ( lastChar == '\n' || lastChar >= '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P2_Replace_Operator]^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar <= ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == 1 ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^while  ( lastChar &&  ( eol == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfLine ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^if  ( isEndOfFile ( lastChar )  )  {^66^^^^^57^71^if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^if  ( isEndOfLine ( c )  )  {^66^^^^^57^71^if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^if  ( isEndOfLine ( lastChar )  )  {^66^^^^^57^71^if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P9_Replace_Statement]^if  ( isEscape ( c )  )  {^66^^^^^57^71^if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P15_Unwrap_Block]^tkn.type = EOF; return tkn;^66^67^^69^70^57^71^if  ( isEndOfFile ( c )  )  { tkn.type = EOF; return tkn; }^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P16_Remove_Block]^^66^67^^69^70^57^71^if  ( isEndOfFile ( c )  )  { tkn.type = EOF; return tkn; }^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P13_Insert_Block]^if  ( isEndOfFile ( c )  )  {     tkn.type = EOF;     tkn.isReady = true; }else {     simpleTokenLexer ( tkn, c ) ; }^66^^^^^57^71^[Delete]^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^tkn.type  =  tkn.type ;^67^^^^^57^71^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^tkn.type = TOKEN;tkn.type = EOF;^67^^^^^57^71^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^tkn.type = EORECORD;tkn.type = EOF;^67^^^^^57^71^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^lastChar = lastChar;^61^^^^^57^71^lastChar = c;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^lastChar =  null;^61^^^^^57^71^lastChar = c;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^c = null.read (  ) ;^62^^^^^57^71^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^c = in.readLine (  ) ;^62^^^^^57^71^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^c  = null ;^62^^^^^57^71^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^c = in.readAgain (  ) ;c = in.read (  ) ;^62^^^^^57^71^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^eol = isEndOfLine ( lastChar ) ;^63^^^^^57^71^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^eol = isEndOfFile ( c ) ;^63^^^^^57^71^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^c = in.readAgain (  ) ;eol = isEndOfLine ( c ) ;^63^^^^^57^71^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^c = in.readLine (  ) ;^64^^^^^57^71^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^c  = null ;^64^^^^^57^71^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^eol = isEndOfLine ( c ) ;c = in.readAgain (  ) ;^64^^^^^57^71^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^c = in.read (  ) ;c = in.readAgain (  ) ;^64^^^^^57^71^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^tkn.type = 0;^67^^^^^57^71^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^tkn.type ;^67^^^^^57^71^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^c = null.readLine (  ) ;^62^^^^^57^71^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^62^^^^^57^71^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^int lastChar = in.readAgain (  ) ;c = in.read (  ) ;^62^^^^^57^71^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^int c = in.read (  ) ;c = in.read (  ) ;^62^^^^^57^71^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^in.readLine (  ) ;c = in.read (  ) ;^62^^^^^57^71^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^63^^^^^57^71^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^64^^^^^57^71^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^int lastChar = in.readAgain (  ) ;c = in.readAgain (  ) ;^64^^^^^57^71^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^int c = in.read (  ) ;c = in.readAgain (  ) ;^64^^^^^57^71^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^in.readLine (  ) ;c = in.readAgain (  ) ;^64^^^^^57^71^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P6_Replace_Expression]^if  ( (eol && ((lastChar == '\n') || (lastChar == '\r')) || (lastChar == ExtendedBufferedReader.UNDEFINED)) )  {^56^^^^^41^71^if  ( emptyLinesIgnored )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P6_Replace_Expression]^if  ( ((lastChar == '\n') || (lastChar == '\r') || lastChar == ExtendedBufferedReader.UNDEFINED) )  {^56^^^^^41^71^if  ( emptyLinesIgnored )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P6_Replace_Expression]^if  ( (lastChar == '\n' || lastChar == '\r') )  {^56^^^^^41^71^if  ( emptyLinesIgnored )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P6_Replace_Expression]^if  ( lastChar == '\n' )  {^56^^^^^41^71^if  ( emptyLinesIgnored )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P6_Replace_Expression]^if  ( lastChar == '\r' )  {^56^^^^^41^71^if  ( emptyLinesIgnored )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P6_Replace_Expression]^if  ( lastChar == ExtendedBufferedReader.UNDEFINED )  {^56^^^^^41^71^if  ( emptyLinesIgnored )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P2_Replace_Operator]^while  ( eol &&  ( lastChar != '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P2_Replace_Operator]^while  ( eol &&  ( lastChar == '\n' || lastChar != '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^while  ( eol &&  ( c == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^57^58^59^^^42^72^while  ( eol &&  ( lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED ) && !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^c  =  c ;^62^^^^^57^71^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^c ;^64^^^^^57^71^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^62^63^^^^57^71^c = in.read (  ) ; eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^eol = isEndOfFile ( lastChar ) ;^63^^^^^57^71^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^63^64^^^^57^71^eol = isEndOfLine ( c ) ; c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^if  ( isEndOfFile ( lastChar )  )  {^66^^^^^51^81^if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^if  ( isEndOfLine ( c )  )  {^66^^^^^51^81^if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P9_Replace_Statement]^if  ( isEscape ( c )  )  {^66^^^^^51^81^if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P15_Unwrap_Block]^tkn.type = EOF; return tkn;^66^67^^69^70^51^81^if  ( isEndOfFile ( c )  )  { tkn.type = EOF; return tkn; }^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P16_Remove_Block]^^66^67^^69^70^51^81^if  ( isEndOfFile ( c )  )  { tkn.type = EOF; return tkn; }^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P13_Insert_Block]^if  ( isEndOfFile ( c )  )  {     tkn.type = EOF;     tkn.isReady = true; }else {     simpleTokenLexer ( tkn, c ) ; }^66^^^^^51^81^[Delete]^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^tkn.type ;^67^^^^^52^82^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^tkn.type = TOKEN;tkn.type = EOF;^67^^^^^52^82^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^tkn.type = EORECORD;tkn.type = EOF;^67^^^^^52^82^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^lastChar = lastChar;^61^^^^^46^76^lastChar = c;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^lastChar =  null;^61^^^^^46^76^lastChar = c;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^c = in.readLine (  ) ;^62^^^^^47^77^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^c ;^62^^^^^47^77^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^c = in.readAgain (  ) ;c = in.read (  ) ;^62^^^^^47^77^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^eol = isEndOfFile ( c ) ;^63^^^^^48^78^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^eol =  isEndOfLine ( lastChar ) ;^63^^^^^48^78^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^c = in.readAgain (  ) ;eol = isEndOfLine ( c ) ;^63^^^^^48^78^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^c = in.readLine (  ) ;^64^^^^^49^79^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^c ;^64^^^^^49^79^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^eol = isEndOfLine ( c ) ;c = in.readAgain (  ) ;^64^^^^^49^79^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^c = in.read (  ) ;c = in.readAgain (  ) ;^64^^^^^49^79^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^tkn.type  =  tkn.type ;^67^^^^^52^82^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^&& !isEndOfFile ( c )  )  {^59^^^^^44^74^&& !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^&& !isEndOfLine ( lastChar )  )  {^59^^^^^44^74^&& !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^&& !isEndOfLine ( c )  )  {^59^^^^^44^74^&& !isEndOfFile ( lastChar )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^59^60^61^^^44^74^&& !isEndOfFile ( lastChar )  )  {  lastChar = c;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^c = this.read (  ) ;^62^^^^^47^77^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^62^^^^^47^77^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^int lastChar = in.readAgain (  ) ;c = in.read (  ) ;^62^^^^^47^77^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^int c = in.read (  ) ;c = in.read (  ) ;^62^^^^^47^77^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^in.readLine (  ) ;c = in.read (  ) ;^62^^^^^47^77^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^63^64^^^^48^78^eol = isEndOfLine ( c ) ; c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^c = 0.readAgain (  ) ;^64^^^^^49^79^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^64^^^^^49^79^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^int lastChar = in.readAgain (  ) ;c = in.readAgain (  ) ;^64^^^^^49^79^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^int c = in.read (  ) ;c = in.readAgain (  ) ;^64^^^^^49^79^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^in.readLine (  ) ;c = in.readAgain (  ) ;^64^^^^^49^79^c = in.readAgain (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^c  = null ;^62^^^^^47^77^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^63^^^^^48^78^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^if  ( isEndOfLine ( lastChar )  )  {^66^^^^^51^81^if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P2_Replace_Operator]^if  ( isEndOfFile ( lastChar )  &&  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^75^^^^^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P2_Replace_Operator]^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  || isEndOfFile ( c )  )  )  {^75^^^^^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^if  ( isEndOfFile ( c )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^75^^^^^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( lastChar )  )  )  {^75^^^^^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^if  ( isEndOfFile ( c )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( lastChar )  )  )  {^75^^^^^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P6_Replace_Expression]^if  ( isEndOfFile ( lastChar )  ) {^75^^^^^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P6_Replace_Expression]^if  (   ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^75^^^^^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P6_Replace_Expression]^if  ( !(isDelimiter(lastChar) && isEndOfFile(c)) )  {^75^^^^^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^if  ( isEndOfLine ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^75^^^^^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^if  ( isEndOfFile ( lastChar )  ||  ( !isEscape ( lastChar )  && isEndOfFile ( c )  )  )  {^75^^^^^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P15_Unwrap_Block]^tkn.type = EOF; return tkn;^75^76^^78^79^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  { tkn.type = EOF; return tkn; }^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P16_Remove_Block]^^75^76^^78^79^60^90^if  ( isEndOfFile ( lastChar )  ||  ( !isDelimiter ( lastChar )  && isEndOfFile ( c )  )  )  { tkn.type = EOF; return tkn; }^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^tkn.type  = null ;^76^^^^^61^91^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^tkn.type = TOKEN;tkn.type = EOF;^76^^^^^61^91^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^tkn.type = EORECORD;tkn.type = EOF;^76^^^^^61^91^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^tkn.type ;^76^^^^^61^91^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P2_Replace_Operator]^while  ( tkn.type >= INVALID )  {^82^^^^^67^97^while  ( tkn.type == INVALID )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P2_Replace_Operator]^while  ( isWhitespace ( c )  || !eol )  {^85^^^^^70^100^while  ( isWhitespace ( c )  && !eol )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^while  ( isWhitespace ( lastChar )  && !eol )  {^85^^^^^70^100^while  ( isWhitespace ( c )  && !eol )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^while  ( isEscape ( c )  && !eol )  {^85^^^^^70^100^while  ( isWhitespace ( c )  && !eol )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P13_Insert_Block]^if  ( surroundingSpacesIgnored )  {     while  (  ( isWhitespace ( c )  )  &&  ( !eol )  )  {         c = in.read (  ) ;         eol = isEndOfLine ( c ) ;     }  }^85^^^^^70^100^[Delete]^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^c = in.readLine (  ) ;^86^^^^^71^101^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^c  =  c ;^86^^^^^71^101^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^c = in.readAgain (  ) ;c = in.read (  ) ;^86^^^^^71^101^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^eol = isEndOfLine ( lastChar ) ;^87^^^^^72^102^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^eol = isEndOfFile ( c ) ;^87^^^^^72^102^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^c = in.readAgain (  ) ;eol = isEndOfLine ( c ) ;^87^^^^^72^102^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^86^^^^^71^101^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^int lastChar = in.readAgain (  ) ;c = in.read (  ) ;^86^^^^^71^101^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^int c = in.read (  ) ;c = in.read (  ) ;^86^^^^^71^101^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^in.readLine (  ) ;c = in.read (  ) ;^86^^^^^71^101^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^87^^^^^72^102^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P15_Unwrap_Block]^while ((isWhitespace(c)) && (!eol)) {    c = in.read();    eol = isEndOfLine(c);} ;^84^85^86^87^88^69^99^if  ( surroundingSpacesIgnored )  { while  ( isWhitespace ( c )  && !eol )  { c = in.read (  ) ; eol = isEndOfLine ( c ) ; }^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P16_Remove_Block]^^84^85^86^87^88^69^99^if  ( surroundingSpacesIgnored )  { while  ( isWhitespace ( c )  && !eol )  { c = in.read (  ) ; eol = isEndOfLine ( c ) ; }^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^86^87^^^^71^101^c = in.read (  ) ; eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^eol = isEndOfFile ( lastChar ) ;^87^^^^^72^102^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^c  = null ;^86^^^^^71^101^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^85^86^^^^70^100^while  ( isWhitespace ( c )  && !eol )  { c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^if  ( isCommentStart ( lastChar )  )  {^92^^^^^77^107^if  ( isCommentStart ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^if  ( isWhitespace ( c )  )  {^92^^^^^77^107^if  ( isCommentStart ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P9_Replace_Statement]^if  ( isEscape ( c )  )  {^92^^^^^77^107^if  ( isCommentStart ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P9_Replace_Statement]^if  ( isDelimiter ( c )  )  {^92^^^^^77^107^if  ( isCommentStart ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P9_Replace_Statement]^if  ( isEndOfLine ( c )  )  {^92^^^^^77^107^if  ( isCommentStart ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P9_Replace_Statement]^if  ( isEndOfFile ( c )  )  {^92^^^^^77^107^if  ( isCommentStart ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^} else if  ( isDelimiter ( lastChar )  )  {^96^^^^^81^111^} else if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P6_Replace_Expression]^} else {^96^^^^^81^111^} else if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^} else if  ( isEscape ( c )  )  {^96^^^^^81^111^} else if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P9_Replace_Statement]^} else if  ( isEndOfFile ( c )  )  {^96^^^^^81^111^} else if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P6_Replace_Expression]^} else {^99^^^^^84^114^} else if  ( eol )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^} else if  ( isEncapsulator ( lastChar )  )  {^103^^^^^88^118^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P6_Replace_Expression]^} else {^103^^^^^88^118^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^}  if  ( isEncapsulator ( lastChar )  )  {^103^^^^^88^118^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P9_Replace_Statement]^} else if  ( isDelimiter ( c )  )  {^103^^^^^88^118^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P9_Replace_Statement]^} else if  ( isEndOfFile ( c )  )  {^103^^^^^88^118^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P9_Replace_Statement]^} else if  ( isEndOfLine ( c )  )  {^103^^^^^88^118^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P9_Replace_Statement]^} else if  ( isEscape ( c )  )  {^103^^^^^88^118^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P9_Replace_Statement]^} else if  ( !isWhitespace ( c )  )  {^103^^^^^88^118^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^} else if  ( isEndOfFile ( lastChar )  )  {^106^^^^^91^121^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P6_Replace_Expression]^} else {^106^^^^^91^121^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^} else if  ( isEndOfLine ( c )  )  {^106^^^^^91^121^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P9_Replace_Statement]^} else if  ( isDelimiter ( c )  )  {^106^^^^^91^121^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P13_Insert_Block]^if  ( isEndOfFile ( c )  )  {     tkn.type = EOF;     return tkn; }^106^^^^^91^121^[Delete]^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P13_Insert_Block]^if  ( isEncapsulator ( c )  )  {     encapsulatedTokenLexer ( tkn, c ) ; }else     if  ( isEndOfFile ( c )  )  {         tkn.type = EOF;         tkn.isReady = true;     }else {         simpleTokenLexer ( tkn, c ) ;     }^106^^^^^91^121^[Delete]^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^simpleTokenLexer ( tkn, lastChar ) ;^114^^^^^106^115^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^simpleTokenLexer (  c ) ;^114^^^^^106^115^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^simpleTokenLexer ( tkn ) ;^114^^^^^106^115^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^simpleTokenLexer ( c, tkn ) ;^114^^^^^106^115^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^encapsulatedTokenLexer ( tkn, c ) ;^114^^^^^106^115^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^114^^^^^106^115^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^encapsulatedTokenLexer ( tkn, c ) ;simpleTokenLexer ( tkn, c ) ;^114^^^^^106^115^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^tkn.type  =  tkn.type ;^109^^^^^94^124^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^tkn.type = TOKEN;tkn.type = EOF;^109^^^^^94^124^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^tkn.type = EORECORD;tkn.type = EOF;^109^^^^^94^124^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P3_Replace_Literal]^tkn.isReady = false;^110^^^^^95^125^tkn.isReady = true;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^tkn.type = TOKEN;tkn.isReady = true;^110^^^^^95^125^tkn.isReady = true;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^} else if  ( isEndOfLine ( lastChar )  )  {^106^^^^^91^121^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^simpleTokenLexer ( tkn, lastChar ) ;^114^^^^^99^129^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^simpleTokenLexer (  c ) ;^114^^^^^99^129^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^simpleTokenLexer ( tkn ) ;^114^^^^^99^129^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^simpleTokenLexer ( c, tkn ) ;^114^^^^^99^129^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^encapsulatedTokenLexer ( tkn, c ) ;^114^^^^^99^129^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^114^^^^^99^129^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^encapsulatedTokenLexer ( tkn, c ) ;simpleTokenLexer ( tkn, c ) ;^114^^^^^99^129^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^encapsulatedTokenLexer ( tkn, lastChar ) ;^105^^^^^90^120^encapsulatedTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^encapsulatedTokenLexer (  c ) ;^105^^^^^90^120^encapsulatedTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^encapsulatedTokenLexer ( tkn ) ;^105^^^^^90^120^encapsulatedTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^encapsulatedTokenLexer ( c, tkn ) ;^105^^^^^90^120^encapsulatedTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^simpleTokenLexer ( tkn, c ) ;^105^^^^^90^120^encapsulatedTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^simpleTokenLexer ( tkn, lastChar ) ;^105^^^^^90^120^encapsulatedTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^105^^^^^90^120^encapsulatedTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^simpleTokenLexer ( tkn, c ) ;encapsulatedTokenLexer ( tkn, c ) ;^105^^^^^90^120^encapsulatedTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^tkn.type  =  tkn.type ;^102^^^^^87^117^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^tkn.type = TOKEN;tkn.type = EORECORD;^102^^^^^87^117^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^tkn.type = EOF;tkn.type = EORECORD;^102^^^^^87^117^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^}  if  ( isEndOfFile ( lastChar )  )  {^106^^^^^91^121^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^tkn.type = this;^109^^^^^94^124^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^tkn.type  = null ;^109^^^^^94^124^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^encapsulatedTokenLexer ( tkn, lastChar ) ;^114^^^^^106^115^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^tkn.type ;^109^^^^^94^124^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^tkn.type ;^98^^^^^83^113^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^tkn.type = EORECORD;tkn.type = TOKEN;^98^^^^^83^113^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^tkn.type = EOF;tkn.type = TOKEN;^98^^^^^83^113^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^tkn.isReady = true;tkn.type = TOKEN;^98^^^^^83^113^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^}  if  ( eol )  {^99^^^^^84^114^} else if  ( eol )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^encapsulatedTokenLexer ( tkn, lastChar ) ;^114^^^^^99^129^simpleTokenLexer ( tkn, c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^tkn.type  = null ;^102^^^^^87^117^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^tkn.type = 2;^109^^^^^94^124^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^tkn.type = 1;^98^^^^^83^113^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^tkn.type  = null ;^98^^^^^83^113^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^tkn =  nextToken ( null.reset (  )  ) ;^95^^^^^80^110^tkn = nextToken ( tkn.reset (  )  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P7_Replace_Invocation]^in.readAgain (  ) ;^94^^^^^79^109^in.readLine (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^94^^^^^79^109^in.readLine (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^c = in.readAgain (  ) ;in.readLine (  ) ;^94^^^^^79^109^in.readLine (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^int c = in.read (  ) ;in.readLine (  ) ;^94^^^^^79^109^in.readLine (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^eol = isEndOfLine ( c ) ;in.readLine (  ) ;^94^^^^^79^109^in.readLine (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P11_Insert_Donor_Statement]^c = in.read (  ) ;in.readLine (  ) ;^94^^^^^79^109^in.readLine (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^95^^^^^80^110^tkn = nextToken ( tkn.reset (  )  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^}  if  ( isEndOfLine ( lastChar )  )  {^106^^^^^91^121^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^tkn.type ;^102^^^^^87^117^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^tkn.type  =  tkn.type ;^98^^^^^83^113^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^c = this.read (  ) ;^86^^^^^71^101^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^if  ( isWhitespace ( lastChar )  )  {^92^^^^^77^107^if  ( isCommentStart ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^c = 4.read (  ) ;^86^^^^^71^101^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^eol =  isEndOfLine ( null ) ;^87^^^^^72^102^eol = isEndOfLine ( c ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^while  ( isEscape ( lastChar )  && !eol )  {^85^^^^^70^100^while  ( isWhitespace ( c )  && !eol )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^c = null.read (  ) ;^86^^^^^71^101^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P5_Replace_Variable]^tkn.type = 4;^109^^^^^94^124^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P14_Delete_Statement]^^94^95^^^^79^109^in.readLine (  ) ; tkn = nextToken ( tkn.reset (  )  ) ;^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P8_Replace_Mix]^}  if  ( isEndOfLine ( c )  )  {^106^^^^^91^121^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] nextToken [RETURN_TYPE] Token   Token tkn [VARIABLES] boolean  eol  Token  tkn  int  c  lastChar  
[P3_Replace_Literal]^while  ( false )  {^138^^^^^137^166^while  ( true )  {^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P7_Replace_Invocation]^if  ( isEndOfFile ( c )  )  {^139^^^^^137^166^if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P9_Replace_Statement]^if  ( isEscape ( c )  )  {^139^^^^^137^166^if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P6_Replace_Expression]^} else {^143^^^^^137^166^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P7_Replace_Invocation]^} else if  ( isEndOfLine ( c )  )  {^143^^^^^137^166^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P9_Replace_Statement]^} else if  ( isDelimiter ( c )  )  {^143^^^^^137^166^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P6_Replace_Expression]^} else {^148^^^^^137^166^} else if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P7_Replace_Invocation]^} else if  ( isEscape ( c )  )  {^148^^^^^137^166^} else if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P8_Replace_Mix]^}  if  ( isEscape ( c )  )  {^148^^^^^137^166^} else if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P9_Replace_Statement]^} else if  ( isEndOfFile ( c )  )  {^148^^^^^137^166^} else if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P6_Replace_Expression]^} else {^152^^^^^137^166^} else if  ( isEscape ( c )  )  {^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P7_Replace_Invocation]^} else if  ( readEscape ( c )  )  {^152^^^^^137^166^} else if  ( isEscape ( c )  )  {^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P8_Replace_Mix]^}  if  ( readEscape ( c )  )  {^152^^^^^137^166^} else if  ( isEscape ( c )  )  {^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P15_Unwrap_Block]^tkn.content.append(((char) (readEscape(c))));^152^153^154^155^156^137^166^} else if  ( isEscape ( c )  )  { tkn.content.append (  ( char )  readEscape ( c )  ) ; } else { tkn.content.append (  ( char )  c ) ; }^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P16_Remove_Block]^^152^153^154^155^156^137^166^} else if  ( isEscape ( c )  )  { tkn.content.append (  ( char )  readEscape ( c )  ) ; } else { tkn.content.append (  ( char )  c ) ; }^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P14_Delete_Statement]^^155^^^^^152^156^tkn.content.append (  ( char )  c ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P11_Insert_Donor_Statement]^tkn.content.append (  ( char )  readEscape ( c )  ) ;tkn.content.append (  ( char )  c ) ;^155^^^^^152^156^tkn.content.append (  ( char )  c ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P7_Replace_Invocation]^tkn.content.append (  ( char )  isEscape ( c )  ) ;^153^^^^^137^166^tkn.content.append (  ( char )  readEscape ( c )  ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P14_Delete_Statement]^^153^^^^^137^166^tkn.content.append (  ( char )  readEscape ( c )  ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P1_Replace_Type]^tkn.content.append (  ( int )  readEscape ( c )  ) ;^153^^^^^137^166^tkn.content.append (  ( char )  readEscape ( c )  ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P14_Delete_Statement]^^155^^^^^137^166^tkn.content.append (  ( char )  c ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P11_Insert_Donor_Statement]^tkn.content.append (  ( char )  readEscape ( c )  ) ;tkn.content.append (  ( char )  c ) ;^155^^^^^137^166^tkn.content.append (  ( char )  c ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P8_Replace_Mix]^tkn.type  = null ;^150^^^^^137^166^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P11_Insert_Donor_Statement]^tkn.type = EORECORD;tkn.type = TOKEN;^150^^^^^137^166^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P11_Insert_Donor_Statement]^tkn.type = EOF;tkn.type = TOKEN;^150^^^^^137^166^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P11_Insert_Donor_Statement]^tkn.isReady = true;tkn.type = TOKEN;^150^^^^^137^166^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P8_Replace_Mix]^tkn.type ;^145^^^^^137^166^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P11_Insert_Donor_Statement]^tkn.type = TOKEN;tkn.type = EOF;^145^^^^^137^166^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P11_Insert_Donor_Statement]^tkn.type = EORECORD;tkn.type = EOF;^145^^^^^137^166^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P3_Replace_Literal]^tkn.isReady = false;^146^^^^^137^166^tkn.isReady = true;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P11_Insert_Donor_Statement]^tkn.type = TOKEN;tkn.isReady = true;^146^^^^^137^166^tkn.isReady = true;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P5_Replace_Variable]^tkn.type = 3;^150^^^^^137^166^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P8_Replace_Mix]^tkn.type ;^150^^^^^137^166^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P1_Replace_Type]^tkn.content.append (  ( String )  readEscape ( c )  ) ;^153^^^^^137^166^tkn.content.append (  ( char )  readEscape ( c )  ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P8_Replace_Mix]^tkn.type ;^141^^^^^137^166^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P11_Insert_Donor_Statement]^tkn.type = TOKEN;tkn.type = EORECORD;^141^^^^^137^166^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P11_Insert_Donor_Statement]^tkn.type = EOF;tkn.type = EORECORD;^141^^^^^137^166^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P8_Replace_Mix]^tkn.type  =  tkn.type ;^150^^^^^137^166^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P7_Replace_Invocation]^c = in.readLine (  ) ;^158^^^^^137^166^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P8_Replace_Mix]^c  =  c ;^158^^^^^137^166^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P11_Insert_Donor_Statement]^c = in.readAgain (  ) ;c = in.read (  ) ;^158^^^^^137^166^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P5_Replace_Variable]^c = 1.read (  ) ;^158^^^^^137^166^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P14_Delete_Statement]^^158^^^^^137^166^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P11_Insert_Donor_Statement]^int lastChar = in.readAgain (  ) ;c = in.read (  ) ;^158^^^^^137^166^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P11_Insert_Donor_Statement]^int c = in.read (  ) ;c = in.read (  ) ;^158^^^^^137^166^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P11_Insert_Donor_Statement]^in.readLine (  ) ;c = in.read (  ) ;^158^^^^^137^166^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P8_Replace_Mix]^}  if  ( isEndOfLine ( c )  )  {^143^^^^^137^166^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P8_Replace_Mix]^tkn.type  =  tkn.type ;^145^^^^^137^166^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P8_Replace_Mix]^tkn.type  = null ;^141^^^^^137^166^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P5_Replace_Variable]^tkn.type = null;^145^^^^^137^166^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P8_Replace_Mix]^c ;^158^^^^^137^166^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P15_Unwrap_Block]^trimTrailingSpaces(tkn.content);^161^162^163^^^137^166^if  ( surroundingSpacesIgnored )  { trimTrailingSpaces ( tkn.content ) ; }^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P16_Remove_Block]^^161^162^163^^^137^166^if  ( surroundingSpacesIgnored )  { trimTrailingSpaces ( tkn.content ) ; }^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P7_Replace_Invocation]^isEncapsulator ( tkn.content ) ;^162^^^^^137^166^trimTrailingSpaces ( tkn.content ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P14_Delete_Statement]^^162^^^^^137^166^trimTrailingSpaces ( tkn.content ) ;^[CLASS] CSVLexer  [METHOD] simpleTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  
[P1_Replace_Type]^short  startLineNumber = getLineNumber (  ) ;^183^^^^^168^198^int startLineNumber = getLineNumber (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P14_Delete_Statement]^^183^^^^^168^198^int startLineNumber = getLineNumber (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P3_Replace_Literal]^while  ( false )  {^186^^^^^171^201^while  ( true )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P3_Replace_Literal]^while  ( false )  {^198^^^^^183^213^while  ( true )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^if  ( isDelimiter ( startLineNumber )  )  {^200^^^^^185^215^if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^if  ( " ( line " + getLineNumber (  ) )  {^200^^^^^185^215^if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^if  ( isEscape ( c )  )  {^200^^^^^185^215^if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^} else if  ( isEndOfFile ( startLineNumber )  )  {^203^^^^^188^218^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else if  ( " ( line " + getLineNumber (  ) )  {^203^^^^^188^218^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else {^203^^^^^188^218^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^} else if  ( isEndOfLine ( c )  )  {^203^^^^^188^218^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isDelimiter ( c )  )  {^203^^^^^188^218^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^} else if  ( isEndOfLine ( startLineNumber )  )  {^207^^^^^192^222^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else if  ( " ( line " + getLineNumber (  ) )  {^207^^^^^192^222^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else {^207^^^^^192^222^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^} else if  ( isEndOfFile ( c )  )  {^207^^^^^192^222^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isDelimiter ( c )  )  {^207^^^^^192^222^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^} else if  ( !isWhitespace ( startLineNumber )  )  {^211^^^^^196^226^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else if  ( " ( line " + getLineNumber (  ) )  {^211^^^^^196^226^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else {^211^^^^^196^226^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^} else if  ( !isEscape ( c )  )  {^211^^^^^196^226^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( !isWhitespace ( startLineNumber )  )  {^211^^^^^196^226^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isDelimiter ( c )  )  {^211^^^^^196^226^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isEndOfFile ( c )  )  {^211^^^^^196^226^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isEndOfLine ( c )  )  {^211^^^^^196^226^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isEscape ( c )  )  {^211^^^^^196^226^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isEncapsulator ( c )  )  {^211^^^^^196^226^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P15_Unwrap_Block]^throw new java.io.IOException((("(line " + (getLineNumber())) + ") invalid char between encapsulated token and delimiter"));^211^212^213^214^^196^226^} else if  ( !isWhitespace ( c )  )  {  throw new IOException  (" ")  ; }^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P16_Remove_Block]^^211^212^213^214^^196^226^} else if  ( !isWhitespace ( c )  )  {  throw new IOException  (" ")  ; }^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^return ;^213^^^^^198^228^throw new IOException  (" ")  ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P14_Delete_Statement]^^213^^^^^198^228^throw new IOException  (" ")  ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^} else if  ( !isEscape ( startLineNumber )  )  {^211^^^^^196^226^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.type  =  tkn.type ;^209^^^^^194^224^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.type = TOKEN;tkn.type = EORECORD;^209^^^^^194^224^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.type = EOF;tkn.type = EORECORD;^209^^^^^194^224^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.type  =  tkn.type ;^204^^^^^189^219^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.type = TOKEN;tkn.type = EOF;^204^^^^^189^219^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.type = EORECORD;tkn.type = EOF;^204^^^^^189^219^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P3_Replace_Literal]^tkn.isReady = false;^205^^^^^190^220^tkn.isReady = true;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.type = TOKEN;tkn.isReady = true;^205^^^^^190^220^tkn.isReady = true;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( isEndOfLine ( startLineNumber )  )  {^207^^^^^192^222^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.type ;^209^^^^^194^224^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.type ;^204^^^^^189^219^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.type  =  tkn.type ;^201^^^^^186^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.type = EORECORD;tkn.type = TOKEN;^201^^^^^186^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.type = EOF;tkn.type = TOKEN;^201^^^^^186^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.isReady = true;tkn.type = TOKEN;^201^^^^^186^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( isEndOfLine ( c )  )  {^203^^^^^188^218^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.type  = null ;^209^^^^^194^224^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^return false;^213^^^^^198^228^throw new IOException  (" ")  ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^c = in.readLine (  ) ;^199^^^^^184^214^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^c  =  c ;^199^^^^^184^214^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^c = in.readAgain (  ) ;c = in.read (  ) ;^199^^^^^184^214^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = 0;^201^^^^^186^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.type ;^201^^^^^186^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P14_Delete_Statement]^^199^^^^^184^214^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^int lastChar = in.readAgain (  ) ;c = in.read (  ) ;^199^^^^^184^214^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^int c = in.read (  ) ;c = in.read (  ) ;^199^^^^^184^214^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^in.readLine (  ) ;c = in.read (  ) ;^199^^^^^184^214^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^} else if  ( isEndOfFile ( startLineNumber )  )  {^207^^^^^192^222^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^if  ( " ( line " + getLineNumber (  ) )  {^189^^^^^174^204^if  ( isEscape ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^if  ( " ( startline " + startLineNumber + " )  EOF reached before encapsulated token finished" )  {^189^^^^^174^204^if  ( isEscape ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^if  ( " ( startline " + startLineNumber )  {^189^^^^^174^204^if  ( isEscape ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^if  ( readEscape ( c )  )  {^189^^^^^174^204^if  ( isEscape ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^if  ( isDelimiter ( c )  )  {^189^^^^^174^204^if  ( isEscape ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^if  ( isEndOfLine ( c )  )  {^189^^^^^174^204^if  ( isEscape ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^if  ( isCommentStart ( c )  )  {^189^^^^^174^204^if  ( isEscape ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^c ;^199^^^^^184^214^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^if  ( isEscape ( startLineNumber )  )  {^200^^^^^185^215^if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else if  ( " ( line " + getLineNumber (  ) )  {^191^^^^^176^206^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else if  ( " ( startline " + startLineNumber + " )  EOF reached before encapsulated token finished" )  {^191^^^^^176^206^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else if  ( " ( startline " + startLineNumber )  {^191^^^^^176^206^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else {^191^^^^^176^206^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^} else if  ( getLineNumber ( c )  )  {^191^^^^^176^206^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( isEncapsulator ( c )  )  {^191^^^^^176^206^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isDelimiter ( c )  )  {^191^^^^^176^206^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isEndOfFile ( c )  )  {^191^^^^^176^206^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isEndOfLine ( c )  )  {^191^^^^^176^206^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isEscape ( c )  )  {^191^^^^^176^206^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( !isWhitespace ( c )  )  {^191^^^^^176^206^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else if  ( " ( startline " + startLineNumber )  {^217^^^^^202^232^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else {^217^^^^^202^232^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^} else if  ( isEndOfLine ( c )  )  {^217^^^^^202^232^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isDelimiter ( c )  )  {^217^^^^^202^232^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P13_Insert_Block]^if  ( ! ( isWhitespace ( c )  )  )  {     throw new IOException (  (  ( " ( line " +  ( getLineNumber (  )  )  )  + " )  invalid char between encapsulated token and delimiter" )  ) ; }^217^^^^^202^232^[Delete]^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P14_Delete_Statement]^^222^^^^^217^223^tkn.content.append (  ( char )  c ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.content.append (  ( char )  readEscape ( c )  ) ;tkn.content.append (  ( char )  c ) ;^222^^^^^217^223^tkn.content.append (  ( char )  c ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^return ;^219^^^^^204^234^throw new IOException  (" ")  ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^} else if  ( isEndOfFile ( startLineNumber )  )  {^217^^^^^202^232^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P14_Delete_Statement]^^222^^^^^207^237^tkn.content.append (  ( char )  c ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.content.append (  ( char )  readEscape ( c )  ) ;tkn.content.append (  ( char )  c ) ;^222^^^^^207^237^tkn.content.append (  ( char )  c ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( isEndOfFile ( startLineNumber )  )  {^203^^^^^188^218^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.type  = null ;^201^^^^^186^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^return 0;^213^^^^^198^228^throw new IOException  (" ")  ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^c = 4.read (  ) ;^199^^^^^184^214^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^} else if  ( isEndOfLine ( startLineNumber )  )  {^203^^^^^188^218^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^if  ( " ( line " + getLineNumber (  ) )  {^192^^^^^177^207^if  ( isEncapsulator ( in.lookAhead (  )  )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^if  ( getLineNumber ( in.lookAhead (  )  )  )  {^192^^^^^177^207^if  ( isEncapsulator ( in.lookAhead (  )  )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^if  ( isEncapsulator ( in.read (  )  )  )  {^192^^^^^177^207^if  ( isEncapsulator ( in.lookAhead (  )  )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P3_Replace_Literal]^while  ( false )  {^198^^^^^192^216^while  ( true )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^if  ( isDelimiter ( startLineNumber )  )  {^200^^^^^192^216^if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^if  ( " ( line " + getLineNumber (  ) )  {^200^^^^^192^216^if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^if  ( isEscape ( c )  )  {^200^^^^^192^216^if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^} else if  ( isEndOfFile ( startLineNumber )  )  {^203^^^^^192^216^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else if  ( " ( line " + getLineNumber (  ) )  {^203^^^^^192^216^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else {^203^^^^^192^216^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^} else if  ( isEndOfLine ( c )  )  {^203^^^^^192^216^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isDelimiter ( c )  )  {^203^^^^^192^216^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^} else if  ( isEndOfLine ( startLineNumber )  )  {^207^^^^^192^216^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else if  ( " ( line " + getLineNumber (  ) )  {^207^^^^^192^216^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else {^207^^^^^192^216^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^} else if  ( isEndOfFile ( c )  )  {^207^^^^^192^216^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isDelimiter ( c )  )  {^207^^^^^192^216^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^} else if  ( !isWhitespace ( startLineNumber )  )  {^211^^^^^192^216^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else if  ( " ( line " + getLineNumber (  ) )  {^211^^^^^192^216^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P6_Replace_Expression]^} else {^211^^^^^192^216^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^} else if  ( !isEscape ( c )  )  {^211^^^^^192^216^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( !isWhitespace ( startLineNumber )  )  {^211^^^^^192^216^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isDelimiter ( c )  )  {^211^^^^^192^216^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isEndOfFile ( c )  )  {^211^^^^^192^216^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isEndOfLine ( c )  )  {^211^^^^^192^216^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isEscape ( c )  )  {^211^^^^^192^216^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P9_Replace_Statement]^} else if  ( isEncapsulator ( c )  )  {^211^^^^^192^216^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P15_Unwrap_Block]^throw new java.io.IOException((("(line " + (getLineNumber())) + ") invalid char between encapsulated token and delimiter"));^211^212^213^214^^192^216^} else if  ( !isWhitespace ( c )  )  {  throw new IOException  (" ")  ; }^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P16_Remove_Block]^^211^212^213^214^^192^216^} else if  ( !isWhitespace ( c )  )  {  throw new IOException  (" ")  ; }^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P14_Delete_Statement]^^213^^^^^192^216^throw new IOException  (" ")  ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.type  = null ;^209^^^^^192^216^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.type = TOKEN;tkn.type = EORECORD;^209^^^^^192^216^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.type = EOF;tkn.type = EORECORD;^209^^^^^192^216^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^return ;^213^^^^^192^216^throw new IOException  (" ")  ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.type  =  tkn.type ;^204^^^^^192^216^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.type = TOKEN;tkn.type = EOF;^204^^^^^192^216^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.type = EORECORD;tkn.type = EOF;^204^^^^^192^216^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P3_Replace_Literal]^tkn.isReady = false;^205^^^^^192^216^tkn.isReady = true;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.type = TOKEN;tkn.isReady = true;^205^^^^^192^216^tkn.isReady = true;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( isEndOfFile ( startLineNumber )  )  {^207^^^^^192^216^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^} else if  ( !isEscape ( startLineNumber )  )  {^211^^^^^192^216^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.type ;^209^^^^^192^216^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^return false;^213^^^^^192^216^throw new IOException  (" ")  ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.type ;^204^^^^^192^216^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = 1;^209^^^^^192^216^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.type  =  tkn.type ;^209^^^^^192^216^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^} else if  ( isEndOfFile ( startLineNumber )  )  {^207^^^^^192^216^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.type  =  tkn.type ;^201^^^^^192^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.type = EORECORD;tkn.type = TOKEN;^201^^^^^192^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.type = EOF;tkn.type = TOKEN;^201^^^^^192^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.isReady = true;tkn.type = TOKEN;^201^^^^^192^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( isEndOfLine ( c )  )  {^203^^^^^192^216^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( !isEscape ( c )  )  {^211^^^^^192^216^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^c = in.readLine (  ) ;^199^^^^^192^216^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^c  = null ;^199^^^^^192^216^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^c = in.readAgain (  ) ;c = in.read (  ) ;^199^^^^^192^216^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.type ;^201^^^^^192^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P14_Delete_Statement]^^199^^^^^192^216^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^int lastChar = in.readAgain (  ) ;c = in.read (  ) ;^199^^^^^192^216^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^int c = in.read (  ) ;c = in.read (  ) ;^199^^^^^192^216^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^in.readLine (  ) ;c = in.read (  ) ;^199^^^^^192^216^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^} else if  ( isEndOfLine ( startLineNumber )  )  {^203^^^^^192^216^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( isEndOfLine ( startLineNumber )  )  {^207^^^^^192^216^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = 4;^204^^^^^192^216^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^c ;^199^^^^^192^216^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.type  = null ;^201^^^^^192^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = this;^204^^^^^192^216^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^c = in.readLine (  ) ;^194^^^^^179^209^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^c  =  c ;^194^^^^^179^209^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^c = in.readAgain (  ) ;c = in.read (  ) ;^194^^^^^179^209^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P14_Delete_Statement]^^194^195^^^^179^209^c = in.read (  ) ; tkn.content.append (  ( char )  c ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^int lastChar = in.readAgain (  ) ;c = in.read (  ) ;^194^^^^^179^209^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^int c = in.read (  ) ;c = in.read (  ) ;^194^^^^^179^209^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^in.readLine (  ) ;c = in.read (  ) ;^194^^^^^179^209^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P14_Delete_Statement]^^195^^^^^180^210^tkn.content.append (  ( char )  c ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^tkn.content.append (  ( char )  readEscape ( c )  ) ;tkn.content.append (  ( char )  c ) ;^195^^^^^180^210^tkn.content.append (  ( char )  c ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( isEndOfFile ( startLineNumber )  )  {^207^^^^^192^222^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( isEndOfFile ( c )  )  {^207^^^^^192^222^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = this;^201^^^^^186^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = this;^204^^^^^189^219^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = null;^204^^^^^189^219^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P14_Delete_Statement]^^194^^^^^179^209^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^c = 2.read (  ) ;^199^^^^^184^214^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( isEndOfLine ( startLineNumber )  )  {^203^^^^^192^216^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( !isEscape ( startLineNumber )  )  {^211^^^^^192^216^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = null;^204^^^^^192^216^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^return true;^213^^^^^192^216^throw new IOException  (" ")  ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^c = 0.read (  ) ;^199^^^^^192^216^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( isEndOfFile ( startLineNumber )  )  {^203^^^^^192^216^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^c = null.read (  ) ;^199^^^^^192^216^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^if  ( isEscape ( startLineNumber )  )  {^200^^^^^192^216^if  ( isDelimiter ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( isEndOfLine ( startLineNumber )  )  {^203^^^^^188^218^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( !isEscape ( c )  )  {^211^^^^^196^226^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^} else if  ( isEncapsulator ( startLineNumber )  )  {^191^^^^^176^206^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^} else if  ( isEndOfLine ( startLineNumber )  )  {^217^^^^^202^232^} else if  ( isEndOfFile ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^tkn.content.append (  ( char )  isEscape ( c )  ) ;^190^^^^^175^205^tkn.content.append (  ( char )  readEscape ( c )  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P14_Delete_Statement]^^190^^^^^175^205^tkn.content.append (  ( char )  readEscape ( c )  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P1_Replace_Type]^tkn.content.append (  ( int )  readEscape ( c )  ) ;^190^^^^^175^205^tkn.content.append (  ( char )  readEscape ( c )  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.content.append (  ( startLineNumberhar )  readEscape ( c )  ) ;^190^^^^^175^205^tkn.content.append (  ( char )  readEscape ( c )  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( getLineNumber ( c )  )  {^191^^^^^176^206^} else if  ( isEncapsulator ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^c  = null ;^199^^^^^184^214^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = 2;^209^^^^^192^216^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = 0;^209^^^^^192^216^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^c  =  c ;^199^^^^^192^216^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^return 0;^213^^^^^192^216^throw new IOException  (" ")  ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = 3;^209^^^^^192^216^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^c ;^194^^^^^179^209^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^return true;^213^^^^^198^228^throw new IOException  (" ")  ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = 0;^209^^^^^194^224^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = 2;^209^^^^^194^224^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^if  ( isEncapsulator ( 2.lookAhead (  )  )  )  {^192^^^^^177^207^if  ( isEncapsulator ( in.lookAhead (  )  )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^c = 1.read (  ) ;^194^^^^^179^209^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( isEndOfFile ( c )  )  {^207^^^^^192^216^} else if  ( isEndOfLine ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^c  = null ;^194^^^^^179^209^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^c = this.read (  ) ;^194^^^^^179^209^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^c = null .readLine (  )  ;^194^^^^^179^209^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P7_Replace_Invocation]^c = in.readLine (  ) ;^187^^^^^172^202^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^c  = null ;^187^^^^^172^202^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^c = in.readAgain (  ) ;c = in.read (  ) ;^187^^^^^172^202^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P14_Delete_Statement]^^187^^^^^172^202^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^int lastChar = in.readAgain (  ) ;c = in.read (  ) ;^187^^^^^172^202^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^int c = in.read (  ) ;c = in.read (  ) ;^187^^^^^172^202^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P11_Insert_Donor_Statement]^in.readLine (  ) ;c = in.read (  ) ;^187^^^^^172^202^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^if  ( isEscape ( startLineNumber )  )  {^189^^^^^174^204^if  ( isEscape ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^c = this.read (  ) ;^199^^^^^184^214^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^}  if  ( !isEscape ( startLineNumber )  )  {^211^^^^^196^226^} else if  ( !isWhitespace ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = 4;^209^^^^^194^224^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = 2;^204^^^^^189^219^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^if  ( isEncapsulator ( null.lookAhead (  )  )  )  {^192^^^^^177^207^if  ( isEncapsulator ( in.lookAhead (  )  )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = 1;^201^^^^^192^216^tkn.type = TOKEN;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = 2;^204^^^^^192^216^tkn.type = EOF;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^c = 2.read (  ) ;^199^^^^^192^216^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^c = null.read (  ) ;^194^^^^^179^209^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^tkn.content.append (  ( startLineNumberhar )  isEscape ( c )  ) ;^190^^^^^175^205^tkn.content.append (  ( char )  readEscape ( c )  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^return false;^219^^^^^204^234^throw new IOException  (" ")  ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^return 0;^219^^^^^204^234^throw new IOException  (" ")  ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^c = this.read (  ) ;^199^^^^^192^216^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^if  ( isEncapsulator ( 4.lookAhead (  )  )  )  {^192^^^^^177^207^if  ( isEncapsulator ( in.lookAhead (  )  )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^c ;^187^^^^^172^202^c = in.read (  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P5_Replace_Variable]^tkn.type = this;^209^^^^^194^224^tkn.type = EORECORD;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P8_Replace_Mix]^if  ( readEscape ( startLineNumber )  )  {^189^^^^^174^204^if  ( isEscape ( c )  )  {^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
[P1_Replace_Type]^tkn.content.append (  ( String )  readEscape ( c )  ) ;^190^^^^^175^205^tkn.content.append (  ( char )  readEscape ( c )  ) ;^[CLASS] CSVLexer  [METHOD] encapsulatedTokenLexer [RETURN_TYPE] Token   Token tkn int c [VARIABLES] boolean  Token  tkn  int  c  startLineNumber  
