[P1_Replace_Type]^private static final  short  serialVersionUID = -612114643488955218L;^64^^^^^59^69^private static final long serialVersionUID = -612114643488955218L;^[CLASS] LRUMap   [VARIABLES] 
[P8_Replace_Mix]^private static final long serialVersionUID = -612114643488955218;^64^^^^^59^69^private static final long serialVersionUID = -612114643488955218L;^[CLASS] LRUMap   [VARIABLES] 
[P1_Replace_Type]^protected static final  short  DEFAULT_MAX_SIZE = 100;^66^^^^^61^71^protected static final int DEFAULT_MAX_SIZE = 100;^[CLASS] LRUMap   [VARIABLES] 
[P3_Replace_Literal]^protected static final int DEFAULT_MAX_SIZE = 97;^66^^^^^61^71^protected static final int DEFAULT_MAX_SIZE = 100;^[CLASS] LRUMap   [VARIABLES] 
[P8_Replace_Mix]^protected static final int DEFAULT_MAX_SIZE = 100 + 3;^66^^^^^61^71^protected static final int DEFAULT_MAX_SIZE = 100;^[CLASS] LRUMap   [VARIABLES] 
[P1_Replace_Type]^private transient  long  maxSize;^69^^^^^64^74^private transient int maxSize;^[CLASS] LRUMap   [VARIABLES] 
[P3_Replace_Literal]^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, true ) ;^77^^^^^76^78^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap()   [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P5_Replace_Variable]^this ( maxSize, DEFAULT_LOAD_FACTOR, false ) ;^77^^^^^76^78^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap()   [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P14_Delete_Statement]^^77^^^^^76^78^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap()   [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P11_Insert_Donor_Statement]^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;^77^^^^^76^78^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap()   [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, DEFAULT_LOAD_FACTOR ) ;this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;^77^^^^^76^78^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap()   [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, loadFactor, false ) ;this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;^77^^^^^76^78^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap()   [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;^77^^^^^76^78^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap()   [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, initialSize, loadFactor, false ) ;this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;^77^^^^^76^78^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap()   [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;^77^^^^^76^78^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap()   [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P5_Replace_Variable]^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR ) ;^87^^^^^86^88^this ( maxSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int)   final int maxSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P14_Delete_Statement]^^87^^^^^86^88^this ( maxSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int)   final int maxSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P11_Insert_Donor_Statement]^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;this ( maxSize, DEFAULT_LOAD_FACTOR ) ;^87^^^^^86^88^this ( maxSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int)   final int maxSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, loadFactor, false ) ;this ( maxSize, DEFAULT_LOAD_FACTOR ) ;^87^^^^^86^88^this ( maxSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int)   final int maxSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P11_Insert_Donor_Statement]^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;this ( maxSize, DEFAULT_LOAD_FACTOR ) ;^87^^^^^86^88^this ( maxSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int)   final int maxSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;this ( maxSize, DEFAULT_LOAD_FACTOR ) ;^87^^^^^86^88^this ( maxSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int)   final int maxSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, initialSize, loadFactor, false ) ;this ( maxSize, DEFAULT_LOAD_FACTOR ) ;^87^^^^^86^88^this ( maxSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int)   final int maxSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;this ( maxSize, DEFAULT_LOAD_FACTOR ) ;^87^^^^^86^88^this ( maxSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int)   final int maxSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  maxSize  
[P5_Replace_Variable]^this ( DEFAULT_MAX_SIZE, initialSize, DEFAULT_LOAD_FACTOR ) ;^100^^^^^99^101^this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int)   final int maxSize final int initialSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( maxSize, DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR ) ;^100^^^^^99^101^this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int)   final int maxSize final int initialSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this (  initialSize, DEFAULT_LOAD_FACTOR ) ;^100^^^^^99^101^this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int)   final int maxSize final int initialSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( maxSize,  DEFAULT_LOAD_FACTOR ) ;^100^^^^^99^101^this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int)   final int maxSize final int initialSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( initialSize, maxSize, DEFAULT_LOAD_FACTOR ) ;^100^^^^^99^101^this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int)   final int maxSize final int initialSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P14_Delete_Statement]^^100^^^^^99^101^this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int)   final int maxSize final int initialSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, DEFAULT_LOAD_FACTOR ) ;this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;^100^^^^^99^101^this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int)   final int maxSize final int initialSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, loadFactor, false ) ;this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;^100^^^^^99^101^this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int)   final int maxSize final int initialSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;^100^^^^^99^101^this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int)   final int maxSize final int initialSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^super ( initialSize, loadFactor ) ;this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;^100^^^^^99^101^this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int)   final int maxSize final int initialSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, initialSize, loadFactor, false ) ;this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;^100^^^^^99^101^this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int)   final int maxSize final int initialSize [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( initialSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^112^^^^^111^113^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,boolean)   final int maxSize final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this (  DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^112^^^^^111^113^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,boolean)   final int maxSize final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( maxSize, DEFAULT_LOAD_FACTOR ) ;^112^^^^^111^113^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,boolean)   final int maxSize final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( scanUntilRemovable, DEFAULT_LOAD_FACTOR, maxSize ) ;^112^^^^^111^113^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,boolean)   final int maxSize final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P14_Delete_Statement]^^112^^^^^111^113^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,boolean)   final int maxSize final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^112^^^^^111^113^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,boolean)   final int maxSize final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, DEFAULT_LOAD_FACTOR ) ;this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^112^^^^^111^113^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,boolean)   final int maxSize final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, loadFactor, false ) ;this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^112^^^^^111^113^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,boolean)   final int maxSize final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^112^^^^^111^113^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,boolean)   final int maxSize final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^112^^^^^111^113^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,boolean)   final int maxSize final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, initialSize, loadFactor, false ) ;this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^112^^^^^111^113^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,boolean)   final int maxSize final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^this ( maxSize, loadFactor, true ) ;^125^^^^^124^126^this ( maxSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float)   final int maxSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( initialSize, loadFactor, false ) ;^125^^^^^124^126^this ( maxSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float)   final int maxSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this (  loadFactor, false ) ;^125^^^^^124^126^this ( maxSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float)   final int maxSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( maxSize,  false ) ;^125^^^^^124^126^this ( maxSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float)   final int maxSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( loadFactor, maxSize, false ) ;^125^^^^^124^126^this ( maxSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float)   final int maxSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P14_Delete_Statement]^^125^^^^^124^126^this ( maxSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float)   final int maxSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;this ( maxSize, loadFactor, false ) ;^125^^^^^124^126^this ( maxSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float)   final int maxSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, DEFAULT_LOAD_FACTOR ) ;this ( maxSize, loadFactor, false ) ;^125^^^^^124^126^this ( maxSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float)   final int maxSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;this ( maxSize, loadFactor, false ) ;^125^^^^^124^126^this ( maxSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float)   final int maxSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( map, false ) ;this ( maxSize, loadFactor, false ) ;^125^^^^^124^126^this ( maxSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float)   final int maxSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^super ( initialSize, loadFactor ) ;this ( maxSize, loadFactor, false ) ;^125^^^^^124^126^this ( maxSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float)   final int maxSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;this ( maxSize, loadFactor, false ) ;^125^^^^^124^126^this ( maxSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float)   final int maxSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;this ( maxSize, loadFactor, false ) ;^125^^^^^124^126^this ( maxSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float)   final int maxSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, initialSize, loadFactor, false ) ;this ( maxSize, loadFactor, false ) ;^125^^^^^124^126^this ( maxSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float)   final int maxSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;this ( maxSize, loadFactor, false ) ;^125^^^^^124^126^this ( maxSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float)   final int maxSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^this ( maxSize, initialSize, loadFactor, true ) ;^141^^^^^140^142^this ( maxSize, initialSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float)   final int maxSize final int initialSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( DEFAULT_MAX_SIZE, initialSize, loadFactor, false ) ;^141^^^^^140^142^this ( maxSize, initialSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float)   final int maxSize final int initialSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( maxSize, DEFAULT_MAX_SIZE, loadFactor, false ) ;^141^^^^^140^142^this ( maxSize, initialSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float)   final int maxSize final int initialSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this (  initialSize, loadFactor, false ) ;^141^^^^^140^142^this ( maxSize, initialSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float)   final int maxSize final int initialSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( maxSize,  loadFactor, false ) ;^141^^^^^140^142^this ( maxSize, initialSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float)   final int maxSize final int initialSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( maxSize, initialSize,  false ) ;^141^^^^^140^142^this ( maxSize, initialSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float)   final int maxSize final int initialSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( loadFactor, initialSize, maxSize, false ) ;^141^^^^^140^142^this ( maxSize, initialSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float)   final int maxSize final int initialSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( initialSize, maxSize, loadFactor, false ) ;^141^^^^^140^142^this ( maxSize, initialSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float)   final int maxSize final int initialSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P14_Delete_Statement]^^141^^^^^140^142^this ( maxSize, initialSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float)   final int maxSize final int initialSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, DEFAULT_LOAD_FACTOR ) ;this ( maxSize, initialSize, loadFactor, false ) ;^141^^^^^140^142^this ( maxSize, initialSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float)   final int maxSize final int initialSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, loadFactor, false ) ;this ( maxSize, initialSize, loadFactor, false ) ;^141^^^^^140^142^this ( maxSize, initialSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float)   final int maxSize final int initialSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;this ( maxSize, initialSize, loadFactor, false ) ;^141^^^^^140^142^this ( maxSize, initialSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float)   final int maxSize final int initialSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^super ( initialSize, loadFactor ) ;this ( maxSize, initialSize, loadFactor, false ) ;^141^^^^^140^142^this ( maxSize, initialSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float)   final int maxSize final int initialSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;this ( maxSize, initialSize, loadFactor, false ) ;^141^^^^^140^142^this ( maxSize, initialSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float)   final int maxSize final int initialSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;this ( maxSize, initialSize, loadFactor, false ) ;^141^^^^^140^142^this ( maxSize, initialSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float)   final int maxSize final int initialSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;this ( maxSize, initialSize, loadFactor, false ) ;^141^^^^^140^142^this ( maxSize, initialSize, loadFactor, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float)   final int maxSize final int initialSize final float loadFactor [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( initialSize, maxSize, loadFactor, scanUntilRemovable ) ;^155^^^^^154^156^this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float,boolean)   final int maxSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this (  maxSize, loadFactor, scanUntilRemovable ) ;^155^^^^^154^156^this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float,boolean)   final int maxSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( maxSize, maxSize,  scanUntilRemovable ) ;^155^^^^^154^156^this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float,boolean)   final int maxSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( maxSize, maxSize, loadFactor ) ;^155^^^^^154^156^this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float,boolean)   final int maxSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( loadFactor, maxSize, maxSize, scanUntilRemovable ) ;^155^^^^^154^156^this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float,boolean)   final int maxSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( scanUntilRemovable, maxSize, loadFactor, maxSize ) ;^155^^^^^154^156^this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float,boolean)   final int maxSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P14_Delete_Statement]^^155^^^^^154^156^this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float,boolean)   final int maxSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;^155^^^^^154^156^this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float,boolean)   final int maxSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, loadFactor, false ) ;this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;^155^^^^^154^156^this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float,boolean)   final int maxSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, initialSize, loadFactor, false ) ;this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;^155^^^^^154^156^this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float,boolean)   final int maxSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;^155^^^^^154^156^this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,float,boolean)   final int maxSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^super ( maxSize, loadFactor ) ;^175^^^^^170^184^super ( initialSize, loadFactor ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^super (  loadFactor ) ;^175^^^^^170^184^super ( initialSize, loadFactor ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^super ( initialSize ) ;^175^^^^^170^184^super ( initialSize, loadFactor ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^super ( loadFactor, initialSize ) ;^175^^^^^170^184^super ( initialSize, loadFactor ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P14_Delete_Statement]^^175^^^^^170^184^super ( initialSize, loadFactor ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, loadFactor, false ) ;super ( initialSize, loadFactor ) ;^175^^^^^170^184^super ( initialSize, loadFactor ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, initialSize, DEFAULT_LOAD_FACTOR ) ;super ( initialSize, loadFactor ) ;^175^^^^^170^184^super ( initialSize, loadFactor ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, initialSize, loadFactor, false ) ;super ( initialSize, loadFactor ) ;^175^^^^^170^184^super ( initialSize, loadFactor ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P2_Replace_Operator]^if  ( maxSize <= 1 )  {^176^^^^^170^184^if  ( maxSize < 1 )  {^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^if  ( maxSize < 8 )  {^176^^^^^170^184^if  ( maxSize < 1 )  {^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^if  ( initialSize < 1 )  {^176^^^^^170^184^if  ( maxSize < 1 )  {^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^if  ( maxSize < 1 + 0 )  {^176^^^^^170^184^if  ( maxSize < 1 )  {^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("LRUMap max size must be greater than 0");^176^177^178^^^170^184^if  ( maxSize < 1 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P16_Remove_Block]^^176^177^178^^^170^184^if  ( maxSize < 1 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P13_Insert_Block]^if  ( initialSize > maxSize )  {     throw new IllegalArgumentException ( "LRUMap initial size must not be greather than max size" ) ; }^176^^^^^170^184^[Delete]^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "LRUMap initial size must not be greather than max size" )   ;^177^^^^^170^184^throw new IllegalArgumentException  (" ")  ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P13_Insert_Block]^if  ( maxSize < 1 )  {     throw new IllegalArgumentException ( "LRUMap max size must be greater than 0" ) ; }^177^^^^^170^184^[Delete]^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P13_Insert_Block]^if  ( initialSize > maxSize )  {     throw new IllegalArgumentException ( "LRUMap initial size must not be greather than max size" ) ; }^177^^^^^170^184^[Delete]^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P2_Replace_Operator]^if  ( initialSize < maxSize )  {^179^^^^^170^184^if  ( initialSize > maxSize )  {^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^if  ( DEFAULT_MAX_SIZE > maxSize )  {^179^^^^^170^184^if  ( initialSize > maxSize )  {^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^if  ( initialSize > DEFAULT_MAX_SIZE )  {^179^^^^^170^184^if  ( initialSize > maxSize )  {^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^if  ( maxSize > initialSize )  {^179^^^^^170^184^if  ( initialSize > maxSize )  {^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("LRUMap initial size must not be greather than max size");^179^180^181^^^170^184^if  ( initialSize > maxSize )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P16_Remove_Block]^^179^180^181^^^170^184^if  ( initialSize > maxSize )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P13_Insert_Block]^if  ( maxSize < 1 )  {     throw new IllegalArgumentException ( "LRUMap max size must be greater than 0" ) ; }^179^^^^^170^184^[Delete]^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "LRUMap max size must be greater than 0" )   ;^180^^^^^170^184^throw new IllegalArgumentException  (" ")  ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P13_Insert_Block]^if  ( maxSize < 1 )  {     throw new IllegalArgumentException ( "LRUMap max size must be greater than 0" ) ; }^180^^^^^170^184^[Delete]^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P13_Insert_Block]^if  ( initialSize > maxSize )  {     throw new IllegalArgumentException ( "LRUMap initial size must not be greather than max size" ) ; }^180^^^^^170^184^[Delete]^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this.maxSize = initialSize;^182^^^^^170^184^this.maxSize = maxSize;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^this.scanUntilRemovable =  null;^183^^^^^170^184^this.scanUntilRemovable = scanUntilRemovable;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] LRUMap(int,int,float,boolean)   final int maxSize final int initialSize final float loadFactor final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  float  loadFactor  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^this ( map, true ) ;^196^^^^^195^197^this ( map, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map)   Map<? extends K, ? extends V> map [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P14_Delete_Statement]^^196^^^^^195^197^this ( map, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map)   Map<? extends K, ? extends V> map [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, loadFactor, false ) ;this ( map, false ) ;^196^^^^^195^197^this ( map, false ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map)   Map<? extends K, ? extends V> map [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^this ( map.size() - 6 , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^211^^^^^210^213^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map,boolean)   Map<? extends K, ? extends V> map final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( null.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^211^^^^^210^213^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map,boolean)   Map<? extends K, ? extends V> map final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( map.size (  ) , DEFAULT_LOAD_FACTOR ) ;^211^^^^^210^213^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map,boolean)   Map<? extends K, ? extends V> map final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^this ( scanUntilRemovable.size (  ) , DEFAULT_LOAD_FACTOR, map ) ;^211^^^^^210^213^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map,boolean)   Map<? extends K, ? extends V> map final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P14_Delete_Statement]^^211^212^^^^210^213^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ; putAll ( map ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map,boolean)   Map<? extends K, ? extends V> map final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, DEFAULT_LOAD_FACTOR ) ;this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^211^^^^^210^213^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map,boolean)   Map<? extends K, ? extends V> map final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, loadFactor, false ) ;this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^211^^^^^210^213^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map,boolean)   Map<? extends K, ? extends V> map final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( DEFAULT_MAX_SIZE, DEFAULT_LOAD_FACTOR, false ) ;this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^211^^^^^210^213^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map,boolean)   Map<? extends K, ? extends V> map final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, maxSize, loadFactor, scanUntilRemovable ) ;this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^211^^^^^210^213^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map,boolean)   Map<? extends K, ? extends V> map final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^this ( maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^211^^^^^210^213^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map,boolean)   Map<? extends K, ? extends V> map final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^this ( map.size() - 2 , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^211^^^^^210^213^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map,boolean)   Map<? extends K, ? extends V> map final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P14_Delete_Statement]^^211^^^^^210^213^this ( map.size (  ) , DEFAULT_LOAD_FACTOR, scanUntilRemovable ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map,boolean)   Map<? extends K, ? extends V> map final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^putAll ( 4 ) ;^212^^^^^210^213^putAll ( map ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map,boolean)   Map<? extends K, ? extends V> map final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P7_Replace_Invocation]^LRUMap ( map ) ;^212^^^^^210^213^putAll ( map ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map,boolean)   Map<? extends K, ? extends V> map final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P14_Delete_Statement]^^212^^^^^210^213^putAll ( map ) ;^[CLASS] LRUMap  [METHOD] <init> [RETURN_TYPE] Map,boolean)   Map<? extends K, ? extends V> map final boolean scanUntilRemovable [VARIABLES] boolean  scanUntilRemovable  Map  map  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^return get ( key, false ) ;^227^^^^^226^228^return get ( key, true ) ;^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key [VARIABLES] Object  key  boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P7_Replace_Invocation]^return LRUMap ( key, true ) ;^227^^^^^226^228^return get ( key, true ) ;^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key [VARIABLES] Object  key  boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^return LRUMap ( key, false ) ;^227^^^^^226^228^return get ( key, true ) ;^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key [VARIABLES] Object  key  boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P14_Delete_Statement]^^227^^^^^226^228^return get ( key, true ) ;^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key [VARIABLES] Object  key  boolean  scanUntilRemovable  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P7_Replace_Invocation]^final LinkEntry<K, V> entry = get ( key ) ;^244^^^^^243^252^final LinkEntry<K, V> entry = getEntry ( key ) ;^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P14_Delete_Statement]^^244^^^^^243^252^final LinkEntry<K, V> entry = getEntry ( key ) ;^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P2_Replace_Operator]^if  ( entry != null )  {^245^^^^^243^252^if  ( entry == null )  {^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^if  ( entry == this )  {^245^^^^^243^252^if  ( entry == null )  {^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P9_Replace_Statement]^if  ( reuse == null )  {^245^^^^^243^252^if  ( entry == null )  {^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P9_Replace_Statement]^if ( entry.before == null )  {^245^^^^^243^252^if  ( entry == null )  {^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P9_Replace_Statement]^if  ( loop == null )  {^245^^^^^243^252^if  ( entry == null )  {^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P15_Unwrap_Block]^return null;^245^246^247^^^243^252^if  ( entry == null )  { return null; }^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P16_Remove_Block]^^245^246^247^^^243^252^if  ( entry == null )  { return null; }^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^return true;^246^^^^^243^252^return null;^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^return false;^246^^^^^243^252^return null;^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^if  ( scanUntilRemovable )  {^248^^^^^243^252^if  ( updateToMRU )  {^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P15_Unwrap_Block]^moveToMRU(entry);^248^249^250^^^243^252^if  ( updateToMRU )  { moveToMRU ( entry ) ; }^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P16_Remove_Block]^^248^249^250^^^243^252^if  ( updateToMRU )  { moveToMRU ( entry ) ; }^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P7_Replace_Invocation]^removeLRU ( entry ) ;^249^^^^^243^252^moveToMRU ( entry ) ;^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P14_Delete_Statement]^^249^^^^^243^252^moveToMRU ( entry ) ;^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^return 0.getValue (  ) ;^251^^^^^243^252^return entry.getValue (  ) ;^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P14_Delete_Statement]^^251^^^^^243^252^return entry.getValue (  ) ;^[CLASS] LRUMap  [METHOD] get [RETURN_TYPE] V   Object key final boolean updateToMRU [VARIABLES] LinkEntry  entry  Object  key  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P2_Replace_Operator]^if  ( entry.after < header )  {^263^^^^^262^282^if  ( entry.after != header )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P6_Replace_Expression]^if  ( entry.before == null )  {^263^^^^^262^282^if  ( entry.after != header )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P6_Replace_Expression]^if  ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to org as a bug." )  {^263^^^^^262^282^if  ( entry.after != header )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P6_Replace_Expression]^if  ( " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to org as a bug." )  {^263^^^^^262^282^if  ( entry.after != header )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P6_Replace_Expression]^if  ( entry == header )  {^263^^^^^262^282^if  ( entry.after != header )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P6_Replace_Expression]^if  ( "Can't move header to MRU" + "  ( please report this to org ) " )  {^263^^^^^262^282^if  ( entry.after != header )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^if  ( entry.after = header )  {^263^^^^^262^282^if  ( entry.after != header )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P2_Replace_Operator]^} else if  ( entry >= header )  {^278^^^^^262^282^} else if  ( entry == header )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^} else if  ( header == entry )  {^278^^^^^262^282^} else if  ( entry == header )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P6_Replace_Expression]^} else if  ( "Can't move header to MRU" + "  ( please report this to org ) " )  {^278^^^^^262^282^} else if  ( entry == header )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P6_Replace_Expression]^} else {^278^^^^^262^282^} else if  ( entry == header )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException(("Can't move header to MRU" + " (please report this to dev@commons.apache.org)"));^278^279^280^281^^262^282^} else if  ( entry == header )  { throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ; }^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P16_Remove_Block]^^278^279^280^281^^262^282^} else if  ( entry == header )  { throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ; }^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P2_Replace_Operator]^throw new IllegalStateException ( "Can't move header to MRU" + "  >>  ( please report this to dev@commons.apache.org ) " ) ;^279^280^^^^262^282^throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "movean't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^279^280^^^^262^282^throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P13_Insert_Block]^if  ( entry ==  ( header )  )  {     throw new IllegalStateException (  ( "Can't move header to MRU" + "  ( please report this to org ) " )  ) ; }^279^^^^^262^282^[Delete]^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "ve he" + "  ( please report this to dev@commons.apache.org ) " ) ;^279^280^^^^262^282^throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + ;^279^280^^^^262^282^throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P2_Replace_Operator]^throw new IllegalStateException ( "Can't move header to MRU" + "  ==  ( please report this to dev@commons.apache.org ) " ) ;^279^280^^^^262^282^throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "ade" + "  ( please report this to dev@commons.apache.org ) " ) ;^279^280^^^^262^282^throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P2_Replace_Operator]^throw new IllegalStateException ( "Can't move header to MRU" + "  ||  ( please report this to dev@commons.apache.org ) " ) ;^279^280^^^^262^282^throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Can't move hea" + "  ( please report this to dev@commons.apache.org ) " ) ;^279^280^^^^262^282^throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P2_Replace_Operator]^if ( entry.before != null )  {^266^^^^^262^282^if ( entry.before == null )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P6_Replace_Expression]^if ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to org as a bug." )  {^266^^^^^262^282^if ( entry.before == null )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P6_Replace_Expression]^if ( " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to org as a bug." )  {^266^^^^^262^282^if ( entry.before == null )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^if ( entry.before == true )  {^266^^^^^262^282^if ( entry.before == null )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P9_Replace_Statement]^if  ( reuse == null )  {^266^^^^^262^282^if ( entry.before == null )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P9_Replace_Statement]^if  ( entry == null )  {^266^^^^^262^282^if ( entry.before == null )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException(("Entry.before is null." + (" Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug.")));^266^267^268^269^270^262^282^if ( entry.before == null )  { throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ; }^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P16_Remove_Block]^^266^267^268^269^270^262^282^if ( entry.before == null )  { throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ; }^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null.ore" + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null." + "re immutable, and that you hav" + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + "o, then please re" ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "orentry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly. Please check that your keys are immutable, and t" + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + "please report this to dev@commonIf so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^entry.before.after =  null.after;^271^^^^^262^282^entry.before.after = entry.after;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^entry.before = header.before;entry.before.after = entry.after;^271^^^^^262^282^entry.before.after = entry.after;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^header.before.after = entry;entry.before.after = entry.after;^271^^^^^262^282^entry.before.after = entry.after;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^entry.after.before = entry.before;entry.before.after = entry.after;^271^^^^^262^282^entry.before.after = entry.after;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^entry.after = header;entry.before.after = entry.after;^271^^^^^262^282^entry.before.after = entry.after;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^entry.after.before =  null.before;^272^^^^^262^282^entry.after.before = entry.before;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^header.before = entry;entry.after.before = entry.before;^272^^^^^262^282^entry.after.before = entry.before;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^entry.before = header.before;entry.after.before = entry.before;^272^^^^^262^282^entry.after.before = entry.before;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^entry.before.after = entry.after;entry.after.before = entry.before;^272^^^^^262^282^entry.after.before = entry.before;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^entry.after = null;^274^^^^^262^282^entry.after = header;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^entry.after ;^274^^^^^262^282^entry.after = header;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^entry.before = header.before;entry.after = header;^274^^^^^262^282^entry.after = header;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^entry.before.after = entry.after;entry.after = header;^274^^^^^262^282^entry.after = header;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P12_Insert_Condition]^if  ( entry.after != header )  { entry.after = header; }^274^^^^^262^282^entry.after = header;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^entry.before  =  entry.before ;^275^^^^^262^282^entry.before = header.before;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^entry.before.after = entry.after;entry.before = header.before;^275^^^^^262^282^entry.before = header.before;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^entry.after.before = entry.before;entry.before = header.before;^275^^^^^262^282^entry.before = header.before;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^entry.after = header;entry.before = header.before;^275^^^^^262^282^entry.before = header.before;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^header.before.after =  null;^276^^^^^262^282^header.before.after = entry;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^header.before = entry;header.before.after = entry;^276^^^^^262^282^header.before.after = entry;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^entry.before.after = entry.after;header.before.after = entry;^276^^^^^262^282^header.before.after = entry;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^header.before = this;^277^^^^^262^282^header.before = entry;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^header.before =  2;^277^^^^^262^282^header.before = entry;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^header.before.after = entry;header.before = entry;^277^^^^^262^282^header.before = entry;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P11_Insert_Donor_Statement]^entry.after.before = entry.before;header.before = entry;^277^^^^^262^282^header.before = entry;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null. is n" + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null." + "r keys are immutable, andPlease check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + "f so, thIf so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "try.befor" + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null." + "re immutable, anPlease check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + "ease report " ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^if ( entry.before == this )  {^266^^^^^262^282^if ( entry.before == null )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "is nul" + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly. that you have used synchronization pr" + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug.is to dev@comm" ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "ry" + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null." + "se check that your keys are " + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug.then plea" ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P2_Replace_Operator]^} else if  ( entry > header )  {^278^^^^^262^282^} else if  ( entry == header )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P5_Replace_Variable]^} else if  ( this == header )  {^278^^^^^262^282^} else if  ( entry == header )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^}  if  ( entry == header )  {^278^^^^^262^282^} else if  ( entry == header )  {^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P2_Replace_Operator]^throw new IllegalStateException ( "Can't move header to MRU" + "  >=  ( please report this to dev@commons.apache.org ) " ) ;^279^280^^^^262^282^throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "n't movan't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^279^280^^^^262^282^throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Caan't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^279^280^^^^262^282^throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P8_Replace_Mix]^header.before =  null;^277^^^^^262^282^header.before = entry;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Enntry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly.t you have used synchr" + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + "porIf so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P2_Replace_Operator]^throw new IllegalStateException ( "Can't move header to MRU" + "  ^  ( please report this to dev@commons.apache.org ) " ) ;^279^280^^^^262^282^throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "t movan't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^279^280^^^^262^282^throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "fo" + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null." + "ease check that yoPlease check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + "th" ) ;^267^268^269^^^262^282^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to dev@commons.apache.org as a bug." ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P2_Replace_Operator]^throw new IllegalStateException ( "Can't move header to MRU" + "  <  ( please report this to dev@commons.apache.org ) " ) ;^279^280^^^^262^282^throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P3_Replace_Literal]^throw new IllegalStateException ( "Can't move header to MRUove header to MR" + "  ( please report this to dev@commons.apache.org ) " ) ;^279^280^^^^262^282^throw new IllegalStateException ( "Can't move header to MRU" + "  ( please report this to dev@commons.apache.org ) " ) ;^[CLASS] LRUMap  [METHOD] moveToMRU [RETURN_TYPE] void   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  
[P7_Replace_Invocation]^removeLRU (  ( LinkEntry<K, V> )  entry ) ;^295^^^^^294^297^moveToMRU (  ( LinkEntry<K, V> )  entry ) ;^[CLASS] LRUMap  [METHOD] updateEntry [RETURN_TYPE] void   HashEntry<K, V> entry final V newValue [VARIABLES] HashEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  V  newValue  
[P14_Delete_Statement]^^295^296^^^^294^297^moveToMRU (  ( LinkEntry<K, V> )  entry ) ; entry.setValue ( newValue ) ;^[CLASS] LRUMap  [METHOD] updateEntry [RETURN_TYPE] void   HashEntry<K, V> entry final V newValue [VARIABLES] HashEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  V  newValue  
[P14_Delete_Statement]^^296^^^^^294^297^entry.setValue ( newValue ) ;^[CLASS] LRUMap  [METHOD] updateEntry [RETURN_TYPE] void   HashEntry<K, V> entry final V newValue [VARIABLES] HashEntry  entry  boolean  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  initialSize  maxSize  V  newValue  
[P2_Replace_Operator]^while  ( reuse != header || reuse != null )  {^320^^^^^305^335^while  ( reuse != header && reuse != null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^while  ( reuse == header && reuse != null )  {^320^^^^^305^335^while  ( reuse != header && reuse != null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^while  ( reuse != header && reuse == null )  {^320^^^^^305^335^while  ( reuse != header && reuse != null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P7_Replace_Invocation]^if  ( moveToMRU ( reuse )  )  {^321^^^^^306^336^if  ( removeLRU ( reuse )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P9_Replace_Statement]^if  ( removeLRUEntry )  {^321^^^^^306^336^if  ( removeLRU ( reuse )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P15_Unwrap_Block]^removeLRUEntry = true; break;^321^322^323^324^^306^336^if  ( removeLRU ( reuse )  )  { removeLRUEntry = true; break; }^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P16_Remove_Block]^^321^322^323^324^^306^336^if  ( removeLRU ( reuse )  )  { removeLRUEntry = true; break; }^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^removeLRUEntry = false;^322^^^^^307^337^removeLRUEntry = true;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P11_Insert_Donor_Statement]^removeLRUEntry = removeLRU ( reuse ) ;removeLRUEntry = true;^322^^^^^307^337^removeLRUEntry = true;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P12_Insert_Condition]^if  ( removeLRUEntry )  { removeLRUEntry = true; }^322^^^^^307^337^removeLRUEntry = true;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P8_Replace_Mix]^reuse =  1.after;^325^^^^^310^340^reuse = reuse.after;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( reuse != header )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( reuse != null )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( reuse == null )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" )  +  ( maxSize )  )  + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to org as a bug." )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" )  +  ( maxSize )  + " Please check that your keys are immutable, and that you have used synchronization properly." )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" + maxSize )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  + " maxSize=" )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" + size )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value + " size=" )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" + value )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key + " value=" )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" + key )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  + " key=" )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" + header.before )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( "Entry.after=null, header.after" +  ( header.after )  + " header.before" )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( "Entry.after=null, header.after" + header.after )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" )  +  ( maxSize )  )  + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to org as a bug." )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" )  +  ( maxSize )  + " Please check that your keys are immutable, and that you have used synchronization properly." )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" + maxSize )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  + " maxSize=" )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" + size )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value + " size=" )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" + value )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key + " value=" )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" + key )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  + " key=" )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" + header.before )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( "reuse=null, header.after=" +  ( header.after )  + " header.before" )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( "reuse=null, header.after=" + header.after )  {^316^^^^^301^331^if  ( isFull (  )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^super.addMapping (  hashCode, key, value ) ;^351^^^^^336^366^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^super.addMapping ( hashIndex,  key, value ) ;^351^^^^^336^366^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^super.addMapping ( hashIndex, hashCode,  value ) ;^351^^^^^336^366^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^super.addMapping ( hashIndex, hashCode, key ) ;^351^^^^^336^366^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P14_Delete_Statement]^^351^^^^^336^366^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P11_Insert_Donor_Statement]^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;super.addMapping ( hashIndex, hashCode, key, value ) ;^351^^^^^336^366^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P11_Insert_Donor_Statement]^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;super.addMapping ( hashIndex, hashCode, key, value ) ;^351^^^^^336^366^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^if  ( removeLRU ( 4 )  )  {^321^^^^^306^336^if  ( removeLRU ( reuse )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P8_Replace_Mix]^reuse =  null.after;^325^^^^^310^340^reuse = reuse.after;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( reuse != header )  {^319^^^^^304^334^if  ( scanUntilRemovable )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( reuse != null )  {^319^^^^^304^334^if  ( scanUntilRemovable )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( reuse == null )  {^319^^^^^304^334^if  ( scanUntilRemovable )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" )  +  ( maxSize )  )  + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to org as a bug." )  {^319^^^^^304^334^if  ( scanUntilRemovable )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" )  +  ( maxSize )  + " Please check that your keys are immutable, and that you have used synchronization properly." )  {^319^^^^^304^334^if  ( scanUntilRemovable )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" + maxSize )  {^319^^^^^304^334^if  ( scanUntilRemovable )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  + " maxSize=" )  {^319^^^^^304^334^if  ( scanUntilRemovable )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" + size )  {^319^^^^^304^334^if  ( scanUntilRemovable )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value + " size=" )  {^319^^^^^304^334^if  ( scanUntilRemovable )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" + value )  {^319^^^^^304^334^if  ( scanUntilRemovable )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key + " value=" )  {^319^^^^^304^334^if  ( scanUntilRemovable )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" + key )  {^319^^^^^304^334^if  ( scanUntilRemovable )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  + " key=" )  {^319^^^^^304^334^if  ( scanUntilRemovable )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" + header.before )  {^319^^^^^304^334^if  ( scanUntilRemovable )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( "Entry.after=null, header.after" +  ( header.after )  + " header.before" )  {^319^^^^^304^334^if  ( scanUntilRemovable )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( "Entry.after=null, header.after" + header.after )  {^319^^^^^304^334^if  ( scanUntilRemovable )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P15_Unwrap_Block]^while ((reuse != (header)) && (reuse != null)) {    if (removeLRU(reuse)) {        removeLRUEntry = true;        break;    }    reuse = reuse.after;} ; if (reuse == null) {    throw new java.lang.IllegalStateException(((((((((((((("Entry.after=null, header.after" + (header.after)) + " header.before") + (header.before)) + " key=") + key) + " value=") + value) + " size=") + (size)) + " maxSize=") + (maxSize)) + " Please check that your keys are immutable, and that you have used synchronization properly.") + " If so, then please report this to dev@commons.apache.org as a bug."));};^319^320^321^322^323^304^334^if  ( scanUntilRemovable )  { while  ( reuse != header && reuse != null )  { if  ( removeLRU ( reuse )  )  { removeLRUEntry = true; break; }^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P16_Remove_Block]^^319^320^321^322^323^304^334^if  ( scanUntilRemovable )  { while  ( reuse != header && reuse != null )  { if  ( removeLRU ( reuse )  )  { removeLRUEntry = true; break; }^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P7_Replace_Invocation]^moveToMRUEntry = removeLRU ( reuse ) ;^335^^^^^319^336^removeLRUEntry = removeLRU ( reuse ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P8_Replace_Mix]^removeLRUEntry =  removeLRU ( null ) ;^335^^^^^319^336^removeLRUEntry = removeLRU ( reuse ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P11_Insert_Donor_Statement]^removeLRUEntry = true;removeLRUEntry = removeLRU ( reuse ) ;^335^^^^^319^336^removeLRUEntry = removeLRU ( reuse ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P14_Delete_Statement]^^335^^^^^319^336^removeLRUEntry = removeLRU ( reuse ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P11_Insert_Donor_Statement]^removeEntry ( entry, removeIndex, previous ) ;removeLRUEntry = removeLRU ( reuse ) ;^335^^^^^319^336^removeLRUEntry = removeLRU ( reuse ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^if  ( removeLRU ( 3 )  )  {^321^^^^^306^336^if  ( removeLRU ( reuse )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^if  ( reuse != null )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" )  +  ( maxSize )  )  + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to org as a bug." )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" )  +  ( maxSize )  + " Please check that your keys are immutable, and that you have used synchronization properly." )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" + maxSize )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  + " maxSize=" )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" + size )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value + " size=" )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" + value )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key + " value=" )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" + key )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" )  +  ( header.before )  + " key=" )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  ( "Entry.after=null, header.after" +  ( header.after )  )  + " header.before" + header.before )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( "Entry.after=null, header.after" +  ( header.after )  + " header.before" )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( "Entry.after=null, header.after" + header.after )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P8_Replace_Mix]^if  ( reuse == false )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P9_Replace_Statement]^if ( entry.before == null )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P9_Replace_Statement]^if  ( entry == null )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P9_Replace_Statement]^if  ( loop == null )  {^327^^^^^312^342^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "Entry.after=null, header.after"   instanceof   header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.aftertry.after=null, header.af" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.beforeheade" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + "ey" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value= " + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + "s" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize= ma" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "and that yoPlease check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, this" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " null=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " initialSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " key" + header.before + " header.before=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " size=" + value + " value=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, header.before" + header.after + " header.after" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, size" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " header.after=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, maxSize" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " header.after=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P8_Replace_Mix]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " hashIndex=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "Entry.after=null, header.after"  &&  header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( " hea" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + "eadeheader.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " k" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + "" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " " + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " check tPlease check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " maxSize=" + key + " value=" + value + " size=" + size + " key=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " value" + header.before + " key=" + key + " header.before=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " size" + header.before + " key=" + key + " value=" + value + " header.before=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " maxSize" + header.before + " key=" + key + " value=" + value + " size=" + size + " header.before=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P8_Replace_Mix]^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + ;^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "Entry.after=null, header.after"  ||  header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "y.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " heheader.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + "" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value= value" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly.check that your keys are immutab" +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "Entry.after=null, header.after"  ==  header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "null, heantry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.beforer.be" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " val" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size= si" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=a" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "hat your keys are immutable, and that you ha" +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " null" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " maxSize=" + size + " size=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "Entry.after=null, header.after"  !=  header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.aftertry." + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=key" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + "lvalue=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " ssize=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "iPlease check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, key" + header.after + " header.before" + header.before + " header.after=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " maxSize=" + value + " size=" + size + " value=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "Entry.after=null, header.after"  ^  header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.afterry.after=null, he" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + "ader.befoheader.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " kekey=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value= v" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + "" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + ", and t" +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P8_Replace_Mix]^return false;^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" )  +  ( maxSize )  )  + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to org as a bug." )  {^338^^^^^323^353^if  ( removeLRUEntry )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" )  +  ( maxSize )  + " Please check that your keys are immutable, and that you have used synchronization properly." )  {^338^^^^^323^353^if  ( removeLRUEntry )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" + maxSize )  {^338^^^^^323^353^if  ( removeLRUEntry )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  + " maxSize=" )  {^338^^^^^323^353^if  ( removeLRUEntry )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" + size )  {^338^^^^^323^353^if  ( removeLRUEntry )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value + " size=" )  {^338^^^^^323^353^if  ( removeLRUEntry )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" + value )  {^338^^^^^323^353^if  ( removeLRUEntry )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key + " value=" )  {^338^^^^^323^353^if  ( removeLRUEntry )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" + key )  {^338^^^^^323^353^if  ( removeLRUEntry )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  + " key=" )  {^338^^^^^323^353^if  ( removeLRUEntry )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" + header.before )  {^338^^^^^323^353^if  ( removeLRUEntry )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( "reuse=null, header.after=" +  ( header.after )  + " header.before" )  {^338^^^^^323^353^if  ( removeLRUEntry )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( "reuse=null, header.after=" + header.after )  {^338^^^^^323^353^if  ( removeLRUEntry )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P9_Replace_Statement]^if  ( removeLRU ( reuse )  )  {^338^^^^^323^353^if  ( removeLRUEntry )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^super.addMapping (  hashCode, key, value ) ;^348^^^^^338^349^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^super.addMapping ( hashIndex,  key, value ) ;^348^^^^^338^349^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^super.addMapping ( hashIndex, hashCode,  value ) ;^348^^^^^338^349^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^super.addMapping ( hashIndex, hashCode, key ) ;^348^^^^^338^349^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P14_Delete_Statement]^^348^^^^^338^349^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P11_Insert_Donor_Statement]^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;super.addMapping ( hashIndex, hashCode, key, value ) ;^348^^^^^338^349^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P11_Insert_Donor_Statement]^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;super.addMapping ( hashIndex, hashCode, key, value ) ;^348^^^^^338^349^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^if  ( reuse != null )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" )  +  ( maxSize )  )  + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to org as a bug." )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" )  +  ( maxSize )  + " Please check that your keys are immutable, and that you have used synchronization properly." )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" + maxSize )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  + " maxSize=" )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value )  + " size=" + size )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" )  + value + " size=" )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key )  + " value=" + value )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" )  + key + " value=" )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  )  + " key=" + key )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" )  +  ( header.before )  + " key=" )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  (  ( "reuse=null, header.after=" +  ( header.after )  )  + " header.before" + header.before )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( "reuse=null, header.after=" +  ( header.after )  + " header.before" )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P6_Replace_Expression]^if  ( "reuse=null, header.after=" + header.after )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P8_Replace_Mix]^if  ( reuse == true )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P9_Replace_Statement]^if ( entry.before == null )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P9_Replace_Statement]^if  ( entry == null )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P9_Replace_Statement]^if  ( loop == null )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "reuse=null, header.after="  >  header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + "heaheader.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " kkey=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=lu" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + "ze" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + "maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutPlease check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " 3=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " initialSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, key=" + header.after + " header.before" + header.before + " header.after=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " size=" + value + " value=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, header.before=" + header.after + " header.after" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " key" + header.before + " header.before=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " size" + header.before + " key=" + key + " value=" + value + " header.before=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " maxSize=" + key + " value=" + value + " size=" + size + " key=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "reuse=null, header.after="  |  header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "euse=nueuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + "hea" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + "y" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + "vvalue=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " sisize=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=m" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "e, and that you have used sPlease check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, this=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " value=" + key + " key=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, size=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " header.after=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( ", header." + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " headheader.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + "ekey=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + "val" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + "axSi" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "s are immutable, and that you have use" +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " maxSize=" + size + " size=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "reuse=null, header.after="  &&  header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=n" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " " + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=key" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + "valvalue=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=iz" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "e check that your keys are immutabl" +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " null=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " hashIndex=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " maxSize" + header.before + " key=" + key + " value=" + value + " size=" + size + " header.before=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P8_Replace_Mix]^throw new IllegalStateException ( "Entry.before is null." + " Please check that your keys are immutable, and that you have used synchronization properly." + ;^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping ( reuse, maxSize, hashCode, key, value ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping ( reuse, hashIndex, maxSize, key, value ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping (  hashIndex, hashCode, key, value ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping ( reuse,  hashCode, key, value ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping ( reuse, hashIndex,  key, value ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping ( reuse, hashIndex, hashCode,  value ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping ( reuse, hashIndex, hashCode, key ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping ( hashIndex, reuse, hashCode, key, value ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping ( reuse, value, hashCode, key, hashIndex ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping ( reuse, hashCode, hashIndex, key, value ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping ( key, hashIndex, hashCode, reuse, value ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping ( reuse, hashIndex, hashCode, value, key ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P14_Delete_Statement]^^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P11_Insert_Donor_Statement]^super.addMapping ( hashIndex, hashCode, key, value ) ;reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P11_Insert_Donor_Statement]^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P8_Replace_Mix]^if  ( reuse == this )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "reuse=null, header.after="  ^  header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=reuse=nu" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " he" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key= k" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " valu" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size= siz" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " max" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "u have used synPlease check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, value=" + header.after + " header.before" + header.before + " key=" + key + " header.after=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " maxSize=" + value + " size=" + size + " value=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P8_Replace_Mix]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " null" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "use=null, header.af" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.beforeheader." + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " s" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + "axmaxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " and that you have used synchronization" +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " value" + header.before + " key=" + key + " header.before=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P7_Replace_Invocation]^moveToMRUEntry = removeLRU ( reuse ) ;^335^^^^^320^350^removeLRUEntry = removeLRU ( reuse ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P8_Replace_Mix]^removeLRUEntry =  removeLRU ( null ) ;^335^^^^^320^350^removeLRUEntry = removeLRU ( reuse ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P11_Insert_Donor_Statement]^removeLRUEntry = true;removeLRUEntry = removeLRU ( reuse ) ;^335^^^^^320^350^removeLRUEntry = removeLRU ( reuse ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "Entry.after=null, header.after"  <<  header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "ull, he" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + "headheader.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + "alvalue=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + "i" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + "mmaxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly.t your keys are immutable, and that you have used synchronization " +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "n" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " k" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=al" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + "maxSmaxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "check that your keys arePlease check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^boolean removeLRUEntry = true;^318^^^^^303^333^boolean removeLRUEntry = false;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P12_Insert_Condition]^if  ( removeLRUEntry )  { boolean removeLRUEntry = false; }^318^^^^^303^333^boolean removeLRUEntry = false;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "der" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.beforebefo" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "re immutable, and thaPlease check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, 3" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " value=" + key + " key=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuseuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.beforeh" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + "e" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + "v" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + "isize=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSimaxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly.at you have used synchroni" +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P14_Delete_Statement]^^335^^^^^320^350^removeLRUEntry = removeLRU ( reuse ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P11_Insert_Donor_Statement]^removeEntry ( entry, removeIndex, previous ) ;removeLRUEntry = removeLRU ( reuse ) ;^335^^^^^320^350^removeLRUEntry = removeLRU ( reuse ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping ( reuse, initialSize, hashCode, key, value ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping ( reuse, hashIndex, key, hashCode, value ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^super.addMapping (  hashCode, key, value ) ;^348^^^^^333^363^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^super.addMapping ( hashIndex,  key, value ) ;^348^^^^^333^363^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^super.addMapping ( hashIndex, hashCode,  value ) ;^348^^^^^333^363^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^super.addMapping ( hashIndex, hashCode, key ) ;^348^^^^^333^363^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P14_Delete_Statement]^^348^^^^^333^363^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P11_Insert_Donor_Statement]^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;super.addMapping ( hashIndex, hashCode, key, value ) ;^348^^^^^333^363^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P11_Insert_Donor_Statement]^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;super.addMapping ( hashIndex, hashCode, key, value ) ;^348^^^^^333^363^super.addMapping ( hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "r.afntry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + ".beheader.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value= val" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size= size" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly.check that your keys are immutable, " +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.aftertry.after=nu" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.beforeer." + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "eys are immutable, and that you have used synchronization prPlease check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "=null, heade" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + "a" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + "vvalue=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "your keys are immutable, and th" +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " 2=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "Entry.after=null, header.after"  >>  header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "tntry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + "rheader.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + "lu" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " si" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + "maxSiz" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly.ck that your" +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^if  ( removeLRU ( this )  )  {^321^^^^^306^336^if  ( removeLRU ( reuse )  )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.aftertry.afte" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=siz" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + "maxSize" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly.ys are immutable, and that you have used synchron" +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " size=" + key + " value=" + value + " key=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.after=null, value" + header.after + " header.before" + header.before + " key=" + key + " header.after=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.afterade" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + "ader.header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=ke" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=a" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " max" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " your keys are immutable, and that you have us" +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P8_Replace_Mix]^if  ( reuse == false )  {^339^^^^^324^354^if  ( reuse == null )  {^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "reuse=null, header.after="  <=  header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( ".aftereuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before head" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " vavalue=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + "sizsize=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "ease check that y" +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "reuse=null, header.after="   instanceof   header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "eaeuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.befor" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + "xSi" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "ease chPlease check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, maxSize=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " header.after=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "reuse=null, header.after="  ==  header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( " header.aftereuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " h" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " " + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=si" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + "maxmaxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " size=" + key + " value=" + value + " key=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "se=null, h" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.beforef" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=ey" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value= v" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=i" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + "imaxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "lPlease check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping ( hashCode, hashIndex, reuse, key, value ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping ( value, hashIndex, hashCode, key, reuse ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "reuse=null, header.after="  ||  header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "ader.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + "e" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + "" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize= maxSi" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "mutable, and that you have used synchronization proPlease check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P8_Replace_Mix]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " 3" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=e=null, header." + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " si" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize= ma" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "le, and thaPlease check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "after=null, ntry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + "er.b" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " ke" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + "alu" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " sisize=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + "S" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly.a" +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "reuse=null, header.after="  !=  header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=euse=null, header" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " headeheader.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + "mamaxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly.re immutable, an" +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^LinkEntry<K, V> reuse = null;^317^^^^^302^332^LinkEntry<K, V> reuse = header.after;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^throw new IllegalStateException ( "Entry.after=null, header.after"  >  header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "try.antry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=y" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " sizsize=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " check Please check that your keys are immutable, and that you have used synchronization properly." +^328^329^330^331^^313^343^throw new IllegalStateException ( "Entry.after=null, header.after" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "eueuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before header.be" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key= ke" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " siz" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=z" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P3_Replace_Literal]^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly.are" +^340^341^342^343^^325^355^throw new IllegalStateException ( "reuse=null, header.after=" + header.after + " header.before" + header.before + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P5_Replace_Variable]^reuseMapping ( reuse, key, hashCode, hashIndex, value ) ;^346^^^^^331^361^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] addMapping [RETURN_TYPE] void   final int hashIndex final int hashCode final K key final V value [VARIABLES] LinkEntry  reuse  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  V  value  
[P2_Replace_Operator]^while  ( loop != entry || loop != null )  {^376^^^^^361^391^while  ( loop != entry && loop != null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^while  ( loop == entry && loop != null )  {^376^^^^^361^391^while  ( loop != entry && loop != null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^while  ( loop != entry && loop == null )  {^376^^^^^361^391^while  ( loop != entry && loop != null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P8_Replace_Mix]^previous =  null;^377^^^^^362^392^previous = loop;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P8_Replace_Mix]^loop =  null.next;^378^^^^^363^393^loop = loop.next;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^if  ( loop != null )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  (  (  ( "Entry.next=null, data[removeIndex]=" +  ( data[removeIndex] )  )  + " previous=" )  + previous )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" )  +  ( maxSize )  )  + " Please check that your keys are immutable, and that you have used synchronization properly." + " If so, then please report this to org as a bug." )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  (  ( "Entry.next=null, data[removeIndex]=" +  ( data[removeIndex] )  )  + " previous=" )  + previous )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" )  +  ( maxSize )  + " Please check that your keys are immutable, and that you have used synchronization properly." )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  (  ( "Entry.next=null, data[removeIndex]=" +  ( data[removeIndex] )  )  + " previous=" )  + previous )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" + maxSize )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  (  ( "Entry.next=null, data[removeIndex]=" +  ( data[removeIndex] )  )  + " previous=" )  + previous )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  + " maxSize=" )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P6_Replace_Expression]^if  (  (  (  (  (  (  (  ( "Entry.next=null, data[removeIndex]=" +  ( data[removeIndex] )  )  + " previous=" )  + previous )  + " key=" )  + key )  + " value=" )  + value )  + " size=" + size )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P6_Replace_Expression]^if  (  (  (  (  (  (  ( "Entry.next=null, data[removeIndex]=" +  ( data[removeIndex] )  )  + " previous=" )  + previous )  + " key=" )  + key )  + " value=" )  + value + " size=" )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P6_Replace_Expression]^if  (  (  (  (  (  ( "Entry.next=null, data[removeIndex]=" +  ( data[removeIndex] )  )  + " previous=" )  + previous )  + " key=" )  + key )  + " value=" + value )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P6_Replace_Expression]^if  (  (  (  (  ( "Entry.next=null, data[removeIndex]=" +  ( data[removeIndex] )  )  + " previous=" )  + previous )  + " key=" )  + key + " value=" )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P6_Replace_Expression]^if  (  (  (  ( "Entry.next=null, data[removeIndex]=" +  ( data[removeIndex] )  )  + " previous=" )  + previous )  + " key=" + key )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P6_Replace_Expression]^if  (  (  ( "Entry.next=null, data[removeIndex]=" +  ( data[removeIndex] )  )  + " previous=" )  + previous + " key=" )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P6_Replace_Expression]^if  (  ( "Entry.next=null, data[removeIndex]=" +  ( data[removeIndex] )  )  + " previous=" + previous )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P6_Replace_Expression]^if  ( "Entry.next=null, data[removeIndex]=" +  ( data[removeIndex] )  + " previous=" )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P6_Replace_Expression]^if  ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P8_Replace_Mix]^if  ( loop == false )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P9_Replace_Statement]^if  ( reuse == null )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P9_Replace_Statement]^if  ( entry == null )  {^380^^^^^365^395^if  ( loop == null )  {^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]="  <  data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "ry" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=ou" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=a" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " " + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + "xSizemaxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "e cPlease check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " initialSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, previous[removeIndex]=" + data[removeIndex] + " data=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " size=" + key + " value=" + value + " key=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " value=" + key + " key=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, size[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " data=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " maxSize=" + size + " size=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]="  &  data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "l, data[remo" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + "ey" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + "value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " sisize=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize= maxS" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " synchronization prPlease check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " removeIndex=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " value=" + previous + " key=" + key + " previous=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " maxSize=" + key + " value=" + value + " size=" + size + " key=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, value[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " data=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P8_Replace_Mix]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + ;^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^previous = 2;^377^^^^^362^392^previous = loop;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]="  !=  data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( ".ne" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + "kkey=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value= valu" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " sizsize=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + "maxSi" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly.heck " +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " key=" + previous + " previous=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]="  >  data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "tntry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + "iprevious=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " ke" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + "" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=xSiz" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "k that your keys are immutabl" +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " size=" + previous + " key=" + key + " value=" + value + " previous=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P8_Replace_Mix]^previous =  1;^377^^^^^362^392^previous = loop;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P8_Replace_Mix]^loop =  2.next;^378^^^^^363^393^loop = loop.next;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]="  |  data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "xtntry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + "u" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + "ekey=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + "s" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + "x" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "hat your keys are immutable, and that you have" +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " null=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, key[removeIndex]=" + data[removeIndex] + " previous=" + previous + " data=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " size=" + value + " value=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P8_Replace_Mix]^throw new IllegalStateException ( "Entry.next=null, 0[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P1_Replace_Type]^final  short  removeIndex = hashIndex ( entry.hashCode, data.length ) ;^372^^^^^357^387^final int removeIndex = hashIndex ( entry.hashCode, data.length ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^final int removeIndex = hashIndex (  data.length ) ;^372^^^^^357^387^final int removeIndex = hashIndex ( entry.hashCode, data.length ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P8_Replace_Mix]^HashEntry<K, V> loop = 4[removeIndex];^374^^^^^359^389^HashEntry<K, V> loop = tmp[removeIndex];^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=In" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + "evio" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + "keykey=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + "max" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "eys are immutable, and that you have used sPlease check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " maxSize=" + value + " size=" + size + " value=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P14_Delete_Statement]^^372^^^^^357^387^final int removeIndex = hashIndex ( entry.hashCode, data.length ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^removeEntry (  removeIndex, previous ) ;^390^^^^^375^405^removeEntry ( entry, removeIndex, previous ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^removeEntry ( entry,  previous ) ;^390^^^^^375^405^removeEntry ( entry, removeIndex, previous ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^removeEntry ( entry, removeIndex ) ;^390^^^^^375^405^removeEntry ( entry, removeIndex, previous ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^removeEntry ( previous, removeIndex, entry ) ;^390^^^^^375^405^removeEntry ( entry, removeIndex, previous ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^removeEntry ( entry, previous, removeIndex ) ;^390^^^^^375^405^removeEntry ( entry, removeIndex, previous ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P8_Replace_Mix]^removeEntry ( entry, removeIndex, 1 ) ;^390^^^^^375^405^removeEntry ( entry, removeIndex, previous ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P14_Delete_Statement]^^390^^^^^375^405^removeEntry ( entry, removeIndex, previous ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P11_Insert_Donor_Statement]^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;removeEntry ( entry, removeIndex, previous ) ;^390^^^^^375^405^removeEntry ( entry, removeIndex, previous ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P11_Insert_Donor_Statement]^removeLRUEntry = removeLRU ( reuse ) ;removeEntry ( entry, removeIndex, previous ) ;^390^^^^^375^405^removeEntry ( entry, removeIndex, previous ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P11_Insert_Donor_Statement]^addEntry ( entry, hashIndex ) ;removeEntry ( entry, removeIndex, previous ) ;^390^^^^^375^405^removeEntry ( entry, removeIndex, previous ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^reuseEntry ( entry, removeIndex, hashCode, key, value ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^reuseEntry ( entry, hashIndex, removeIndex, key, value ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^reuseEntry (  hashIndex, hashCode, key, value ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^reuseEntry ( entry,  hashCode, key, value ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^reuseEntry ( entry, hashIndex,  key, value ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^reuseEntry ( entry, hashIndex, hashCode,  value ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^reuseEntry ( entry, hashIndex, hashCode, key ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^reuseEntry ( value, hashIndex, hashCode, key, entry ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^reuseEntry ( entry, hashCode, hashIndex, key, value ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^reuseEntry ( key, hashIndex, hashCode, entry, value ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^reuseEntry ( entry, hashIndex, value, key, hashCode ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P14_Delete_Statement]^^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P11_Insert_Donor_Statement]^super.addMapping ( hashIndex, hashCode, key, value ) ;reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P11_Insert_Donor_Statement]^reuseMapping ( reuse, hashIndex, hashCode, key, value ) ;reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P11_Insert_Donor_Statement]^addEntry ( entry, hashIndex ) ;reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P11_Insert_Donor_Statement]^removeEntry ( entry, removeIndex, previous ) ;reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^addEntry (  hashIndex ) ;^392^^^^^377^407^addEntry ( entry, hashIndex ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^addEntry ( entry ) ;^392^^^^^377^407^addEntry ( entry, hashIndex ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^addEntry ( hashIndex, entry ) ;^392^^^^^377^407^addEntry ( entry, hashIndex ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P7_Replace_Invocation]^hashIndex ( entry, hashIndex ) ;^392^^^^^377^407^addEntry ( entry, hashIndex ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P8_Replace_Mix]^addEntry ( entry, maxSize ) ;^392^^^^^377^407^addEntry ( entry, hashIndex ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P14_Delete_Statement]^^392^^^^^377^407^addEntry ( entry, hashIndex ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P11_Insert_Donor_Statement]^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;addEntry ( entry, hashIndex ) ;^392^^^^^377^407^addEntry ( entry, hashIndex ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P11_Insert_Donor_Statement]^removeEntry ( entry, removeIndex, previous ) ;addEntry ( entry, hashIndex ) ;^392^^^^^377^407^addEntry ( entry, hashIndex ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]="  ||  data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "tryntry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " preprevious=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=e" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "that your keys are immutable, and that you have used synchronization prPlease check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " this=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  &&  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  >>  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  <=  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  &  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  <<  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  >  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  >=  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  |  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ==  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "NPE, entry="  >=  entry  >=  " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "NPE, entry="   instanceof   entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "NPE," + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "NPE, entry=" + entry + "IsHead" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + "" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + "u" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " si" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + "" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "se check that " +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P4_Replace_Constructor]^throw throw  new IllegalStateException (  (  (  (  (  (  (  (  (  (  (  (  (  ( "Entry.next=null, data[removeIndex]=" +  ( data[removeIndex] )  )  + " previous=" )  + previous )  + " key=" )  + key )  + " value=" )  + value )  + " size=" )  +  ( size )  )  + " maxSize=" )  +  ( maxSize )  )  + " Please check that your keys are immutable, and that you have used synchronization properly." )  + " If so, then please report this to org as a bug." )  )   + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P4_Replace_Constructor]^throw new IllegalStateException ( "NPE=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " removeIndex=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "NPE, key=" + entry + " entryIsHeader=" +  ( entry==header )  + " entry=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " maxSize=" + key + " value=" + value + " size=" + size + " key=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " value=" + key + " key=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " maxSize=" + size + " size=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P8_Replace_Mix]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " initialSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]="   instanceof   data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "try.next=null, data[removeIndentry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " " + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " " + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=e" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=s" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "at your keys are" +^381^382^383^384^^366^396^throw new IllegalStateException ( "Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous=" + previous + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +   instanceof   ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ^  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "NPE, entry="  |  entry  |  " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P2_Replace_Operator]^throw new IllegalStateException ( "NPE, entry="  &&  entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "E, entry" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "NPE, entry=" + entry + "nt" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key= ke" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=va" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " ssize=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize= " + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + "se check t" +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " null=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " size=" + key + " value=" + value + " key=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "NPE, value=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " entry=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " maxSize=" + value + " size=" + size + " value=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P8_Replace_Mix]^return ;^394^395^396^397^^379^409^throw new IllegalStateException ( "NPE, entry=" + entry + " entryIsHeader=" +  ( entry==header )  + " key=" + key + " value=" + value + " size=" + size + " maxSize=" + maxSize + " Please check that your keys are immutable, and that you have used synchronization properly." +^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^removeEntry ( entry, maxSize, previous ) ;^390^^^^^375^405^removeEntry ( entry, removeIndex, previous ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^removeEntry ( removeIndex, entry, previous ) ;^390^^^^^375^405^removeEntry ( entry, removeIndex, previous ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P8_Replace_Mix]^removeEntry ( entry, initialSize, previous ) ;^390^^^^^375^405^removeEntry ( entry, removeIndex, previous ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^reuseEntry ( hashIndex, entry, hashCode, key, value ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^reuseEntry ( entry, hashIndex, key, hashCode, value ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^reuseEntry ( entry, hashIndex, hashCode, value, key ) ;^391^^^^^376^406^reuseEntry ( entry, hashIndex, hashCode, key, value ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P5_Replace_Variable]^addEntry ( entry, removeIndex ) ;^392^^^^^377^407^addEntry ( entry, hashIndex ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P8_Replace_Mix]^hashIndex ( entry, removeIndex ) ;^392^^^^^377^407^addEntry ( entry, hashIndex ) ;^[CLASS] LRUMap  [METHOD] reuseMapping [RETURN_TYPE] void   LinkEntry<K, V> entry final int hashIndex final int hashCode final K key final V value [VARIABLES] HashEntry  loop  previous  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  V  value  NullPointerException  ex  LinkEntry  entry  K  key  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  HashEntry[]  tmp  
[P3_Replace_Literal]^return false;^437^^^^^436^438^return true;^[CLASS] LRUMap  [METHOD] removeLRU [RETURN_TYPE] boolean   LinkEntry<K, V> entry [VARIABLES] LinkEntry  entry  boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P2_Replace_Operator]^return size > maxSize;^447^^^^^446^448^return size >= maxSize;^[CLASS] LRUMap  [METHOD] isFull [RETURN_TYPE] boolean   [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P5_Replace_Variable]^return size >= removeIndex;^447^^^^^446^448^return size >= maxSize;^[CLASS] LRUMap  [METHOD] isFull [RETURN_TYPE] boolean   [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P5_Replace_Variable]^return maxSize >= size;^447^^^^^446^448^return size >= maxSize;^[CLASS] LRUMap  [METHOD] isFull [RETURN_TYPE] boolean   [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P8_Replace_Mix]^return size  ;^447^^^^^446^448^return size >= maxSize;^[CLASS] LRUMap  [METHOD] isFull [RETURN_TYPE] boolean   [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P5_Replace_Variable]^return removeIndex;^456^^^^^455^457^return maxSize;^[CLASS] LRUMap  [METHOD] maxSize [RETURN_TYPE] int   [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P5_Replace_Variable]^return updateToMRU;^467^^^^^466^468^return scanUntilRemovable;^[CLASS] LRUMap  [METHOD] isScanUntilRemovable [RETURN_TYPE] boolean   [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P12_Insert_Condition]^if  ( scanUntilRemovable )  { return scanUntilRemovable; }^467^^^^^466^468^return scanUntilRemovable;^[CLASS] LRUMap  [METHOD] isScanUntilRemovable [RETURN_TYPE] boolean   [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P7_Replace_Invocation]^return  ( LRUMap<K, V> )  super .clone (  )  ;^478^^^^^477^479^return  ( LRUMap<K, V> )  super.clone (  ) ;^[CLASS] LRUMap  [METHOD] clone [RETURN_TYPE] LRUMap   [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P14_Delete_Statement]^^478^^^^^477^479^return  ( LRUMap<K, V> )  super.clone (  ) ;^[CLASS] LRUMap  [METHOD] clone [RETURN_TYPE] LRUMap   [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P7_Replace_Invocation]^out.writeInt (  ) ;^485^^^^^484^487^out.defaultWriteObject (  ) ;^[CLASS] LRUMap  [METHOD] writeObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P8_Replace_Mix]^out .writeInt ( initialSize )  ;^485^^^^^484^487^out.defaultWriteObject (  ) ;^[CLASS] LRUMap  [METHOD] writeObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P14_Delete_Statement]^^485^486^^^^484^487^out.defaultWriteObject (  ) ; doWriteObject ( out ) ;^[CLASS] LRUMap  [METHOD] writeObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P11_Insert_Donor_Statement]^in.defaultReadObject (  ) ;out.defaultWriteObject (  ) ;^485^^^^^484^487^out.defaultWriteObject (  ) ;^[CLASS] LRUMap  [METHOD] writeObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P11_Insert_Donor_Statement]^doWriteObject ( out ) ;out.defaultWriteObject (  ) ;^485^^^^^484^487^out.defaultWriteObject (  ) ;^[CLASS] LRUMap  [METHOD] writeObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P11_Insert_Donor_Statement]^super.doWriteObject ( out ) ;out.defaultWriteObject (  ) ;^485^^^^^484^487^out.defaultWriteObject (  ) ;^[CLASS] LRUMap  [METHOD] writeObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P7_Replace_Invocation]^writeObject ( out ) ;^486^^^^^484^487^doWriteObject ( out ) ;^[CLASS] LRUMap  [METHOD] writeObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P14_Delete_Statement]^^486^^^^^484^487^doWriteObject ( out ) ;^[CLASS] LRUMap  [METHOD] writeObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P11_Insert_Donor_Statement]^super.doReadObject ( in ) ;doWriteObject ( out ) ;^486^^^^^484^487^doWriteObject ( out ) ;^[CLASS] LRUMap  [METHOD] writeObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P11_Insert_Donor_Statement]^super.doWriteObject ( out ) ;doWriteObject ( out ) ;^486^^^^^484^487^doWriteObject ( out ) ;^[CLASS] LRUMap  [METHOD] writeObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P11_Insert_Donor_Statement]^out.defaultWriteObject (  ) ;doWriteObject ( out ) ;^486^^^^^484^487^doWriteObject ( out ) ;^[CLASS] LRUMap  [METHOD] writeObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P11_Insert_Donor_Statement]^doReadObject ( in ) ;doWriteObject ( out ) ;^486^^^^^484^487^doWriteObject ( out ) ;^[CLASS] LRUMap  [METHOD] writeObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P7_Replace_Invocation]^in .readInt (  )  ;^493^^^^^492^495^in.defaultReadObject (  ) ;^[CLASS] LRUMap  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P14_Delete_Statement]^^493^^^^^492^495^in.defaultReadObject (  ) ;^[CLASS] LRUMap  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P11_Insert_Donor_Statement]^super.doReadObject ( in ) ;in.defaultReadObject (  ) ;^493^^^^^492^495^in.defaultReadObject (  ) ;^[CLASS] LRUMap  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P11_Insert_Donor_Statement]^out.defaultWriteObject (  ) ;in.defaultReadObject (  ) ;^493^^^^^492^495^in.defaultReadObject (  ) ;^[CLASS] LRUMap  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P11_Insert_Donor_Statement]^doReadObject ( in ) ;in.defaultReadObject (  ) ;^493^^^^^492^495^in.defaultReadObject (  ) ;^[CLASS] LRUMap  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P7_Replace_Invocation]^readObject ( in ) ;^494^^^^^492^495^doReadObject ( in ) ;^[CLASS] LRUMap  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P14_Delete_Statement]^^494^^^^^492^495^doReadObject ( in ) ;^[CLASS] LRUMap  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P11_Insert_Donor_Statement]^in.defaultReadObject (  ) ;doReadObject ( in ) ;^494^^^^^492^495^doReadObject ( in ) ;^[CLASS] LRUMap  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P11_Insert_Donor_Statement]^super.doReadObject ( in ) ;doReadObject ( in ) ;^494^^^^^492^495^doReadObject ( in ) ;^[CLASS] LRUMap  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P11_Insert_Donor_Statement]^doWriteObject ( out ) ;doReadObject ( in ) ;^494^^^^^492^495^doReadObject ( in ) ;^[CLASS] LRUMap  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P11_Insert_Donor_Statement]^super.doWriteObject ( out ) ;doReadObject ( in ) ;^494^^^^^492^495^doReadObject ( in ) ;^[CLASS] LRUMap  [METHOD] readObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P7_Replace_Invocation]^out .defaultWriteObject (  )  ;^505^^^^^504^507^out.writeInt ( maxSize ) ;^[CLASS] LRUMap  [METHOD] doWriteObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P8_Replace_Mix]^out.writeInt ( removeIndex ) ;^505^^^^^504^507^out.writeInt ( maxSize ) ;^[CLASS] LRUMap  [METHOD] doWriteObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P14_Delete_Statement]^^505^^^^^504^507^out.writeInt ( maxSize ) ;^[CLASS] LRUMap  [METHOD] doWriteObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P7_Replace_Invocation]^super.AbstractLinkedMap ( out ) ;^506^^^^^504^507^super.doWriteObject ( out ) ;^[CLASS] LRUMap  [METHOD] doWriteObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P14_Delete_Statement]^^506^^^^^504^507^super.doWriteObject ( out ) ;^[CLASS] LRUMap  [METHOD] doWriteObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P11_Insert_Donor_Statement]^super.doReadObject ( in ) ;super.doWriteObject ( out ) ;^506^^^^^504^507^super.doWriteObject ( out ) ;^[CLASS] LRUMap  [METHOD] doWriteObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P11_Insert_Donor_Statement]^doWriteObject ( out ) ;super.doWriteObject ( out ) ;^506^^^^^504^507^super.doWriteObject ( out ) ;^[CLASS] LRUMap  [METHOD] doWriteObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P11_Insert_Donor_Statement]^out.defaultWriteObject (  ) ;super.doWriteObject ( out ) ;^506^^^^^504^507^super.doWriteObject ( out ) ;^[CLASS] LRUMap  [METHOD] doWriteObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P11_Insert_Donor_Statement]^doReadObject ( in ) ;super.doWriteObject ( out ) ;^506^^^^^504^507^super.doWriteObject ( out ) ;^[CLASS] LRUMap  [METHOD] doWriteObject [RETURN_TYPE] void   ObjectOutputStream out [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  ObjectOutputStream  out  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  
[P7_Replace_Invocation]^maxSize = in .defaultReadObject (  )  ;^518^^^^^517^520^maxSize = in.readInt (  ) ;^[CLASS] LRUMap  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P8_Replace_Mix]^maxSize =  null.readInt (  ) ;^518^^^^^517^520^maxSize = in.readInt (  ) ;^[CLASS] LRUMap  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P14_Delete_Statement]^^518^519^^^^517^520^maxSize = in.readInt (  ) ; super.doReadObject ( in ) ;^[CLASS] LRUMap  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P7_Replace_Invocation]^super.AbstractLinkedMap ( in ) ;^519^^^^^517^520^super.doReadObject ( in ) ;^[CLASS] LRUMap  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P14_Delete_Statement]^^519^^^^^517^520^super.doReadObject ( in ) ;^[CLASS] LRUMap  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P11_Insert_Donor_Statement]^in.defaultReadObject (  ) ;super.doReadObject ( in ) ;^519^^^^^517^520^super.doReadObject ( in ) ;^[CLASS] LRUMap  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P11_Insert_Donor_Statement]^doWriteObject ( out ) ;super.doReadObject ( in ) ;^519^^^^^517^520^super.doReadObject ( in ) ;^[CLASS] LRUMap  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P11_Insert_Donor_Statement]^super.doWriteObject ( out ) ;super.doReadObject ( in ) ;^519^^^^^517^520^super.doReadObject ( in ) ;^[CLASS] LRUMap  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
[P11_Insert_Donor_Statement]^doReadObject ( in ) ;super.doReadObject ( in ) ;^519^^^^^517^520^super.doReadObject ( in ) ;^[CLASS] LRUMap  [METHOD] doReadObject [RETURN_TYPE] void   ObjectInputStream in [VARIABLES] boolean  removeLRUEntry  scanUntilRemovable  updateToMRU  long  serialVersionUID  int  DEFAULT_MAX_SIZE  hashCode  hashIndex  initialSize  maxSize  removeIndex  ObjectInputStream  in  
